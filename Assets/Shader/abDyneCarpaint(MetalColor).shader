Shader "abDyne/Carpaint(MetalColor)" {
	Properties {
		_Color ("Base Color (RGB)", Vector) = (1,1,1,1)
		_SpecColor ("Specular Color", Vector) = (0.5,0.5,0.5,1)
		_Shininess ("Shininess", Range(0.01, 5)) = 0.078125
		_ReflectColor ("Reflection Color", Vector) = (1,1,1,0.5)
		_FlakeAmt ("Flake Amount", Range(0, 1)) = 1
		_FlakeTex ("Flake Texture (A)", 2D) = "white" {}
		_Cube ("Reflection Cubemap", Cube) = "" {}
		_RimColor ("Rim Color", Vector) = (0,0,0,1)
		_RimAmt ("Rim Amount", Range(10, 0)) = 5
		_RimPwr ("Rim Power", Range(0, 10)) = 2
		_FresAmt ("Fresnel Amount", Range(0, 3)) = 1
	}
	SubShader {
		LOD 400
		Tags { "RenderType" = "Opaque" }
		Pass {
			Name "FORWARD"
			LOD 400
			Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			ZClip Off
			GpuProgramID 53451
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec2 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec2 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  highp vec3 tmpvar_8;
					  highp vec3 I_9;
					  I_9 = (tmpvar_5 - _WorldSpaceCameraPos);
					  tmpvar_8 = (I_9 - (2.0 * (
					    dot (tmpvar_7, I_9)
					   * tmpvar_7)));
					  tmpvar_1 = tmpvar_8;
					  mediump vec3 normal_10;
					  normal_10 = tmpvar_7;
					  mediump vec3 x1_11;
					  mediump vec4 tmpvar_12;
					  tmpvar_12 = (normal_10.xyzz * normal_10.yzzx);
					  x1_11.x = dot (unity_SHBr, tmpvar_12);
					  x1_11.y = dot (unity_SHBg, tmpvar_12);
					  x1_11.z = dot (unity_SHBb, tmpvar_12);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_7;
					  xlv_TEXCOORD3 = tmpvar_5;
					  xlv_TEXCOORD4 = (x1_11 + (unity_SHC.xyz * (
					    (normal_10.x * normal_10.x)
					   - 
					    (normal_10.y * normal_10.y)
					  )));
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD7 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  lowp vec3 lightDir_6;
					  highp vec3 tmpvar_7;
					  highp vec3 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD3));
					  viewDir_5 = tmpvar_10;
					  tmpvar_7 = xlv_TEXCOORD1;
					  tmpvar_8 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_11;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_8), tmpvar_4), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_11 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_11 = (tmpvar_11 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = textureCube (_Cube, tmpvar_7);
					  tmpvar_12 = ((tmpvar_22.xyz * _ReflectColor.xyz) * fres_14);
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  mediump vec3 normalWorld_23;
					  normalWorld_23 = tmpvar_4;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = normalWorld_23;
					  mediump vec3 x_25;
					  x_25.x = dot (unity_SHAr, tmpvar_24);
					  x_25.y = dot (unity_SHAg, tmpvar_24);
					  x_25.z = dot (unity_SHAb, tmpvar_24);
					  mediump vec3 tmpvar_26;
					  tmpvar_26 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_25)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec3 viewDir_27;
					  viewDir_27 = tmpvar_10;
					  lowp vec4 c_28;
					  lowp vec4 c_29;
					  highp float nh_30;
					  lowp float diff_31;
					  mediump float tmpvar_32;
					  tmpvar_32 = max (0.0, dot (tmpvar_4, tmpvar_2));
					  diff_31 = tmpvar_32;
					  mediump float tmpvar_33;
					  tmpvar_33 = max (0.0, dot (tmpvar_4, normalize(
					    (tmpvar_2 + viewDir_27)
					  )));
					  nh_30 = tmpvar_33;
					  mediump float y_34;
					  y_34 = (_Shininess * 128.0);
					  highp float tmpvar_35;
					  tmpvar_35 = (pow (nh_30, y_34) * tmpvar_13);
					  c_29.xyz = (((tmpvar_11 * tmpvar_1) * diff_31) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_35));
					  c_29.w = (tmpvar_22.w * _ReflectColor.w);
					  c_28.w = c_29.w;
					  c_28.xyz = (c_29.xyz + (tmpvar_11 * tmpvar_26));
					  c_3.xyz = (c_28.xyz + tmpvar_12);
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec2 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec2 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  highp vec3 tmpvar_8;
					  highp vec3 I_9;
					  I_9 = (tmpvar_5 - _WorldSpaceCameraPos);
					  tmpvar_8 = (I_9 - (2.0 * (
					    dot (tmpvar_7, I_9)
					   * tmpvar_7)));
					  tmpvar_1 = tmpvar_8;
					  mediump vec3 normal_10;
					  normal_10 = tmpvar_7;
					  mediump vec3 x1_11;
					  mediump vec4 tmpvar_12;
					  tmpvar_12 = (normal_10.xyzz * normal_10.yzzx);
					  x1_11.x = dot (unity_SHBr, tmpvar_12);
					  x1_11.y = dot (unity_SHBg, tmpvar_12);
					  x1_11.z = dot (unity_SHBb, tmpvar_12);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_7;
					  xlv_TEXCOORD3 = tmpvar_5;
					  xlv_TEXCOORD4 = (x1_11 + (unity_SHC.xyz * (
					    (normal_10.x * normal_10.x)
					   - 
					    (normal_10.y * normal_10.y)
					  )));
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD7 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  lowp vec3 lightDir_6;
					  highp vec3 tmpvar_7;
					  highp vec3 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD3));
					  viewDir_5 = tmpvar_10;
					  tmpvar_7 = xlv_TEXCOORD1;
					  tmpvar_8 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_11;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_8), tmpvar_4), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_11 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_11 = (tmpvar_11 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = textureCube (_Cube, tmpvar_7);
					  tmpvar_12 = ((tmpvar_22.xyz * _ReflectColor.xyz) * fres_14);
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  mediump vec3 normalWorld_23;
					  normalWorld_23 = tmpvar_4;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = normalWorld_23;
					  mediump vec3 x_25;
					  x_25.x = dot (unity_SHAr, tmpvar_24);
					  x_25.y = dot (unity_SHAg, tmpvar_24);
					  x_25.z = dot (unity_SHAb, tmpvar_24);
					  mediump vec3 tmpvar_26;
					  tmpvar_26 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_25)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec3 viewDir_27;
					  viewDir_27 = tmpvar_10;
					  lowp vec4 c_28;
					  lowp vec4 c_29;
					  highp float nh_30;
					  lowp float diff_31;
					  mediump float tmpvar_32;
					  tmpvar_32 = max (0.0, dot (tmpvar_4, tmpvar_2));
					  diff_31 = tmpvar_32;
					  mediump float tmpvar_33;
					  tmpvar_33 = max (0.0, dot (tmpvar_4, normalize(
					    (tmpvar_2 + viewDir_27)
					  )));
					  nh_30 = tmpvar_33;
					  mediump float y_34;
					  y_34 = (_Shininess * 128.0);
					  highp float tmpvar_35;
					  tmpvar_35 = (pow (nh_30, y_34) * tmpvar_13);
					  c_29.xyz = (((tmpvar_11 * tmpvar_1) * diff_31) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_35));
					  c_29.w = (tmpvar_22.w * _ReflectColor.w);
					  c_28.w = c_29.w;
					  c_28.xyz = (c_29.xyz + (tmpvar_11 * tmpvar_26));
					  c_3.xyz = (c_28.xyz + tmpvar_12);
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec2 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec2 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  highp vec3 tmpvar_8;
					  highp vec3 I_9;
					  I_9 = (tmpvar_5 - _WorldSpaceCameraPos);
					  tmpvar_8 = (I_9 - (2.0 * (
					    dot (tmpvar_7, I_9)
					   * tmpvar_7)));
					  tmpvar_1 = tmpvar_8;
					  mediump vec3 normal_10;
					  normal_10 = tmpvar_7;
					  mediump vec3 x1_11;
					  mediump vec4 tmpvar_12;
					  tmpvar_12 = (normal_10.xyzz * normal_10.yzzx);
					  x1_11.x = dot (unity_SHBr, tmpvar_12);
					  x1_11.y = dot (unity_SHBg, tmpvar_12);
					  x1_11.z = dot (unity_SHBb, tmpvar_12);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_7;
					  xlv_TEXCOORD3 = tmpvar_5;
					  xlv_TEXCOORD4 = (x1_11 + (unity_SHC.xyz * (
					    (normal_10.x * normal_10.x)
					   - 
					    (normal_10.y * normal_10.y)
					  )));
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD7 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  lowp vec3 lightDir_6;
					  highp vec3 tmpvar_7;
					  highp vec3 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD3));
					  viewDir_5 = tmpvar_10;
					  tmpvar_7 = xlv_TEXCOORD1;
					  tmpvar_8 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_11;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_8), tmpvar_4), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_11 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_11 = (tmpvar_11 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = textureCube (_Cube, tmpvar_7);
					  tmpvar_12 = ((tmpvar_22.xyz * _ReflectColor.xyz) * fres_14);
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  mediump vec3 normalWorld_23;
					  normalWorld_23 = tmpvar_4;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = normalWorld_23;
					  mediump vec3 x_25;
					  x_25.x = dot (unity_SHAr, tmpvar_24);
					  x_25.y = dot (unity_SHAg, tmpvar_24);
					  x_25.z = dot (unity_SHAb, tmpvar_24);
					  mediump vec3 tmpvar_26;
					  tmpvar_26 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_25)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec3 viewDir_27;
					  viewDir_27 = tmpvar_10;
					  lowp vec4 c_28;
					  lowp vec4 c_29;
					  highp float nh_30;
					  lowp float diff_31;
					  mediump float tmpvar_32;
					  tmpvar_32 = max (0.0, dot (tmpvar_4, tmpvar_2));
					  diff_31 = tmpvar_32;
					  mediump float tmpvar_33;
					  tmpvar_33 = max (0.0, dot (tmpvar_4, normalize(
					    (tmpvar_2 + viewDir_27)
					  )));
					  nh_30 = tmpvar_33;
					  mediump float y_34;
					  y_34 = (_Shininess * 128.0);
					  highp float tmpvar_35;
					  tmpvar_35 = (pow (nh_30, y_34) * tmpvar_13);
					  c_29.xyz = (((tmpvar_11 * tmpvar_1) * diff_31) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_35));
					  c_29.w = (tmpvar_22.w * _ReflectColor.w);
					  c_28.w = c_29.w;
					  c_28.xyz = (c_29.xyz + (tmpvar_11 * tmpvar_26));
					  c_3.xyz = (c_28.xyz + tmpvar_12);
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-u_xlat1.xyz);
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat16_3 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					float u_xlat14;
					lowp float u_xlat10_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat18) + 1.0;
					    u_xlat16_18 = log2(u_xlat16_19);
					    u_xlat2.xy = vec2(u_xlat16_18) * vec2(_RimAmt, _FresAmt);
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat16_19 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_19 = inversesqrt(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_18 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_1.x = (-u_xlat2.x) + 1.0;
					    u_xlat10_14 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_14;
					    u_xlat14 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat18 = u_xlat16_18 * u_xlat14;
					    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_7.xyz = u_xlat2.xxx * _RimColor.xyz;
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat18 = (-u_xlat2.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat2.xzw = _Color.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat16_7.xyz = u_xlat2.xzw * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat2.xzw * u_xlat16_0.xyz + u_xlat3.xyz;
					    u_xlat10_0.xyz = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat2.yyy + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-u_xlat1.xyz);
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat16_3 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					float u_xlat14;
					lowp float u_xlat10_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat18) + 1.0;
					    u_xlat16_18 = log2(u_xlat16_19);
					    u_xlat2.xy = vec2(u_xlat16_18) * vec2(_RimAmt, _FresAmt);
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat16_19 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_19 = inversesqrt(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_18 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_1.x = (-u_xlat2.x) + 1.0;
					    u_xlat10_14 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_14;
					    u_xlat14 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat18 = u_xlat16_18 * u_xlat14;
					    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_7.xyz = u_xlat2.xxx * _RimColor.xyz;
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat18 = (-u_xlat2.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat2.xzw = _Color.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat16_7.xyz = u_xlat2.xzw * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat2.xzw * u_xlat16_0.xyz + u_xlat3.xyz;
					    u_xlat10_0.xyz = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat2.yyy + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-u_xlat1.xyz);
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat16_3 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					float u_xlat14;
					lowp float u_xlat10_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat18) + 1.0;
					    u_xlat16_18 = log2(u_xlat16_19);
					    u_xlat2.xy = vec2(u_xlat16_18) * vec2(_RimAmt, _FresAmt);
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat16_19 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_19 = inversesqrt(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_18 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_1.x = (-u_xlat2.x) + 1.0;
					    u_xlat10_14 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_14;
					    u_xlat14 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat18 = u_xlat16_18 * u_xlat14;
					    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_7.xyz = u_xlat2.xxx * _RimColor.xyz;
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat18 = (-u_xlat2.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat2.xzw = _Color.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat16_7.xyz = u_xlat2.xzw * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat2.xzw * u_xlat16_0.xyz + u_xlat3.xyz;
					    u_xlat10_0.xyz = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat2.yyy + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 250
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %113 %126 %130 %189 %192 %232 %242 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate %100 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %126 Location 126 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %192 Location 192 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %232 Location 232 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 Location 242 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 5 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                               Output f32_2* %100 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                               Output f32_2* %113 = OpVariable Output 
					                                         f32 %114 = OpConstant 3.674022E-40 
					                                       f32_2 %115 = OpConstantComposite %114 %114 
					                                             %119 = OpTypePointer Uniform %14 
					                                             %125 = OpTypePointer Output %14 
					                               Output f32_3* %126 = OpVariable Output 
					                                             %129 = OpTypePointer Input %14 
					                                Input f32_3* %130 = OpVariable Input 
					                                         i32 %132 = OpConstant 6 
					                                         u32 %137 = OpConstant 0 
					                                             %138 = OpTypePointer Private %6 
					                                         u32 %151 = OpConstant 2 
					                                Private f32* %153 = OpVariable Private 
					                               Output f32_3* %189 = OpVariable Output 
					                               Output f32_3* %192 = OpVariable Output 
					                                Private f32* %195 = OpVariable Private 
					                              Private f32_4* %209 = OpVariable Private 
					                                             %215 = OpTypePointer Private %14 
					                              Private f32_3* %216 = OpVariable Private 
					                               Output f32_3* %232 = OpVariable Output 
					                                         i32 %233 = OpConstant 4 
					                               Output f32_4* %242 = OpVariable Output 
					                                       f32_4 %243 = OpConstantComposite %114 %114 %114 %114 
					                                             %244 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %22 %66 %48 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %46 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %30 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %22 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %22 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore %100 %112 
					                                                      OpStore %113 %115 
					                                       f32_4 %116 = OpLoad %9 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                       f32_3 %118 = OpFNegate %117 
					                              Uniform f32_3* %120 = OpAccessChain %22 %30 
					                                       f32_3 %121 = OpLoad %120 
					                                       f32_3 %122 = OpFAdd %118 %121 
					                                       f32_4 %123 = OpLoad %46 
					                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
					                                                      OpStore %46 %124 
					                                       f32_4 %127 = OpLoad %9 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                                      OpStore %126 %128 
					                                       f32_3 %131 = OpLoad %130 
					                              Uniform f32_4* %133 = OpAccessChain %22 %132 %30 
					                                       f32_4 %134 = OpLoad %133 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %131 %135 
					                                Private f32* %139 = OpAccessChain %9 %137 
					                                                      OpStore %139 %136 
					                                       f32_3 %140 = OpLoad %130 
					                              Uniform f32_4* %141 = OpAccessChain %22 %132 %25 
					                                       f32_4 %142 = OpLoad %141 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %140 %143 
					                                Private f32* %145 = OpAccessChain %9 %84 
					                                                      OpStore %145 %144 
					                                       f32_3 %146 = OpLoad %130 
					                              Uniform f32_4* %147 = OpAccessChain %22 %132 %38 
					                                       f32_4 %148 = OpLoad %147 
					                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
					                                         f32 %150 = OpDot %146 %149 
					                                Private f32* %152 = OpAccessChain %9 %151 
					                                                      OpStore %152 %150 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                       f32_4 %156 = OpLoad %9 
					                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
					                                         f32 %158 = OpDot %155 %157 
					                                                      OpStore %153 %158 
					                                         f32 %159 = OpLoad %153 
					                                         f32 %160 = OpExtInst %1 32 %159 
					                                                      OpStore %153 %160 
					                                         f32 %161 = OpLoad %153 
					                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFMul %162 %164 
					                                       f32_4 %166 = OpLoad %9 
					                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
					                                                      OpStore %9 %167 
					                                       f32_4 %168 = OpLoad %46 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFNegate %169 
					                                       f32_4 %171 = OpLoad %9 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %170 %172 
					                                                      OpStore %153 %173 
					                                         f32 %174 = OpLoad %153 
					                                         f32 %175 = OpLoad %153 
					                                         f32 %176 = OpFAdd %174 %175 
					                                                      OpStore %153 %176 
					                                       f32_4 %177 = OpLoad %9 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpLoad %153 
					                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
					                                       f32_3 %181 = OpFNegate %180 
					                                       f32_3 %182 = OpFMul %178 %181 
					                                       f32_4 %183 = OpLoad %46 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                       f32_3 %185 = OpFNegate %184 
					                                       f32_3 %186 = OpFAdd %182 %185 
					                                       f32_4 %187 = OpLoad %46 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %46 %188 
					                                       f32_4 %190 = OpLoad %46 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                                      OpStore %189 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                                      OpStore %192 %194 
					                                Private f32* %196 = OpAccessChain %9 %84 
					                                         f32 %197 = OpLoad %196 
					                                Private f32* %198 = OpAccessChain %9 %84 
					                                         f32 %199 = OpLoad %198 
					                                         f32 %200 = OpFMul %197 %199 
					                                                      OpStore %195 %200 
					                                Private f32* %201 = OpAccessChain %9 %137 
					                                         f32 %202 = OpLoad %201 
					                                Private f32* %203 = OpAccessChain %9 %137 
					                                         f32 %204 = OpLoad %203 
					                                         f32 %205 = OpFMul %202 %204 
					                                         f32 %206 = OpLoad %195 
					                                         f32 %207 = OpFNegate %206 
					                                         f32 %208 = OpFAdd %205 %207 
					                                                      OpStore %195 %208 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 1 2 2 0 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_4 %213 = OpVectorShuffle %212 %212 0 1 2 2 
					                                       f32_4 %214 = OpFMul %211 %213 
					                                                      OpStore %209 %214 
					                              Uniform f32_4* %217 = OpAccessChain %22 %25 
					                                       f32_4 %218 = OpLoad %217 
					                                       f32_4 %219 = OpLoad %209 
					                                         f32 %220 = OpDot %218 %219 
					                                Private f32* %221 = OpAccessChain %216 %137 
					                                                      OpStore %221 %220 
					                              Uniform f32_4* %222 = OpAccessChain %22 %38 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_4 %224 = OpLoad %209 
					                                         f32 %225 = OpDot %223 %224 
					                                Private f32* %226 = OpAccessChain %216 %84 
					                                                      OpStore %226 %225 
					                              Uniform f32_4* %227 = OpAccessChain %22 %48 
					                                       f32_4 %228 = OpLoad %227 
					                                       f32_4 %229 = OpLoad %209 
					                                         f32 %230 = OpDot %228 %229 
					                                Private f32* %231 = OpAccessChain %216 %151 
					                                                      OpStore %231 %230 
					                              Uniform f32_4* %234 = OpAccessChain %22 %233 
					                                       f32_4 %235 = OpLoad %234 
					                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
					                                         f32 %237 = OpLoad %195 
					                                       f32_3 %238 = OpCompositeConstruct %237 %237 %237 
					                                       f32_3 %239 = OpFMul %236 %238 
					                                       f32_3 %240 = OpLoad %216 
					                                       f32_3 %241 = OpFAdd %239 %240 
					                                                      OpStore %232 %241 
					                                                      OpStore %242 %243 
					                                 Output f32* %245 = OpAccessChain %88 %30 %84 
					                                         f32 %246 = OpLoad %245 
					                                         f32 %247 = OpFNegate %246 
					                                 Output f32* %248 = OpAccessChain %88 %30 %84 
					                                                      OpStore %248 %247 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 324
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %50 %76 %187 %300 %312 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %22 RelaxedPrecision 
					                                                      OpMemberDecorate %23 0 Offset 23 
					                                                      OpMemberDecorate %23 1 RelaxedPrecision 
					                                                      OpMemberDecorate %23 1 Offset 23 
					                                                      OpMemberDecorate %23 2 RelaxedPrecision 
					                                                      OpMemberDecorate %23 2 Offset 23 
					                                                      OpMemberDecorate %23 3 RelaxedPrecision 
					                                                      OpMemberDecorate %23 3 Offset 23 
					                                                      OpMemberDecorate %23 4 RelaxedPrecision 
					                                                      OpMemberDecorate %23 4 Offset 23 
					                                                      OpMemberDecorate %23 5 RelaxedPrecision 
					                                                      OpMemberDecorate %23 5 Offset 23 
					                                                      OpMemberDecorate %23 6 RelaxedPrecision 
					                                                      OpMemberDecorate %23 6 Offset 23 
					                                                      OpMemberDecorate %23 7 RelaxedPrecision 
					                                                      OpMemberDecorate %23 7 Offset 23 
					                                                      OpMemberDecorate %23 8 RelaxedPrecision 
					                                                      OpMemberDecorate %23 8 Offset 23 
					                                                      OpMemberDecorate %23 9 RelaxedPrecision 
					                                                      OpMemberDecorate %23 9 Offset 23 
					                                                      OpMemberDecorate %23 10 Offset 23 
					                                                      OpMemberDecorate %23 11 Offset 23 
					                                                      OpMemberDecorate %23 12 Offset 23 
					                                                      OpMemberDecorate %23 13 Offset 23 
					                                                      OpMemberDecorate %23 14 RelaxedPrecision 
					                                                      OpMemberDecorate %23 14 Offset 23 
					                                                      OpDecorate %23 Block 
					                                                      OpDecorate %25 DescriptorSet 25 
					                                                      OpDecorate %25 Binding 25 
					                                                      OpDecorate %30 RelaxedPrecision 
					                                                      OpDecorate %37 RelaxedPrecision 
					                                                      OpDecorate %44 RelaxedPrecision 
					                                                      OpDecorate %49 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %50 Location 50 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %52 RelaxedPrecision 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %56 RelaxedPrecision 
					                                                      OpDecorate %57 RelaxedPrecision 
					                                                      OpDecorate %58 RelaxedPrecision 
					                                                      OpDecorate %59 RelaxedPrecision 
					                                                      OpDecorate %60 RelaxedPrecision 
					                                                      OpDecorate %63 RelaxedPrecision 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %72 RelaxedPrecision 
					                                                      OpDecorate %73 RelaxedPrecision 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %76 Location 76 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %102 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %151 RelaxedPrecision 
					                                                      OpDecorate %153 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %161 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %171 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %173 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %180 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 DescriptorSet 184 
					                                                      OpDecorate %184 Binding 184 
					                                                      OpDecorate %185 RelaxedPrecision 
					                                                      OpDecorate %187 Location 187 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %205 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %250 RelaxedPrecision 
					                                                      OpDecorate %251 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %254 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %267 RelaxedPrecision 
					                                                      OpDecorate %268 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %279 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %294 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %298 DescriptorSet 298 
					                                                      OpDecorate %298 Binding 298 
					                                                      OpDecorate %299 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %300 Location 300 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %305 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %310 RelaxedPrecision 
					                                                      OpDecorate %312 RelaxedPrecision 
					                                                      OpDecorate %312 Location 312 
					                                                      OpDecorate %313 RelaxedPrecision 
					                                                      OpDecorate %317 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                          f32 %16 = OpConstant 3.674022E-40 
					                                              %17 = OpTypeInt 32 0 
					                                          u32 %18 = OpConstant 3 
					                                              %19 = OpTypePointer Private %6 
					                                              %21 = OpTypePointer Private %10 
					                               Private f32_3* %22 = OpVariable Private 
					                                              %23 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %7 
					                                              %24 = OpTypePointer Uniform %23 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %25 = OpVariable Uniform 
					                                              %26 = OpTypeInt 32 1 
					                                          i32 %27 = OpConstant 2 
					                                              %28 = OpTypePointer Uniform %7 
					                                          u32 %33 = OpConstant 0 
					                                          i32 %35 = OpConstant 3 
					                                          u32 %40 = OpConstant 1 
					                                          i32 %42 = OpConstant 4 
					                                          u32 %47 = OpConstant 2 
					                                 Input f32_3* %50 = OpVariable Input 
					                                          f32 %54 = OpConstant 3.674022E-40 
					                                        f32_3 %55 = OpConstantComposite %54 %54 %54 
					                               Private f32_3* %57 = OpVariable Private 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                        f32_3 %62 = OpConstantComposite %61 %61 %61 
					                                          f32 %67 = OpConstant 3.674022E-40 
					                                        f32_3 %68 = OpConstantComposite %67 %67 %67 
					                                          f32 %70 = OpConstant 3.674022E-40 
					                                        f32_3 %71 = OpConstantComposite %70 %70 %70 
					                               Private f32_4* %75 = OpVariable Private 
					                                 Input f32_3* %76 = OpVariable Input 
					                                          i32 %79 = OpConstant 0 
					                                              %80 = OpTypePointer Uniform %10 
					                                 Private f32* %86 = OpVariable Private 
					                                          i32 %99 = OpConstant 1 
					                                Private f32* %117 = OpVariable Private 
					                                Private f32* %121 = OpVariable Private 
					                                             %125 = OpTypeVector %6 2 
					                                         i32 %127 = OpConstant 12 
					                                             %128 = OpTypePointer Uniform %6 
					                                         i32 %131 = OpConstant 10 
					                                         i32 %163 = OpConstant 9 
					                                         f32 %166 = OpConstant 3.674022E-40 
					                                Private f32* %180 = OpVariable Private 
					                                             %181 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %182 = OpTypeSampledImage %181 
					                                             %183 = OpTypePointer UniformConstant %182 
					 UniformConstant read_only Texture2DSampled* %184 = OpVariable UniformConstant 
					                                             %186 = OpTypePointer Input %125 
					                                Input f32_2* %187 = OpVariable Input 
					                                Private f32* %196 = OpVariable Private 
					                                         i32 %199 = OpConstant 11 
					                                         i32 %203 = OpConstant 6 
					                                         i32 %210 = OpConstant 5 
					                              Private f32_3* %218 = OpVariable Private 
					                              Private f32_3* %233 = OpVariable Private 
					                                         i32 %236 = OpConstant 14 
					                              Private f32_3* %241 = OpVariable Private 
					                                         i32 %243 = OpConstant 13 
					                                         i32 %265 = OpConstant 7 
					                              Private f32_3* %294 = OpVariable Private 
					                                             %295 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %296 = OpTypeSampledImage %295 
					                                             %297 = OpTypePointer UniformConstant %296 
					UniformConstant read_only TextureCubeSampled* %298 = OpVariable UniformConstant 
					                                Input f32_3* %300 = OpVariable Input 
					                              Private f32_3* %304 = OpVariable Private 
					                                         i32 %306 = OpConstant 8 
					                                             %311 = OpTypePointer Output %7 
					                               Output f32_4* %312 = OpVariable Output 
					                                             %321 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_4 %14 = OpLoad %9 
					                                        f32_4 %15 = OpVectorShuffle %14 %13 4 5 6 3 
					                                                      OpStore %9 %15 
					                                 Private f32* %20 = OpAccessChain %9 %18 
					                                                      OpStore %20 %16 
					                               Uniform f32_4* %29 = OpAccessChain %25 %27 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %9 
					                                          f32 %32 = OpDot %30 %31 
					                                 Private f32* %34 = OpAccessChain %22 %33 
					                                                      OpStore %34 %32 
					                               Uniform f32_4* %36 = OpAccessChain %25 %35 
					                                        f32_4 %37 = OpLoad %36 
					                                        f32_4 %38 = OpLoad %9 
					                                          f32 %39 = OpDot %37 %38 
					                                 Private f32* %41 = OpAccessChain %22 %40 
					                                                      OpStore %41 %39 
					                               Uniform f32_4* %43 = OpAccessChain %25 %42 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_4 %45 = OpLoad %9 
					                                          f32 %46 = OpDot %44 %45 
					                                 Private f32* %48 = OpAccessChain %22 %47 
					                                                      OpStore %48 %46 
					                                        f32_3 %49 = OpLoad %22 
					                                        f32_3 %51 = OpLoad %50 
					                                        f32_3 %52 = OpFAdd %49 %51 
					                                                      OpStore %22 %52 
					                                        f32_3 %53 = OpLoad %22 
					                                        f32_3 %56 = OpExtInst %1 40 %53 %55 
					                                                      OpStore %22 %56 
					                                        f32_3 %58 = OpLoad %22 
					                                        f32_3 %59 = OpExtInst %1 30 %58 
					                                                      OpStore %57 %59 
					                                        f32_3 %60 = OpLoad %57 
					                                        f32_3 %63 = OpFMul %60 %62 
					                                                      OpStore %57 %63 
					                                        f32_3 %64 = OpLoad %57 
					                                        f32_3 %65 = OpExtInst %1 29 %64 
					                                                      OpStore %57 %65 
					                                        f32_3 %66 = OpLoad %57 
					                                        f32_3 %69 = OpFMul %66 %68 
					                                        f32_3 %72 = OpFAdd %69 %71 
					                                                      OpStore %57 %72 
					                                        f32_3 %73 = OpLoad %57 
					                                        f32_3 %74 = OpExtInst %1 40 %73 %55 
					                                                      OpStore %57 %74 
					                                        f32_3 %77 = OpLoad %76 
					                                        f32_3 %78 = OpFNegate %77 
					                               Uniform f32_3* %81 = OpAccessChain %25 %79 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %78 %82 
					                                        f32_4 %84 = OpLoad %75 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %75 %85 
					                                        f32_4 %87 = OpLoad %75 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                        f32_4 %89 = OpLoad %75 
					                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
					                                          f32 %91 = OpDot %88 %90 
					                                                      OpStore %86 %91 
					                                          f32 %92 = OpLoad %86 
					                                          f32 %93 = OpExtInst %1 32 %92 
					                                                      OpStore %86 %93 
					                                        f32_4 %94 = OpLoad %75 
					                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
					                                          f32 %96 = OpLoad %86 
					                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
					                                        f32_3 %98 = OpFMul %95 %97 
					                              Uniform f32_4* %100 = OpAccessChain %25 %99 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
					                                       f32_3 %103 = OpFAdd %98 %102 
					                                                      OpStore %22 %103 
					                                         f32 %104 = OpLoad %86 
					                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
					                                       f32_4 %106 = OpLoad %75 
					                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
					                                       f32_3 %108 = OpFMul %105 %107 
					                                       f32_4 %109 = OpLoad %75 
					                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
					                                                      OpStore %75 %110 
					                                       f32_4 %111 = OpLoad %75 
					                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
					                                       f32_3 %113 = OpLoad %12 
					                                         f32 %114 = OpDot %112 %113 
					                                                      OpStore %86 %114 
					                                         f32 %115 = OpLoad %86 
					                                         f32 %116 = OpExtInst %1 43 %115 %54 %16 
					                                                      OpStore %86 %116 
					                                         f32 %118 = OpLoad %86 
					                                         f32 %119 = OpFNegate %118 
					                                         f32 %120 = OpFAdd %119 %16 
					                                                      OpStore %117 %120 
					                                         f32 %122 = OpLoad %117 
					                                         f32 %123 = OpExtInst %1 30 %122 
					                                                      OpStore %121 %123 
					                                         f32 %124 = OpLoad %121 
					                                       f32_2 %126 = OpCompositeConstruct %124 %124 
					                                Uniform f32* %129 = OpAccessChain %25 %127 
					                                         f32 %130 = OpLoad %129 
					                                Uniform f32* %132 = OpAccessChain %25 %131 
					                                         f32 %133 = OpLoad %132 
					                                       f32_2 %134 = OpCompositeConstruct %130 %133 
					                                       f32_2 %135 = OpFMul %126 %134 
					                                       f32_4 %136 = OpLoad %75 
					                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 3 
					                                                      OpStore %75 %137 
					                                       f32_4 %138 = OpLoad %75 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
					                                       f32_2 %140 = OpExtInst %1 29 %139 
					                                       f32_4 %141 = OpLoad %75 
					                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
					                                                      OpStore %75 %142 
					                                       f32_3 %143 = OpLoad %22 
					                                       f32_3 %144 = OpLoad %22 
					                                         f32 %145 = OpDot %143 %144 
					                                                      OpStore %117 %145 
					                                         f32 %146 = OpLoad %117 
					                                         f32 %147 = OpExtInst %1 32 %146 
					                                                      OpStore %117 %147 
					                                         f32 %148 = OpLoad %117 
					                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
					                                       f32_3 %150 = OpLoad %22 
					                                       f32_3 %151 = OpFMul %149 %150 
					                                                      OpStore %22 %151 
					                                       f32_3 %152 = OpLoad %12 
					                                       f32_3 %153 = OpLoad %22 
					                                         f32 %154 = OpDot %152 %153 
					                                Private f32* %155 = OpAccessChain %22 %33 
					                                                      OpStore %155 %154 
					                                Private f32* %156 = OpAccessChain %22 %33 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpExtInst %1 40 %157 %54 
					                                Private f32* %159 = OpAccessChain %22 %33 
					                                                      OpStore %159 %158 
					                                Private f32* %160 = OpAccessChain %22 %33 
					                                         f32 %161 = OpLoad %160 
					                                         f32 %162 = OpExtInst %1 30 %161 
					                                                      OpStore %121 %162 
					                                Uniform f32* %164 = OpAccessChain %25 %163 
					                                         f32 %165 = OpLoad %164 
					                                         f32 %167 = OpFMul %165 %166 
					                                Private f32* %168 = OpAccessChain %22 %33 
					                                                      OpStore %168 %167 
					                                         f32 %169 = OpLoad %121 
					                                Private f32* %170 = OpAccessChain %22 %33 
					                                         f32 %171 = OpLoad %170 
					                                         f32 %172 = OpFMul %169 %171 
					                                                      OpStore %121 %172 
					                                         f32 %173 = OpLoad %121 
					                                         f32 %174 = OpExtInst %1 29 %173 
					                                                      OpStore %121 %174 
					                                Private f32* %175 = OpAccessChain %75 %33 
					                                         f32 %176 = OpLoad %175 
					                                         f32 %177 = OpFNegate %176 
					                                         f32 %178 = OpFAdd %177 %16 
					                                Private f32* %179 = OpAccessChain %22 %33 
					                                                      OpStore %179 %178 
					                  read_only Texture2DSampled %185 = OpLoad %184 
					                                       f32_2 %188 = OpLoad %187 
					                                       f32_4 %189 = OpImageSampleImplicitLod %185 %188 
					                                         f32 %190 = OpCompositeExtract %189 3 
					                                                      OpStore %180 %190 
					                                Private f32* %191 = OpAccessChain %22 %33 
					                                         f32 %192 = OpLoad %191 
					                                         f32 %193 = OpLoad %180 
					                                         f32 %194 = OpFMul %192 %193 
					                                Private f32* %195 = OpAccessChain %22 %33 
					                                                      OpStore %195 %194 
					                                Private f32* %197 = OpAccessChain %22 %33 
					                                         f32 %198 = OpLoad %197 
					                                Uniform f32* %200 = OpAccessChain %25 %199 
					                                         f32 %201 = OpLoad %200 
					                                         f32 %202 = OpFMul %198 %201 
					                                Uniform f32* %204 = OpAccessChain %25 %203 %18 
					                                         f32 %205 = OpLoad %204 
					                                         f32 %206 = OpFAdd %202 %205 
					                                                      OpStore %196 %206 
					                                         f32 %207 = OpLoad %121 
					                                         f32 %208 = OpLoad %196 
					                                         f32 %209 = OpFMul %207 %208 
					                                                      OpStore %86 %209 
					                              Uniform f32_4* %211 = OpAccessChain %25 %210 
					                                       f32_4 %212 = OpLoad %211 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                              Uniform f32_4* %214 = OpAccessChain %25 %203 
					                                       f32_4 %215 = OpLoad %214 
					                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
					                                       f32_3 %217 = OpFMul %213 %216 
					                                                      OpStore %22 %217 
					                                         f32 %219 = OpLoad %86 
					                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
					                                       f32_3 %221 = OpLoad %22 
					                                       f32_3 %222 = OpFMul %220 %221 
					                                                      OpStore %218 %222 
					                                       f32_3 %223 = OpLoad %12 
					                              Uniform f32_4* %224 = OpAccessChain %25 %99 
					                                       f32_4 %225 = OpLoad %224 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                         f32 %227 = OpDot %223 %226 
					                                Private f32* %228 = OpAccessChain %22 %33 
					                                                      OpStore %228 %227 
					                                Private f32* %229 = OpAccessChain %22 %33 
					                                         f32 %230 = OpLoad %229 
					                                         f32 %231 = OpExtInst %1 40 %230 %54 
					                                Private f32* %232 = OpAccessChain %22 %33 
					                                                      OpStore %232 %231 
					                                       f32_4 %234 = OpLoad %75 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
					                              Uniform f32_4* %237 = OpAccessChain %25 %236 
					                                       f32_4 %238 = OpLoad %237 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                       f32_3 %240 = OpFMul %235 %239 
					                                                      OpStore %233 %240 
					                                       f32_3 %242 = OpLoad %233 
					                                Uniform f32* %244 = OpAccessChain %25 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %246 = OpAccessChain %25 %243 
					                                         f32 %247 = OpLoad %246 
					                                Uniform f32* %248 = OpAccessChain %25 %243 
					                                         f32 %249 = OpLoad %248 
					                                       f32_3 %250 = OpCompositeConstruct %245 %247 %249 
					                                         f32 %251 = OpCompositeExtract %250 0 
					                                         f32 %252 = OpCompositeExtract %250 1 
					                                         f32 %253 = OpCompositeExtract %250 2 
					                                       f32_3 %254 = OpCompositeConstruct %251 %252 %253 
					                                       f32_3 %255 = OpFMul %242 %254 
					                                                      OpStore %241 %255 
					                                Private f32* %256 = OpAccessChain %75 %33 
					                                         f32 %257 = OpLoad %256 
					                                         f32 %258 = OpFNegate %257 
					                                Uniform f32* %259 = OpAccessChain %25 %243 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpFMul %258 %260 
					                                         f32 %262 = OpFAdd %261 %16 
					                                                      OpStore %86 %262 
					                                         f32 %263 = OpLoad %86 
					                                         f32 %264 = OpExtInst %1 43 %263 %54 %16 
					                                                      OpStore %86 %264 
					                              Uniform f32_4* %266 = OpAccessChain %25 %265 
					                                       f32_4 %267 = OpLoad %266 
					                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
					                                         f32 %269 = OpLoad %86 
					                                       f32_3 %270 = OpCompositeConstruct %269 %269 %269 
					                                       f32_3 %271 = OpFMul %268 %270 
					                                       f32_3 %272 = OpLoad %241 
					                                       f32_3 %273 = OpFAdd %271 %272 
					                                       f32_4 %274 = OpLoad %75 
					                                       f32_4 %275 = OpVectorShuffle %274 %273 4 1 5 6 
					                                                      OpStore %75 %275 
					                                       f32_4 %276 = OpLoad %75 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 2 3 
					                              Uniform f32_4* %278 = OpAccessChain %25 %210 
					                                       f32_4 %279 = OpLoad %278 
					                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
					                                       f32_3 %281 = OpFMul %277 %280 
					                                                      OpStore %233 %281 
					                                       f32_3 %282 = OpLoad %233 
					                                       f32_3 %283 = OpLoad %22 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
					                                       f32_3 %285 = OpFMul %282 %284 
					                                       f32_3 %286 = OpLoad %218 
					                                       f32_3 %287 = OpFAdd %285 %286 
					                                                      OpStore %218 %287 
					                                       f32_4 %288 = OpLoad %75 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 0 2 3 
					                                       f32_3 %290 = OpLoad %57 
					                                       f32_3 %291 = OpFMul %289 %290 
					                                       f32_3 %292 = OpLoad %218 
					                                       f32_3 %293 = OpFAdd %291 %292 
					                                                      OpStore %22 %293 
					                read_only TextureCubeSampled %299 = OpLoad %298 
					                                       f32_3 %301 = OpLoad %300 
					                                       f32_4 %302 = OpImageSampleImplicitLod %299 %301 
					                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
					                                                      OpStore %294 %303 
					                                       f32_3 %305 = OpLoad %294 
					                              Uniform f32_4* %307 = OpAccessChain %25 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %305 %309 
					                                                      OpStore %304 %310 
					                                       f32_3 %313 = OpLoad %304 
					                                       f32_4 %314 = OpLoad %75 
					                                       f32_3 %315 = OpVectorShuffle %314 %314 1 1 1 
					                                       f32_3 %316 = OpFMul %313 %315 
					                                       f32_3 %317 = OpLoad %22 
					                                       f32_3 %318 = OpFAdd %316 %317 
					                                       f32_4 %319 = OpLoad %312 
					                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
					                                                      OpStore %312 %320 
					                                 Output f32* %322 = OpAccessChain %312 %18 
					                                                      OpStore %322 %16 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 250
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %113 %126 %130 %189 %192 %232 %242 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate %100 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %126 Location 126 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %192 Location 192 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %232 Location 232 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 Location 242 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 5 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                               Output f32_2* %100 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                               Output f32_2* %113 = OpVariable Output 
					                                         f32 %114 = OpConstant 3.674022E-40 
					                                       f32_2 %115 = OpConstantComposite %114 %114 
					                                             %119 = OpTypePointer Uniform %14 
					                                             %125 = OpTypePointer Output %14 
					                               Output f32_3* %126 = OpVariable Output 
					                                             %129 = OpTypePointer Input %14 
					                                Input f32_3* %130 = OpVariable Input 
					                                         i32 %132 = OpConstant 6 
					                                         u32 %137 = OpConstant 0 
					                                             %138 = OpTypePointer Private %6 
					                                         u32 %151 = OpConstant 2 
					                                Private f32* %153 = OpVariable Private 
					                               Output f32_3* %189 = OpVariable Output 
					                               Output f32_3* %192 = OpVariable Output 
					                                Private f32* %195 = OpVariable Private 
					                              Private f32_4* %209 = OpVariable Private 
					                                             %215 = OpTypePointer Private %14 
					                              Private f32_3* %216 = OpVariable Private 
					                               Output f32_3* %232 = OpVariable Output 
					                                         i32 %233 = OpConstant 4 
					                               Output f32_4* %242 = OpVariable Output 
					                                       f32_4 %243 = OpConstantComposite %114 %114 %114 %114 
					                                             %244 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %22 %66 %48 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %46 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %30 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %22 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %22 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore %100 %112 
					                                                      OpStore %113 %115 
					                                       f32_4 %116 = OpLoad %9 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                       f32_3 %118 = OpFNegate %117 
					                              Uniform f32_3* %120 = OpAccessChain %22 %30 
					                                       f32_3 %121 = OpLoad %120 
					                                       f32_3 %122 = OpFAdd %118 %121 
					                                       f32_4 %123 = OpLoad %46 
					                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
					                                                      OpStore %46 %124 
					                                       f32_4 %127 = OpLoad %9 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                                      OpStore %126 %128 
					                                       f32_3 %131 = OpLoad %130 
					                              Uniform f32_4* %133 = OpAccessChain %22 %132 %30 
					                                       f32_4 %134 = OpLoad %133 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %131 %135 
					                                Private f32* %139 = OpAccessChain %9 %137 
					                                                      OpStore %139 %136 
					                                       f32_3 %140 = OpLoad %130 
					                              Uniform f32_4* %141 = OpAccessChain %22 %132 %25 
					                                       f32_4 %142 = OpLoad %141 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %140 %143 
					                                Private f32* %145 = OpAccessChain %9 %84 
					                                                      OpStore %145 %144 
					                                       f32_3 %146 = OpLoad %130 
					                              Uniform f32_4* %147 = OpAccessChain %22 %132 %38 
					                                       f32_4 %148 = OpLoad %147 
					                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
					                                         f32 %150 = OpDot %146 %149 
					                                Private f32* %152 = OpAccessChain %9 %151 
					                                                      OpStore %152 %150 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                       f32_4 %156 = OpLoad %9 
					                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
					                                         f32 %158 = OpDot %155 %157 
					                                                      OpStore %153 %158 
					                                         f32 %159 = OpLoad %153 
					                                         f32 %160 = OpExtInst %1 32 %159 
					                                                      OpStore %153 %160 
					                                         f32 %161 = OpLoad %153 
					                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFMul %162 %164 
					                                       f32_4 %166 = OpLoad %9 
					                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
					                                                      OpStore %9 %167 
					                                       f32_4 %168 = OpLoad %46 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFNegate %169 
					                                       f32_4 %171 = OpLoad %9 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %170 %172 
					                                                      OpStore %153 %173 
					                                         f32 %174 = OpLoad %153 
					                                         f32 %175 = OpLoad %153 
					                                         f32 %176 = OpFAdd %174 %175 
					                                                      OpStore %153 %176 
					                                       f32_4 %177 = OpLoad %9 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpLoad %153 
					                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
					                                       f32_3 %181 = OpFNegate %180 
					                                       f32_3 %182 = OpFMul %178 %181 
					                                       f32_4 %183 = OpLoad %46 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                       f32_3 %185 = OpFNegate %184 
					                                       f32_3 %186 = OpFAdd %182 %185 
					                                       f32_4 %187 = OpLoad %46 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %46 %188 
					                                       f32_4 %190 = OpLoad %46 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                                      OpStore %189 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                                      OpStore %192 %194 
					                                Private f32* %196 = OpAccessChain %9 %84 
					                                         f32 %197 = OpLoad %196 
					                                Private f32* %198 = OpAccessChain %9 %84 
					                                         f32 %199 = OpLoad %198 
					                                         f32 %200 = OpFMul %197 %199 
					                                                      OpStore %195 %200 
					                                Private f32* %201 = OpAccessChain %9 %137 
					                                         f32 %202 = OpLoad %201 
					                                Private f32* %203 = OpAccessChain %9 %137 
					                                         f32 %204 = OpLoad %203 
					                                         f32 %205 = OpFMul %202 %204 
					                                         f32 %206 = OpLoad %195 
					                                         f32 %207 = OpFNegate %206 
					                                         f32 %208 = OpFAdd %205 %207 
					                                                      OpStore %195 %208 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 1 2 2 0 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_4 %213 = OpVectorShuffle %212 %212 0 1 2 2 
					                                       f32_4 %214 = OpFMul %211 %213 
					                                                      OpStore %209 %214 
					                              Uniform f32_4* %217 = OpAccessChain %22 %25 
					                                       f32_4 %218 = OpLoad %217 
					                                       f32_4 %219 = OpLoad %209 
					                                         f32 %220 = OpDot %218 %219 
					                                Private f32* %221 = OpAccessChain %216 %137 
					                                                      OpStore %221 %220 
					                              Uniform f32_4* %222 = OpAccessChain %22 %38 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_4 %224 = OpLoad %209 
					                                         f32 %225 = OpDot %223 %224 
					                                Private f32* %226 = OpAccessChain %216 %84 
					                                                      OpStore %226 %225 
					                              Uniform f32_4* %227 = OpAccessChain %22 %48 
					                                       f32_4 %228 = OpLoad %227 
					                                       f32_4 %229 = OpLoad %209 
					                                         f32 %230 = OpDot %228 %229 
					                                Private f32* %231 = OpAccessChain %216 %151 
					                                                      OpStore %231 %230 
					                              Uniform f32_4* %234 = OpAccessChain %22 %233 
					                                       f32_4 %235 = OpLoad %234 
					                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
					                                         f32 %237 = OpLoad %195 
					                                       f32_3 %238 = OpCompositeConstruct %237 %237 %237 
					                                       f32_3 %239 = OpFMul %236 %238 
					                                       f32_3 %240 = OpLoad %216 
					                                       f32_3 %241 = OpFAdd %239 %240 
					                                                      OpStore %232 %241 
					                                                      OpStore %242 %243 
					                                 Output f32* %245 = OpAccessChain %88 %30 %84 
					                                         f32 %246 = OpLoad %245 
					                                         f32 %247 = OpFNegate %246 
					                                 Output f32* %248 = OpAccessChain %88 %30 %84 
					                                                      OpStore %248 %247 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 324
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %50 %76 %187 %300 %312 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %22 RelaxedPrecision 
					                                                      OpMemberDecorate %23 0 Offset 23 
					                                                      OpMemberDecorate %23 1 RelaxedPrecision 
					                                                      OpMemberDecorate %23 1 Offset 23 
					                                                      OpMemberDecorate %23 2 RelaxedPrecision 
					                                                      OpMemberDecorate %23 2 Offset 23 
					                                                      OpMemberDecorate %23 3 RelaxedPrecision 
					                                                      OpMemberDecorate %23 3 Offset 23 
					                                                      OpMemberDecorate %23 4 RelaxedPrecision 
					                                                      OpMemberDecorate %23 4 Offset 23 
					                                                      OpMemberDecorate %23 5 RelaxedPrecision 
					                                                      OpMemberDecorate %23 5 Offset 23 
					                                                      OpMemberDecorate %23 6 RelaxedPrecision 
					                                                      OpMemberDecorate %23 6 Offset 23 
					                                                      OpMemberDecorate %23 7 RelaxedPrecision 
					                                                      OpMemberDecorate %23 7 Offset 23 
					                                                      OpMemberDecorate %23 8 RelaxedPrecision 
					                                                      OpMemberDecorate %23 8 Offset 23 
					                                                      OpMemberDecorate %23 9 RelaxedPrecision 
					                                                      OpMemberDecorate %23 9 Offset 23 
					                                                      OpMemberDecorate %23 10 Offset 23 
					                                                      OpMemberDecorate %23 11 Offset 23 
					                                                      OpMemberDecorate %23 12 Offset 23 
					                                                      OpMemberDecorate %23 13 Offset 23 
					                                                      OpMemberDecorate %23 14 RelaxedPrecision 
					                                                      OpMemberDecorate %23 14 Offset 23 
					                                                      OpDecorate %23 Block 
					                                                      OpDecorate %25 DescriptorSet 25 
					                                                      OpDecorate %25 Binding 25 
					                                                      OpDecorate %30 RelaxedPrecision 
					                                                      OpDecorate %37 RelaxedPrecision 
					                                                      OpDecorate %44 RelaxedPrecision 
					                                                      OpDecorate %49 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %50 Location 50 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %52 RelaxedPrecision 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %56 RelaxedPrecision 
					                                                      OpDecorate %57 RelaxedPrecision 
					                                                      OpDecorate %58 RelaxedPrecision 
					                                                      OpDecorate %59 RelaxedPrecision 
					                                                      OpDecorate %60 RelaxedPrecision 
					                                                      OpDecorate %63 RelaxedPrecision 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %72 RelaxedPrecision 
					                                                      OpDecorate %73 RelaxedPrecision 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %76 Location 76 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %102 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %151 RelaxedPrecision 
					                                                      OpDecorate %153 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %161 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %171 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %173 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %180 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 DescriptorSet 184 
					                                                      OpDecorate %184 Binding 184 
					                                                      OpDecorate %185 RelaxedPrecision 
					                                                      OpDecorate %187 Location 187 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %205 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %250 RelaxedPrecision 
					                                                      OpDecorate %251 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %254 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %267 RelaxedPrecision 
					                                                      OpDecorate %268 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %279 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %294 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %298 DescriptorSet 298 
					                                                      OpDecorate %298 Binding 298 
					                                                      OpDecorate %299 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %300 Location 300 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %305 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %310 RelaxedPrecision 
					                                                      OpDecorate %312 RelaxedPrecision 
					                                                      OpDecorate %312 Location 312 
					                                                      OpDecorate %313 RelaxedPrecision 
					                                                      OpDecorate %317 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                          f32 %16 = OpConstant 3.674022E-40 
					                                              %17 = OpTypeInt 32 0 
					                                          u32 %18 = OpConstant 3 
					                                              %19 = OpTypePointer Private %6 
					                                              %21 = OpTypePointer Private %10 
					                               Private f32_3* %22 = OpVariable Private 
					                                              %23 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %7 
					                                              %24 = OpTypePointer Uniform %23 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %25 = OpVariable Uniform 
					                                              %26 = OpTypeInt 32 1 
					                                          i32 %27 = OpConstant 2 
					                                              %28 = OpTypePointer Uniform %7 
					                                          u32 %33 = OpConstant 0 
					                                          i32 %35 = OpConstant 3 
					                                          u32 %40 = OpConstant 1 
					                                          i32 %42 = OpConstant 4 
					                                          u32 %47 = OpConstant 2 
					                                 Input f32_3* %50 = OpVariable Input 
					                                          f32 %54 = OpConstant 3.674022E-40 
					                                        f32_3 %55 = OpConstantComposite %54 %54 %54 
					                               Private f32_3* %57 = OpVariable Private 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                        f32_3 %62 = OpConstantComposite %61 %61 %61 
					                                          f32 %67 = OpConstant 3.674022E-40 
					                                        f32_3 %68 = OpConstantComposite %67 %67 %67 
					                                          f32 %70 = OpConstant 3.674022E-40 
					                                        f32_3 %71 = OpConstantComposite %70 %70 %70 
					                               Private f32_4* %75 = OpVariable Private 
					                                 Input f32_3* %76 = OpVariable Input 
					                                          i32 %79 = OpConstant 0 
					                                              %80 = OpTypePointer Uniform %10 
					                                 Private f32* %86 = OpVariable Private 
					                                          i32 %99 = OpConstant 1 
					                                Private f32* %117 = OpVariable Private 
					                                Private f32* %121 = OpVariable Private 
					                                             %125 = OpTypeVector %6 2 
					                                         i32 %127 = OpConstant 12 
					                                             %128 = OpTypePointer Uniform %6 
					                                         i32 %131 = OpConstant 10 
					                                         i32 %163 = OpConstant 9 
					                                         f32 %166 = OpConstant 3.674022E-40 
					                                Private f32* %180 = OpVariable Private 
					                                             %181 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %182 = OpTypeSampledImage %181 
					                                             %183 = OpTypePointer UniformConstant %182 
					 UniformConstant read_only Texture2DSampled* %184 = OpVariable UniformConstant 
					                                             %186 = OpTypePointer Input %125 
					                                Input f32_2* %187 = OpVariable Input 
					                                Private f32* %196 = OpVariable Private 
					                                         i32 %199 = OpConstant 11 
					                                         i32 %203 = OpConstant 6 
					                                         i32 %210 = OpConstant 5 
					                              Private f32_3* %218 = OpVariable Private 
					                              Private f32_3* %233 = OpVariable Private 
					                                         i32 %236 = OpConstant 14 
					                              Private f32_3* %241 = OpVariable Private 
					                                         i32 %243 = OpConstant 13 
					                                         i32 %265 = OpConstant 7 
					                              Private f32_3* %294 = OpVariable Private 
					                                             %295 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %296 = OpTypeSampledImage %295 
					                                             %297 = OpTypePointer UniformConstant %296 
					UniformConstant read_only TextureCubeSampled* %298 = OpVariable UniformConstant 
					                                Input f32_3* %300 = OpVariable Input 
					                              Private f32_3* %304 = OpVariable Private 
					                                         i32 %306 = OpConstant 8 
					                                             %311 = OpTypePointer Output %7 
					                               Output f32_4* %312 = OpVariable Output 
					                                             %321 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_4 %14 = OpLoad %9 
					                                        f32_4 %15 = OpVectorShuffle %14 %13 4 5 6 3 
					                                                      OpStore %9 %15 
					                                 Private f32* %20 = OpAccessChain %9 %18 
					                                                      OpStore %20 %16 
					                               Uniform f32_4* %29 = OpAccessChain %25 %27 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %9 
					                                          f32 %32 = OpDot %30 %31 
					                                 Private f32* %34 = OpAccessChain %22 %33 
					                                                      OpStore %34 %32 
					                               Uniform f32_4* %36 = OpAccessChain %25 %35 
					                                        f32_4 %37 = OpLoad %36 
					                                        f32_4 %38 = OpLoad %9 
					                                          f32 %39 = OpDot %37 %38 
					                                 Private f32* %41 = OpAccessChain %22 %40 
					                                                      OpStore %41 %39 
					                               Uniform f32_4* %43 = OpAccessChain %25 %42 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_4 %45 = OpLoad %9 
					                                          f32 %46 = OpDot %44 %45 
					                                 Private f32* %48 = OpAccessChain %22 %47 
					                                                      OpStore %48 %46 
					                                        f32_3 %49 = OpLoad %22 
					                                        f32_3 %51 = OpLoad %50 
					                                        f32_3 %52 = OpFAdd %49 %51 
					                                                      OpStore %22 %52 
					                                        f32_3 %53 = OpLoad %22 
					                                        f32_3 %56 = OpExtInst %1 40 %53 %55 
					                                                      OpStore %22 %56 
					                                        f32_3 %58 = OpLoad %22 
					                                        f32_3 %59 = OpExtInst %1 30 %58 
					                                                      OpStore %57 %59 
					                                        f32_3 %60 = OpLoad %57 
					                                        f32_3 %63 = OpFMul %60 %62 
					                                                      OpStore %57 %63 
					                                        f32_3 %64 = OpLoad %57 
					                                        f32_3 %65 = OpExtInst %1 29 %64 
					                                                      OpStore %57 %65 
					                                        f32_3 %66 = OpLoad %57 
					                                        f32_3 %69 = OpFMul %66 %68 
					                                        f32_3 %72 = OpFAdd %69 %71 
					                                                      OpStore %57 %72 
					                                        f32_3 %73 = OpLoad %57 
					                                        f32_3 %74 = OpExtInst %1 40 %73 %55 
					                                                      OpStore %57 %74 
					                                        f32_3 %77 = OpLoad %76 
					                                        f32_3 %78 = OpFNegate %77 
					                               Uniform f32_3* %81 = OpAccessChain %25 %79 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %78 %82 
					                                        f32_4 %84 = OpLoad %75 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %75 %85 
					                                        f32_4 %87 = OpLoad %75 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                        f32_4 %89 = OpLoad %75 
					                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
					                                          f32 %91 = OpDot %88 %90 
					                                                      OpStore %86 %91 
					                                          f32 %92 = OpLoad %86 
					                                          f32 %93 = OpExtInst %1 32 %92 
					                                                      OpStore %86 %93 
					                                        f32_4 %94 = OpLoad %75 
					                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
					                                          f32 %96 = OpLoad %86 
					                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
					                                        f32_3 %98 = OpFMul %95 %97 
					                              Uniform f32_4* %100 = OpAccessChain %25 %99 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
					                                       f32_3 %103 = OpFAdd %98 %102 
					                                                      OpStore %22 %103 
					                                         f32 %104 = OpLoad %86 
					                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
					                                       f32_4 %106 = OpLoad %75 
					                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
					                                       f32_3 %108 = OpFMul %105 %107 
					                                       f32_4 %109 = OpLoad %75 
					                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
					                                                      OpStore %75 %110 
					                                       f32_4 %111 = OpLoad %75 
					                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
					                                       f32_3 %113 = OpLoad %12 
					                                         f32 %114 = OpDot %112 %113 
					                                                      OpStore %86 %114 
					                                         f32 %115 = OpLoad %86 
					                                         f32 %116 = OpExtInst %1 43 %115 %54 %16 
					                                                      OpStore %86 %116 
					                                         f32 %118 = OpLoad %86 
					                                         f32 %119 = OpFNegate %118 
					                                         f32 %120 = OpFAdd %119 %16 
					                                                      OpStore %117 %120 
					                                         f32 %122 = OpLoad %117 
					                                         f32 %123 = OpExtInst %1 30 %122 
					                                                      OpStore %121 %123 
					                                         f32 %124 = OpLoad %121 
					                                       f32_2 %126 = OpCompositeConstruct %124 %124 
					                                Uniform f32* %129 = OpAccessChain %25 %127 
					                                         f32 %130 = OpLoad %129 
					                                Uniform f32* %132 = OpAccessChain %25 %131 
					                                         f32 %133 = OpLoad %132 
					                                       f32_2 %134 = OpCompositeConstruct %130 %133 
					                                       f32_2 %135 = OpFMul %126 %134 
					                                       f32_4 %136 = OpLoad %75 
					                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 3 
					                                                      OpStore %75 %137 
					                                       f32_4 %138 = OpLoad %75 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
					                                       f32_2 %140 = OpExtInst %1 29 %139 
					                                       f32_4 %141 = OpLoad %75 
					                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
					                                                      OpStore %75 %142 
					                                       f32_3 %143 = OpLoad %22 
					                                       f32_3 %144 = OpLoad %22 
					                                         f32 %145 = OpDot %143 %144 
					                                                      OpStore %117 %145 
					                                         f32 %146 = OpLoad %117 
					                                         f32 %147 = OpExtInst %1 32 %146 
					                                                      OpStore %117 %147 
					                                         f32 %148 = OpLoad %117 
					                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
					                                       f32_3 %150 = OpLoad %22 
					                                       f32_3 %151 = OpFMul %149 %150 
					                                                      OpStore %22 %151 
					                                       f32_3 %152 = OpLoad %12 
					                                       f32_3 %153 = OpLoad %22 
					                                         f32 %154 = OpDot %152 %153 
					                                Private f32* %155 = OpAccessChain %22 %33 
					                                                      OpStore %155 %154 
					                                Private f32* %156 = OpAccessChain %22 %33 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpExtInst %1 40 %157 %54 
					                                Private f32* %159 = OpAccessChain %22 %33 
					                                                      OpStore %159 %158 
					                                Private f32* %160 = OpAccessChain %22 %33 
					                                         f32 %161 = OpLoad %160 
					                                         f32 %162 = OpExtInst %1 30 %161 
					                                                      OpStore %121 %162 
					                                Uniform f32* %164 = OpAccessChain %25 %163 
					                                         f32 %165 = OpLoad %164 
					                                         f32 %167 = OpFMul %165 %166 
					                                Private f32* %168 = OpAccessChain %22 %33 
					                                                      OpStore %168 %167 
					                                         f32 %169 = OpLoad %121 
					                                Private f32* %170 = OpAccessChain %22 %33 
					                                         f32 %171 = OpLoad %170 
					                                         f32 %172 = OpFMul %169 %171 
					                                                      OpStore %121 %172 
					                                         f32 %173 = OpLoad %121 
					                                         f32 %174 = OpExtInst %1 29 %173 
					                                                      OpStore %121 %174 
					                                Private f32* %175 = OpAccessChain %75 %33 
					                                         f32 %176 = OpLoad %175 
					                                         f32 %177 = OpFNegate %176 
					                                         f32 %178 = OpFAdd %177 %16 
					                                Private f32* %179 = OpAccessChain %22 %33 
					                                                      OpStore %179 %178 
					                  read_only Texture2DSampled %185 = OpLoad %184 
					                                       f32_2 %188 = OpLoad %187 
					                                       f32_4 %189 = OpImageSampleImplicitLod %185 %188 
					                                         f32 %190 = OpCompositeExtract %189 3 
					                                                      OpStore %180 %190 
					                                Private f32* %191 = OpAccessChain %22 %33 
					                                         f32 %192 = OpLoad %191 
					                                         f32 %193 = OpLoad %180 
					                                         f32 %194 = OpFMul %192 %193 
					                                Private f32* %195 = OpAccessChain %22 %33 
					                                                      OpStore %195 %194 
					                                Private f32* %197 = OpAccessChain %22 %33 
					                                         f32 %198 = OpLoad %197 
					                                Uniform f32* %200 = OpAccessChain %25 %199 
					                                         f32 %201 = OpLoad %200 
					                                         f32 %202 = OpFMul %198 %201 
					                                Uniform f32* %204 = OpAccessChain %25 %203 %18 
					                                         f32 %205 = OpLoad %204 
					                                         f32 %206 = OpFAdd %202 %205 
					                                                      OpStore %196 %206 
					                                         f32 %207 = OpLoad %121 
					                                         f32 %208 = OpLoad %196 
					                                         f32 %209 = OpFMul %207 %208 
					                                                      OpStore %86 %209 
					                              Uniform f32_4* %211 = OpAccessChain %25 %210 
					                                       f32_4 %212 = OpLoad %211 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                              Uniform f32_4* %214 = OpAccessChain %25 %203 
					                                       f32_4 %215 = OpLoad %214 
					                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
					                                       f32_3 %217 = OpFMul %213 %216 
					                                                      OpStore %22 %217 
					                                         f32 %219 = OpLoad %86 
					                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
					                                       f32_3 %221 = OpLoad %22 
					                                       f32_3 %222 = OpFMul %220 %221 
					                                                      OpStore %218 %222 
					                                       f32_3 %223 = OpLoad %12 
					                              Uniform f32_4* %224 = OpAccessChain %25 %99 
					                                       f32_4 %225 = OpLoad %224 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                         f32 %227 = OpDot %223 %226 
					                                Private f32* %228 = OpAccessChain %22 %33 
					                                                      OpStore %228 %227 
					                                Private f32* %229 = OpAccessChain %22 %33 
					                                         f32 %230 = OpLoad %229 
					                                         f32 %231 = OpExtInst %1 40 %230 %54 
					                                Private f32* %232 = OpAccessChain %22 %33 
					                                                      OpStore %232 %231 
					                                       f32_4 %234 = OpLoad %75 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
					                              Uniform f32_4* %237 = OpAccessChain %25 %236 
					                                       f32_4 %238 = OpLoad %237 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                       f32_3 %240 = OpFMul %235 %239 
					                                                      OpStore %233 %240 
					                                       f32_3 %242 = OpLoad %233 
					                                Uniform f32* %244 = OpAccessChain %25 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %246 = OpAccessChain %25 %243 
					                                         f32 %247 = OpLoad %246 
					                                Uniform f32* %248 = OpAccessChain %25 %243 
					                                         f32 %249 = OpLoad %248 
					                                       f32_3 %250 = OpCompositeConstruct %245 %247 %249 
					                                         f32 %251 = OpCompositeExtract %250 0 
					                                         f32 %252 = OpCompositeExtract %250 1 
					                                         f32 %253 = OpCompositeExtract %250 2 
					                                       f32_3 %254 = OpCompositeConstruct %251 %252 %253 
					                                       f32_3 %255 = OpFMul %242 %254 
					                                                      OpStore %241 %255 
					                                Private f32* %256 = OpAccessChain %75 %33 
					                                         f32 %257 = OpLoad %256 
					                                         f32 %258 = OpFNegate %257 
					                                Uniform f32* %259 = OpAccessChain %25 %243 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpFMul %258 %260 
					                                         f32 %262 = OpFAdd %261 %16 
					                                                      OpStore %86 %262 
					                                         f32 %263 = OpLoad %86 
					                                         f32 %264 = OpExtInst %1 43 %263 %54 %16 
					                                                      OpStore %86 %264 
					                              Uniform f32_4* %266 = OpAccessChain %25 %265 
					                                       f32_4 %267 = OpLoad %266 
					                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
					                                         f32 %269 = OpLoad %86 
					                                       f32_3 %270 = OpCompositeConstruct %269 %269 %269 
					                                       f32_3 %271 = OpFMul %268 %270 
					                                       f32_3 %272 = OpLoad %241 
					                                       f32_3 %273 = OpFAdd %271 %272 
					                                       f32_4 %274 = OpLoad %75 
					                                       f32_4 %275 = OpVectorShuffle %274 %273 4 1 5 6 
					                                                      OpStore %75 %275 
					                                       f32_4 %276 = OpLoad %75 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 2 3 
					                              Uniform f32_4* %278 = OpAccessChain %25 %210 
					                                       f32_4 %279 = OpLoad %278 
					                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
					                                       f32_3 %281 = OpFMul %277 %280 
					                                                      OpStore %233 %281 
					                                       f32_3 %282 = OpLoad %233 
					                                       f32_3 %283 = OpLoad %22 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
					                                       f32_3 %285 = OpFMul %282 %284 
					                                       f32_3 %286 = OpLoad %218 
					                                       f32_3 %287 = OpFAdd %285 %286 
					                                                      OpStore %218 %287 
					                                       f32_4 %288 = OpLoad %75 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 0 2 3 
					                                       f32_3 %290 = OpLoad %57 
					                                       f32_3 %291 = OpFMul %289 %290 
					                                       f32_3 %292 = OpLoad %218 
					                                       f32_3 %293 = OpFAdd %291 %292 
					                                                      OpStore %22 %293 
					                read_only TextureCubeSampled %299 = OpLoad %298 
					                                       f32_3 %301 = OpLoad %300 
					                                       f32_4 %302 = OpImageSampleImplicitLod %299 %301 
					                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
					                                                      OpStore %294 %303 
					                                       f32_3 %305 = OpLoad %294 
					                              Uniform f32_4* %307 = OpAccessChain %25 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %305 %309 
					                                                      OpStore %304 %310 
					                                       f32_3 %313 = OpLoad %304 
					                                       f32_4 %314 = OpLoad %75 
					                                       f32_3 %315 = OpVectorShuffle %314 %314 1 1 1 
					                                       f32_3 %316 = OpFMul %313 %315 
					                                       f32_3 %317 = OpLoad %22 
					                                       f32_3 %318 = OpFAdd %316 %317 
					                                       f32_4 %319 = OpLoad %312 
					                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
					                                                      OpStore %312 %320 
					                                 Output f32* %322 = OpAccessChain %312 %18 
					                                                      OpStore %322 %16 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 250
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %113 %126 %130 %189 %192 %232 %242 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate %100 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %126 Location 126 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %192 Location 192 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %232 Location 232 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 Location 242 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 5 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                               Output f32_2* %100 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                               Output f32_2* %113 = OpVariable Output 
					                                         f32 %114 = OpConstant 3.674022E-40 
					                                       f32_2 %115 = OpConstantComposite %114 %114 
					                                             %119 = OpTypePointer Uniform %14 
					                                             %125 = OpTypePointer Output %14 
					                               Output f32_3* %126 = OpVariable Output 
					                                             %129 = OpTypePointer Input %14 
					                                Input f32_3* %130 = OpVariable Input 
					                                         i32 %132 = OpConstant 6 
					                                         u32 %137 = OpConstant 0 
					                                             %138 = OpTypePointer Private %6 
					                                         u32 %151 = OpConstant 2 
					                                Private f32* %153 = OpVariable Private 
					                               Output f32_3* %189 = OpVariable Output 
					                               Output f32_3* %192 = OpVariable Output 
					                                Private f32* %195 = OpVariable Private 
					                              Private f32_4* %209 = OpVariable Private 
					                                             %215 = OpTypePointer Private %14 
					                              Private f32_3* %216 = OpVariable Private 
					                               Output f32_3* %232 = OpVariable Output 
					                                         i32 %233 = OpConstant 4 
					                               Output f32_4* %242 = OpVariable Output 
					                                       f32_4 %243 = OpConstantComposite %114 %114 %114 %114 
					                                             %244 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %22 %66 %48 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %46 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %30 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %22 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %22 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore %100 %112 
					                                                      OpStore %113 %115 
					                                       f32_4 %116 = OpLoad %9 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                       f32_3 %118 = OpFNegate %117 
					                              Uniform f32_3* %120 = OpAccessChain %22 %30 
					                                       f32_3 %121 = OpLoad %120 
					                                       f32_3 %122 = OpFAdd %118 %121 
					                                       f32_4 %123 = OpLoad %46 
					                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
					                                                      OpStore %46 %124 
					                                       f32_4 %127 = OpLoad %9 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                                      OpStore %126 %128 
					                                       f32_3 %131 = OpLoad %130 
					                              Uniform f32_4* %133 = OpAccessChain %22 %132 %30 
					                                       f32_4 %134 = OpLoad %133 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %131 %135 
					                                Private f32* %139 = OpAccessChain %9 %137 
					                                                      OpStore %139 %136 
					                                       f32_3 %140 = OpLoad %130 
					                              Uniform f32_4* %141 = OpAccessChain %22 %132 %25 
					                                       f32_4 %142 = OpLoad %141 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %140 %143 
					                                Private f32* %145 = OpAccessChain %9 %84 
					                                                      OpStore %145 %144 
					                                       f32_3 %146 = OpLoad %130 
					                              Uniform f32_4* %147 = OpAccessChain %22 %132 %38 
					                                       f32_4 %148 = OpLoad %147 
					                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
					                                         f32 %150 = OpDot %146 %149 
					                                Private f32* %152 = OpAccessChain %9 %151 
					                                                      OpStore %152 %150 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                       f32_4 %156 = OpLoad %9 
					                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
					                                         f32 %158 = OpDot %155 %157 
					                                                      OpStore %153 %158 
					                                         f32 %159 = OpLoad %153 
					                                         f32 %160 = OpExtInst %1 32 %159 
					                                                      OpStore %153 %160 
					                                         f32 %161 = OpLoad %153 
					                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFMul %162 %164 
					                                       f32_4 %166 = OpLoad %9 
					                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
					                                                      OpStore %9 %167 
					                                       f32_4 %168 = OpLoad %46 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFNegate %169 
					                                       f32_4 %171 = OpLoad %9 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %170 %172 
					                                                      OpStore %153 %173 
					                                         f32 %174 = OpLoad %153 
					                                         f32 %175 = OpLoad %153 
					                                         f32 %176 = OpFAdd %174 %175 
					                                                      OpStore %153 %176 
					                                       f32_4 %177 = OpLoad %9 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpLoad %153 
					                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
					                                       f32_3 %181 = OpFNegate %180 
					                                       f32_3 %182 = OpFMul %178 %181 
					                                       f32_4 %183 = OpLoad %46 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                       f32_3 %185 = OpFNegate %184 
					                                       f32_3 %186 = OpFAdd %182 %185 
					                                       f32_4 %187 = OpLoad %46 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %46 %188 
					                                       f32_4 %190 = OpLoad %46 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                                      OpStore %189 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                                      OpStore %192 %194 
					                                Private f32* %196 = OpAccessChain %9 %84 
					                                         f32 %197 = OpLoad %196 
					                                Private f32* %198 = OpAccessChain %9 %84 
					                                         f32 %199 = OpLoad %198 
					                                         f32 %200 = OpFMul %197 %199 
					                                                      OpStore %195 %200 
					                                Private f32* %201 = OpAccessChain %9 %137 
					                                         f32 %202 = OpLoad %201 
					                                Private f32* %203 = OpAccessChain %9 %137 
					                                         f32 %204 = OpLoad %203 
					                                         f32 %205 = OpFMul %202 %204 
					                                         f32 %206 = OpLoad %195 
					                                         f32 %207 = OpFNegate %206 
					                                         f32 %208 = OpFAdd %205 %207 
					                                                      OpStore %195 %208 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 1 2 2 0 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_4 %213 = OpVectorShuffle %212 %212 0 1 2 2 
					                                       f32_4 %214 = OpFMul %211 %213 
					                                                      OpStore %209 %214 
					                              Uniform f32_4* %217 = OpAccessChain %22 %25 
					                                       f32_4 %218 = OpLoad %217 
					                                       f32_4 %219 = OpLoad %209 
					                                         f32 %220 = OpDot %218 %219 
					                                Private f32* %221 = OpAccessChain %216 %137 
					                                                      OpStore %221 %220 
					                              Uniform f32_4* %222 = OpAccessChain %22 %38 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_4 %224 = OpLoad %209 
					                                         f32 %225 = OpDot %223 %224 
					                                Private f32* %226 = OpAccessChain %216 %84 
					                                                      OpStore %226 %225 
					                              Uniform f32_4* %227 = OpAccessChain %22 %48 
					                                       f32_4 %228 = OpLoad %227 
					                                       f32_4 %229 = OpLoad %209 
					                                         f32 %230 = OpDot %228 %229 
					                                Private f32* %231 = OpAccessChain %216 %151 
					                                                      OpStore %231 %230 
					                              Uniform f32_4* %234 = OpAccessChain %22 %233 
					                                       f32_4 %235 = OpLoad %234 
					                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
					                                         f32 %237 = OpLoad %195 
					                                       f32_3 %238 = OpCompositeConstruct %237 %237 %237 
					                                       f32_3 %239 = OpFMul %236 %238 
					                                       f32_3 %240 = OpLoad %216 
					                                       f32_3 %241 = OpFAdd %239 %240 
					                                                      OpStore %232 %241 
					                                                      OpStore %242 %243 
					                                 Output f32* %245 = OpAccessChain %88 %30 %84 
					                                         f32 %246 = OpLoad %245 
					                                         f32 %247 = OpFNegate %246 
					                                 Output f32* %248 = OpAccessChain %88 %30 %84 
					                                                      OpStore %248 %247 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 324
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %50 %76 %187 %300 %312 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %22 RelaxedPrecision 
					                                                      OpMemberDecorate %23 0 Offset 23 
					                                                      OpMemberDecorate %23 1 RelaxedPrecision 
					                                                      OpMemberDecorate %23 1 Offset 23 
					                                                      OpMemberDecorate %23 2 RelaxedPrecision 
					                                                      OpMemberDecorate %23 2 Offset 23 
					                                                      OpMemberDecorate %23 3 RelaxedPrecision 
					                                                      OpMemberDecorate %23 3 Offset 23 
					                                                      OpMemberDecorate %23 4 RelaxedPrecision 
					                                                      OpMemberDecorate %23 4 Offset 23 
					                                                      OpMemberDecorate %23 5 RelaxedPrecision 
					                                                      OpMemberDecorate %23 5 Offset 23 
					                                                      OpMemberDecorate %23 6 RelaxedPrecision 
					                                                      OpMemberDecorate %23 6 Offset 23 
					                                                      OpMemberDecorate %23 7 RelaxedPrecision 
					                                                      OpMemberDecorate %23 7 Offset 23 
					                                                      OpMemberDecorate %23 8 RelaxedPrecision 
					                                                      OpMemberDecorate %23 8 Offset 23 
					                                                      OpMemberDecorate %23 9 RelaxedPrecision 
					                                                      OpMemberDecorate %23 9 Offset 23 
					                                                      OpMemberDecorate %23 10 Offset 23 
					                                                      OpMemberDecorate %23 11 Offset 23 
					                                                      OpMemberDecorate %23 12 Offset 23 
					                                                      OpMemberDecorate %23 13 Offset 23 
					                                                      OpMemberDecorate %23 14 RelaxedPrecision 
					                                                      OpMemberDecorate %23 14 Offset 23 
					                                                      OpDecorate %23 Block 
					                                                      OpDecorate %25 DescriptorSet 25 
					                                                      OpDecorate %25 Binding 25 
					                                                      OpDecorate %30 RelaxedPrecision 
					                                                      OpDecorate %37 RelaxedPrecision 
					                                                      OpDecorate %44 RelaxedPrecision 
					                                                      OpDecorate %49 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %50 Location 50 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %52 RelaxedPrecision 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %56 RelaxedPrecision 
					                                                      OpDecorate %57 RelaxedPrecision 
					                                                      OpDecorate %58 RelaxedPrecision 
					                                                      OpDecorate %59 RelaxedPrecision 
					                                                      OpDecorate %60 RelaxedPrecision 
					                                                      OpDecorate %63 RelaxedPrecision 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %72 RelaxedPrecision 
					                                                      OpDecorate %73 RelaxedPrecision 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %76 Location 76 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %102 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %151 RelaxedPrecision 
					                                                      OpDecorate %153 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %161 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %171 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %173 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %180 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 DescriptorSet 184 
					                                                      OpDecorate %184 Binding 184 
					                                                      OpDecorate %185 RelaxedPrecision 
					                                                      OpDecorate %187 Location 187 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %205 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %250 RelaxedPrecision 
					                                                      OpDecorate %251 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %254 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %267 RelaxedPrecision 
					                                                      OpDecorate %268 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %279 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %294 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %298 DescriptorSet 298 
					                                                      OpDecorate %298 Binding 298 
					                                                      OpDecorate %299 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %300 Location 300 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %305 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %310 RelaxedPrecision 
					                                                      OpDecorate %312 RelaxedPrecision 
					                                                      OpDecorate %312 Location 312 
					                                                      OpDecorate %313 RelaxedPrecision 
					                                                      OpDecorate %317 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                          f32 %16 = OpConstant 3.674022E-40 
					                                              %17 = OpTypeInt 32 0 
					                                          u32 %18 = OpConstant 3 
					                                              %19 = OpTypePointer Private %6 
					                                              %21 = OpTypePointer Private %10 
					                               Private f32_3* %22 = OpVariable Private 
					                                              %23 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %7 
					                                              %24 = OpTypePointer Uniform %23 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %25 = OpVariable Uniform 
					                                              %26 = OpTypeInt 32 1 
					                                          i32 %27 = OpConstant 2 
					                                              %28 = OpTypePointer Uniform %7 
					                                          u32 %33 = OpConstant 0 
					                                          i32 %35 = OpConstant 3 
					                                          u32 %40 = OpConstant 1 
					                                          i32 %42 = OpConstant 4 
					                                          u32 %47 = OpConstant 2 
					                                 Input f32_3* %50 = OpVariable Input 
					                                          f32 %54 = OpConstant 3.674022E-40 
					                                        f32_3 %55 = OpConstantComposite %54 %54 %54 
					                               Private f32_3* %57 = OpVariable Private 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                        f32_3 %62 = OpConstantComposite %61 %61 %61 
					                                          f32 %67 = OpConstant 3.674022E-40 
					                                        f32_3 %68 = OpConstantComposite %67 %67 %67 
					                                          f32 %70 = OpConstant 3.674022E-40 
					                                        f32_3 %71 = OpConstantComposite %70 %70 %70 
					                               Private f32_4* %75 = OpVariable Private 
					                                 Input f32_3* %76 = OpVariable Input 
					                                          i32 %79 = OpConstant 0 
					                                              %80 = OpTypePointer Uniform %10 
					                                 Private f32* %86 = OpVariable Private 
					                                          i32 %99 = OpConstant 1 
					                                Private f32* %117 = OpVariable Private 
					                                Private f32* %121 = OpVariable Private 
					                                             %125 = OpTypeVector %6 2 
					                                         i32 %127 = OpConstant 12 
					                                             %128 = OpTypePointer Uniform %6 
					                                         i32 %131 = OpConstant 10 
					                                         i32 %163 = OpConstant 9 
					                                         f32 %166 = OpConstant 3.674022E-40 
					                                Private f32* %180 = OpVariable Private 
					                                             %181 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %182 = OpTypeSampledImage %181 
					                                             %183 = OpTypePointer UniformConstant %182 
					 UniformConstant read_only Texture2DSampled* %184 = OpVariable UniformConstant 
					                                             %186 = OpTypePointer Input %125 
					                                Input f32_2* %187 = OpVariable Input 
					                                Private f32* %196 = OpVariable Private 
					                                         i32 %199 = OpConstant 11 
					                                         i32 %203 = OpConstant 6 
					                                         i32 %210 = OpConstant 5 
					                              Private f32_3* %218 = OpVariable Private 
					                              Private f32_3* %233 = OpVariable Private 
					                                         i32 %236 = OpConstant 14 
					                              Private f32_3* %241 = OpVariable Private 
					                                         i32 %243 = OpConstant 13 
					                                         i32 %265 = OpConstant 7 
					                              Private f32_3* %294 = OpVariable Private 
					                                             %295 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %296 = OpTypeSampledImage %295 
					                                             %297 = OpTypePointer UniformConstant %296 
					UniformConstant read_only TextureCubeSampled* %298 = OpVariable UniformConstant 
					                                Input f32_3* %300 = OpVariable Input 
					                              Private f32_3* %304 = OpVariable Private 
					                                         i32 %306 = OpConstant 8 
					                                             %311 = OpTypePointer Output %7 
					                               Output f32_4* %312 = OpVariable Output 
					                                             %321 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_4 %14 = OpLoad %9 
					                                        f32_4 %15 = OpVectorShuffle %14 %13 4 5 6 3 
					                                                      OpStore %9 %15 
					                                 Private f32* %20 = OpAccessChain %9 %18 
					                                                      OpStore %20 %16 
					                               Uniform f32_4* %29 = OpAccessChain %25 %27 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %9 
					                                          f32 %32 = OpDot %30 %31 
					                                 Private f32* %34 = OpAccessChain %22 %33 
					                                                      OpStore %34 %32 
					                               Uniform f32_4* %36 = OpAccessChain %25 %35 
					                                        f32_4 %37 = OpLoad %36 
					                                        f32_4 %38 = OpLoad %9 
					                                          f32 %39 = OpDot %37 %38 
					                                 Private f32* %41 = OpAccessChain %22 %40 
					                                                      OpStore %41 %39 
					                               Uniform f32_4* %43 = OpAccessChain %25 %42 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_4 %45 = OpLoad %9 
					                                          f32 %46 = OpDot %44 %45 
					                                 Private f32* %48 = OpAccessChain %22 %47 
					                                                      OpStore %48 %46 
					                                        f32_3 %49 = OpLoad %22 
					                                        f32_3 %51 = OpLoad %50 
					                                        f32_3 %52 = OpFAdd %49 %51 
					                                                      OpStore %22 %52 
					                                        f32_3 %53 = OpLoad %22 
					                                        f32_3 %56 = OpExtInst %1 40 %53 %55 
					                                                      OpStore %22 %56 
					                                        f32_3 %58 = OpLoad %22 
					                                        f32_3 %59 = OpExtInst %1 30 %58 
					                                                      OpStore %57 %59 
					                                        f32_3 %60 = OpLoad %57 
					                                        f32_3 %63 = OpFMul %60 %62 
					                                                      OpStore %57 %63 
					                                        f32_3 %64 = OpLoad %57 
					                                        f32_3 %65 = OpExtInst %1 29 %64 
					                                                      OpStore %57 %65 
					                                        f32_3 %66 = OpLoad %57 
					                                        f32_3 %69 = OpFMul %66 %68 
					                                        f32_3 %72 = OpFAdd %69 %71 
					                                                      OpStore %57 %72 
					                                        f32_3 %73 = OpLoad %57 
					                                        f32_3 %74 = OpExtInst %1 40 %73 %55 
					                                                      OpStore %57 %74 
					                                        f32_3 %77 = OpLoad %76 
					                                        f32_3 %78 = OpFNegate %77 
					                               Uniform f32_3* %81 = OpAccessChain %25 %79 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %78 %82 
					                                        f32_4 %84 = OpLoad %75 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %75 %85 
					                                        f32_4 %87 = OpLoad %75 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                        f32_4 %89 = OpLoad %75 
					                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
					                                          f32 %91 = OpDot %88 %90 
					                                                      OpStore %86 %91 
					                                          f32 %92 = OpLoad %86 
					                                          f32 %93 = OpExtInst %1 32 %92 
					                                                      OpStore %86 %93 
					                                        f32_4 %94 = OpLoad %75 
					                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
					                                          f32 %96 = OpLoad %86 
					                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
					                                        f32_3 %98 = OpFMul %95 %97 
					                              Uniform f32_4* %100 = OpAccessChain %25 %99 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
					                                       f32_3 %103 = OpFAdd %98 %102 
					                                                      OpStore %22 %103 
					                                         f32 %104 = OpLoad %86 
					                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
					                                       f32_4 %106 = OpLoad %75 
					                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
					                                       f32_3 %108 = OpFMul %105 %107 
					                                       f32_4 %109 = OpLoad %75 
					                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
					                                                      OpStore %75 %110 
					                                       f32_4 %111 = OpLoad %75 
					                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
					                                       f32_3 %113 = OpLoad %12 
					                                         f32 %114 = OpDot %112 %113 
					                                                      OpStore %86 %114 
					                                         f32 %115 = OpLoad %86 
					                                         f32 %116 = OpExtInst %1 43 %115 %54 %16 
					                                                      OpStore %86 %116 
					                                         f32 %118 = OpLoad %86 
					                                         f32 %119 = OpFNegate %118 
					                                         f32 %120 = OpFAdd %119 %16 
					                                                      OpStore %117 %120 
					                                         f32 %122 = OpLoad %117 
					                                         f32 %123 = OpExtInst %1 30 %122 
					                                                      OpStore %121 %123 
					                                         f32 %124 = OpLoad %121 
					                                       f32_2 %126 = OpCompositeConstruct %124 %124 
					                                Uniform f32* %129 = OpAccessChain %25 %127 
					                                         f32 %130 = OpLoad %129 
					                                Uniform f32* %132 = OpAccessChain %25 %131 
					                                         f32 %133 = OpLoad %132 
					                                       f32_2 %134 = OpCompositeConstruct %130 %133 
					                                       f32_2 %135 = OpFMul %126 %134 
					                                       f32_4 %136 = OpLoad %75 
					                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 3 
					                                                      OpStore %75 %137 
					                                       f32_4 %138 = OpLoad %75 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
					                                       f32_2 %140 = OpExtInst %1 29 %139 
					                                       f32_4 %141 = OpLoad %75 
					                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
					                                                      OpStore %75 %142 
					                                       f32_3 %143 = OpLoad %22 
					                                       f32_3 %144 = OpLoad %22 
					                                         f32 %145 = OpDot %143 %144 
					                                                      OpStore %117 %145 
					                                         f32 %146 = OpLoad %117 
					                                         f32 %147 = OpExtInst %1 32 %146 
					                                                      OpStore %117 %147 
					                                         f32 %148 = OpLoad %117 
					                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
					                                       f32_3 %150 = OpLoad %22 
					                                       f32_3 %151 = OpFMul %149 %150 
					                                                      OpStore %22 %151 
					                                       f32_3 %152 = OpLoad %12 
					                                       f32_3 %153 = OpLoad %22 
					                                         f32 %154 = OpDot %152 %153 
					                                Private f32* %155 = OpAccessChain %22 %33 
					                                                      OpStore %155 %154 
					                                Private f32* %156 = OpAccessChain %22 %33 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpExtInst %1 40 %157 %54 
					                                Private f32* %159 = OpAccessChain %22 %33 
					                                                      OpStore %159 %158 
					                                Private f32* %160 = OpAccessChain %22 %33 
					                                         f32 %161 = OpLoad %160 
					                                         f32 %162 = OpExtInst %1 30 %161 
					                                                      OpStore %121 %162 
					                                Uniform f32* %164 = OpAccessChain %25 %163 
					                                         f32 %165 = OpLoad %164 
					                                         f32 %167 = OpFMul %165 %166 
					                                Private f32* %168 = OpAccessChain %22 %33 
					                                                      OpStore %168 %167 
					                                         f32 %169 = OpLoad %121 
					                                Private f32* %170 = OpAccessChain %22 %33 
					                                         f32 %171 = OpLoad %170 
					                                         f32 %172 = OpFMul %169 %171 
					                                                      OpStore %121 %172 
					                                         f32 %173 = OpLoad %121 
					                                         f32 %174 = OpExtInst %1 29 %173 
					                                                      OpStore %121 %174 
					                                Private f32* %175 = OpAccessChain %75 %33 
					                                         f32 %176 = OpLoad %175 
					                                         f32 %177 = OpFNegate %176 
					                                         f32 %178 = OpFAdd %177 %16 
					                                Private f32* %179 = OpAccessChain %22 %33 
					                                                      OpStore %179 %178 
					                  read_only Texture2DSampled %185 = OpLoad %184 
					                                       f32_2 %188 = OpLoad %187 
					                                       f32_4 %189 = OpImageSampleImplicitLod %185 %188 
					                                         f32 %190 = OpCompositeExtract %189 3 
					                                                      OpStore %180 %190 
					                                Private f32* %191 = OpAccessChain %22 %33 
					                                         f32 %192 = OpLoad %191 
					                                         f32 %193 = OpLoad %180 
					                                         f32 %194 = OpFMul %192 %193 
					                                Private f32* %195 = OpAccessChain %22 %33 
					                                                      OpStore %195 %194 
					                                Private f32* %197 = OpAccessChain %22 %33 
					                                         f32 %198 = OpLoad %197 
					                                Uniform f32* %200 = OpAccessChain %25 %199 
					                                         f32 %201 = OpLoad %200 
					                                         f32 %202 = OpFMul %198 %201 
					                                Uniform f32* %204 = OpAccessChain %25 %203 %18 
					                                         f32 %205 = OpLoad %204 
					                                         f32 %206 = OpFAdd %202 %205 
					                                                      OpStore %196 %206 
					                                         f32 %207 = OpLoad %121 
					                                         f32 %208 = OpLoad %196 
					                                         f32 %209 = OpFMul %207 %208 
					                                                      OpStore %86 %209 
					                              Uniform f32_4* %211 = OpAccessChain %25 %210 
					                                       f32_4 %212 = OpLoad %211 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                              Uniform f32_4* %214 = OpAccessChain %25 %203 
					                                       f32_4 %215 = OpLoad %214 
					                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
					                                       f32_3 %217 = OpFMul %213 %216 
					                                                      OpStore %22 %217 
					                                         f32 %219 = OpLoad %86 
					                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
					                                       f32_3 %221 = OpLoad %22 
					                                       f32_3 %222 = OpFMul %220 %221 
					                                                      OpStore %218 %222 
					                                       f32_3 %223 = OpLoad %12 
					                              Uniform f32_4* %224 = OpAccessChain %25 %99 
					                                       f32_4 %225 = OpLoad %224 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                         f32 %227 = OpDot %223 %226 
					                                Private f32* %228 = OpAccessChain %22 %33 
					                                                      OpStore %228 %227 
					                                Private f32* %229 = OpAccessChain %22 %33 
					                                         f32 %230 = OpLoad %229 
					                                         f32 %231 = OpExtInst %1 40 %230 %54 
					                                Private f32* %232 = OpAccessChain %22 %33 
					                                                      OpStore %232 %231 
					                                       f32_4 %234 = OpLoad %75 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
					                              Uniform f32_4* %237 = OpAccessChain %25 %236 
					                                       f32_4 %238 = OpLoad %237 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                       f32_3 %240 = OpFMul %235 %239 
					                                                      OpStore %233 %240 
					                                       f32_3 %242 = OpLoad %233 
					                                Uniform f32* %244 = OpAccessChain %25 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %246 = OpAccessChain %25 %243 
					                                         f32 %247 = OpLoad %246 
					                                Uniform f32* %248 = OpAccessChain %25 %243 
					                                         f32 %249 = OpLoad %248 
					                                       f32_3 %250 = OpCompositeConstruct %245 %247 %249 
					                                         f32 %251 = OpCompositeExtract %250 0 
					                                         f32 %252 = OpCompositeExtract %250 1 
					                                         f32 %253 = OpCompositeExtract %250 2 
					                                       f32_3 %254 = OpCompositeConstruct %251 %252 %253 
					                                       f32_3 %255 = OpFMul %242 %254 
					                                                      OpStore %241 %255 
					                                Private f32* %256 = OpAccessChain %75 %33 
					                                         f32 %257 = OpLoad %256 
					                                         f32 %258 = OpFNegate %257 
					                                Uniform f32* %259 = OpAccessChain %25 %243 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpFMul %258 %260 
					                                         f32 %262 = OpFAdd %261 %16 
					                                                      OpStore %86 %262 
					                                         f32 %263 = OpLoad %86 
					                                         f32 %264 = OpExtInst %1 43 %263 %54 %16 
					                                                      OpStore %86 %264 
					                              Uniform f32_4* %266 = OpAccessChain %25 %265 
					                                       f32_4 %267 = OpLoad %266 
					                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
					                                         f32 %269 = OpLoad %86 
					                                       f32_3 %270 = OpCompositeConstruct %269 %269 %269 
					                                       f32_3 %271 = OpFMul %268 %270 
					                                       f32_3 %272 = OpLoad %241 
					                                       f32_3 %273 = OpFAdd %271 %272 
					                                       f32_4 %274 = OpLoad %75 
					                                       f32_4 %275 = OpVectorShuffle %274 %273 4 1 5 6 
					                                                      OpStore %75 %275 
					                                       f32_4 %276 = OpLoad %75 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 2 3 
					                              Uniform f32_4* %278 = OpAccessChain %25 %210 
					                                       f32_4 %279 = OpLoad %278 
					                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
					                                       f32_3 %281 = OpFMul %277 %280 
					                                                      OpStore %233 %281 
					                                       f32_3 %282 = OpLoad %233 
					                                       f32_3 %283 = OpLoad %22 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
					                                       f32_3 %285 = OpFMul %282 %284 
					                                       f32_3 %286 = OpLoad %218 
					                                       f32_3 %287 = OpFAdd %285 %286 
					                                                      OpStore %218 %287 
					                                       f32_4 %288 = OpLoad %75 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 0 2 3 
					                                       f32_3 %290 = OpLoad %57 
					                                       f32_3 %291 = OpFMul %289 %290 
					                                       f32_3 %292 = OpLoad %218 
					                                       f32_3 %293 = OpFAdd %291 %292 
					                                                      OpStore %22 %293 
					                read_only TextureCubeSampled %299 = OpLoad %298 
					                                       f32_3 %301 = OpLoad %300 
					                                       f32_4 %302 = OpImageSampleImplicitLod %299 %301 
					                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
					                                                      OpStore %294 %303 
					                                       f32_3 %305 = OpLoad %294 
					                              Uniform f32_4* %307 = OpAccessChain %25 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %305 %309 
					                                                      OpStore %304 %310 
					                                       f32_3 %313 = OpLoad %304 
					                                       f32_4 %314 = OpLoad %75 
					                                       f32_3 %315 = OpVectorShuffle %314 %314 1 1 1 
					                                       f32_3 %316 = OpFMul %313 %315 
					                                       f32_3 %317 = OpLoad %22 
					                                       f32_3 %318 = OpFAdd %316 %317 
					                                       f32_4 %319 = OpLoad %312 
					                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
					                                                      OpStore %312 %320 
					                                 Output f32* %322 = OpAccessChain %312 %18 
					                                                      OpStore %322 %16 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec2 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec2 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  highp vec3 tmpvar_8;
					  highp vec3 I_9;
					  I_9 = (tmpvar_5 - _WorldSpaceCameraPos);
					  tmpvar_8 = (I_9 - (2.0 * (
					    dot (tmpvar_7, I_9)
					   * tmpvar_7)));
					  tmpvar_1 = tmpvar_8;
					  mediump vec3 normal_10;
					  normal_10 = tmpvar_7;
					  mediump vec3 x1_11;
					  mediump vec4 tmpvar_12;
					  tmpvar_12 = (normal_10.xyzz * normal_10.yzzx);
					  x1_11.x = dot (unity_SHBr, tmpvar_12);
					  x1_11.y = dot (unity_SHBg, tmpvar_12);
					  x1_11.z = dot (unity_SHBb, tmpvar_12);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_7;
					  xlv_TEXCOORD3 = tmpvar_5;
					  xlv_TEXCOORD4 = (x1_11 + (unity_SHC.xyz * (
					    (normal_10.x * normal_10.x)
					   - 
					    (normal_10.y * normal_10.y)
					  )));
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD7 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform highp sampler2D _ShadowMapTexture;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					void main ()
					{
					  mediump float tmpvar_1;
					  mediump vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp vec3 viewDir_7;
					  lowp vec3 lightDir_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  tmpvar_11 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = (_WorldSpaceCameraPos - xlv_TEXCOORD3);
					  tmpvar_12 = normalize(tmpvar_13);
					  viewDir_7 = tmpvar_12;
					  tmpvar_9 = xlv_TEXCOORD1;
					  tmpvar_10 = viewDir_7;
					  tmpvar_6 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_14;
					  lowp vec3 tmpvar_15;
					  lowp float tmpvar_16;
					  mediump float fres_17;
					  mediump float rim_18;
					  mediump float tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp (dot (normalize(tmpvar_10), tmpvar_6), 0.0, 1.0);
					  tmpvar_19 = tmpvar_20;
					  rim_18 = (1.0 - tmpvar_19);
					  fres_17 = rim_18;
					  highp float tmpvar_21;
					  tmpvar_21 = pow (rim_18, _RimAmt);
					  rim_18 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = pow (fres_17, _FresAmt);
					  fres_17 = tmpvar_22;
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((1.0 - (rim_18 * _RimPwr)), 0.0, 1.0);
					  tmpvar_14 = (_Color.xyz * tmpvar_23);
					  highp vec3 tmpvar_24;
					  tmpvar_24 = ((rim_18 * _RimColor) * _RimPwr).xyz;
					  tmpvar_14 = (tmpvar_14 + tmpvar_24);
					  tmpvar_16 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_18)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_25;
					  tmpvar_25 = textureCube (_Cube, tmpvar_9);
					  tmpvar_15 = ((tmpvar_25.xyz * _ReflectColor.xyz) * fres_17);
					  mediump float realtimeShadowAttenuation_26;
					  highp vec4 v_27;
					  v_27.x = unity_MatrixV[0].z;
					  v_27.y = unity_MatrixV[1].z;
					  v_27.z = unity_MatrixV[2].z;
					  v_27.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (xlv_TEXCOORD3 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_29;
					  highp float tmpvar_30;
					  tmpvar_30 = clamp (((
					    mix (dot (tmpvar_13, v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_29 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = xlv_TEXCOORD3;
					  lowp float tmpvar_32;
					  highp vec4 shadowCoord_33;
					  shadowCoord_33 = (unity_WorldToShadow[0] * tmpvar_31);
					  highp float lightShadowDataX_34;
					  mediump float tmpvar_35;
					  tmpvar_35 = _LightShadowData.x;
					  lightShadowDataX_34 = tmpvar_35;
					  highp float tmpvar_36;
					  tmpvar_36 = max (float((texture2D (_ShadowMapTexture, shadowCoord_33.xy).x > shadowCoord_33.z)), lightShadowDataX_34);
					  tmpvar_32 = tmpvar_36;
					  realtimeShadowAttenuation_26 = tmpvar_32;
					  mediump float tmpvar_37;
					  tmpvar_37 = clamp ((realtimeShadowAttenuation_26 + tmpvar_29), 0.0, 1.0);
					  atten_5 = tmpvar_37;
					  tmpvar_2 = _LightColor0.xyz;
					  tmpvar_3 = lightDir_8;
					  tmpvar_1 = atten_5;
					  mediump vec3 normalWorld_38;
					  normalWorld_38 = tmpvar_6;
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = (tmpvar_2 * tmpvar_1);
					  mediump vec4 tmpvar_40;
					  tmpvar_40.w = 1.0;
					  tmpvar_40.xyz = normalWorld_38;
					  mediump vec3 x_41;
					  x_41.x = dot (unity_SHAr, tmpvar_40);
					  x_41.y = dot (unity_SHAg, tmpvar_40);
					  x_41.z = dot (unity_SHAb, tmpvar_40);
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_41)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  tmpvar_2 = tmpvar_39;
					  mediump vec3 viewDir_43;
					  viewDir_43 = tmpvar_12;
					  lowp vec4 c_44;
					  lowp vec4 c_45;
					  highp float nh_46;
					  lowp float diff_47;
					  mediump float tmpvar_48;
					  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
					  diff_47 = tmpvar_48;
					  mediump float tmpvar_49;
					  tmpvar_49 = max (0.0, dot (tmpvar_6, normalize(
					    (tmpvar_3 + viewDir_43)
					  )));
					  nh_46 = tmpvar_49;
					  mediump float y_50;
					  y_50 = (_Shininess * 128.0);
					  highp float tmpvar_51;
					  tmpvar_51 = (pow (nh_46, y_50) * tmpvar_16);
					  c_45.xyz = (((tmpvar_14 * tmpvar_39) * diff_47) + ((tmpvar_39 * _SpecColor.xyz) * tmpvar_51));
					  c_45.w = (tmpvar_25.w * _ReflectColor.w);
					  c_44.w = c_45.w;
					  c_44.xyz = (c_45.xyz + (tmpvar_14 * tmpvar_42));
					  c_4.xyz = (c_44.xyz + tmpvar_15);
					  c_4.w = 1.0;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec2 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec2 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  highp vec3 tmpvar_8;
					  highp vec3 I_9;
					  I_9 = (tmpvar_5 - _WorldSpaceCameraPos);
					  tmpvar_8 = (I_9 - (2.0 * (
					    dot (tmpvar_7, I_9)
					   * tmpvar_7)));
					  tmpvar_1 = tmpvar_8;
					  mediump vec3 normal_10;
					  normal_10 = tmpvar_7;
					  mediump vec3 x1_11;
					  mediump vec4 tmpvar_12;
					  tmpvar_12 = (normal_10.xyzz * normal_10.yzzx);
					  x1_11.x = dot (unity_SHBr, tmpvar_12);
					  x1_11.y = dot (unity_SHBg, tmpvar_12);
					  x1_11.z = dot (unity_SHBb, tmpvar_12);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_7;
					  xlv_TEXCOORD3 = tmpvar_5;
					  xlv_TEXCOORD4 = (x1_11 + (unity_SHC.xyz * (
					    (normal_10.x * normal_10.x)
					   - 
					    (normal_10.y * normal_10.y)
					  )));
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD7 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform highp sampler2D _ShadowMapTexture;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					void main ()
					{
					  mediump float tmpvar_1;
					  mediump vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp vec3 viewDir_7;
					  lowp vec3 lightDir_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  tmpvar_11 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = (_WorldSpaceCameraPos - xlv_TEXCOORD3);
					  tmpvar_12 = normalize(tmpvar_13);
					  viewDir_7 = tmpvar_12;
					  tmpvar_9 = xlv_TEXCOORD1;
					  tmpvar_10 = viewDir_7;
					  tmpvar_6 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_14;
					  lowp vec3 tmpvar_15;
					  lowp float tmpvar_16;
					  mediump float fres_17;
					  mediump float rim_18;
					  mediump float tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp (dot (normalize(tmpvar_10), tmpvar_6), 0.0, 1.0);
					  tmpvar_19 = tmpvar_20;
					  rim_18 = (1.0 - tmpvar_19);
					  fres_17 = rim_18;
					  highp float tmpvar_21;
					  tmpvar_21 = pow (rim_18, _RimAmt);
					  rim_18 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = pow (fres_17, _FresAmt);
					  fres_17 = tmpvar_22;
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((1.0 - (rim_18 * _RimPwr)), 0.0, 1.0);
					  tmpvar_14 = (_Color.xyz * tmpvar_23);
					  highp vec3 tmpvar_24;
					  tmpvar_24 = ((rim_18 * _RimColor) * _RimPwr).xyz;
					  tmpvar_14 = (tmpvar_14 + tmpvar_24);
					  tmpvar_16 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_18)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_25;
					  tmpvar_25 = textureCube (_Cube, tmpvar_9);
					  tmpvar_15 = ((tmpvar_25.xyz * _ReflectColor.xyz) * fres_17);
					  mediump float realtimeShadowAttenuation_26;
					  highp vec4 v_27;
					  v_27.x = unity_MatrixV[0].z;
					  v_27.y = unity_MatrixV[1].z;
					  v_27.z = unity_MatrixV[2].z;
					  v_27.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (xlv_TEXCOORD3 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_29;
					  highp float tmpvar_30;
					  tmpvar_30 = clamp (((
					    mix (dot (tmpvar_13, v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_29 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = xlv_TEXCOORD3;
					  lowp float tmpvar_32;
					  highp vec4 shadowCoord_33;
					  shadowCoord_33 = (unity_WorldToShadow[0] * tmpvar_31);
					  highp float lightShadowDataX_34;
					  mediump float tmpvar_35;
					  tmpvar_35 = _LightShadowData.x;
					  lightShadowDataX_34 = tmpvar_35;
					  highp float tmpvar_36;
					  tmpvar_36 = max (float((texture2D (_ShadowMapTexture, shadowCoord_33.xy).x > shadowCoord_33.z)), lightShadowDataX_34);
					  tmpvar_32 = tmpvar_36;
					  realtimeShadowAttenuation_26 = tmpvar_32;
					  mediump float tmpvar_37;
					  tmpvar_37 = clamp ((realtimeShadowAttenuation_26 + tmpvar_29), 0.0, 1.0);
					  atten_5 = tmpvar_37;
					  tmpvar_2 = _LightColor0.xyz;
					  tmpvar_3 = lightDir_8;
					  tmpvar_1 = atten_5;
					  mediump vec3 normalWorld_38;
					  normalWorld_38 = tmpvar_6;
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = (tmpvar_2 * tmpvar_1);
					  mediump vec4 tmpvar_40;
					  tmpvar_40.w = 1.0;
					  tmpvar_40.xyz = normalWorld_38;
					  mediump vec3 x_41;
					  x_41.x = dot (unity_SHAr, tmpvar_40);
					  x_41.y = dot (unity_SHAg, tmpvar_40);
					  x_41.z = dot (unity_SHAb, tmpvar_40);
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_41)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  tmpvar_2 = tmpvar_39;
					  mediump vec3 viewDir_43;
					  viewDir_43 = tmpvar_12;
					  lowp vec4 c_44;
					  lowp vec4 c_45;
					  highp float nh_46;
					  lowp float diff_47;
					  mediump float tmpvar_48;
					  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
					  diff_47 = tmpvar_48;
					  mediump float tmpvar_49;
					  tmpvar_49 = max (0.0, dot (tmpvar_6, normalize(
					    (tmpvar_3 + viewDir_43)
					  )));
					  nh_46 = tmpvar_49;
					  mediump float y_50;
					  y_50 = (_Shininess * 128.0);
					  highp float tmpvar_51;
					  tmpvar_51 = (pow (nh_46, y_50) * tmpvar_16);
					  c_45.xyz = (((tmpvar_14 * tmpvar_39) * diff_47) + ((tmpvar_39 * _SpecColor.xyz) * tmpvar_51));
					  c_45.w = (tmpvar_25.w * _ReflectColor.w);
					  c_44.w = c_45.w;
					  c_44.xyz = (c_45.xyz + (tmpvar_14 * tmpvar_42));
					  c_4.xyz = (c_44.xyz + tmpvar_15);
					  c_4.w = 1.0;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec2 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec2 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  highp vec3 tmpvar_8;
					  highp vec3 I_9;
					  I_9 = (tmpvar_5 - _WorldSpaceCameraPos);
					  tmpvar_8 = (I_9 - (2.0 * (
					    dot (tmpvar_7, I_9)
					   * tmpvar_7)));
					  tmpvar_1 = tmpvar_8;
					  mediump vec3 normal_10;
					  normal_10 = tmpvar_7;
					  mediump vec3 x1_11;
					  mediump vec4 tmpvar_12;
					  tmpvar_12 = (normal_10.xyzz * normal_10.yzzx);
					  x1_11.x = dot (unity_SHBr, tmpvar_12);
					  x1_11.y = dot (unity_SHBg, tmpvar_12);
					  x1_11.z = dot (unity_SHBb, tmpvar_12);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_7;
					  xlv_TEXCOORD3 = tmpvar_5;
					  xlv_TEXCOORD4 = (x1_11 + (unity_SHC.xyz * (
					    (normal_10.x * normal_10.x)
					   - 
					    (normal_10.y * normal_10.y)
					  )));
					  xlv_TEXCOORD5 = tmpvar_2;
					  xlv_TEXCOORD7 = tmpvar_3;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform highp sampler2D _ShadowMapTexture;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					void main ()
					{
					  mediump float tmpvar_1;
					  mediump vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp vec3 viewDir_7;
					  lowp vec3 lightDir_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  tmpvar_11 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = (_WorldSpaceCameraPos - xlv_TEXCOORD3);
					  tmpvar_12 = normalize(tmpvar_13);
					  viewDir_7 = tmpvar_12;
					  tmpvar_9 = xlv_TEXCOORD1;
					  tmpvar_10 = viewDir_7;
					  tmpvar_6 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_14;
					  lowp vec3 tmpvar_15;
					  lowp float tmpvar_16;
					  mediump float fres_17;
					  mediump float rim_18;
					  mediump float tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp (dot (normalize(tmpvar_10), tmpvar_6), 0.0, 1.0);
					  tmpvar_19 = tmpvar_20;
					  rim_18 = (1.0 - tmpvar_19);
					  fres_17 = rim_18;
					  highp float tmpvar_21;
					  tmpvar_21 = pow (rim_18, _RimAmt);
					  rim_18 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = pow (fres_17, _FresAmt);
					  fres_17 = tmpvar_22;
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((1.0 - (rim_18 * _RimPwr)), 0.0, 1.0);
					  tmpvar_14 = (_Color.xyz * tmpvar_23);
					  highp vec3 tmpvar_24;
					  tmpvar_24 = ((rim_18 * _RimColor) * _RimPwr).xyz;
					  tmpvar_14 = (tmpvar_14 + tmpvar_24);
					  tmpvar_16 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_18)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_25;
					  tmpvar_25 = textureCube (_Cube, tmpvar_9);
					  tmpvar_15 = ((tmpvar_25.xyz * _ReflectColor.xyz) * fres_17);
					  mediump float realtimeShadowAttenuation_26;
					  highp vec4 v_27;
					  v_27.x = unity_MatrixV[0].z;
					  v_27.y = unity_MatrixV[1].z;
					  v_27.z = unity_MatrixV[2].z;
					  v_27.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (xlv_TEXCOORD3 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_29;
					  highp float tmpvar_30;
					  tmpvar_30 = clamp (((
					    mix (dot (tmpvar_13, v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_29 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = xlv_TEXCOORD3;
					  lowp float tmpvar_32;
					  highp vec4 shadowCoord_33;
					  shadowCoord_33 = (unity_WorldToShadow[0] * tmpvar_31);
					  highp float lightShadowDataX_34;
					  mediump float tmpvar_35;
					  tmpvar_35 = _LightShadowData.x;
					  lightShadowDataX_34 = tmpvar_35;
					  highp float tmpvar_36;
					  tmpvar_36 = max (float((texture2D (_ShadowMapTexture, shadowCoord_33.xy).x > shadowCoord_33.z)), lightShadowDataX_34);
					  tmpvar_32 = tmpvar_36;
					  realtimeShadowAttenuation_26 = tmpvar_32;
					  mediump float tmpvar_37;
					  tmpvar_37 = clamp ((realtimeShadowAttenuation_26 + tmpvar_29), 0.0, 1.0);
					  atten_5 = tmpvar_37;
					  tmpvar_2 = _LightColor0.xyz;
					  tmpvar_3 = lightDir_8;
					  tmpvar_1 = atten_5;
					  mediump vec3 normalWorld_38;
					  normalWorld_38 = tmpvar_6;
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = (tmpvar_2 * tmpvar_1);
					  mediump vec4 tmpvar_40;
					  tmpvar_40.w = 1.0;
					  tmpvar_40.xyz = normalWorld_38;
					  mediump vec3 x_41;
					  x_41.x = dot (unity_SHAr, tmpvar_40);
					  x_41.y = dot (unity_SHAg, tmpvar_40);
					  x_41.z = dot (unity_SHAb, tmpvar_40);
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_41)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  tmpvar_2 = tmpvar_39;
					  mediump vec3 viewDir_43;
					  viewDir_43 = tmpvar_12;
					  lowp vec4 c_44;
					  lowp vec4 c_45;
					  highp float nh_46;
					  lowp float diff_47;
					  mediump float tmpvar_48;
					  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
					  diff_47 = tmpvar_48;
					  mediump float tmpvar_49;
					  tmpvar_49 = max (0.0, dot (tmpvar_6, normalize(
					    (tmpvar_3 + viewDir_43)
					  )));
					  nh_46 = tmpvar_49;
					  mediump float y_50;
					  y_50 = (_Shininess * 128.0);
					  highp float tmpvar_51;
					  tmpvar_51 = (pow (nh_46, y_50) * tmpvar_16);
					  c_45.xyz = (((tmpvar_14 * tmpvar_39) * diff_47) + ((tmpvar_39 * _SpecColor.xyz) * tmpvar_51));
					  c_45.w = (tmpvar_25.w * _ReflectColor.w);
					  c_44.w = c_45.w;
					  c_44.xyz = (c_45.xyz + (tmpvar_14 * tmpvar_42));
					  c_4.xyz = (c_44.xyz + tmpvar_15);
					  c_4.w = 1.0;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-u_xlat1.xyz);
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat16_3 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					lowp float u_xlat10_6;
					float u_xlat14;
					lowp float u_xlat10_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat18) + 1.0;
					    u_xlat16_18 = log2(u_xlat16_19);
					    u_xlat2.xy = vec2(u_xlat16_18) * vec2(_RimAmt, _FresAmt);
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat16_19 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_19 = inversesqrt(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_18 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_1.x = (-u_xlat2.x) + 1.0;
					    u_xlat10_14 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_14;
					    u_xlat14 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat18 = u_xlat16_18 * u_xlat14;
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = (-u_xlat0.x) + u_xlat6;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat6 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_6 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat0.x + u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat2.xxx * _RimColor.xyz;
					    u_xlat3.xyz = u_xlat16_4.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat18 = (-u_xlat2.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat2.xzw = _Color.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat2.xzw;
					    u_xlat16_19 = dot(vs_TEXCOORD2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = u_xlat2.xzw * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat2.yyy + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-u_xlat1.xyz);
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat16_3 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					lowp float u_xlat10_6;
					float u_xlat14;
					lowp float u_xlat10_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat18) + 1.0;
					    u_xlat16_18 = log2(u_xlat16_19);
					    u_xlat2.xy = vec2(u_xlat16_18) * vec2(_RimAmt, _FresAmt);
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat16_19 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_19 = inversesqrt(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_18 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_1.x = (-u_xlat2.x) + 1.0;
					    u_xlat10_14 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_14;
					    u_xlat14 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat18 = u_xlat16_18 * u_xlat14;
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = (-u_xlat0.x) + u_xlat6;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat6 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_6 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat0.x + u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat2.xxx * _RimColor.xyz;
					    u_xlat3.xyz = u_xlat16_4.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat18 = (-u_xlat2.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat2.xzw = _Color.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat2.xzw;
					    u_xlat16_19 = dot(vs_TEXCOORD2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = u_xlat2.xzw * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat2.yyy + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-u_xlat1.xyz);
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat16_3 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					lowp float u_xlat10_6;
					float u_xlat14;
					lowp float u_xlat10_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat18) + 1.0;
					    u_xlat16_18 = log2(u_xlat16_19);
					    u_xlat2.xy = vec2(u_xlat16_18) * vec2(_RimAmt, _FresAmt);
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat16_19 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_19 = inversesqrt(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_18 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_1.x = (-u_xlat2.x) + 1.0;
					    u_xlat10_14 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_14;
					    u_xlat14 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat18 = u_xlat16_18 * u_xlat14;
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = (-u_xlat0.x) + u_xlat6;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat6 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_6 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat0.x + u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat2.xxx * _RimColor.xyz;
					    u_xlat3.xyz = u_xlat16_4.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat18 = (-u_xlat2.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat2.xzw = _Color.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat2.xzw;
					    u_xlat16_19 = dot(vs_TEXCOORD2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = u_xlat2.xzw * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat2.yyy + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 250
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %113 %126 %130 %189 %192 %232 %242 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate %100 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %126 Location 126 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %192 Location 192 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %232 Location 232 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 Location 242 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 5 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                               Output f32_2* %100 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                               Output f32_2* %113 = OpVariable Output 
					                                         f32 %114 = OpConstant 3.674022E-40 
					                                       f32_2 %115 = OpConstantComposite %114 %114 
					                                             %119 = OpTypePointer Uniform %14 
					                                             %125 = OpTypePointer Output %14 
					                               Output f32_3* %126 = OpVariable Output 
					                                             %129 = OpTypePointer Input %14 
					                                Input f32_3* %130 = OpVariable Input 
					                                         i32 %132 = OpConstant 6 
					                                         u32 %137 = OpConstant 0 
					                                             %138 = OpTypePointer Private %6 
					                                         u32 %151 = OpConstant 2 
					                                Private f32* %153 = OpVariable Private 
					                               Output f32_3* %189 = OpVariable Output 
					                               Output f32_3* %192 = OpVariable Output 
					                                Private f32* %195 = OpVariable Private 
					                              Private f32_4* %209 = OpVariable Private 
					                                             %215 = OpTypePointer Private %14 
					                              Private f32_3* %216 = OpVariable Private 
					                               Output f32_3* %232 = OpVariable Output 
					                                         i32 %233 = OpConstant 4 
					                               Output f32_4* %242 = OpVariable Output 
					                                       f32_4 %243 = OpConstantComposite %114 %114 %114 %114 
					                                             %244 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %22 %66 %48 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %46 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %30 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %22 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %22 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore %100 %112 
					                                                      OpStore %113 %115 
					                                       f32_4 %116 = OpLoad %9 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                       f32_3 %118 = OpFNegate %117 
					                              Uniform f32_3* %120 = OpAccessChain %22 %30 
					                                       f32_3 %121 = OpLoad %120 
					                                       f32_3 %122 = OpFAdd %118 %121 
					                                       f32_4 %123 = OpLoad %46 
					                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
					                                                      OpStore %46 %124 
					                                       f32_4 %127 = OpLoad %9 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                                      OpStore %126 %128 
					                                       f32_3 %131 = OpLoad %130 
					                              Uniform f32_4* %133 = OpAccessChain %22 %132 %30 
					                                       f32_4 %134 = OpLoad %133 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %131 %135 
					                                Private f32* %139 = OpAccessChain %9 %137 
					                                                      OpStore %139 %136 
					                                       f32_3 %140 = OpLoad %130 
					                              Uniform f32_4* %141 = OpAccessChain %22 %132 %25 
					                                       f32_4 %142 = OpLoad %141 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %140 %143 
					                                Private f32* %145 = OpAccessChain %9 %84 
					                                                      OpStore %145 %144 
					                                       f32_3 %146 = OpLoad %130 
					                              Uniform f32_4* %147 = OpAccessChain %22 %132 %38 
					                                       f32_4 %148 = OpLoad %147 
					                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
					                                         f32 %150 = OpDot %146 %149 
					                                Private f32* %152 = OpAccessChain %9 %151 
					                                                      OpStore %152 %150 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                       f32_4 %156 = OpLoad %9 
					                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
					                                         f32 %158 = OpDot %155 %157 
					                                                      OpStore %153 %158 
					                                         f32 %159 = OpLoad %153 
					                                         f32 %160 = OpExtInst %1 32 %159 
					                                                      OpStore %153 %160 
					                                         f32 %161 = OpLoad %153 
					                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFMul %162 %164 
					                                       f32_4 %166 = OpLoad %9 
					                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
					                                                      OpStore %9 %167 
					                                       f32_4 %168 = OpLoad %46 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFNegate %169 
					                                       f32_4 %171 = OpLoad %9 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %170 %172 
					                                                      OpStore %153 %173 
					                                         f32 %174 = OpLoad %153 
					                                         f32 %175 = OpLoad %153 
					                                         f32 %176 = OpFAdd %174 %175 
					                                                      OpStore %153 %176 
					                                       f32_4 %177 = OpLoad %9 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpLoad %153 
					                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
					                                       f32_3 %181 = OpFNegate %180 
					                                       f32_3 %182 = OpFMul %178 %181 
					                                       f32_4 %183 = OpLoad %46 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                       f32_3 %185 = OpFNegate %184 
					                                       f32_3 %186 = OpFAdd %182 %185 
					                                       f32_4 %187 = OpLoad %46 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %46 %188 
					                                       f32_4 %190 = OpLoad %46 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                                      OpStore %189 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                                      OpStore %192 %194 
					                                Private f32* %196 = OpAccessChain %9 %84 
					                                         f32 %197 = OpLoad %196 
					                                Private f32* %198 = OpAccessChain %9 %84 
					                                         f32 %199 = OpLoad %198 
					                                         f32 %200 = OpFMul %197 %199 
					                                                      OpStore %195 %200 
					                                Private f32* %201 = OpAccessChain %9 %137 
					                                         f32 %202 = OpLoad %201 
					                                Private f32* %203 = OpAccessChain %9 %137 
					                                         f32 %204 = OpLoad %203 
					                                         f32 %205 = OpFMul %202 %204 
					                                         f32 %206 = OpLoad %195 
					                                         f32 %207 = OpFNegate %206 
					                                         f32 %208 = OpFAdd %205 %207 
					                                                      OpStore %195 %208 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 1 2 2 0 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_4 %213 = OpVectorShuffle %212 %212 0 1 2 2 
					                                       f32_4 %214 = OpFMul %211 %213 
					                                                      OpStore %209 %214 
					                              Uniform f32_4* %217 = OpAccessChain %22 %25 
					                                       f32_4 %218 = OpLoad %217 
					                                       f32_4 %219 = OpLoad %209 
					                                         f32 %220 = OpDot %218 %219 
					                                Private f32* %221 = OpAccessChain %216 %137 
					                                                      OpStore %221 %220 
					                              Uniform f32_4* %222 = OpAccessChain %22 %38 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_4 %224 = OpLoad %209 
					                                         f32 %225 = OpDot %223 %224 
					                                Private f32* %226 = OpAccessChain %216 %84 
					                                                      OpStore %226 %225 
					                              Uniform f32_4* %227 = OpAccessChain %22 %48 
					                                       f32_4 %228 = OpLoad %227 
					                                       f32_4 %229 = OpLoad %209 
					                                         f32 %230 = OpDot %228 %229 
					                                Private f32* %231 = OpAccessChain %216 %151 
					                                                      OpStore %231 %230 
					                              Uniform f32_4* %234 = OpAccessChain %22 %233 
					                                       f32_4 %235 = OpLoad %234 
					                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
					                                         f32 %237 = OpLoad %195 
					                                       f32_3 %238 = OpCompositeConstruct %237 %237 %237 
					                                       f32_3 %239 = OpFMul %236 %238 
					                                       f32_3 %240 = OpLoad %216 
					                                       f32_3 %241 = OpFAdd %239 %240 
					                                                      OpStore %232 %241 
					                                                      OpStore %242 %243 
					                                 Output f32* %245 = OpAccessChain %88 %30 %84 
					                                         f32 %246 = OpLoad %245 
					                                         f32 %247 = OpFNegate %246 
					                                 Output f32* %248 = OpAccessChain %88 %30 %84 
					                                                      OpStore %248 %247 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 445
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %57 %135 %384 %420 %432 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 RelaxedPrecision 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpMemberDecorate %20 9 RelaxedPrecision 
					                                                      OpMemberDecorate %20 9 Offset 20 
					                                                      OpMemberDecorate %20 10 RelaxedPrecision 
					                                                      OpMemberDecorate %20 10 Offset 20 
					                                                      OpMemberDecorate %20 11 RelaxedPrecision 
					                                                      OpMemberDecorate %20 11 Offset 20 
					                                                      OpMemberDecorate %20 12 RelaxedPrecision 
					                                                      OpMemberDecorate %20 12 Offset 20 
					                                                      OpMemberDecorate %20 13 RelaxedPrecision 
					                                                      OpMemberDecorate %20 13 Offset 20 
					                                                      OpMemberDecorate %20 14 Offset 20 
					                                                      OpMemberDecorate %20 15 Offset 20 
					                                                      OpMemberDecorate %20 16 Offset 20 
					                                                      OpMemberDecorate %20 17 Offset 20 
					                                                      OpMemberDecorate %20 18 RelaxedPrecision 
					                                                      OpMemberDecorate %20 18 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpDecorate %36 RelaxedPrecision 
					                                                      OpDecorate %44 RelaxedPrecision 
					                                                      OpDecorate %45 RelaxedPrecision 
					                                                      OpDecorate %57 Location 57 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %91 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %119 RelaxedPrecision 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %132 DescriptorSet 132 
					                                                      OpDecorate %132 Binding 132 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %135 Location 135 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %156 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %259 DescriptorSet 259 
					                                                      OpDecorate %259 Binding 259 
					                                                      OpDecorate %260 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %267 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %287 RelaxedPrecision 
					                                                      OpDecorate %288 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %294 RelaxedPrecision 
					                                                      OpDecorate %295 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %299 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %311 RelaxedPrecision 
					                                                      OpDecorate %319 RelaxedPrecision 
					                                                      OpDecorate %320 RelaxedPrecision 
					                                                      OpDecorate %321 RelaxedPrecision 
					                                                      OpDecorate %322 RelaxedPrecision 
					                                                      OpDecorate %323 RelaxedPrecision 
					                                                      OpDecorate %324 RelaxedPrecision 
					                                                      OpDecorate %336 RelaxedPrecision 
					                                                      OpDecorate %337 RelaxedPrecision 
					                                                      OpDecorate %339 RelaxedPrecision 
					                                                      OpDecorate %340 RelaxedPrecision 
					                                                      OpDecorate %345 RelaxedPrecision 
					                                                      OpDecorate %351 RelaxedPrecision 
					                                                      OpDecorate %352 RelaxedPrecision 
					                                                      OpDecorate %354 RelaxedPrecision 
					                                                      OpDecorate %355 RelaxedPrecision 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %357 RelaxedPrecision 
					                                                      OpDecorate %358 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate %384 Location 384 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate %387 RelaxedPrecision 
					                                                      OpDecorate %389 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %391 RelaxedPrecision 
					                                                      OpDecorate %392 RelaxedPrecision 
					                                                      OpDecorate %393 RelaxedPrecision 
					                                                      OpDecorate %396 RelaxedPrecision 
					                                                      OpDecorate %397 RelaxedPrecision 
					                                                      OpDecorate %398 RelaxedPrecision 
					                                                      OpDecorate %399 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %406 RelaxedPrecision 
					                                                      OpDecorate %407 RelaxedPrecision 
					                                                      OpDecorate %410 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %418 DescriptorSet 418 
					                                                      OpDecorate %418 Binding 418 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate %421 RelaxedPrecision 
					                                                      OpDecorate %423 RelaxedPrecision 
					                                                      OpDecorate %424 RelaxedPrecision 
					                                                      OpDecorate %425 RelaxedPrecision 
					                                                      OpDecorate %428 RelaxedPrecision 
					                                                      OpDecorate %429 RelaxedPrecision 
					                                                      OpDecorate %430 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate %432 Location 432 
					                                                      OpDecorate %433 RelaxedPrecision 
					                                                      OpDecorate %437 RelaxedPrecision 
					                                                      OpDecorate %444 RelaxedPrecision 
					                                                      OpDecorate %444 DescriptorSet 444 
					                                                      OpDecorate %444 Binding 444 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 16 
					                                              %17 = OpTypeArray %14 %16 
					                                          u32 %18 = OpConstant 4 
					                                              %19 = OpTypeArray %14 %18 
					                                              %20 = OpTypeStruct %7 %14 %14 %14 %14 %17 %14 %14 %19 %14 %14 %14 %14 %6 %6 %6 %6 %6 %14 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                              %25 = OpTypePointer Uniform %7 
					                                              %29 = OpTypePointer Private %6 
					                                 Private f32* %30 = OpVariable Private 
					                               Private f32_3* %36 = OpVariable Private 
					                                          i32 %41 = OpConstant 1 
					                                              %42 = OpTypePointer Uniform %14 
					                                              %47 = OpTypePointer Private %14 
					                               Private f32_4* %48 = OpVariable Private 
					                                 Input f32_3* %57 = OpVariable Input 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                          f32 %62 = OpConstant 3.674022E-40 
					                                 Private f32* %64 = OpVariable Private 
					                                 Private f32* %68 = OpVariable Private 
					                                              %72 = OpTypeVector %6 2 
					                                          i32 %74 = OpConstant 16 
					                                              %75 = OpTypePointer Uniform %6 
					                                          i32 %78 = OpConstant 14 
					                                         u32 %102 = OpConstant 0 
					                                         i32 %111 = OpConstant 13 
					                                         f32 %114 = OpConstant 3.674022E-40 
					                                Private f32* %128 = OpVariable Private 
					                                             %129 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %130 = OpTypeSampledImage %129 
					                                             %131 = OpTypePointer UniformConstant %130 
					 UniformConstant read_only Texture2DSampled* %132 = OpVariable UniformConstant 
					                                             %134 = OpTypePointer Input %72 
					                                Input f32_2* %135 = OpVariable Input 
					                                         u32 %138 = OpConstant 3 
					                                Private f32* %145 = OpVariable Private 
					                                         i32 %148 = OpConstant 15 
					                                         i32 %152 = OpConstant 10 
					                              Private f32_3* %159 = OpVariable Private 
					                                         i32 %160 = OpConstant 8 
					                                         u32 %161 = OpConstant 2 
					                                         u32 %167 = OpConstant 1 
					                                         i32 %169 = OpConstant 2 
					                                         i32 %178 = OpConstant 7 
					                                Private f32* %184 = OpVariable Private 
					                                         i32 %205 = OpConstant 6 
					                                         i32 %219 = OpConstant 5 
					                                         i32 %241 = OpConstant 3 
					                                             %246 = OpTypePointer Function %7 
					                                Private f32* %255 = OpVariable Private 
					                                             %256 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
					                                             %257 = OpTypeSampledImage %256 
					                                             %258 = OpTypePointer UniformConstant %257 
					 UniformConstant read_only Texture2DSampled* %259 = OpVariable UniformConstant 
					                                         i32 %289 = OpConstant 9 
					                              Private f32_3* %294 = OpVariable Private 
					                                         i32 %306 = OpConstant 18 
					                                         i32 %312 = OpConstant 17 
					                                         i32 %334 = OpConstant 11 
					                              Private f32_4* %362 = OpVariable Private 
					                                         i32 %377 = OpConstant 4 
					                                Input f32_3* %384 = OpVariable Input 
					                                       f32_3 %388 = OpConstantComposite %61 %61 %61 
					                              Private f32_3* %390 = OpVariable Private 
					                                         f32 %394 = OpConstant 3.674022E-40 
					                                       f32_3 %395 = OpConstantComposite %394 %394 %394 
					                                         f32 %400 = OpConstant 3.674022E-40 
					                                       f32_3 %401 = OpConstantComposite %400 %400 %400 
					                                         f32 %403 = OpConstant 3.674022E-40 
					                                       f32_3 %404 = OpConstantComposite %403 %403 %403 
					                              Private f32_3* %414 = OpVariable Private 
					                                             %415 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %416 = OpTypeSampledImage %415 
					                                             %417 = OpTypePointer UniformConstant %416 
					UniformConstant read_only TextureCubeSampled* %418 = OpVariable UniformConstant 
					                                Input f32_3* %420 = OpVariable Input 
					                              Private f32_3* %424 = OpVariable Private 
					                                         i32 %426 = OpConstant 12 
					                                             %431 = OpTypePointer Output %14 
					                               Output f32_4* %432 = OpVariable Output 
					                                             %441 = OpTypePointer Output %6 
					 UniformConstant read_only Texture2DSampled* %444 = OpVariable UniformConstant 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %247 = OpVariable Function 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %26 = OpAccessChain %22 %24 
					                                        f32_3 %27 = OpLoad %26 
					                                        f32_3 %28 = OpFAdd %13 %27 
					                                                      OpStore %9 %28 
					                                        f32_3 %31 = OpLoad %9 
					                                        f32_3 %32 = OpLoad %9 
					                                          f32 %33 = OpDot %31 %32 
					                                                      OpStore %30 %33 
					                                          f32 %34 = OpLoad %30 
					                                          f32 %35 = OpExtInst %1 32 %34 
					                                                      OpStore %30 %35 
					                                        f32_3 %37 = OpLoad %9 
					                                          f32 %38 = OpLoad %30 
					                                        f32_3 %39 = OpCompositeConstruct %38 %38 %38 
					                                        f32_3 %40 = OpFMul %37 %39 
					                               Uniform f32_4* %43 = OpAccessChain %22 %41 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %46 = OpFAdd %40 %45 
					                                                      OpStore %36 %46 
					                                          f32 %49 = OpLoad %30 
					                                        f32_3 %50 = OpCompositeConstruct %49 %49 %49 
					                                        f32_3 %51 = OpLoad %9 
					                                        f32_3 %52 = OpFMul %50 %51 
					                                        f32_4 %53 = OpLoad %48 
					                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
					                                                      OpStore %48 %54 
					                                        f32_4 %55 = OpLoad %48 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_3 %58 = OpLoad %57 
					                                          f32 %59 = OpDot %56 %58 
					                                                      OpStore %30 %59 
					                                          f32 %60 = OpLoad %30 
					                                          f32 %63 = OpExtInst %1 43 %60 %61 %62 
					                                                      OpStore %30 %63 
					                                          f32 %65 = OpLoad %30 
					                                          f32 %66 = OpFNegate %65 
					                                          f32 %67 = OpFAdd %66 %62 
					                                                      OpStore %64 %67 
					                                          f32 %69 = OpLoad %64 
					                                          f32 %70 = OpExtInst %1 30 %69 
					                                                      OpStore %68 %70 
					                                          f32 %71 = OpLoad %68 
					                                        f32_2 %73 = OpCompositeConstruct %71 %71 
					                                 Uniform f32* %76 = OpAccessChain %22 %74 
					                                          f32 %77 = OpLoad %76 
					                                 Uniform f32* %79 = OpAccessChain %22 %78 
					                                          f32 %80 = OpLoad %79 
					                                        f32_2 %81 = OpCompositeConstruct %77 %80 
					                                        f32_2 %82 = OpFMul %73 %81 
					                                        f32_4 %83 = OpLoad %48 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 2 3 
					                                                      OpStore %48 %84 
					                                        f32_4 %85 = OpLoad %48 
					                                        f32_2 %86 = OpVectorShuffle %85 %85 0 1 
					                                        f32_2 %87 = OpExtInst %1 29 %86 
					                                        f32_4 %88 = OpLoad %48 
					                                        f32_4 %89 = OpVectorShuffle %88 %87 4 5 2 3 
					                                                      OpStore %48 %89 
					                                        f32_3 %90 = OpLoad %36 
					                                        f32_3 %91 = OpLoad %36 
					                                          f32 %92 = OpDot %90 %91 
					                                                      OpStore %64 %92 
					                                          f32 %93 = OpLoad %64 
					                                          f32 %94 = OpExtInst %1 32 %93 
					                                                      OpStore %64 %94 
					                                          f32 %95 = OpLoad %64 
					                                        f32_3 %96 = OpCompositeConstruct %95 %95 %95 
					                                        f32_3 %97 = OpLoad %36 
					                                        f32_3 %98 = OpFMul %96 %97 
					                                                      OpStore %36 %98 
					                                        f32_3 %99 = OpLoad %57 
					                                       f32_3 %100 = OpLoad %36 
					                                         f32 %101 = OpDot %99 %100 
					                                Private f32* %103 = OpAccessChain %36 %102 
					                                                      OpStore %103 %101 
					                                Private f32* %104 = OpAccessChain %36 %102 
					                                         f32 %105 = OpLoad %104 
					                                         f32 %106 = OpExtInst %1 40 %105 %61 
					                                Private f32* %107 = OpAccessChain %36 %102 
					                                                      OpStore %107 %106 
					                                Private f32* %108 = OpAccessChain %36 %102 
					                                         f32 %109 = OpLoad %108 
					                                         f32 %110 = OpExtInst %1 30 %109 
					                                                      OpStore %68 %110 
					                                Uniform f32* %112 = OpAccessChain %22 %111 
					                                         f32 %113 = OpLoad %112 
					                                         f32 %115 = OpFMul %113 %114 
					                                Private f32* %116 = OpAccessChain %36 %102 
					                                                      OpStore %116 %115 
					                                         f32 %117 = OpLoad %68 
					                                Private f32* %118 = OpAccessChain %36 %102 
					                                         f32 %119 = OpLoad %118 
					                                         f32 %120 = OpFMul %117 %119 
					                                                      OpStore %68 %120 
					                                         f32 %121 = OpLoad %68 
					                                         f32 %122 = OpExtInst %1 29 %121 
					                                                      OpStore %68 %122 
					                                Private f32* %123 = OpAccessChain %48 %102 
					                                         f32 %124 = OpLoad %123 
					                                         f32 %125 = OpFNegate %124 
					                                         f32 %126 = OpFAdd %125 %62 
					                                Private f32* %127 = OpAccessChain %36 %102 
					                                                      OpStore %127 %126 
					                  read_only Texture2DSampled %133 = OpLoad %132 
					                                       f32_2 %136 = OpLoad %135 
					                                       f32_4 %137 = OpImageSampleImplicitLod %133 %136 
					                                         f32 %139 = OpCompositeExtract %137 3 
					                                                      OpStore %128 %139 
					                                Private f32* %140 = OpAccessChain %36 %102 
					                                         f32 %141 = OpLoad %140 
					                                         f32 %142 = OpLoad %128 
					                                         f32 %143 = OpFMul %141 %142 
					                                Private f32* %144 = OpAccessChain %36 %102 
					                                                      OpStore %144 %143 
					                                Private f32* %146 = OpAccessChain %36 %102 
					                                         f32 %147 = OpLoad %146 
					                                Uniform f32* %149 = OpAccessChain %22 %148 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpFMul %147 %150 
					                                Uniform f32* %153 = OpAccessChain %22 %152 %138 
					                                         f32 %154 = OpLoad %153 
					                                         f32 %155 = OpFAdd %151 %154 
					                                                      OpStore %145 %155 
					                                         f32 %156 = OpLoad %68 
					                                         f32 %157 = OpLoad %145 
					                                         f32 %158 = OpFMul %156 %157 
					                                                      OpStore %30 %158 
					                                Uniform f32* %162 = OpAccessChain %22 %160 %24 %161 
					                                         f32 %163 = OpLoad %162 
					                                Private f32* %164 = OpAccessChain %159 %102 
					                                                      OpStore %164 %163 
					                                Uniform f32* %165 = OpAccessChain %22 %160 %41 %161 
					                                         f32 %166 = OpLoad %165 
					                                Private f32* %168 = OpAccessChain %159 %167 
					                                                      OpStore %168 %166 
					                                Uniform f32* %170 = OpAccessChain %22 %160 %169 %161 
					                                         f32 %171 = OpLoad %170 
					                                Private f32* %172 = OpAccessChain %159 %161 
					                                                      OpStore %172 %171 
					                                       f32_3 %173 = OpLoad %9 
					                                       f32_3 %174 = OpLoad %159 
					                                         f32 %175 = OpDot %173 %174 
					                                Private f32* %176 = OpAccessChain %9 %102 
					                                                      OpStore %176 %175 
					                                       f32_3 %177 = OpLoad %11 
					                              Uniform f32_4* %179 = OpAccessChain %22 %178 
					                                       f32_4 %180 = OpLoad %179 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFAdd %177 %182 
					                                                      OpStore %159 %183 
					                                       f32_3 %185 = OpLoad %159 
					                                       f32_3 %186 = OpLoad %159 
					                                         f32 %187 = OpDot %185 %186 
					                                                      OpStore %184 %187 
					                                         f32 %188 = OpLoad %184 
					                                         f32 %189 = OpExtInst %1 31 %188 
					                                                      OpStore %184 %189 
					                                Private f32* %190 = OpAccessChain %9 %102 
					                                         f32 %191 = OpLoad %190 
					                                         f32 %192 = OpFNegate %191 
					                                         f32 %193 = OpLoad %184 
					                                         f32 %194 = OpFAdd %192 %193 
					                                                      OpStore %184 %194 
					                                Uniform f32* %195 = OpAccessChain %22 %178 %138 
					                                         f32 %196 = OpLoad %195 
					                                         f32 %197 = OpLoad %184 
					                                         f32 %198 = OpFMul %196 %197 
					                                Private f32* %199 = OpAccessChain %9 %102 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpFAdd %198 %200 
					                                Private f32* %202 = OpAccessChain %9 %102 
					                                                      OpStore %202 %201 
					                                Private f32* %203 = OpAccessChain %9 %102 
					                                         f32 %204 = OpLoad %203 
					                                Uniform f32* %206 = OpAccessChain %22 %205 %161 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFMul %204 %207 
					                                Uniform f32* %209 = OpAccessChain %22 %205 %138 
					                                         f32 %210 = OpLoad %209 
					                                         f32 %211 = OpFAdd %208 %210 
					                                Private f32* %212 = OpAccessChain %9 %102 
					                                                      OpStore %212 %211 
					                                Private f32* %213 = OpAccessChain %9 %102 
					                                         f32 %214 = OpLoad %213 
					                                         f32 %215 = OpExtInst %1 43 %214 %61 %62 
					                                Private f32* %216 = OpAccessChain %9 %102 
					                                                      OpStore %216 %215 
					                                       f32_3 %217 = OpLoad %11 
					                                       f32_3 %218 = OpVectorShuffle %217 %217 1 1 1 
					                              Uniform f32_4* %220 = OpAccessChain %22 %219 %41 
					                                       f32_4 %221 = OpLoad %220 
					                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
					                                       f32_3 %223 = OpFMul %218 %222 
					                                                      OpStore %159 %223 
					                              Uniform f32_4* %224 = OpAccessChain %22 %219 %24 
					                                       f32_4 %225 = OpLoad %224 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpLoad %11 
					                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
					                                       f32_3 %229 = OpFMul %226 %228 
					                                       f32_3 %230 = OpLoad %159 
					                                       f32_3 %231 = OpFAdd %229 %230 
					                                                      OpStore %159 %231 
					                              Uniform f32_4* %232 = OpAccessChain %22 %219 %169 
					                                       f32_4 %233 = OpLoad %232 
					                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
					                                       f32_3 %235 = OpLoad %11 
					                                       f32_3 %236 = OpVectorShuffle %235 %235 2 2 2 
					                                       f32_3 %237 = OpFMul %234 %236 
					                                       f32_3 %238 = OpLoad %159 
					                                       f32_3 %239 = OpFAdd %237 %238 
					                                                      OpStore %159 %239 
					                                       f32_3 %240 = OpLoad %159 
					                              Uniform f32_4* %242 = OpAccessChain %22 %219 %241 
					                                       f32_4 %243 = OpLoad %242 
					                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
					                                       f32_3 %245 = OpFAdd %240 %244 
					                                                      OpStore %159 %245 
					                                       f32_3 %248 = OpLoad %159 
					                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
					                                Private f32* %250 = OpAccessChain %159 %161 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpCompositeExtract %249 0 
					                                         f32 %253 = OpCompositeExtract %249 1 
					                                       f32_3 %254 = OpCompositeConstruct %252 %253 %251 
					                                                      OpStore %247 %254 
					                  read_only Texture2DSampled %260 = OpLoad %259 
					                                       f32_3 %261 = OpLoad %247 
					                                         f32 %262 = OpCompositeExtract %261 2 
					                                         f32 %263 = OpImageSampleDrefExplicitLod %260 %261 %262 Lod %6 
					                                                      OpStore %255 %263 
					                                Uniform f32* %264 = OpAccessChain %22 %205 %102 
					                                         f32 %265 = OpLoad %264 
					                                         f32 %266 = OpFNegate %265 
					                                         f32 %267 = OpFAdd %266 %62 
					                                Private f32* %268 = OpAccessChain %36 %102 
					                                                      OpStore %268 %267 
					                                         f32 %269 = OpLoad %255 
					                                Private f32* %270 = OpAccessChain %36 %102 
					                                         f32 %271 = OpLoad %270 
					                                         f32 %272 = OpFMul %269 %271 
					                                Uniform f32* %273 = OpAccessChain %22 %205 %102 
					                                         f32 %274 = OpLoad %273 
					                                         f32 %275 = OpFAdd %272 %274 
					                                Private f32* %276 = OpAccessChain %36 %102 
					                                                      OpStore %276 %275 
					                                Private f32* %277 = OpAccessChain %9 %102 
					                                         f32 %278 = OpLoad %277 
					                                Private f32* %279 = OpAccessChain %36 %102 
					                                         f32 %280 = OpLoad %279 
					                                         f32 %281 = OpFAdd %278 %280 
					                                Private f32* %282 = OpAccessChain %36 %102 
					                                                      OpStore %282 %281 
					                                Private f32* %283 = OpAccessChain %36 %102 
					                                         f32 %284 = OpLoad %283 
					                                         f32 %285 = OpExtInst %1 43 %284 %61 %62 
					                                Private f32* %286 = OpAccessChain %36 %102 
					                                                      OpStore %286 %285 
					                                       f32_3 %287 = OpLoad %36 
					                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
					                              Uniform f32_4* %290 = OpAccessChain %22 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_3 %293 = OpFMul %288 %292 
					                                                      OpStore %36 %293 
					                                       f32_3 %295 = OpLoad %36 
					                              Uniform f32_4* %296 = OpAccessChain %22 %152 
					                                       f32_4 %297 = OpLoad %296 
					                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
					                                       f32_3 %299 = OpFMul %295 %298 
					                                                      OpStore %294 %299 
					                                         f32 %300 = OpLoad %30 
					                                       f32_3 %301 = OpCompositeConstruct %300 %300 %300 
					                                       f32_3 %302 = OpLoad %294 
					                                       f32_3 %303 = OpFMul %301 %302 
					                                                      OpStore %9 %303 
					                                       f32_4 %304 = OpLoad %48 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 0 0 
					                              Uniform f32_4* %307 = OpAccessChain %22 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %305 %309 
					                                                      OpStore %294 %310 
					                                       f32_3 %311 = OpLoad %294 
					                                Uniform f32* %313 = OpAccessChain %22 %312 
					                                         f32 %314 = OpLoad %313 
					                                Uniform f32* %315 = OpAccessChain %22 %312 
					                                         f32 %316 = OpLoad %315 
					                                Uniform f32* %317 = OpAccessChain %22 %312 
					                                         f32 %318 = OpLoad %317 
					                                       f32_3 %319 = OpCompositeConstruct %314 %316 %318 
					                                         f32 %320 = OpCompositeExtract %319 0 
					                                         f32 %321 = OpCompositeExtract %319 1 
					                                         f32 %322 = OpCompositeExtract %319 2 
					                                       f32_3 %323 = OpCompositeConstruct %320 %321 %322 
					                                       f32_3 %324 = OpFMul %311 %323 
					                                                      OpStore %159 %324 
					                                Private f32* %325 = OpAccessChain %48 %102 
					                                         f32 %326 = OpLoad %325 
					                                         f32 %327 = OpFNegate %326 
					                                Uniform f32* %328 = OpAccessChain %22 %312 
					                                         f32 %329 = OpLoad %328 
					                                         f32 %330 = OpFMul %327 %329 
					                                         f32 %331 = OpFAdd %330 %62 
					                                                      OpStore %30 %331 
					                                         f32 %332 = OpLoad %30 
					                                         f32 %333 = OpExtInst %1 43 %332 %61 %62 
					                                                      OpStore %30 %333 
					                              Uniform f32_4* %335 = OpAccessChain %22 %334 
					                                       f32_4 %336 = OpLoad %335 
					                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
					                                         f32 %338 = OpLoad %30 
					                                       f32_3 %339 = OpCompositeConstruct %338 %338 %338 
					                                       f32_3 %340 = OpFMul %337 %339 
					                                       f32_3 %341 = OpLoad %159 
					                                       f32_3 %342 = OpFAdd %340 %341 
					                                       f32_4 %343 = OpLoad %48 
					                                       f32_4 %344 = OpVectorShuffle %343 %342 4 1 5 6 
					                                                      OpStore %48 %344 
					                                       f32_3 %345 = OpLoad %36 
					                                       f32_4 %346 = OpLoad %48 
					                                       f32_3 %347 = OpVectorShuffle %346 %346 0 2 3 
					                                       f32_3 %348 = OpFMul %345 %347 
					                                                      OpStore %36 %348 
					                                       f32_3 %349 = OpLoad %57 
					                              Uniform f32_4* %350 = OpAccessChain %22 %41 
					                                       f32_4 %351 = OpLoad %350 
					                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
					                                         f32 %353 = OpDot %349 %352 
					                                                      OpStore %64 %353 
					                                         f32 %354 = OpLoad %64 
					                                         f32 %355 = OpExtInst %1 40 %354 %61 
					                                                      OpStore %64 %355 
					                                       f32_3 %356 = OpLoad %36 
					                                         f32 %357 = OpLoad %64 
					                                       f32_3 %358 = OpCompositeConstruct %357 %357 %357 
					                                       f32_3 %359 = OpFMul %356 %358 
					                                       f32_3 %360 = OpLoad %9 
					                                       f32_3 %361 = OpFAdd %359 %360 
					                                                      OpStore %9 %361 
					                                       f32_3 %363 = OpLoad %57 
					                                       f32_4 %364 = OpLoad %362 
					                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
					                                                      OpStore %362 %365 
					                                Private f32* %366 = OpAccessChain %362 %138 
					                                                      OpStore %366 %62 
					                              Uniform f32_4* %367 = OpAccessChain %22 %169 
					                                       f32_4 %368 = OpLoad %367 
					                                       f32_4 %369 = OpLoad %362 
					                                         f32 %370 = OpDot %368 %369 
					                                Private f32* %371 = OpAccessChain %294 %102 
					                                                      OpStore %371 %370 
					                              Uniform f32_4* %372 = OpAccessChain %22 %241 
					                                       f32_4 %373 = OpLoad %372 
					                                       f32_4 %374 = OpLoad %362 
					                                         f32 %375 = OpDot %373 %374 
					                                Private f32* %376 = OpAccessChain %294 %167 
					                                                      OpStore %376 %375 
					                              Uniform f32_4* %378 = OpAccessChain %22 %377 
					                                       f32_4 %379 = OpLoad %378 
					                                       f32_4 %380 = OpLoad %362 
					                                         f32 %381 = OpDot %379 %380 
					                                Private f32* %382 = OpAccessChain %294 %161 
					                                                      OpStore %382 %381 
					                                       f32_3 %383 = OpLoad %294 
					                                       f32_3 %385 = OpLoad %384 
					                                       f32_3 %386 = OpFAdd %383 %385 
					                                                      OpStore %294 %386 
					                                       f32_3 %387 = OpLoad %294 
					                                       f32_3 %389 = OpExtInst %1 40 %387 %388 
					                                                      OpStore %294 %389 
					                                       f32_3 %391 = OpLoad %294 
					                                       f32_3 %392 = OpExtInst %1 30 %391 
					                                                      OpStore %390 %392 
					                                       f32_3 %393 = OpLoad %390 
					                                       f32_3 %396 = OpFMul %393 %395 
					                                                      OpStore %390 %396 
					                                       f32_3 %397 = OpLoad %390 
					                                       f32_3 %398 = OpExtInst %1 29 %397 
					                                                      OpStore %390 %398 
					                                       f32_3 %399 = OpLoad %390 
					                                       f32_3 %402 = OpFMul %399 %401 
					                                       f32_3 %405 = OpFAdd %402 %404 
					                                                      OpStore %390 %405 
					                                       f32_3 %406 = OpLoad %390 
					                                       f32_3 %407 = OpExtInst %1 40 %406 %388 
					                                                      OpStore %390 %407 
					                                       f32_4 %408 = OpLoad %48 
					                                       f32_3 %409 = OpVectorShuffle %408 %408 0 2 3 
					                                       f32_3 %410 = OpLoad %390 
					                                       f32_3 %411 = OpFMul %409 %410 
					                                       f32_3 %412 = OpLoad %9 
					                                       f32_3 %413 = OpFAdd %411 %412 
					                                                      OpStore %294 %413 
					                read_only TextureCubeSampled %419 = OpLoad %418 
					                                       f32_3 %421 = OpLoad %420 
					                                       f32_4 %422 = OpImageSampleImplicitLod %419 %421 
					                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
					                                                      OpStore %414 %423 
					                                       f32_3 %425 = OpLoad %414 
					                              Uniform f32_4* %427 = OpAccessChain %22 %426 
					                                       f32_4 %428 = OpLoad %427 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFMul %425 %429 
					                                                      OpStore %424 %430 
					                                       f32_3 %433 = OpLoad %424 
					                                       f32_4 %434 = OpLoad %48 
					                                       f32_3 %435 = OpVectorShuffle %434 %434 1 1 1 
					                                       f32_3 %436 = OpFMul %433 %435 
					                                       f32_3 %437 = OpLoad %294 
					                                       f32_3 %438 = OpFAdd %436 %437 
					                                       f32_4 %439 = OpLoad %432 
					                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
					                                                      OpStore %432 %440 
					                                 Output f32* %442 = OpAccessChain %432 %138 
					                                                      OpStore %442 %62 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 250
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %113 %126 %130 %189 %192 %232 %242 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate %100 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %126 Location 126 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %192 Location 192 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %232 Location 232 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 Location 242 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 5 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                               Output f32_2* %100 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                               Output f32_2* %113 = OpVariable Output 
					                                         f32 %114 = OpConstant 3.674022E-40 
					                                       f32_2 %115 = OpConstantComposite %114 %114 
					                                             %119 = OpTypePointer Uniform %14 
					                                             %125 = OpTypePointer Output %14 
					                               Output f32_3* %126 = OpVariable Output 
					                                             %129 = OpTypePointer Input %14 
					                                Input f32_3* %130 = OpVariable Input 
					                                         i32 %132 = OpConstant 6 
					                                         u32 %137 = OpConstant 0 
					                                             %138 = OpTypePointer Private %6 
					                                         u32 %151 = OpConstant 2 
					                                Private f32* %153 = OpVariable Private 
					                               Output f32_3* %189 = OpVariable Output 
					                               Output f32_3* %192 = OpVariable Output 
					                                Private f32* %195 = OpVariable Private 
					                              Private f32_4* %209 = OpVariable Private 
					                                             %215 = OpTypePointer Private %14 
					                              Private f32_3* %216 = OpVariable Private 
					                               Output f32_3* %232 = OpVariable Output 
					                                         i32 %233 = OpConstant 4 
					                               Output f32_4* %242 = OpVariable Output 
					                                       f32_4 %243 = OpConstantComposite %114 %114 %114 %114 
					                                             %244 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %22 %66 %48 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %46 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %30 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %22 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %22 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore %100 %112 
					                                                      OpStore %113 %115 
					                                       f32_4 %116 = OpLoad %9 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                       f32_3 %118 = OpFNegate %117 
					                              Uniform f32_3* %120 = OpAccessChain %22 %30 
					                                       f32_3 %121 = OpLoad %120 
					                                       f32_3 %122 = OpFAdd %118 %121 
					                                       f32_4 %123 = OpLoad %46 
					                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
					                                                      OpStore %46 %124 
					                                       f32_4 %127 = OpLoad %9 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                                      OpStore %126 %128 
					                                       f32_3 %131 = OpLoad %130 
					                              Uniform f32_4* %133 = OpAccessChain %22 %132 %30 
					                                       f32_4 %134 = OpLoad %133 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %131 %135 
					                                Private f32* %139 = OpAccessChain %9 %137 
					                                                      OpStore %139 %136 
					                                       f32_3 %140 = OpLoad %130 
					                              Uniform f32_4* %141 = OpAccessChain %22 %132 %25 
					                                       f32_4 %142 = OpLoad %141 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %140 %143 
					                                Private f32* %145 = OpAccessChain %9 %84 
					                                                      OpStore %145 %144 
					                                       f32_3 %146 = OpLoad %130 
					                              Uniform f32_4* %147 = OpAccessChain %22 %132 %38 
					                                       f32_4 %148 = OpLoad %147 
					                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
					                                         f32 %150 = OpDot %146 %149 
					                                Private f32* %152 = OpAccessChain %9 %151 
					                                                      OpStore %152 %150 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                       f32_4 %156 = OpLoad %9 
					                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
					                                         f32 %158 = OpDot %155 %157 
					                                                      OpStore %153 %158 
					                                         f32 %159 = OpLoad %153 
					                                         f32 %160 = OpExtInst %1 32 %159 
					                                                      OpStore %153 %160 
					                                         f32 %161 = OpLoad %153 
					                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFMul %162 %164 
					                                       f32_4 %166 = OpLoad %9 
					                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
					                                                      OpStore %9 %167 
					                                       f32_4 %168 = OpLoad %46 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFNegate %169 
					                                       f32_4 %171 = OpLoad %9 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %170 %172 
					                                                      OpStore %153 %173 
					                                         f32 %174 = OpLoad %153 
					                                         f32 %175 = OpLoad %153 
					                                         f32 %176 = OpFAdd %174 %175 
					                                                      OpStore %153 %176 
					                                       f32_4 %177 = OpLoad %9 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpLoad %153 
					                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
					                                       f32_3 %181 = OpFNegate %180 
					                                       f32_3 %182 = OpFMul %178 %181 
					                                       f32_4 %183 = OpLoad %46 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                       f32_3 %185 = OpFNegate %184 
					                                       f32_3 %186 = OpFAdd %182 %185 
					                                       f32_4 %187 = OpLoad %46 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %46 %188 
					                                       f32_4 %190 = OpLoad %46 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                                      OpStore %189 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                                      OpStore %192 %194 
					                                Private f32* %196 = OpAccessChain %9 %84 
					                                         f32 %197 = OpLoad %196 
					                                Private f32* %198 = OpAccessChain %9 %84 
					                                         f32 %199 = OpLoad %198 
					                                         f32 %200 = OpFMul %197 %199 
					                                                      OpStore %195 %200 
					                                Private f32* %201 = OpAccessChain %9 %137 
					                                         f32 %202 = OpLoad %201 
					                                Private f32* %203 = OpAccessChain %9 %137 
					                                         f32 %204 = OpLoad %203 
					                                         f32 %205 = OpFMul %202 %204 
					                                         f32 %206 = OpLoad %195 
					                                         f32 %207 = OpFNegate %206 
					                                         f32 %208 = OpFAdd %205 %207 
					                                                      OpStore %195 %208 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 1 2 2 0 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_4 %213 = OpVectorShuffle %212 %212 0 1 2 2 
					                                       f32_4 %214 = OpFMul %211 %213 
					                                                      OpStore %209 %214 
					                              Uniform f32_4* %217 = OpAccessChain %22 %25 
					                                       f32_4 %218 = OpLoad %217 
					                                       f32_4 %219 = OpLoad %209 
					                                         f32 %220 = OpDot %218 %219 
					                                Private f32* %221 = OpAccessChain %216 %137 
					                                                      OpStore %221 %220 
					                              Uniform f32_4* %222 = OpAccessChain %22 %38 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_4 %224 = OpLoad %209 
					                                         f32 %225 = OpDot %223 %224 
					                                Private f32* %226 = OpAccessChain %216 %84 
					                                                      OpStore %226 %225 
					                              Uniform f32_4* %227 = OpAccessChain %22 %48 
					                                       f32_4 %228 = OpLoad %227 
					                                       f32_4 %229 = OpLoad %209 
					                                         f32 %230 = OpDot %228 %229 
					                                Private f32* %231 = OpAccessChain %216 %151 
					                                                      OpStore %231 %230 
					                              Uniform f32_4* %234 = OpAccessChain %22 %233 
					                                       f32_4 %235 = OpLoad %234 
					                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
					                                         f32 %237 = OpLoad %195 
					                                       f32_3 %238 = OpCompositeConstruct %237 %237 %237 
					                                       f32_3 %239 = OpFMul %236 %238 
					                                       f32_3 %240 = OpLoad %216 
					                                       f32_3 %241 = OpFAdd %239 %240 
					                                                      OpStore %232 %241 
					                                                      OpStore %242 %243 
					                                 Output f32* %245 = OpAccessChain %88 %30 %84 
					                                         f32 %246 = OpLoad %245 
					                                         f32 %247 = OpFNegate %246 
					                                 Output f32* %248 = OpAccessChain %88 %30 %84 
					                                                      OpStore %248 %247 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 445
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %57 %135 %384 %420 %432 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 RelaxedPrecision 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpMemberDecorate %20 9 RelaxedPrecision 
					                                                      OpMemberDecorate %20 9 Offset 20 
					                                                      OpMemberDecorate %20 10 RelaxedPrecision 
					                                                      OpMemberDecorate %20 10 Offset 20 
					                                                      OpMemberDecorate %20 11 RelaxedPrecision 
					                                                      OpMemberDecorate %20 11 Offset 20 
					                                                      OpMemberDecorate %20 12 RelaxedPrecision 
					                                                      OpMemberDecorate %20 12 Offset 20 
					                                                      OpMemberDecorate %20 13 RelaxedPrecision 
					                                                      OpMemberDecorate %20 13 Offset 20 
					                                                      OpMemberDecorate %20 14 Offset 20 
					                                                      OpMemberDecorate %20 15 Offset 20 
					                                                      OpMemberDecorate %20 16 Offset 20 
					                                                      OpMemberDecorate %20 17 Offset 20 
					                                                      OpMemberDecorate %20 18 RelaxedPrecision 
					                                                      OpMemberDecorate %20 18 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpDecorate %36 RelaxedPrecision 
					                                                      OpDecorate %44 RelaxedPrecision 
					                                                      OpDecorate %45 RelaxedPrecision 
					                                                      OpDecorate %57 Location 57 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %91 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %119 RelaxedPrecision 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %132 DescriptorSet 132 
					                                                      OpDecorate %132 Binding 132 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %135 Location 135 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %156 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %259 DescriptorSet 259 
					                                                      OpDecorate %259 Binding 259 
					                                                      OpDecorate %260 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %267 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %287 RelaxedPrecision 
					                                                      OpDecorate %288 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %294 RelaxedPrecision 
					                                                      OpDecorate %295 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %299 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %311 RelaxedPrecision 
					                                                      OpDecorate %319 RelaxedPrecision 
					                                                      OpDecorate %320 RelaxedPrecision 
					                                                      OpDecorate %321 RelaxedPrecision 
					                                                      OpDecorate %322 RelaxedPrecision 
					                                                      OpDecorate %323 RelaxedPrecision 
					                                                      OpDecorate %324 RelaxedPrecision 
					                                                      OpDecorate %336 RelaxedPrecision 
					                                                      OpDecorate %337 RelaxedPrecision 
					                                                      OpDecorate %339 RelaxedPrecision 
					                                                      OpDecorate %340 RelaxedPrecision 
					                                                      OpDecorate %345 RelaxedPrecision 
					                                                      OpDecorate %351 RelaxedPrecision 
					                                                      OpDecorate %352 RelaxedPrecision 
					                                                      OpDecorate %354 RelaxedPrecision 
					                                                      OpDecorate %355 RelaxedPrecision 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %357 RelaxedPrecision 
					                                                      OpDecorate %358 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate %384 Location 384 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate %387 RelaxedPrecision 
					                                                      OpDecorate %389 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %391 RelaxedPrecision 
					                                                      OpDecorate %392 RelaxedPrecision 
					                                                      OpDecorate %393 RelaxedPrecision 
					                                                      OpDecorate %396 RelaxedPrecision 
					                                                      OpDecorate %397 RelaxedPrecision 
					                                                      OpDecorate %398 RelaxedPrecision 
					                                                      OpDecorate %399 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %406 RelaxedPrecision 
					                                                      OpDecorate %407 RelaxedPrecision 
					                                                      OpDecorate %410 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %418 DescriptorSet 418 
					                                                      OpDecorate %418 Binding 418 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate %421 RelaxedPrecision 
					                                                      OpDecorate %423 RelaxedPrecision 
					                                                      OpDecorate %424 RelaxedPrecision 
					                                                      OpDecorate %425 RelaxedPrecision 
					                                                      OpDecorate %428 RelaxedPrecision 
					                                                      OpDecorate %429 RelaxedPrecision 
					                                                      OpDecorate %430 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate %432 Location 432 
					                                                      OpDecorate %433 RelaxedPrecision 
					                                                      OpDecorate %437 RelaxedPrecision 
					                                                      OpDecorate %444 RelaxedPrecision 
					                                                      OpDecorate %444 DescriptorSet 444 
					                                                      OpDecorate %444 Binding 444 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 16 
					                                              %17 = OpTypeArray %14 %16 
					                                          u32 %18 = OpConstant 4 
					                                              %19 = OpTypeArray %14 %18 
					                                              %20 = OpTypeStruct %7 %14 %14 %14 %14 %17 %14 %14 %19 %14 %14 %14 %14 %6 %6 %6 %6 %6 %14 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                              %25 = OpTypePointer Uniform %7 
					                                              %29 = OpTypePointer Private %6 
					                                 Private f32* %30 = OpVariable Private 
					                               Private f32_3* %36 = OpVariable Private 
					                                          i32 %41 = OpConstant 1 
					                                              %42 = OpTypePointer Uniform %14 
					                                              %47 = OpTypePointer Private %14 
					                               Private f32_4* %48 = OpVariable Private 
					                                 Input f32_3* %57 = OpVariable Input 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                          f32 %62 = OpConstant 3.674022E-40 
					                                 Private f32* %64 = OpVariable Private 
					                                 Private f32* %68 = OpVariable Private 
					                                              %72 = OpTypeVector %6 2 
					                                          i32 %74 = OpConstant 16 
					                                              %75 = OpTypePointer Uniform %6 
					                                          i32 %78 = OpConstant 14 
					                                         u32 %102 = OpConstant 0 
					                                         i32 %111 = OpConstant 13 
					                                         f32 %114 = OpConstant 3.674022E-40 
					                                Private f32* %128 = OpVariable Private 
					                                             %129 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %130 = OpTypeSampledImage %129 
					                                             %131 = OpTypePointer UniformConstant %130 
					 UniformConstant read_only Texture2DSampled* %132 = OpVariable UniformConstant 
					                                             %134 = OpTypePointer Input %72 
					                                Input f32_2* %135 = OpVariable Input 
					                                         u32 %138 = OpConstant 3 
					                                Private f32* %145 = OpVariable Private 
					                                         i32 %148 = OpConstant 15 
					                                         i32 %152 = OpConstant 10 
					                              Private f32_3* %159 = OpVariable Private 
					                                         i32 %160 = OpConstant 8 
					                                         u32 %161 = OpConstant 2 
					                                         u32 %167 = OpConstant 1 
					                                         i32 %169 = OpConstant 2 
					                                         i32 %178 = OpConstant 7 
					                                Private f32* %184 = OpVariable Private 
					                                         i32 %205 = OpConstant 6 
					                                         i32 %219 = OpConstant 5 
					                                         i32 %241 = OpConstant 3 
					                                             %246 = OpTypePointer Function %7 
					                                Private f32* %255 = OpVariable Private 
					                                             %256 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
					                                             %257 = OpTypeSampledImage %256 
					                                             %258 = OpTypePointer UniformConstant %257 
					 UniformConstant read_only Texture2DSampled* %259 = OpVariable UniformConstant 
					                                         i32 %289 = OpConstant 9 
					                              Private f32_3* %294 = OpVariable Private 
					                                         i32 %306 = OpConstant 18 
					                                         i32 %312 = OpConstant 17 
					                                         i32 %334 = OpConstant 11 
					                              Private f32_4* %362 = OpVariable Private 
					                                         i32 %377 = OpConstant 4 
					                                Input f32_3* %384 = OpVariable Input 
					                                       f32_3 %388 = OpConstantComposite %61 %61 %61 
					                              Private f32_3* %390 = OpVariable Private 
					                                         f32 %394 = OpConstant 3.674022E-40 
					                                       f32_3 %395 = OpConstantComposite %394 %394 %394 
					                                         f32 %400 = OpConstant 3.674022E-40 
					                                       f32_3 %401 = OpConstantComposite %400 %400 %400 
					                                         f32 %403 = OpConstant 3.674022E-40 
					                                       f32_3 %404 = OpConstantComposite %403 %403 %403 
					                              Private f32_3* %414 = OpVariable Private 
					                                             %415 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %416 = OpTypeSampledImage %415 
					                                             %417 = OpTypePointer UniformConstant %416 
					UniformConstant read_only TextureCubeSampled* %418 = OpVariable UniformConstant 
					                                Input f32_3* %420 = OpVariable Input 
					                              Private f32_3* %424 = OpVariable Private 
					                                         i32 %426 = OpConstant 12 
					                                             %431 = OpTypePointer Output %14 
					                               Output f32_4* %432 = OpVariable Output 
					                                             %441 = OpTypePointer Output %6 
					 UniformConstant read_only Texture2DSampled* %444 = OpVariable UniformConstant 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %247 = OpVariable Function 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %26 = OpAccessChain %22 %24 
					                                        f32_3 %27 = OpLoad %26 
					                                        f32_3 %28 = OpFAdd %13 %27 
					                                                      OpStore %9 %28 
					                                        f32_3 %31 = OpLoad %9 
					                                        f32_3 %32 = OpLoad %9 
					                                          f32 %33 = OpDot %31 %32 
					                                                      OpStore %30 %33 
					                                          f32 %34 = OpLoad %30 
					                                          f32 %35 = OpExtInst %1 32 %34 
					                                                      OpStore %30 %35 
					                                        f32_3 %37 = OpLoad %9 
					                                          f32 %38 = OpLoad %30 
					                                        f32_3 %39 = OpCompositeConstruct %38 %38 %38 
					                                        f32_3 %40 = OpFMul %37 %39 
					                               Uniform f32_4* %43 = OpAccessChain %22 %41 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %46 = OpFAdd %40 %45 
					                                                      OpStore %36 %46 
					                                          f32 %49 = OpLoad %30 
					                                        f32_3 %50 = OpCompositeConstruct %49 %49 %49 
					                                        f32_3 %51 = OpLoad %9 
					                                        f32_3 %52 = OpFMul %50 %51 
					                                        f32_4 %53 = OpLoad %48 
					                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
					                                                      OpStore %48 %54 
					                                        f32_4 %55 = OpLoad %48 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_3 %58 = OpLoad %57 
					                                          f32 %59 = OpDot %56 %58 
					                                                      OpStore %30 %59 
					                                          f32 %60 = OpLoad %30 
					                                          f32 %63 = OpExtInst %1 43 %60 %61 %62 
					                                                      OpStore %30 %63 
					                                          f32 %65 = OpLoad %30 
					                                          f32 %66 = OpFNegate %65 
					                                          f32 %67 = OpFAdd %66 %62 
					                                                      OpStore %64 %67 
					                                          f32 %69 = OpLoad %64 
					                                          f32 %70 = OpExtInst %1 30 %69 
					                                                      OpStore %68 %70 
					                                          f32 %71 = OpLoad %68 
					                                        f32_2 %73 = OpCompositeConstruct %71 %71 
					                                 Uniform f32* %76 = OpAccessChain %22 %74 
					                                          f32 %77 = OpLoad %76 
					                                 Uniform f32* %79 = OpAccessChain %22 %78 
					                                          f32 %80 = OpLoad %79 
					                                        f32_2 %81 = OpCompositeConstruct %77 %80 
					                                        f32_2 %82 = OpFMul %73 %81 
					                                        f32_4 %83 = OpLoad %48 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 2 3 
					                                                      OpStore %48 %84 
					                                        f32_4 %85 = OpLoad %48 
					                                        f32_2 %86 = OpVectorShuffle %85 %85 0 1 
					                                        f32_2 %87 = OpExtInst %1 29 %86 
					                                        f32_4 %88 = OpLoad %48 
					                                        f32_4 %89 = OpVectorShuffle %88 %87 4 5 2 3 
					                                                      OpStore %48 %89 
					                                        f32_3 %90 = OpLoad %36 
					                                        f32_3 %91 = OpLoad %36 
					                                          f32 %92 = OpDot %90 %91 
					                                                      OpStore %64 %92 
					                                          f32 %93 = OpLoad %64 
					                                          f32 %94 = OpExtInst %1 32 %93 
					                                                      OpStore %64 %94 
					                                          f32 %95 = OpLoad %64 
					                                        f32_3 %96 = OpCompositeConstruct %95 %95 %95 
					                                        f32_3 %97 = OpLoad %36 
					                                        f32_3 %98 = OpFMul %96 %97 
					                                                      OpStore %36 %98 
					                                        f32_3 %99 = OpLoad %57 
					                                       f32_3 %100 = OpLoad %36 
					                                         f32 %101 = OpDot %99 %100 
					                                Private f32* %103 = OpAccessChain %36 %102 
					                                                      OpStore %103 %101 
					                                Private f32* %104 = OpAccessChain %36 %102 
					                                         f32 %105 = OpLoad %104 
					                                         f32 %106 = OpExtInst %1 40 %105 %61 
					                                Private f32* %107 = OpAccessChain %36 %102 
					                                                      OpStore %107 %106 
					                                Private f32* %108 = OpAccessChain %36 %102 
					                                         f32 %109 = OpLoad %108 
					                                         f32 %110 = OpExtInst %1 30 %109 
					                                                      OpStore %68 %110 
					                                Uniform f32* %112 = OpAccessChain %22 %111 
					                                         f32 %113 = OpLoad %112 
					                                         f32 %115 = OpFMul %113 %114 
					                                Private f32* %116 = OpAccessChain %36 %102 
					                                                      OpStore %116 %115 
					                                         f32 %117 = OpLoad %68 
					                                Private f32* %118 = OpAccessChain %36 %102 
					                                         f32 %119 = OpLoad %118 
					                                         f32 %120 = OpFMul %117 %119 
					                                                      OpStore %68 %120 
					                                         f32 %121 = OpLoad %68 
					                                         f32 %122 = OpExtInst %1 29 %121 
					                                                      OpStore %68 %122 
					                                Private f32* %123 = OpAccessChain %48 %102 
					                                         f32 %124 = OpLoad %123 
					                                         f32 %125 = OpFNegate %124 
					                                         f32 %126 = OpFAdd %125 %62 
					                                Private f32* %127 = OpAccessChain %36 %102 
					                                                      OpStore %127 %126 
					                  read_only Texture2DSampled %133 = OpLoad %132 
					                                       f32_2 %136 = OpLoad %135 
					                                       f32_4 %137 = OpImageSampleImplicitLod %133 %136 
					                                         f32 %139 = OpCompositeExtract %137 3 
					                                                      OpStore %128 %139 
					                                Private f32* %140 = OpAccessChain %36 %102 
					                                         f32 %141 = OpLoad %140 
					                                         f32 %142 = OpLoad %128 
					                                         f32 %143 = OpFMul %141 %142 
					                                Private f32* %144 = OpAccessChain %36 %102 
					                                                      OpStore %144 %143 
					                                Private f32* %146 = OpAccessChain %36 %102 
					                                         f32 %147 = OpLoad %146 
					                                Uniform f32* %149 = OpAccessChain %22 %148 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpFMul %147 %150 
					                                Uniform f32* %153 = OpAccessChain %22 %152 %138 
					                                         f32 %154 = OpLoad %153 
					                                         f32 %155 = OpFAdd %151 %154 
					                                                      OpStore %145 %155 
					                                         f32 %156 = OpLoad %68 
					                                         f32 %157 = OpLoad %145 
					                                         f32 %158 = OpFMul %156 %157 
					                                                      OpStore %30 %158 
					                                Uniform f32* %162 = OpAccessChain %22 %160 %24 %161 
					                                         f32 %163 = OpLoad %162 
					                                Private f32* %164 = OpAccessChain %159 %102 
					                                                      OpStore %164 %163 
					                                Uniform f32* %165 = OpAccessChain %22 %160 %41 %161 
					                                         f32 %166 = OpLoad %165 
					                                Private f32* %168 = OpAccessChain %159 %167 
					                                                      OpStore %168 %166 
					                                Uniform f32* %170 = OpAccessChain %22 %160 %169 %161 
					                                         f32 %171 = OpLoad %170 
					                                Private f32* %172 = OpAccessChain %159 %161 
					                                                      OpStore %172 %171 
					                                       f32_3 %173 = OpLoad %9 
					                                       f32_3 %174 = OpLoad %159 
					                                         f32 %175 = OpDot %173 %174 
					                                Private f32* %176 = OpAccessChain %9 %102 
					                                                      OpStore %176 %175 
					                                       f32_3 %177 = OpLoad %11 
					                              Uniform f32_4* %179 = OpAccessChain %22 %178 
					                                       f32_4 %180 = OpLoad %179 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFAdd %177 %182 
					                                                      OpStore %159 %183 
					                                       f32_3 %185 = OpLoad %159 
					                                       f32_3 %186 = OpLoad %159 
					                                         f32 %187 = OpDot %185 %186 
					                                                      OpStore %184 %187 
					                                         f32 %188 = OpLoad %184 
					                                         f32 %189 = OpExtInst %1 31 %188 
					                                                      OpStore %184 %189 
					                                Private f32* %190 = OpAccessChain %9 %102 
					                                         f32 %191 = OpLoad %190 
					                                         f32 %192 = OpFNegate %191 
					                                         f32 %193 = OpLoad %184 
					                                         f32 %194 = OpFAdd %192 %193 
					                                                      OpStore %184 %194 
					                                Uniform f32* %195 = OpAccessChain %22 %178 %138 
					                                         f32 %196 = OpLoad %195 
					                                         f32 %197 = OpLoad %184 
					                                         f32 %198 = OpFMul %196 %197 
					                                Private f32* %199 = OpAccessChain %9 %102 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpFAdd %198 %200 
					                                Private f32* %202 = OpAccessChain %9 %102 
					                                                      OpStore %202 %201 
					                                Private f32* %203 = OpAccessChain %9 %102 
					                                         f32 %204 = OpLoad %203 
					                                Uniform f32* %206 = OpAccessChain %22 %205 %161 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFMul %204 %207 
					                                Uniform f32* %209 = OpAccessChain %22 %205 %138 
					                                         f32 %210 = OpLoad %209 
					                                         f32 %211 = OpFAdd %208 %210 
					                                Private f32* %212 = OpAccessChain %9 %102 
					                                                      OpStore %212 %211 
					                                Private f32* %213 = OpAccessChain %9 %102 
					                                         f32 %214 = OpLoad %213 
					                                         f32 %215 = OpExtInst %1 43 %214 %61 %62 
					                                Private f32* %216 = OpAccessChain %9 %102 
					                                                      OpStore %216 %215 
					                                       f32_3 %217 = OpLoad %11 
					                                       f32_3 %218 = OpVectorShuffle %217 %217 1 1 1 
					                              Uniform f32_4* %220 = OpAccessChain %22 %219 %41 
					                                       f32_4 %221 = OpLoad %220 
					                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
					                                       f32_3 %223 = OpFMul %218 %222 
					                                                      OpStore %159 %223 
					                              Uniform f32_4* %224 = OpAccessChain %22 %219 %24 
					                                       f32_4 %225 = OpLoad %224 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpLoad %11 
					                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
					                                       f32_3 %229 = OpFMul %226 %228 
					                                       f32_3 %230 = OpLoad %159 
					                                       f32_3 %231 = OpFAdd %229 %230 
					                                                      OpStore %159 %231 
					                              Uniform f32_4* %232 = OpAccessChain %22 %219 %169 
					                                       f32_4 %233 = OpLoad %232 
					                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
					                                       f32_3 %235 = OpLoad %11 
					                                       f32_3 %236 = OpVectorShuffle %235 %235 2 2 2 
					                                       f32_3 %237 = OpFMul %234 %236 
					                                       f32_3 %238 = OpLoad %159 
					                                       f32_3 %239 = OpFAdd %237 %238 
					                                                      OpStore %159 %239 
					                                       f32_3 %240 = OpLoad %159 
					                              Uniform f32_4* %242 = OpAccessChain %22 %219 %241 
					                                       f32_4 %243 = OpLoad %242 
					                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
					                                       f32_3 %245 = OpFAdd %240 %244 
					                                                      OpStore %159 %245 
					                                       f32_3 %248 = OpLoad %159 
					                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
					                                Private f32* %250 = OpAccessChain %159 %161 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpCompositeExtract %249 0 
					                                         f32 %253 = OpCompositeExtract %249 1 
					                                       f32_3 %254 = OpCompositeConstruct %252 %253 %251 
					                                                      OpStore %247 %254 
					                  read_only Texture2DSampled %260 = OpLoad %259 
					                                       f32_3 %261 = OpLoad %247 
					                                         f32 %262 = OpCompositeExtract %261 2 
					                                         f32 %263 = OpImageSampleDrefExplicitLod %260 %261 %262 Lod %6 
					                                                      OpStore %255 %263 
					                                Uniform f32* %264 = OpAccessChain %22 %205 %102 
					                                         f32 %265 = OpLoad %264 
					                                         f32 %266 = OpFNegate %265 
					                                         f32 %267 = OpFAdd %266 %62 
					                                Private f32* %268 = OpAccessChain %36 %102 
					                                                      OpStore %268 %267 
					                                         f32 %269 = OpLoad %255 
					                                Private f32* %270 = OpAccessChain %36 %102 
					                                         f32 %271 = OpLoad %270 
					                                         f32 %272 = OpFMul %269 %271 
					                                Uniform f32* %273 = OpAccessChain %22 %205 %102 
					                                         f32 %274 = OpLoad %273 
					                                         f32 %275 = OpFAdd %272 %274 
					                                Private f32* %276 = OpAccessChain %36 %102 
					                                                      OpStore %276 %275 
					                                Private f32* %277 = OpAccessChain %9 %102 
					                                         f32 %278 = OpLoad %277 
					                                Private f32* %279 = OpAccessChain %36 %102 
					                                         f32 %280 = OpLoad %279 
					                                         f32 %281 = OpFAdd %278 %280 
					                                Private f32* %282 = OpAccessChain %36 %102 
					                                                      OpStore %282 %281 
					                                Private f32* %283 = OpAccessChain %36 %102 
					                                         f32 %284 = OpLoad %283 
					                                         f32 %285 = OpExtInst %1 43 %284 %61 %62 
					                                Private f32* %286 = OpAccessChain %36 %102 
					                                                      OpStore %286 %285 
					                                       f32_3 %287 = OpLoad %36 
					                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
					                              Uniform f32_4* %290 = OpAccessChain %22 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_3 %293 = OpFMul %288 %292 
					                                                      OpStore %36 %293 
					                                       f32_3 %295 = OpLoad %36 
					                              Uniform f32_4* %296 = OpAccessChain %22 %152 
					                                       f32_4 %297 = OpLoad %296 
					                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
					                                       f32_3 %299 = OpFMul %295 %298 
					                                                      OpStore %294 %299 
					                                         f32 %300 = OpLoad %30 
					                                       f32_3 %301 = OpCompositeConstruct %300 %300 %300 
					                                       f32_3 %302 = OpLoad %294 
					                                       f32_3 %303 = OpFMul %301 %302 
					                                                      OpStore %9 %303 
					                                       f32_4 %304 = OpLoad %48 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 0 0 
					                              Uniform f32_4* %307 = OpAccessChain %22 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %305 %309 
					                                                      OpStore %294 %310 
					                                       f32_3 %311 = OpLoad %294 
					                                Uniform f32* %313 = OpAccessChain %22 %312 
					                                         f32 %314 = OpLoad %313 
					                                Uniform f32* %315 = OpAccessChain %22 %312 
					                                         f32 %316 = OpLoad %315 
					                                Uniform f32* %317 = OpAccessChain %22 %312 
					                                         f32 %318 = OpLoad %317 
					                                       f32_3 %319 = OpCompositeConstruct %314 %316 %318 
					                                         f32 %320 = OpCompositeExtract %319 0 
					                                         f32 %321 = OpCompositeExtract %319 1 
					                                         f32 %322 = OpCompositeExtract %319 2 
					                                       f32_3 %323 = OpCompositeConstruct %320 %321 %322 
					                                       f32_3 %324 = OpFMul %311 %323 
					                                                      OpStore %159 %324 
					                                Private f32* %325 = OpAccessChain %48 %102 
					                                         f32 %326 = OpLoad %325 
					                                         f32 %327 = OpFNegate %326 
					                                Uniform f32* %328 = OpAccessChain %22 %312 
					                                         f32 %329 = OpLoad %328 
					                                         f32 %330 = OpFMul %327 %329 
					                                         f32 %331 = OpFAdd %330 %62 
					                                                      OpStore %30 %331 
					                                         f32 %332 = OpLoad %30 
					                                         f32 %333 = OpExtInst %1 43 %332 %61 %62 
					                                                      OpStore %30 %333 
					                              Uniform f32_4* %335 = OpAccessChain %22 %334 
					                                       f32_4 %336 = OpLoad %335 
					                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
					                                         f32 %338 = OpLoad %30 
					                                       f32_3 %339 = OpCompositeConstruct %338 %338 %338 
					                                       f32_3 %340 = OpFMul %337 %339 
					                                       f32_3 %341 = OpLoad %159 
					                                       f32_3 %342 = OpFAdd %340 %341 
					                                       f32_4 %343 = OpLoad %48 
					                                       f32_4 %344 = OpVectorShuffle %343 %342 4 1 5 6 
					                                                      OpStore %48 %344 
					                                       f32_3 %345 = OpLoad %36 
					                                       f32_4 %346 = OpLoad %48 
					                                       f32_3 %347 = OpVectorShuffle %346 %346 0 2 3 
					                                       f32_3 %348 = OpFMul %345 %347 
					                                                      OpStore %36 %348 
					                                       f32_3 %349 = OpLoad %57 
					                              Uniform f32_4* %350 = OpAccessChain %22 %41 
					                                       f32_4 %351 = OpLoad %350 
					                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
					                                         f32 %353 = OpDot %349 %352 
					                                                      OpStore %64 %353 
					                                         f32 %354 = OpLoad %64 
					                                         f32 %355 = OpExtInst %1 40 %354 %61 
					                                                      OpStore %64 %355 
					                                       f32_3 %356 = OpLoad %36 
					                                         f32 %357 = OpLoad %64 
					                                       f32_3 %358 = OpCompositeConstruct %357 %357 %357 
					                                       f32_3 %359 = OpFMul %356 %358 
					                                       f32_3 %360 = OpLoad %9 
					                                       f32_3 %361 = OpFAdd %359 %360 
					                                                      OpStore %9 %361 
					                                       f32_3 %363 = OpLoad %57 
					                                       f32_4 %364 = OpLoad %362 
					                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
					                                                      OpStore %362 %365 
					                                Private f32* %366 = OpAccessChain %362 %138 
					                                                      OpStore %366 %62 
					                              Uniform f32_4* %367 = OpAccessChain %22 %169 
					                                       f32_4 %368 = OpLoad %367 
					                                       f32_4 %369 = OpLoad %362 
					                                         f32 %370 = OpDot %368 %369 
					                                Private f32* %371 = OpAccessChain %294 %102 
					                                                      OpStore %371 %370 
					                              Uniform f32_4* %372 = OpAccessChain %22 %241 
					                                       f32_4 %373 = OpLoad %372 
					                                       f32_4 %374 = OpLoad %362 
					                                         f32 %375 = OpDot %373 %374 
					                                Private f32* %376 = OpAccessChain %294 %167 
					                                                      OpStore %376 %375 
					                              Uniform f32_4* %378 = OpAccessChain %22 %377 
					                                       f32_4 %379 = OpLoad %378 
					                                       f32_4 %380 = OpLoad %362 
					                                         f32 %381 = OpDot %379 %380 
					                                Private f32* %382 = OpAccessChain %294 %161 
					                                                      OpStore %382 %381 
					                                       f32_3 %383 = OpLoad %294 
					                                       f32_3 %385 = OpLoad %384 
					                                       f32_3 %386 = OpFAdd %383 %385 
					                                                      OpStore %294 %386 
					                                       f32_3 %387 = OpLoad %294 
					                                       f32_3 %389 = OpExtInst %1 40 %387 %388 
					                                                      OpStore %294 %389 
					                                       f32_3 %391 = OpLoad %294 
					                                       f32_3 %392 = OpExtInst %1 30 %391 
					                                                      OpStore %390 %392 
					                                       f32_3 %393 = OpLoad %390 
					                                       f32_3 %396 = OpFMul %393 %395 
					                                                      OpStore %390 %396 
					                                       f32_3 %397 = OpLoad %390 
					                                       f32_3 %398 = OpExtInst %1 29 %397 
					                                                      OpStore %390 %398 
					                                       f32_3 %399 = OpLoad %390 
					                                       f32_3 %402 = OpFMul %399 %401 
					                                       f32_3 %405 = OpFAdd %402 %404 
					                                                      OpStore %390 %405 
					                                       f32_3 %406 = OpLoad %390 
					                                       f32_3 %407 = OpExtInst %1 40 %406 %388 
					                                                      OpStore %390 %407 
					                                       f32_4 %408 = OpLoad %48 
					                                       f32_3 %409 = OpVectorShuffle %408 %408 0 2 3 
					                                       f32_3 %410 = OpLoad %390 
					                                       f32_3 %411 = OpFMul %409 %410 
					                                       f32_3 %412 = OpLoad %9 
					                                       f32_3 %413 = OpFAdd %411 %412 
					                                                      OpStore %294 %413 
					                read_only TextureCubeSampled %419 = OpLoad %418 
					                                       f32_3 %421 = OpLoad %420 
					                                       f32_4 %422 = OpImageSampleImplicitLod %419 %421 
					                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
					                                                      OpStore %414 %423 
					                                       f32_3 %425 = OpLoad %414 
					                              Uniform f32_4* %427 = OpAccessChain %22 %426 
					                                       f32_4 %428 = OpLoad %427 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFMul %425 %429 
					                                                      OpStore %424 %430 
					                                       f32_3 %433 = OpLoad %424 
					                                       f32_4 %434 = OpLoad %48 
					                                       f32_3 %435 = OpVectorShuffle %434 %434 1 1 1 
					                                       f32_3 %436 = OpFMul %433 %435 
					                                       f32_3 %437 = OpLoad %294 
					                                       f32_3 %438 = OpFAdd %436 %437 
					                                       f32_4 %439 = OpLoad %432 
					                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
					                                                      OpStore %432 %440 
					                                 Output f32* %442 = OpAccessChain %432 %138 
					                                                      OpStore %442 %62 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 250
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %113 %126 %130 %189 %192 %232 %242 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate %100 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %126 Location 126 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %192 Location 192 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %232 Location 232 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 Location 242 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 5 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                               Output f32_2* %100 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                               Output f32_2* %113 = OpVariable Output 
					                                         f32 %114 = OpConstant 3.674022E-40 
					                                       f32_2 %115 = OpConstantComposite %114 %114 
					                                             %119 = OpTypePointer Uniform %14 
					                                             %125 = OpTypePointer Output %14 
					                               Output f32_3* %126 = OpVariable Output 
					                                             %129 = OpTypePointer Input %14 
					                                Input f32_3* %130 = OpVariable Input 
					                                         i32 %132 = OpConstant 6 
					                                         u32 %137 = OpConstant 0 
					                                             %138 = OpTypePointer Private %6 
					                                         u32 %151 = OpConstant 2 
					                                Private f32* %153 = OpVariable Private 
					                               Output f32_3* %189 = OpVariable Output 
					                               Output f32_3* %192 = OpVariable Output 
					                                Private f32* %195 = OpVariable Private 
					                              Private f32_4* %209 = OpVariable Private 
					                                             %215 = OpTypePointer Private %14 
					                              Private f32_3* %216 = OpVariable Private 
					                               Output f32_3* %232 = OpVariable Output 
					                                         i32 %233 = OpConstant 4 
					                               Output f32_4* %242 = OpVariable Output 
					                                       f32_4 %243 = OpConstantComposite %114 %114 %114 %114 
					                                             %244 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %22 %66 %48 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %46 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %30 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %22 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %22 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore %100 %112 
					                                                      OpStore %113 %115 
					                                       f32_4 %116 = OpLoad %9 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                       f32_3 %118 = OpFNegate %117 
					                              Uniform f32_3* %120 = OpAccessChain %22 %30 
					                                       f32_3 %121 = OpLoad %120 
					                                       f32_3 %122 = OpFAdd %118 %121 
					                                       f32_4 %123 = OpLoad %46 
					                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
					                                                      OpStore %46 %124 
					                                       f32_4 %127 = OpLoad %9 
					                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
					                                                      OpStore %126 %128 
					                                       f32_3 %131 = OpLoad %130 
					                              Uniform f32_4* %133 = OpAccessChain %22 %132 %30 
					                                       f32_4 %134 = OpLoad %133 
					                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
					                                         f32 %136 = OpDot %131 %135 
					                                Private f32* %139 = OpAccessChain %9 %137 
					                                                      OpStore %139 %136 
					                                       f32_3 %140 = OpLoad %130 
					                              Uniform f32_4* %141 = OpAccessChain %22 %132 %25 
					                                       f32_4 %142 = OpLoad %141 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %140 %143 
					                                Private f32* %145 = OpAccessChain %9 %84 
					                                                      OpStore %145 %144 
					                                       f32_3 %146 = OpLoad %130 
					                              Uniform f32_4* %147 = OpAccessChain %22 %132 %38 
					                                       f32_4 %148 = OpLoad %147 
					                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
					                                         f32 %150 = OpDot %146 %149 
					                                Private f32* %152 = OpAccessChain %9 %151 
					                                                      OpStore %152 %150 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                       f32_4 %156 = OpLoad %9 
					                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
					                                         f32 %158 = OpDot %155 %157 
					                                                      OpStore %153 %158 
					                                         f32 %159 = OpLoad %153 
					                                         f32 %160 = OpExtInst %1 32 %159 
					                                                      OpStore %153 %160 
					                                         f32 %161 = OpLoad %153 
					                                       f32_3 %162 = OpCompositeConstruct %161 %161 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
					                                       f32_3 %165 = OpFMul %162 %164 
					                                       f32_4 %166 = OpLoad %9 
					                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
					                                                      OpStore %9 %167 
					                                       f32_4 %168 = OpLoad %46 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFNegate %169 
					                                       f32_4 %171 = OpLoad %9 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %170 %172 
					                                                      OpStore %153 %173 
					                                         f32 %174 = OpLoad %153 
					                                         f32 %175 = OpLoad %153 
					                                         f32 %176 = OpFAdd %174 %175 
					                                                      OpStore %153 %176 
					                                       f32_4 %177 = OpLoad %9 
					                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
					                                         f32 %179 = OpLoad %153 
					                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
					                                       f32_3 %181 = OpFNegate %180 
					                                       f32_3 %182 = OpFMul %178 %181 
					                                       f32_4 %183 = OpLoad %46 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                       f32_3 %185 = OpFNegate %184 
					                                       f32_3 %186 = OpFAdd %182 %185 
					                                       f32_4 %187 = OpLoad %46 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %46 %188 
					                                       f32_4 %190 = OpLoad %46 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                                      OpStore %189 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                                      OpStore %192 %194 
					                                Private f32* %196 = OpAccessChain %9 %84 
					                                         f32 %197 = OpLoad %196 
					                                Private f32* %198 = OpAccessChain %9 %84 
					                                         f32 %199 = OpLoad %198 
					                                         f32 %200 = OpFMul %197 %199 
					                                                      OpStore %195 %200 
					                                Private f32* %201 = OpAccessChain %9 %137 
					                                         f32 %202 = OpLoad %201 
					                                Private f32* %203 = OpAccessChain %9 %137 
					                                         f32 %204 = OpLoad %203 
					                                         f32 %205 = OpFMul %202 %204 
					                                         f32 %206 = OpLoad %195 
					                                         f32 %207 = OpFNegate %206 
					                                         f32 %208 = OpFAdd %205 %207 
					                                                      OpStore %195 %208 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 1 2 2 0 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_4 %213 = OpVectorShuffle %212 %212 0 1 2 2 
					                                       f32_4 %214 = OpFMul %211 %213 
					                                                      OpStore %209 %214 
					                              Uniform f32_4* %217 = OpAccessChain %22 %25 
					                                       f32_4 %218 = OpLoad %217 
					                                       f32_4 %219 = OpLoad %209 
					                                         f32 %220 = OpDot %218 %219 
					                                Private f32* %221 = OpAccessChain %216 %137 
					                                                      OpStore %221 %220 
					                              Uniform f32_4* %222 = OpAccessChain %22 %38 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_4 %224 = OpLoad %209 
					                                         f32 %225 = OpDot %223 %224 
					                                Private f32* %226 = OpAccessChain %216 %84 
					                                                      OpStore %226 %225 
					                              Uniform f32_4* %227 = OpAccessChain %22 %48 
					                                       f32_4 %228 = OpLoad %227 
					                                       f32_4 %229 = OpLoad %209 
					                                         f32 %230 = OpDot %228 %229 
					                                Private f32* %231 = OpAccessChain %216 %151 
					                                                      OpStore %231 %230 
					                              Uniform f32_4* %234 = OpAccessChain %22 %233 
					                                       f32_4 %235 = OpLoad %234 
					                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
					                                         f32 %237 = OpLoad %195 
					                                       f32_3 %238 = OpCompositeConstruct %237 %237 %237 
					                                       f32_3 %239 = OpFMul %236 %238 
					                                       f32_3 %240 = OpLoad %216 
					                                       f32_3 %241 = OpFAdd %239 %240 
					                                                      OpStore %232 %241 
					                                                      OpStore %242 %243 
					                                 Output f32* %245 = OpAccessChain %88 %30 %84 
					                                         f32 %246 = OpLoad %245 
					                                         f32 %247 = OpFNegate %246 
					                                 Output f32* %248 = OpAccessChain %88 %30 %84 
					                                                      OpStore %248 %247 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 445
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %57 %135 %384 %420 %432 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 RelaxedPrecision 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpMemberDecorate %20 9 RelaxedPrecision 
					                                                      OpMemberDecorate %20 9 Offset 20 
					                                                      OpMemberDecorate %20 10 RelaxedPrecision 
					                                                      OpMemberDecorate %20 10 Offset 20 
					                                                      OpMemberDecorate %20 11 RelaxedPrecision 
					                                                      OpMemberDecorate %20 11 Offset 20 
					                                                      OpMemberDecorate %20 12 RelaxedPrecision 
					                                                      OpMemberDecorate %20 12 Offset 20 
					                                                      OpMemberDecorate %20 13 RelaxedPrecision 
					                                                      OpMemberDecorate %20 13 Offset 20 
					                                                      OpMemberDecorate %20 14 Offset 20 
					                                                      OpMemberDecorate %20 15 Offset 20 
					                                                      OpMemberDecorate %20 16 Offset 20 
					                                                      OpMemberDecorate %20 17 Offset 20 
					                                                      OpMemberDecorate %20 18 RelaxedPrecision 
					                                                      OpMemberDecorate %20 18 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpDecorate %36 RelaxedPrecision 
					                                                      OpDecorate %44 RelaxedPrecision 
					                                                      OpDecorate %45 RelaxedPrecision 
					                                                      OpDecorate %57 Location 57 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %91 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %119 RelaxedPrecision 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %132 DescriptorSet 132 
					                                                      OpDecorate %132 Binding 132 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %135 Location 135 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %156 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %259 DescriptorSet 259 
					                                                      OpDecorate %259 Binding 259 
					                                                      OpDecorate %260 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %267 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %287 RelaxedPrecision 
					                                                      OpDecorate %288 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %294 RelaxedPrecision 
					                                                      OpDecorate %295 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %299 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %311 RelaxedPrecision 
					                                                      OpDecorate %319 RelaxedPrecision 
					                                                      OpDecorate %320 RelaxedPrecision 
					                                                      OpDecorate %321 RelaxedPrecision 
					                                                      OpDecorate %322 RelaxedPrecision 
					                                                      OpDecorate %323 RelaxedPrecision 
					                                                      OpDecorate %324 RelaxedPrecision 
					                                                      OpDecorate %336 RelaxedPrecision 
					                                                      OpDecorate %337 RelaxedPrecision 
					                                                      OpDecorate %339 RelaxedPrecision 
					                                                      OpDecorate %340 RelaxedPrecision 
					                                                      OpDecorate %345 RelaxedPrecision 
					                                                      OpDecorate %351 RelaxedPrecision 
					                                                      OpDecorate %352 RelaxedPrecision 
					                                                      OpDecorate %354 RelaxedPrecision 
					                                                      OpDecorate %355 RelaxedPrecision 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %357 RelaxedPrecision 
					                                                      OpDecorate %358 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate %384 Location 384 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate %387 RelaxedPrecision 
					                                                      OpDecorate %389 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %391 RelaxedPrecision 
					                                                      OpDecorate %392 RelaxedPrecision 
					                                                      OpDecorate %393 RelaxedPrecision 
					                                                      OpDecorate %396 RelaxedPrecision 
					                                                      OpDecorate %397 RelaxedPrecision 
					                                                      OpDecorate %398 RelaxedPrecision 
					                                                      OpDecorate %399 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %406 RelaxedPrecision 
					                                                      OpDecorate %407 RelaxedPrecision 
					                                                      OpDecorate %410 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %418 DescriptorSet 418 
					                                                      OpDecorate %418 Binding 418 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate %421 RelaxedPrecision 
					                                                      OpDecorate %423 RelaxedPrecision 
					                                                      OpDecorate %424 RelaxedPrecision 
					                                                      OpDecorate %425 RelaxedPrecision 
					                                                      OpDecorate %428 RelaxedPrecision 
					                                                      OpDecorate %429 RelaxedPrecision 
					                                                      OpDecorate %430 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate %432 Location 432 
					                                                      OpDecorate %433 RelaxedPrecision 
					                                                      OpDecorate %437 RelaxedPrecision 
					                                                      OpDecorate %444 RelaxedPrecision 
					                                                      OpDecorate %444 DescriptorSet 444 
					                                                      OpDecorate %444 Binding 444 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 16 
					                                              %17 = OpTypeArray %14 %16 
					                                          u32 %18 = OpConstant 4 
					                                              %19 = OpTypeArray %14 %18 
					                                              %20 = OpTypeStruct %7 %14 %14 %14 %14 %17 %14 %14 %19 %14 %14 %14 %14 %6 %6 %6 %6 %6 %14 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                              %25 = OpTypePointer Uniform %7 
					                                              %29 = OpTypePointer Private %6 
					                                 Private f32* %30 = OpVariable Private 
					                               Private f32_3* %36 = OpVariable Private 
					                                          i32 %41 = OpConstant 1 
					                                              %42 = OpTypePointer Uniform %14 
					                                              %47 = OpTypePointer Private %14 
					                               Private f32_4* %48 = OpVariable Private 
					                                 Input f32_3* %57 = OpVariable Input 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                          f32 %62 = OpConstant 3.674022E-40 
					                                 Private f32* %64 = OpVariable Private 
					                                 Private f32* %68 = OpVariable Private 
					                                              %72 = OpTypeVector %6 2 
					                                          i32 %74 = OpConstant 16 
					                                              %75 = OpTypePointer Uniform %6 
					                                          i32 %78 = OpConstant 14 
					                                         u32 %102 = OpConstant 0 
					                                         i32 %111 = OpConstant 13 
					                                         f32 %114 = OpConstant 3.674022E-40 
					                                Private f32* %128 = OpVariable Private 
					                                             %129 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %130 = OpTypeSampledImage %129 
					                                             %131 = OpTypePointer UniformConstant %130 
					 UniformConstant read_only Texture2DSampled* %132 = OpVariable UniformConstant 
					                                             %134 = OpTypePointer Input %72 
					                                Input f32_2* %135 = OpVariable Input 
					                                         u32 %138 = OpConstant 3 
					                                Private f32* %145 = OpVariable Private 
					                                         i32 %148 = OpConstant 15 
					                                         i32 %152 = OpConstant 10 
					                              Private f32_3* %159 = OpVariable Private 
					                                         i32 %160 = OpConstant 8 
					                                         u32 %161 = OpConstant 2 
					                                         u32 %167 = OpConstant 1 
					                                         i32 %169 = OpConstant 2 
					                                         i32 %178 = OpConstant 7 
					                                Private f32* %184 = OpVariable Private 
					                                         i32 %205 = OpConstant 6 
					                                         i32 %219 = OpConstant 5 
					                                         i32 %241 = OpConstant 3 
					                                             %246 = OpTypePointer Function %7 
					                                Private f32* %255 = OpVariable Private 
					                                             %256 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
					                                             %257 = OpTypeSampledImage %256 
					                                             %258 = OpTypePointer UniformConstant %257 
					 UniformConstant read_only Texture2DSampled* %259 = OpVariable UniformConstant 
					                                         i32 %289 = OpConstant 9 
					                              Private f32_3* %294 = OpVariable Private 
					                                         i32 %306 = OpConstant 18 
					                                         i32 %312 = OpConstant 17 
					                                         i32 %334 = OpConstant 11 
					                              Private f32_4* %362 = OpVariable Private 
					                                         i32 %377 = OpConstant 4 
					                                Input f32_3* %384 = OpVariable Input 
					                                       f32_3 %388 = OpConstantComposite %61 %61 %61 
					                              Private f32_3* %390 = OpVariable Private 
					                                         f32 %394 = OpConstant 3.674022E-40 
					                                       f32_3 %395 = OpConstantComposite %394 %394 %394 
					                                         f32 %400 = OpConstant 3.674022E-40 
					                                       f32_3 %401 = OpConstantComposite %400 %400 %400 
					                                         f32 %403 = OpConstant 3.674022E-40 
					                                       f32_3 %404 = OpConstantComposite %403 %403 %403 
					                              Private f32_3* %414 = OpVariable Private 
					                                             %415 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %416 = OpTypeSampledImage %415 
					                                             %417 = OpTypePointer UniformConstant %416 
					UniformConstant read_only TextureCubeSampled* %418 = OpVariable UniformConstant 
					                                Input f32_3* %420 = OpVariable Input 
					                              Private f32_3* %424 = OpVariable Private 
					                                         i32 %426 = OpConstant 12 
					                                             %431 = OpTypePointer Output %14 
					                               Output f32_4* %432 = OpVariable Output 
					                                             %441 = OpTypePointer Output %6 
					 UniformConstant read_only Texture2DSampled* %444 = OpVariable UniformConstant 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %247 = OpVariable Function 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %26 = OpAccessChain %22 %24 
					                                        f32_3 %27 = OpLoad %26 
					                                        f32_3 %28 = OpFAdd %13 %27 
					                                                      OpStore %9 %28 
					                                        f32_3 %31 = OpLoad %9 
					                                        f32_3 %32 = OpLoad %9 
					                                          f32 %33 = OpDot %31 %32 
					                                                      OpStore %30 %33 
					                                          f32 %34 = OpLoad %30 
					                                          f32 %35 = OpExtInst %1 32 %34 
					                                                      OpStore %30 %35 
					                                        f32_3 %37 = OpLoad %9 
					                                          f32 %38 = OpLoad %30 
					                                        f32_3 %39 = OpCompositeConstruct %38 %38 %38 
					                                        f32_3 %40 = OpFMul %37 %39 
					                               Uniform f32_4* %43 = OpAccessChain %22 %41 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %46 = OpFAdd %40 %45 
					                                                      OpStore %36 %46 
					                                          f32 %49 = OpLoad %30 
					                                        f32_3 %50 = OpCompositeConstruct %49 %49 %49 
					                                        f32_3 %51 = OpLoad %9 
					                                        f32_3 %52 = OpFMul %50 %51 
					                                        f32_4 %53 = OpLoad %48 
					                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
					                                                      OpStore %48 %54 
					                                        f32_4 %55 = OpLoad %48 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_3 %58 = OpLoad %57 
					                                          f32 %59 = OpDot %56 %58 
					                                                      OpStore %30 %59 
					                                          f32 %60 = OpLoad %30 
					                                          f32 %63 = OpExtInst %1 43 %60 %61 %62 
					                                                      OpStore %30 %63 
					                                          f32 %65 = OpLoad %30 
					                                          f32 %66 = OpFNegate %65 
					                                          f32 %67 = OpFAdd %66 %62 
					                                                      OpStore %64 %67 
					                                          f32 %69 = OpLoad %64 
					                                          f32 %70 = OpExtInst %1 30 %69 
					                                                      OpStore %68 %70 
					                                          f32 %71 = OpLoad %68 
					                                        f32_2 %73 = OpCompositeConstruct %71 %71 
					                                 Uniform f32* %76 = OpAccessChain %22 %74 
					                                          f32 %77 = OpLoad %76 
					                                 Uniform f32* %79 = OpAccessChain %22 %78 
					                                          f32 %80 = OpLoad %79 
					                                        f32_2 %81 = OpCompositeConstruct %77 %80 
					                                        f32_2 %82 = OpFMul %73 %81 
					                                        f32_4 %83 = OpLoad %48 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 2 3 
					                                                      OpStore %48 %84 
					                                        f32_4 %85 = OpLoad %48 
					                                        f32_2 %86 = OpVectorShuffle %85 %85 0 1 
					                                        f32_2 %87 = OpExtInst %1 29 %86 
					                                        f32_4 %88 = OpLoad %48 
					                                        f32_4 %89 = OpVectorShuffle %88 %87 4 5 2 3 
					                                                      OpStore %48 %89 
					                                        f32_3 %90 = OpLoad %36 
					                                        f32_3 %91 = OpLoad %36 
					                                          f32 %92 = OpDot %90 %91 
					                                                      OpStore %64 %92 
					                                          f32 %93 = OpLoad %64 
					                                          f32 %94 = OpExtInst %1 32 %93 
					                                                      OpStore %64 %94 
					                                          f32 %95 = OpLoad %64 
					                                        f32_3 %96 = OpCompositeConstruct %95 %95 %95 
					                                        f32_3 %97 = OpLoad %36 
					                                        f32_3 %98 = OpFMul %96 %97 
					                                                      OpStore %36 %98 
					                                        f32_3 %99 = OpLoad %57 
					                                       f32_3 %100 = OpLoad %36 
					                                         f32 %101 = OpDot %99 %100 
					                                Private f32* %103 = OpAccessChain %36 %102 
					                                                      OpStore %103 %101 
					                                Private f32* %104 = OpAccessChain %36 %102 
					                                         f32 %105 = OpLoad %104 
					                                         f32 %106 = OpExtInst %1 40 %105 %61 
					                                Private f32* %107 = OpAccessChain %36 %102 
					                                                      OpStore %107 %106 
					                                Private f32* %108 = OpAccessChain %36 %102 
					                                         f32 %109 = OpLoad %108 
					                                         f32 %110 = OpExtInst %1 30 %109 
					                                                      OpStore %68 %110 
					                                Uniform f32* %112 = OpAccessChain %22 %111 
					                                         f32 %113 = OpLoad %112 
					                                         f32 %115 = OpFMul %113 %114 
					                                Private f32* %116 = OpAccessChain %36 %102 
					                                                      OpStore %116 %115 
					                                         f32 %117 = OpLoad %68 
					                                Private f32* %118 = OpAccessChain %36 %102 
					                                         f32 %119 = OpLoad %118 
					                                         f32 %120 = OpFMul %117 %119 
					                                                      OpStore %68 %120 
					                                         f32 %121 = OpLoad %68 
					                                         f32 %122 = OpExtInst %1 29 %121 
					                                                      OpStore %68 %122 
					                                Private f32* %123 = OpAccessChain %48 %102 
					                                         f32 %124 = OpLoad %123 
					                                         f32 %125 = OpFNegate %124 
					                                         f32 %126 = OpFAdd %125 %62 
					                                Private f32* %127 = OpAccessChain %36 %102 
					                                                      OpStore %127 %126 
					                  read_only Texture2DSampled %133 = OpLoad %132 
					                                       f32_2 %136 = OpLoad %135 
					                                       f32_4 %137 = OpImageSampleImplicitLod %133 %136 
					                                         f32 %139 = OpCompositeExtract %137 3 
					                                                      OpStore %128 %139 
					                                Private f32* %140 = OpAccessChain %36 %102 
					                                         f32 %141 = OpLoad %140 
					                                         f32 %142 = OpLoad %128 
					                                         f32 %143 = OpFMul %141 %142 
					                                Private f32* %144 = OpAccessChain %36 %102 
					                                                      OpStore %144 %143 
					                                Private f32* %146 = OpAccessChain %36 %102 
					                                         f32 %147 = OpLoad %146 
					                                Uniform f32* %149 = OpAccessChain %22 %148 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpFMul %147 %150 
					                                Uniform f32* %153 = OpAccessChain %22 %152 %138 
					                                         f32 %154 = OpLoad %153 
					                                         f32 %155 = OpFAdd %151 %154 
					                                                      OpStore %145 %155 
					                                         f32 %156 = OpLoad %68 
					                                         f32 %157 = OpLoad %145 
					                                         f32 %158 = OpFMul %156 %157 
					                                                      OpStore %30 %158 
					                                Uniform f32* %162 = OpAccessChain %22 %160 %24 %161 
					                                         f32 %163 = OpLoad %162 
					                                Private f32* %164 = OpAccessChain %159 %102 
					                                                      OpStore %164 %163 
					                                Uniform f32* %165 = OpAccessChain %22 %160 %41 %161 
					                                         f32 %166 = OpLoad %165 
					                                Private f32* %168 = OpAccessChain %159 %167 
					                                                      OpStore %168 %166 
					                                Uniform f32* %170 = OpAccessChain %22 %160 %169 %161 
					                                         f32 %171 = OpLoad %170 
					                                Private f32* %172 = OpAccessChain %159 %161 
					                                                      OpStore %172 %171 
					                                       f32_3 %173 = OpLoad %9 
					                                       f32_3 %174 = OpLoad %159 
					                                         f32 %175 = OpDot %173 %174 
					                                Private f32* %176 = OpAccessChain %9 %102 
					                                                      OpStore %176 %175 
					                                       f32_3 %177 = OpLoad %11 
					                              Uniform f32_4* %179 = OpAccessChain %22 %178 
					                                       f32_4 %180 = OpLoad %179 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFAdd %177 %182 
					                                                      OpStore %159 %183 
					                                       f32_3 %185 = OpLoad %159 
					                                       f32_3 %186 = OpLoad %159 
					                                         f32 %187 = OpDot %185 %186 
					                                                      OpStore %184 %187 
					                                         f32 %188 = OpLoad %184 
					                                         f32 %189 = OpExtInst %1 31 %188 
					                                                      OpStore %184 %189 
					                                Private f32* %190 = OpAccessChain %9 %102 
					                                         f32 %191 = OpLoad %190 
					                                         f32 %192 = OpFNegate %191 
					                                         f32 %193 = OpLoad %184 
					                                         f32 %194 = OpFAdd %192 %193 
					                                                      OpStore %184 %194 
					                                Uniform f32* %195 = OpAccessChain %22 %178 %138 
					                                         f32 %196 = OpLoad %195 
					                                         f32 %197 = OpLoad %184 
					                                         f32 %198 = OpFMul %196 %197 
					                                Private f32* %199 = OpAccessChain %9 %102 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpFAdd %198 %200 
					                                Private f32* %202 = OpAccessChain %9 %102 
					                                                      OpStore %202 %201 
					                                Private f32* %203 = OpAccessChain %9 %102 
					                                         f32 %204 = OpLoad %203 
					                                Uniform f32* %206 = OpAccessChain %22 %205 %161 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFMul %204 %207 
					                                Uniform f32* %209 = OpAccessChain %22 %205 %138 
					                                         f32 %210 = OpLoad %209 
					                                         f32 %211 = OpFAdd %208 %210 
					                                Private f32* %212 = OpAccessChain %9 %102 
					                                                      OpStore %212 %211 
					                                Private f32* %213 = OpAccessChain %9 %102 
					                                         f32 %214 = OpLoad %213 
					                                         f32 %215 = OpExtInst %1 43 %214 %61 %62 
					                                Private f32* %216 = OpAccessChain %9 %102 
					                                                      OpStore %216 %215 
					                                       f32_3 %217 = OpLoad %11 
					                                       f32_3 %218 = OpVectorShuffle %217 %217 1 1 1 
					                              Uniform f32_4* %220 = OpAccessChain %22 %219 %41 
					                                       f32_4 %221 = OpLoad %220 
					                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
					                                       f32_3 %223 = OpFMul %218 %222 
					                                                      OpStore %159 %223 
					                              Uniform f32_4* %224 = OpAccessChain %22 %219 %24 
					                                       f32_4 %225 = OpLoad %224 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpLoad %11 
					                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
					                                       f32_3 %229 = OpFMul %226 %228 
					                                       f32_3 %230 = OpLoad %159 
					                                       f32_3 %231 = OpFAdd %229 %230 
					                                                      OpStore %159 %231 
					                              Uniform f32_4* %232 = OpAccessChain %22 %219 %169 
					                                       f32_4 %233 = OpLoad %232 
					                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
					                                       f32_3 %235 = OpLoad %11 
					                                       f32_3 %236 = OpVectorShuffle %235 %235 2 2 2 
					                                       f32_3 %237 = OpFMul %234 %236 
					                                       f32_3 %238 = OpLoad %159 
					                                       f32_3 %239 = OpFAdd %237 %238 
					                                                      OpStore %159 %239 
					                                       f32_3 %240 = OpLoad %159 
					                              Uniform f32_4* %242 = OpAccessChain %22 %219 %241 
					                                       f32_4 %243 = OpLoad %242 
					                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
					                                       f32_3 %245 = OpFAdd %240 %244 
					                                                      OpStore %159 %245 
					                                       f32_3 %248 = OpLoad %159 
					                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
					                                Private f32* %250 = OpAccessChain %159 %161 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpCompositeExtract %249 0 
					                                         f32 %253 = OpCompositeExtract %249 1 
					                                       f32_3 %254 = OpCompositeConstruct %252 %253 %251 
					                                                      OpStore %247 %254 
					                  read_only Texture2DSampled %260 = OpLoad %259 
					                                       f32_3 %261 = OpLoad %247 
					                                         f32 %262 = OpCompositeExtract %261 2 
					                                         f32 %263 = OpImageSampleDrefExplicitLod %260 %261 %262 Lod %6 
					                                                      OpStore %255 %263 
					                                Uniform f32* %264 = OpAccessChain %22 %205 %102 
					                                         f32 %265 = OpLoad %264 
					                                         f32 %266 = OpFNegate %265 
					                                         f32 %267 = OpFAdd %266 %62 
					                                Private f32* %268 = OpAccessChain %36 %102 
					                                                      OpStore %268 %267 
					                                         f32 %269 = OpLoad %255 
					                                Private f32* %270 = OpAccessChain %36 %102 
					                                         f32 %271 = OpLoad %270 
					                                         f32 %272 = OpFMul %269 %271 
					                                Uniform f32* %273 = OpAccessChain %22 %205 %102 
					                                         f32 %274 = OpLoad %273 
					                                         f32 %275 = OpFAdd %272 %274 
					                                Private f32* %276 = OpAccessChain %36 %102 
					                                                      OpStore %276 %275 
					                                Private f32* %277 = OpAccessChain %9 %102 
					                                         f32 %278 = OpLoad %277 
					                                Private f32* %279 = OpAccessChain %36 %102 
					                                         f32 %280 = OpLoad %279 
					                                         f32 %281 = OpFAdd %278 %280 
					                                Private f32* %282 = OpAccessChain %36 %102 
					                                                      OpStore %282 %281 
					                                Private f32* %283 = OpAccessChain %36 %102 
					                                         f32 %284 = OpLoad %283 
					                                         f32 %285 = OpExtInst %1 43 %284 %61 %62 
					                                Private f32* %286 = OpAccessChain %36 %102 
					                                                      OpStore %286 %285 
					                                       f32_3 %287 = OpLoad %36 
					                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
					                              Uniform f32_4* %290 = OpAccessChain %22 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_3 %293 = OpFMul %288 %292 
					                                                      OpStore %36 %293 
					                                       f32_3 %295 = OpLoad %36 
					                              Uniform f32_4* %296 = OpAccessChain %22 %152 
					                                       f32_4 %297 = OpLoad %296 
					                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
					                                       f32_3 %299 = OpFMul %295 %298 
					                                                      OpStore %294 %299 
					                                         f32 %300 = OpLoad %30 
					                                       f32_3 %301 = OpCompositeConstruct %300 %300 %300 
					                                       f32_3 %302 = OpLoad %294 
					                                       f32_3 %303 = OpFMul %301 %302 
					                                                      OpStore %9 %303 
					                                       f32_4 %304 = OpLoad %48 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 0 0 
					                              Uniform f32_4* %307 = OpAccessChain %22 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %305 %309 
					                                                      OpStore %294 %310 
					                                       f32_3 %311 = OpLoad %294 
					                                Uniform f32* %313 = OpAccessChain %22 %312 
					                                         f32 %314 = OpLoad %313 
					                                Uniform f32* %315 = OpAccessChain %22 %312 
					                                         f32 %316 = OpLoad %315 
					                                Uniform f32* %317 = OpAccessChain %22 %312 
					                                         f32 %318 = OpLoad %317 
					                                       f32_3 %319 = OpCompositeConstruct %314 %316 %318 
					                                         f32 %320 = OpCompositeExtract %319 0 
					                                         f32 %321 = OpCompositeExtract %319 1 
					                                         f32 %322 = OpCompositeExtract %319 2 
					                                       f32_3 %323 = OpCompositeConstruct %320 %321 %322 
					                                       f32_3 %324 = OpFMul %311 %323 
					                                                      OpStore %159 %324 
					                                Private f32* %325 = OpAccessChain %48 %102 
					                                         f32 %326 = OpLoad %325 
					                                         f32 %327 = OpFNegate %326 
					                                Uniform f32* %328 = OpAccessChain %22 %312 
					                                         f32 %329 = OpLoad %328 
					                                         f32 %330 = OpFMul %327 %329 
					                                         f32 %331 = OpFAdd %330 %62 
					                                                      OpStore %30 %331 
					                                         f32 %332 = OpLoad %30 
					                                         f32 %333 = OpExtInst %1 43 %332 %61 %62 
					                                                      OpStore %30 %333 
					                              Uniform f32_4* %335 = OpAccessChain %22 %334 
					                                       f32_4 %336 = OpLoad %335 
					                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
					                                         f32 %338 = OpLoad %30 
					                                       f32_3 %339 = OpCompositeConstruct %338 %338 %338 
					                                       f32_3 %340 = OpFMul %337 %339 
					                                       f32_3 %341 = OpLoad %159 
					                                       f32_3 %342 = OpFAdd %340 %341 
					                                       f32_4 %343 = OpLoad %48 
					                                       f32_4 %344 = OpVectorShuffle %343 %342 4 1 5 6 
					                                                      OpStore %48 %344 
					                                       f32_3 %345 = OpLoad %36 
					                                       f32_4 %346 = OpLoad %48 
					                                       f32_3 %347 = OpVectorShuffle %346 %346 0 2 3 
					                                       f32_3 %348 = OpFMul %345 %347 
					                                                      OpStore %36 %348 
					                                       f32_3 %349 = OpLoad %57 
					                              Uniform f32_4* %350 = OpAccessChain %22 %41 
					                                       f32_4 %351 = OpLoad %350 
					                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
					                                         f32 %353 = OpDot %349 %352 
					                                                      OpStore %64 %353 
					                                         f32 %354 = OpLoad %64 
					                                         f32 %355 = OpExtInst %1 40 %354 %61 
					                                                      OpStore %64 %355 
					                                       f32_3 %356 = OpLoad %36 
					                                         f32 %357 = OpLoad %64 
					                                       f32_3 %358 = OpCompositeConstruct %357 %357 %357 
					                                       f32_3 %359 = OpFMul %356 %358 
					                                       f32_3 %360 = OpLoad %9 
					                                       f32_3 %361 = OpFAdd %359 %360 
					                                                      OpStore %9 %361 
					                                       f32_3 %363 = OpLoad %57 
					                                       f32_4 %364 = OpLoad %362 
					                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
					                                                      OpStore %362 %365 
					                                Private f32* %366 = OpAccessChain %362 %138 
					                                                      OpStore %366 %62 
					                              Uniform f32_4* %367 = OpAccessChain %22 %169 
					                                       f32_4 %368 = OpLoad %367 
					                                       f32_4 %369 = OpLoad %362 
					                                         f32 %370 = OpDot %368 %369 
					                                Private f32* %371 = OpAccessChain %294 %102 
					                                                      OpStore %371 %370 
					                              Uniform f32_4* %372 = OpAccessChain %22 %241 
					                                       f32_4 %373 = OpLoad %372 
					                                       f32_4 %374 = OpLoad %362 
					                                         f32 %375 = OpDot %373 %374 
					                                Private f32* %376 = OpAccessChain %294 %167 
					                                                      OpStore %376 %375 
					                              Uniform f32_4* %378 = OpAccessChain %22 %377 
					                                       f32_4 %379 = OpLoad %378 
					                                       f32_4 %380 = OpLoad %362 
					                                         f32 %381 = OpDot %379 %380 
					                                Private f32* %382 = OpAccessChain %294 %161 
					                                                      OpStore %382 %381 
					                                       f32_3 %383 = OpLoad %294 
					                                       f32_3 %385 = OpLoad %384 
					                                       f32_3 %386 = OpFAdd %383 %385 
					                                                      OpStore %294 %386 
					                                       f32_3 %387 = OpLoad %294 
					                                       f32_3 %389 = OpExtInst %1 40 %387 %388 
					                                                      OpStore %294 %389 
					                                       f32_3 %391 = OpLoad %294 
					                                       f32_3 %392 = OpExtInst %1 30 %391 
					                                                      OpStore %390 %392 
					                                       f32_3 %393 = OpLoad %390 
					                                       f32_3 %396 = OpFMul %393 %395 
					                                                      OpStore %390 %396 
					                                       f32_3 %397 = OpLoad %390 
					                                       f32_3 %398 = OpExtInst %1 29 %397 
					                                                      OpStore %390 %398 
					                                       f32_3 %399 = OpLoad %390 
					                                       f32_3 %402 = OpFMul %399 %401 
					                                       f32_3 %405 = OpFAdd %402 %404 
					                                                      OpStore %390 %405 
					                                       f32_3 %406 = OpLoad %390 
					                                       f32_3 %407 = OpExtInst %1 40 %406 %388 
					                                                      OpStore %390 %407 
					                                       f32_4 %408 = OpLoad %48 
					                                       f32_3 %409 = OpVectorShuffle %408 %408 0 2 3 
					                                       f32_3 %410 = OpLoad %390 
					                                       f32_3 %411 = OpFMul %409 %410 
					                                       f32_3 %412 = OpLoad %9 
					                                       f32_3 %413 = OpFAdd %411 %412 
					                                                      OpStore %294 %413 
					                read_only TextureCubeSampled %419 = OpLoad %418 
					                                       f32_3 %421 = OpLoad %420 
					                                       f32_4 %422 = OpImageSampleImplicitLod %419 %421 
					                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
					                                                      OpStore %414 %423 
					                                       f32_3 %425 = OpLoad %414 
					                              Uniform f32_4* %427 = OpAccessChain %22 %426 
					                                       f32_4 %428 = OpLoad %427 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFMul %425 %429 
					                                                      OpStore %424 %430 
					                                       f32_3 %433 = OpLoad %424 
					                                       f32_4 %434 = OpLoad %48 
					                                       f32_3 %435 = OpVectorShuffle %434 %434 1 1 1 
					                                       f32_3 %436 = OpFMul %433 %435 
					                                       f32_3 %437 = OpLoad %294 
					                                       f32_3 %438 = OpFAdd %436 %437 
					                                       f32_4 %439 = OpLoad %432 
					                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
					                                                      OpStore %432 %440 
					                                 Output f32* %442 = OpAccessChain %432 %138 
					                                                      OpStore %442 %62 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec2 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec2 tmpvar_3;
					  highp vec4 tmpvar_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_7;
					  tmpvar_7[0] = unity_WorldToObject[0].xyz;
					  tmpvar_7[1] = unity_WorldToObject[1].xyz;
					  tmpvar_7[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
					  highp vec3 tmpvar_9;
					  highp vec3 I_10;
					  I_10 = (tmpvar_6 - _WorldSpaceCameraPos);
					  tmpvar_9 = (I_10 - (2.0 * (
					    dot (tmpvar_8, I_10)
					   * tmpvar_8)));
					  tmpvar_1 = tmpvar_9;
					  highp vec3 lightColor0_11;
					  lightColor0_11 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_12;
					  lightColor1_12 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_13;
					  lightColor2_13 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_14;
					  lightColor3_14 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_15;
					  lightAttenSq_15 = unity_4LightAtten0;
					  highp vec3 col_16;
					  highp vec4 ndotl_17;
					  highp vec4 lengthSq_18;
					  highp vec4 tmpvar_19;
					  tmpvar_19 = (unity_4LightPosX0 - tmpvar_6.x);
					  highp vec4 tmpvar_20;
					  tmpvar_20 = (unity_4LightPosY0 - tmpvar_6.y);
					  highp vec4 tmpvar_21;
					  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_6.z);
					  lengthSq_18 = (tmpvar_19 * tmpvar_19);
					  lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
					  lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
					  highp vec4 tmpvar_22;
					  tmpvar_22 = max (lengthSq_18, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_18 = tmpvar_22;
					  ndotl_17 = (tmpvar_19 * tmpvar_8.x);
					  ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_8.y));
					  ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_8.z));
					  highp vec4 tmpvar_23;
					  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
					  ndotl_17 = tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
					    (tmpvar_22 * lightAttenSq_15)
					  ))));
					  col_16 = (lightColor0_11 * tmpvar_24.x);
					  col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
					  col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
					  col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
					  tmpvar_2 = col_16;
					  mediump vec3 normal_25;
					  normal_25 = tmpvar_8;
					  mediump vec3 ambient_26;
					  mediump vec3 x1_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
					  x1_27.x = dot (unity_SHBr, tmpvar_28);
					  x1_27.y = dot (unity_SHBg, tmpvar_28);
					  x1_27.z = dot (unity_SHBb, tmpvar_28);
					  ambient_26 = ((tmpvar_2 * (
					    (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
					    ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
					  )));
					  tmpvar_2 = ambient_26;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_8;
					  xlv_TEXCOORD3 = tmpvar_6;
					  xlv_TEXCOORD4 = ambient_26;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD7 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  lowp vec3 lightDir_6;
					  highp vec3 tmpvar_7;
					  highp vec3 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD3));
					  viewDir_5 = tmpvar_10;
					  tmpvar_7 = xlv_TEXCOORD1;
					  tmpvar_8 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_11;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_8), tmpvar_4), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_11 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_11 = (tmpvar_11 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = textureCube (_Cube, tmpvar_7);
					  tmpvar_12 = ((tmpvar_22.xyz * _ReflectColor.xyz) * fres_14);
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  mediump vec3 normalWorld_23;
					  normalWorld_23 = tmpvar_4;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = normalWorld_23;
					  mediump vec3 x_25;
					  x_25.x = dot (unity_SHAr, tmpvar_24);
					  x_25.y = dot (unity_SHAg, tmpvar_24);
					  x_25.z = dot (unity_SHAb, tmpvar_24);
					  mediump vec3 tmpvar_26;
					  tmpvar_26 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_25)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec3 viewDir_27;
					  viewDir_27 = tmpvar_10;
					  lowp vec4 c_28;
					  lowp vec4 c_29;
					  highp float nh_30;
					  lowp float diff_31;
					  mediump float tmpvar_32;
					  tmpvar_32 = max (0.0, dot (tmpvar_4, tmpvar_2));
					  diff_31 = tmpvar_32;
					  mediump float tmpvar_33;
					  tmpvar_33 = max (0.0, dot (tmpvar_4, normalize(
					    (tmpvar_2 + viewDir_27)
					  )));
					  nh_30 = tmpvar_33;
					  mediump float y_34;
					  y_34 = (_Shininess * 128.0);
					  highp float tmpvar_35;
					  tmpvar_35 = (pow (nh_30, y_34) * tmpvar_13);
					  c_29.xyz = (((tmpvar_11 * tmpvar_1) * diff_31) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_35));
					  c_29.w = (tmpvar_22.w * _ReflectColor.w);
					  c_28.w = c_29.w;
					  c_28.xyz = (c_29.xyz + (tmpvar_11 * tmpvar_26));
					  c_3.xyz = (c_28.xyz + tmpvar_12);
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec2 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec2 tmpvar_3;
					  highp vec4 tmpvar_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_7;
					  tmpvar_7[0] = unity_WorldToObject[0].xyz;
					  tmpvar_7[1] = unity_WorldToObject[1].xyz;
					  tmpvar_7[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
					  highp vec3 tmpvar_9;
					  highp vec3 I_10;
					  I_10 = (tmpvar_6 - _WorldSpaceCameraPos);
					  tmpvar_9 = (I_10 - (2.0 * (
					    dot (tmpvar_8, I_10)
					   * tmpvar_8)));
					  tmpvar_1 = tmpvar_9;
					  highp vec3 lightColor0_11;
					  lightColor0_11 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_12;
					  lightColor1_12 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_13;
					  lightColor2_13 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_14;
					  lightColor3_14 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_15;
					  lightAttenSq_15 = unity_4LightAtten0;
					  highp vec3 col_16;
					  highp vec4 ndotl_17;
					  highp vec4 lengthSq_18;
					  highp vec4 tmpvar_19;
					  tmpvar_19 = (unity_4LightPosX0 - tmpvar_6.x);
					  highp vec4 tmpvar_20;
					  tmpvar_20 = (unity_4LightPosY0 - tmpvar_6.y);
					  highp vec4 tmpvar_21;
					  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_6.z);
					  lengthSq_18 = (tmpvar_19 * tmpvar_19);
					  lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
					  lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
					  highp vec4 tmpvar_22;
					  tmpvar_22 = max (lengthSq_18, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_18 = tmpvar_22;
					  ndotl_17 = (tmpvar_19 * tmpvar_8.x);
					  ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_8.y));
					  ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_8.z));
					  highp vec4 tmpvar_23;
					  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
					  ndotl_17 = tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
					    (tmpvar_22 * lightAttenSq_15)
					  ))));
					  col_16 = (lightColor0_11 * tmpvar_24.x);
					  col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
					  col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
					  col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
					  tmpvar_2 = col_16;
					  mediump vec3 normal_25;
					  normal_25 = tmpvar_8;
					  mediump vec3 ambient_26;
					  mediump vec3 x1_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
					  x1_27.x = dot (unity_SHBr, tmpvar_28);
					  x1_27.y = dot (unity_SHBg, tmpvar_28);
					  x1_27.z = dot (unity_SHBb, tmpvar_28);
					  ambient_26 = ((tmpvar_2 * (
					    (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
					    ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
					  )));
					  tmpvar_2 = ambient_26;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_8;
					  xlv_TEXCOORD3 = tmpvar_6;
					  xlv_TEXCOORD4 = ambient_26;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD7 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  lowp vec3 lightDir_6;
					  highp vec3 tmpvar_7;
					  highp vec3 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD3));
					  viewDir_5 = tmpvar_10;
					  tmpvar_7 = xlv_TEXCOORD1;
					  tmpvar_8 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_11;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_8), tmpvar_4), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_11 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_11 = (tmpvar_11 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = textureCube (_Cube, tmpvar_7);
					  tmpvar_12 = ((tmpvar_22.xyz * _ReflectColor.xyz) * fres_14);
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  mediump vec3 normalWorld_23;
					  normalWorld_23 = tmpvar_4;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = normalWorld_23;
					  mediump vec3 x_25;
					  x_25.x = dot (unity_SHAr, tmpvar_24);
					  x_25.y = dot (unity_SHAg, tmpvar_24);
					  x_25.z = dot (unity_SHAb, tmpvar_24);
					  mediump vec3 tmpvar_26;
					  tmpvar_26 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_25)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec3 viewDir_27;
					  viewDir_27 = tmpvar_10;
					  lowp vec4 c_28;
					  lowp vec4 c_29;
					  highp float nh_30;
					  lowp float diff_31;
					  mediump float tmpvar_32;
					  tmpvar_32 = max (0.0, dot (tmpvar_4, tmpvar_2));
					  diff_31 = tmpvar_32;
					  mediump float tmpvar_33;
					  tmpvar_33 = max (0.0, dot (tmpvar_4, normalize(
					    (tmpvar_2 + viewDir_27)
					  )));
					  nh_30 = tmpvar_33;
					  mediump float y_34;
					  y_34 = (_Shininess * 128.0);
					  highp float tmpvar_35;
					  tmpvar_35 = (pow (nh_30, y_34) * tmpvar_13);
					  c_29.xyz = (((tmpvar_11 * tmpvar_1) * diff_31) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_35));
					  c_29.w = (tmpvar_22.w * _ReflectColor.w);
					  c_28.w = c_29.w;
					  c_28.xyz = (c_29.xyz + (tmpvar_11 * tmpvar_26));
					  c_3.xyz = (c_28.xyz + tmpvar_12);
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec2 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec2 tmpvar_3;
					  highp vec4 tmpvar_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_7;
					  tmpvar_7[0] = unity_WorldToObject[0].xyz;
					  tmpvar_7[1] = unity_WorldToObject[1].xyz;
					  tmpvar_7[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
					  highp vec3 tmpvar_9;
					  highp vec3 I_10;
					  I_10 = (tmpvar_6 - _WorldSpaceCameraPos);
					  tmpvar_9 = (I_10 - (2.0 * (
					    dot (tmpvar_8, I_10)
					   * tmpvar_8)));
					  tmpvar_1 = tmpvar_9;
					  highp vec3 lightColor0_11;
					  lightColor0_11 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_12;
					  lightColor1_12 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_13;
					  lightColor2_13 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_14;
					  lightColor3_14 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_15;
					  lightAttenSq_15 = unity_4LightAtten0;
					  highp vec3 col_16;
					  highp vec4 ndotl_17;
					  highp vec4 lengthSq_18;
					  highp vec4 tmpvar_19;
					  tmpvar_19 = (unity_4LightPosX0 - tmpvar_6.x);
					  highp vec4 tmpvar_20;
					  tmpvar_20 = (unity_4LightPosY0 - tmpvar_6.y);
					  highp vec4 tmpvar_21;
					  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_6.z);
					  lengthSq_18 = (tmpvar_19 * tmpvar_19);
					  lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
					  lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
					  highp vec4 tmpvar_22;
					  tmpvar_22 = max (lengthSq_18, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_18 = tmpvar_22;
					  ndotl_17 = (tmpvar_19 * tmpvar_8.x);
					  ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_8.y));
					  ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_8.z));
					  highp vec4 tmpvar_23;
					  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
					  ndotl_17 = tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
					    (tmpvar_22 * lightAttenSq_15)
					  ))));
					  col_16 = (lightColor0_11 * tmpvar_24.x);
					  col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
					  col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
					  col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
					  tmpvar_2 = col_16;
					  mediump vec3 normal_25;
					  normal_25 = tmpvar_8;
					  mediump vec3 ambient_26;
					  mediump vec3 x1_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
					  x1_27.x = dot (unity_SHBr, tmpvar_28);
					  x1_27.y = dot (unity_SHBg, tmpvar_28);
					  x1_27.z = dot (unity_SHBb, tmpvar_28);
					  ambient_26 = ((tmpvar_2 * (
					    (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
					    ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
					  )));
					  tmpvar_2 = ambient_26;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_8;
					  xlv_TEXCOORD3 = tmpvar_6;
					  xlv_TEXCOORD4 = ambient_26;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD7 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  lowp vec3 lightDir_6;
					  highp vec3 tmpvar_7;
					  highp vec3 tmpvar_8;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD3));
					  viewDir_5 = tmpvar_10;
					  tmpvar_7 = xlv_TEXCOORD1;
					  tmpvar_8 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_11;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_8), tmpvar_4), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_11 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_11 = (tmpvar_11 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_22;
					  tmpvar_22 = textureCube (_Cube, tmpvar_7);
					  tmpvar_12 = ((tmpvar_22.xyz * _ReflectColor.xyz) * fres_14);
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  mediump vec3 normalWorld_23;
					  normalWorld_23 = tmpvar_4;
					  mediump vec4 tmpvar_24;
					  tmpvar_24.w = 1.0;
					  tmpvar_24.xyz = normalWorld_23;
					  mediump vec3 x_25;
					  x_25.x = dot (unity_SHAr, tmpvar_24);
					  x_25.y = dot (unity_SHAg, tmpvar_24);
					  x_25.z = dot (unity_SHAb, tmpvar_24);
					  mediump vec3 tmpvar_26;
					  tmpvar_26 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_25)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  mediump vec3 viewDir_27;
					  viewDir_27 = tmpvar_10;
					  lowp vec4 c_28;
					  lowp vec4 c_29;
					  highp float nh_30;
					  lowp float diff_31;
					  mediump float tmpvar_32;
					  tmpvar_32 = max (0.0, dot (tmpvar_4, tmpvar_2));
					  diff_31 = tmpvar_32;
					  mediump float tmpvar_33;
					  tmpvar_33 = max (0.0, dot (tmpvar_4, normalize(
					    (tmpvar_2 + viewDir_27)
					  )));
					  nh_30 = tmpvar_33;
					  mediump float y_34;
					  y_34 = (_Shininess * 128.0);
					  highp float tmpvar_35;
					  tmpvar_35 = (pow (nh_30, y_34) * tmpvar_13);
					  c_29.xyz = (((tmpvar_11 * tmpvar_1) * diff_31) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_35));
					  c_29.w = (tmpvar_22.w * _ReflectColor.w);
					  c_28.w = c_29.w;
					  c_28.xyz = (c_29.xyz + (tmpvar_11 * tmpvar_26));
					  c_3.xyz = (c_28.xyz + tmpvar_12);
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat21 = u_xlat21 + u_xlat21;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat21)) + (-u_xlat1.xyz);
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					float u_xlat14;
					lowp float u_xlat10_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat18) + 1.0;
					    u_xlat16_18 = log2(u_xlat16_19);
					    u_xlat2.xy = vec2(u_xlat16_18) * vec2(_RimAmt, _FresAmt);
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat16_19 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_19 = inversesqrt(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_18 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_1.x = (-u_xlat2.x) + 1.0;
					    u_xlat10_14 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_14;
					    u_xlat14 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat18 = u_xlat16_18 * u_xlat14;
					    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_7.xyz = u_xlat2.xxx * _RimColor.xyz;
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat18 = (-u_xlat2.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat2.xzw = _Color.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat16_7.xyz = u_xlat2.xzw * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat2.xzw * u_xlat16_0.xyz + u_xlat3.xyz;
					    u_xlat10_0.xyz = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat2.yyy + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat21 = u_xlat21 + u_xlat21;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat21)) + (-u_xlat1.xyz);
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					float u_xlat14;
					lowp float u_xlat10_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat18) + 1.0;
					    u_xlat16_18 = log2(u_xlat16_19);
					    u_xlat2.xy = vec2(u_xlat16_18) * vec2(_RimAmt, _FresAmt);
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat16_19 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_19 = inversesqrt(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_18 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_1.x = (-u_xlat2.x) + 1.0;
					    u_xlat10_14 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_14;
					    u_xlat14 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat18 = u_xlat16_18 * u_xlat14;
					    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_7.xyz = u_xlat2.xxx * _RimColor.xyz;
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat18 = (-u_xlat2.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat2.xzw = _Color.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat16_7.xyz = u_xlat2.xzw * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat2.xzw * u_xlat16_0.xyz + u_xlat3.xyz;
					    u_xlat10_0.xyz = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat2.yyy + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat21 = u_xlat21 + u_xlat21;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat21)) + (-u_xlat1.xyz);
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec3 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					float u_xlat14;
					lowp float u_xlat10_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat18) + 1.0;
					    u_xlat16_18 = log2(u_xlat16_19);
					    u_xlat2.xy = vec2(u_xlat16_18) * vec2(_RimAmt, _FresAmt);
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat16_19 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_19 = inversesqrt(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_18 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_1.x = (-u_xlat2.x) + 1.0;
					    u_xlat10_14 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_14;
					    u_xlat14 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat18 = u_xlat16_18 * u_xlat14;
					    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_7.xyz = u_xlat2.xxx * _RimColor.xyz;
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat18 = (-u_xlat2.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat2.xzw = _Color.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat16_7.xyz = u_xlat2.xzw * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat16_7.xyz * u_xlat16_1.xxx + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat2.xzw * u_xlat16_0.xyz + u_xlat3.xyz;
					    u_xlat10_0.xyz = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat2.yyy + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 400
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %115 %128 %188 %191 %194 %385 %393 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 RelaxedPrecision 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 RelaxedPrecision 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 RelaxedPrecision 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 RelaxedPrecision 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %88 0 BuiltIn 88 
					                                                      OpMemberDecorate %88 1 BuiltIn 88 
					                                                      OpMemberDecorate %88 2 BuiltIn 88 
					                                                      OpDecorate %88 Block 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %103 Location 103 
					                                                      OpDecorate %115 Location 115 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %188 Location 188 
					                                                      OpDecorate %191 Location 191 
					                                                      OpDecorate %194 Location 194 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %276 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %334 RelaxedPrecision 
					                                                      OpDecorate %347 RelaxedPrecision 
					                                                      OpDecorate %348 RelaxedPrecision 
					                                                      OpDecorate %351 RelaxedPrecision 
					                                                      OpDecorate %357 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %361 RelaxedPrecision 
					                                                      OpDecorate %362 RelaxedPrecision 
					                                                      OpDecorate %366 RelaxedPrecision 
					                                                      OpDecorate %367 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %372 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %374 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %385 Location 385 
					                                                      OpDecorate %391 RelaxedPrecision 
					                                                      OpDecorate %393 Location 393 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 8 
					                                              %17 = OpTypeArray %7 %16 
					                                          u32 %18 = OpConstant 4 
					                                              %19 = OpTypeArray %7 %18 
					                                              %20 = OpTypeArray %7 %18 
					                                              %21 = OpTypeArray %7 %18 
					                                              %22 = OpTypeStruct %14 %7 %7 %7 %7 %17 %7 %7 %7 %7 %19 %20 %21 %7 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 10 
					                                          i32 %27 = OpConstant 1 
					                                              %28 = OpTypePointer Uniform %7 
					                                          i32 %32 = OpConstant 0 
					                                          i32 %40 = OpConstant 2 
					                               Private f32_4* %48 = OpVariable Private 
					                                          i32 %50 = OpConstant 3 
					                               Private f32_4* %65 = OpVariable Private 
					                                          i32 %68 = OpConstant 12 
					                                          u32 %86 = OpConstant 1 
					                                              %87 = OpTypeArray %6 %86 
					                                              %88 = OpTypeStruct %7 %6 %87 
					                                              %89 = OpTypePointer Output %88 
					         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
					                                              %98 = OpTypePointer Output %7 
					                                             %100 = OpTypeVector %6 2 
					                                             %101 = OpTypePointer Output %100 
					                               Output f32_2* %102 = OpVariable Output 
					                                Input f32_4* %103 = OpVariable Input 
					                                         i32 %106 = OpConstant 13 
					                               Output f32_2* %115 = OpVariable Output 
					                                         f32 %116 = OpConstant 3.674022E-40 
					                                       f32_2 %117 = OpConstantComposite %116 %116 
					                                             %121 = OpTypePointer Uniform %14 
					                                             %127 = OpTypePointer Input %14 
					                                Input f32_3* %128 = OpVariable Input 
					                                         i32 %130 = OpConstant 11 
					                                         u32 %135 = OpConstant 0 
					                                             %136 = OpTypePointer Private %6 
					                                         u32 %149 = OpConstant 2 
					                                Private f32* %151 = OpVariable Private 
					                                             %187 = OpTypePointer Output %14 
					                               Output f32_3* %188 = OpVariable Output 
					                               Output f32_3* %191 = OpVariable Output 
					                               Output f32_3* %194 = OpVariable Output 
					                              Private f32_4* %203 = OpVariable Private 
					                              Private f32_4* %216 = OpVariable Private 
					                                         f32 %247 = OpConstant 3.674022E-40 
					                                       f32_4 %248 = OpConstantComposite %247 %247 %247 %247 
					                                         i32 %253 = OpConstant 4 
					                                         f32 %257 = OpConstant 3.674022E-40 
					                                       f32_4 %258 = OpConstantComposite %257 %257 %257 %257 
					                                       f32_4 %266 = OpConstantComposite %116 %116 %116 %116 
					                                         i32 %273 = OpConstant 5 
					                                         f32 %315 = OpConstant 3.674022E-40 
					                                       f32_3 %316 = OpConstantComposite %315 %315 %315 
					                                         f32 %318 = OpConstant 3.674022E-40 
					                                       f32_3 %319 = OpConstantComposite %318 %318 %318 
					                                         f32 %328 = OpConstant 3.674022E-40 
					                                       f32_3 %329 = OpConstantComposite %328 %328 %328 
					                                             %333 = OpTypePointer Private %14 
					                              Private f32_3* %334 = OpVariable Private 
					                              Private f32_4* %351 = OpVariable Private 
					                              Private f32_3* %357 = OpVariable Private 
					                                         i32 %358 = OpConstant 6 
					                                         i32 %364 = OpConstant 7 
					                                         i32 %370 = OpConstant 8 
					                                         i32 %376 = OpConstant 9 
					                               Output f32_3* %385 = OpVariable Output 
					                               Output f32_4* %393 = OpVariable Output 
					                                             %394 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %29 = OpAccessChain %24 %26 %27 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpFMul %13 %30 
					                                                      OpStore %9 %31 
					                               Uniform f32_4* %33 = OpAccessChain %24 %26 %32 
					                                        f32_4 %34 = OpLoad %33 
					                                        f32_4 %35 = OpLoad %11 
					                                        f32_4 %36 = OpVectorShuffle %35 %35 0 0 0 0 
					                                        f32_4 %37 = OpFMul %34 %36 
					                                        f32_4 %38 = OpLoad %9 
					                                        f32_4 %39 = OpFAdd %37 %38 
					                                                      OpStore %9 %39 
					                               Uniform f32_4* %41 = OpAccessChain %24 %26 %40 
					                                        f32_4 %42 = OpLoad %41 
					                                        f32_4 %43 = OpLoad %11 
					                                        f32_4 %44 = OpVectorShuffle %43 %43 2 2 2 2 
					                                        f32_4 %45 = OpFMul %42 %44 
					                                        f32_4 %46 = OpLoad %9 
					                                        f32_4 %47 = OpFAdd %45 %46 
					                                                      OpStore %9 %47 
					                                        f32_4 %49 = OpLoad %9 
					                               Uniform f32_4* %51 = OpAccessChain %24 %26 %50 
					                                        f32_4 %52 = OpLoad %51 
					                                        f32_4 %53 = OpFAdd %49 %52 
					                                                      OpStore %48 %53 
					                               Uniform f32_4* %54 = OpAccessChain %24 %26 %50 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_4 %57 = OpLoad %11 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
					                                        f32_3 %59 = OpFMul %56 %58 
					                                        f32_4 %60 = OpLoad %9 
					                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
					                                        f32_3 %62 = OpFAdd %59 %61 
					                                        f32_4 %63 = OpLoad %9 
					                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
					                                                      OpStore %9 %64 
					                                        f32_4 %66 = OpLoad %48 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
					                               Uniform f32_4* %69 = OpAccessChain %24 %68 %27 
					                                        f32_4 %70 = OpLoad %69 
					                                        f32_4 %71 = OpFMul %67 %70 
					                                                      OpStore %65 %71 
					                               Uniform f32_4* %72 = OpAccessChain %24 %68 %32 
					                                        f32_4 %73 = OpLoad %72 
					                                        f32_4 %74 = OpLoad %48 
					                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
					                                        f32_4 %76 = OpFMul %73 %75 
					                                        f32_4 %77 = OpLoad %65 
					                                        f32_4 %78 = OpFAdd %76 %77 
					                                                      OpStore %65 %78 
					                               Uniform f32_4* %79 = OpAccessChain %24 %68 %40 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_4 %81 = OpLoad %48 
					                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
					                                        f32_4 %83 = OpFMul %80 %82 
					                                        f32_4 %84 = OpLoad %65 
					                                        f32_4 %85 = OpFAdd %83 %84 
					                                                      OpStore %65 %85 
					                               Uniform f32_4* %91 = OpAccessChain %24 %68 %50 
					                                        f32_4 %92 = OpLoad %91 
					                                        f32_4 %93 = OpLoad %48 
					                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
					                                        f32_4 %95 = OpFMul %92 %94 
					                                        f32_4 %96 = OpLoad %65 
					                                        f32_4 %97 = OpFAdd %95 %96 
					                                Output f32_4* %99 = OpAccessChain %90 %32 
					                                                      OpStore %99 %97 
					                                       f32_4 %104 = OpLoad %103 
					                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
					                              Uniform f32_4* %107 = OpAccessChain %24 %106 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
					                                       f32_2 %110 = OpFMul %105 %109 
					                              Uniform f32_4* %111 = OpAccessChain %24 %106 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
					                                       f32_2 %114 = OpFAdd %110 %113 
					                                                      OpStore %102 %114 
					                                                      OpStore %115 %117 
					                                       f32_4 %118 = OpLoad %9 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_3 %120 = OpFNegate %119 
					                              Uniform f32_3* %122 = OpAccessChain %24 %32 
					                                       f32_3 %123 = OpLoad %122 
					                                       f32_3 %124 = OpFAdd %120 %123 
					                                       f32_4 %125 = OpLoad %48 
					                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
					                                                      OpStore %48 %126 
					                                       f32_3 %129 = OpLoad %128 
					                              Uniform f32_4* %131 = OpAccessChain %24 %130 %32 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %129 %133 
					                                Private f32* %137 = OpAccessChain %65 %135 
					                                                      OpStore %137 %134 
					                                       f32_3 %138 = OpLoad %128 
					                              Uniform f32_4* %139 = OpAccessChain %24 %130 %27 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %65 %86 
					                                                      OpStore %143 %142 
					                                       f32_3 %144 = OpLoad %128 
					                              Uniform f32_4* %145 = OpAccessChain %24 %130 %40 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %144 %147 
					                                Private f32* %150 = OpAccessChain %65 %149 
					                                                      OpStore %150 %148 
					                                       f32_4 %152 = OpLoad %65 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %65 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                                      OpStore %151 %156 
					                                         f32 %157 = OpLoad %151 
					                                         f32 %158 = OpExtInst %1 32 %157 
					                                                      OpStore %151 %158 
					                                         f32 %159 = OpLoad %151 
					                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
					                                       f32_4 %161 = OpLoad %65 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %65 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %65 %165 
					                                       f32_4 %166 = OpLoad %48 
					                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
					                                       f32_3 %168 = OpFNegate %167 
					                                       f32_4 %169 = OpLoad %65 
					                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
					                                         f32 %171 = OpDot %168 %170 
					                                                      OpStore %151 %171 
					                                         f32 %172 = OpLoad %151 
					                                         f32 %173 = OpLoad %151 
					                                         f32 %174 = OpFAdd %172 %173 
					                                                      OpStore %151 %174 
					                                       f32_4 %175 = OpLoad %65 
					                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
					                                         f32 %177 = OpLoad %151 
					                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
					                                       f32_3 %179 = OpFNegate %178 
					                                       f32_3 %180 = OpFMul %176 %179 
					                                       f32_4 %181 = OpLoad %48 
					                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
					                                       f32_3 %183 = OpFNegate %182 
					                                       f32_3 %184 = OpFAdd %180 %183 
					                                       f32_4 %185 = OpLoad %48 
					                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
					                                                      OpStore %48 %186 
					                                       f32_4 %189 = OpLoad %48 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                                      OpStore %188 %190 
					                                       f32_4 %192 = OpLoad %65 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                                      OpStore %191 %193 
					                                       f32_4 %195 = OpLoad %9 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                                      OpStore %194 %196 
					                                       f32_4 %197 = OpLoad %9 
					                                       f32_4 %198 = OpVectorShuffle %197 %197 0 0 0 0 
					                                       f32_4 %199 = OpFNegate %198 
					                              Uniform f32_4* %200 = OpAccessChain %24 %27 
					                                       f32_4 %201 = OpLoad %200 
					                                       f32_4 %202 = OpFAdd %199 %201 
					                                                      OpStore %48 %202 
					                                       f32_4 %204 = OpLoad %9 
					                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
					                                       f32_4 %206 = OpFNegate %205 
					                              Uniform f32_4* %207 = OpAccessChain %24 %40 
					                                       f32_4 %208 = OpLoad %207 
					                                       f32_4 %209 = OpFAdd %206 %208 
					                                                      OpStore %203 %209 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
					                                       f32_4 %212 = OpFNegate %211 
					                              Uniform f32_4* %213 = OpAccessChain %24 %50 
					                                       f32_4 %214 = OpLoad %213 
					                                       f32_4 %215 = OpFAdd %212 %214 
					                                                      OpStore %9 %215 
					                                       f32_4 %217 = OpLoad %65 
					                                       f32_4 %218 = OpVectorShuffle %217 %217 1 1 1 1 
					                                       f32_4 %219 = OpLoad %203 
					                                       f32_4 %220 = OpFMul %218 %219 
					                                                      OpStore %216 %220 
					                                       f32_4 %221 = OpLoad %203 
					                                       f32_4 %222 = OpLoad %203 
					                                       f32_4 %223 = OpFMul %221 %222 
					                                                      OpStore %203 %223 
					                                       f32_4 %224 = OpLoad %48 
					                                       f32_4 %225 = OpLoad %48 
					                                       f32_4 %226 = OpFMul %224 %225 
					                                       f32_4 %227 = OpLoad %203 
					                                       f32_4 %228 = OpFAdd %226 %227 
					                                                      OpStore %203 %228 
					                                       f32_4 %229 = OpLoad %48 
					                                       f32_4 %230 = OpLoad %65 
					                                       f32_4 %231 = OpVectorShuffle %230 %230 0 0 0 0 
					                                       f32_4 %232 = OpFMul %229 %231 
					                                       f32_4 %233 = OpLoad %216 
					                                       f32_4 %234 = OpFAdd %232 %233 
					                                                      OpStore %48 %234 
					                                       f32_4 %235 = OpLoad %9 
					                                       f32_4 %236 = OpLoad %65 
					                                       f32_4 %237 = OpVectorShuffle %236 %236 2 2 2 2 
					                                       f32_4 %238 = OpFMul %235 %237 
					                                       f32_4 %239 = OpLoad %48 
					                                       f32_4 %240 = OpFAdd %238 %239 
					                                                      OpStore %48 %240 
					                                       f32_4 %241 = OpLoad %9 
					                                       f32_4 %242 = OpLoad %9 
					                                       f32_4 %243 = OpFMul %241 %242 
					                                       f32_4 %244 = OpLoad %203 
					                                       f32_4 %245 = OpFAdd %243 %244 
					                                                      OpStore %9 %245 
					                                       f32_4 %246 = OpLoad %9 
					                                       f32_4 %249 = OpExtInst %1 40 %246 %248 
					                                                      OpStore %9 %249 
					                                       f32_4 %250 = OpLoad %9 
					                                       f32_4 %251 = OpExtInst %1 32 %250 
					                                                      OpStore %203 %251 
					                                       f32_4 %252 = OpLoad %9 
					                              Uniform f32_4* %254 = OpAccessChain %24 %253 
					                                       f32_4 %255 = OpLoad %254 
					                                       f32_4 %256 = OpFMul %252 %255 
					                                       f32_4 %259 = OpFAdd %256 %258 
					                                                      OpStore %9 %259 
					                                       f32_4 %260 = OpLoad %9 
					                                       f32_4 %261 = OpFDiv %258 %260 
					                                                      OpStore %9 %261 
					                                       f32_4 %262 = OpLoad %48 
					                                       f32_4 %263 = OpLoad %203 
					                                       f32_4 %264 = OpFMul %262 %263 
					                                                      OpStore %48 %264 
					                                       f32_4 %265 = OpLoad %48 
					                                       f32_4 %267 = OpExtInst %1 40 %265 %266 
					                                                      OpStore %48 %267 
					                                       f32_4 %268 = OpLoad %9 
					                                       f32_4 %269 = OpLoad %48 
					                                       f32_4 %270 = OpFMul %268 %269 
					                                                      OpStore %9 %270 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 1 1 1 
					                              Uniform f32_4* %274 = OpAccessChain %24 %273 %27 
					                                       f32_4 %275 = OpLoad %274 
					                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
					                                       f32_3 %277 = OpFMul %272 %276 
					                                       f32_4 %278 = OpLoad %48 
					                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
					                                                      OpStore %48 %279 
					                              Uniform f32_4* %280 = OpAccessChain %24 %273 %32 
					                                       f32_4 %281 = OpLoad %280 
					                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
					                                       f32_4 %283 = OpLoad %9 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
					                                       f32_3 %285 = OpFMul %282 %284 
					                                       f32_4 %286 = OpLoad %48 
					                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
					                                       f32_3 %288 = OpFAdd %285 %287 
					                                       f32_4 %289 = OpLoad %48 
					                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
					                                                      OpStore %48 %290 
					                              Uniform f32_4* %291 = OpAccessChain %24 %273 %40 
					                                       f32_4 %292 = OpLoad %291 
					                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
					                                       f32_4 %294 = OpLoad %9 
					                                       f32_3 %295 = OpVectorShuffle %294 %294 2 2 2 
					                                       f32_3 %296 = OpFMul %293 %295 
					                                       f32_4 %297 = OpLoad %48 
					                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
					                                       f32_3 %299 = OpFAdd %296 %298 
					                                       f32_4 %300 = OpLoad %9 
					                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
					                                                      OpStore %9 %301 
					                              Uniform f32_4* %302 = OpAccessChain %24 %273 %50 
					                                       f32_4 %303 = OpLoad %302 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 3 3 3 
					                                       f32_3 %307 = OpFMul %304 %306 
					                                       f32_4 %308 = OpLoad %9 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFAdd %307 %309 
					                                       f32_4 %311 = OpLoad %9 
					                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
					                                                      OpStore %9 %312 
					                                       f32_4 %313 = OpLoad %9 
					                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
					                                       f32_3 %317 = OpFMul %314 %316 
					                                       f32_3 %320 = OpFAdd %317 %319 
					                                       f32_4 %321 = OpLoad %48 
					                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
					                                                      OpStore %48 %322 
					                                       f32_4 %323 = OpLoad %9 
					                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
					                                       f32_4 %325 = OpLoad %48 
					                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
					                                       f32_3 %327 = OpFMul %324 %326 
					                                       f32_3 %330 = OpFAdd %327 %329 
					                                       f32_4 %331 = OpLoad %48 
					                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
					                                                      OpStore %48 %332 
					                                Private f32* %335 = OpAccessChain %65 %86 
					                                         f32 %336 = OpLoad %335 
					                                Private f32* %337 = OpAccessChain %65 %86 
					                                         f32 %338 = OpLoad %337 
					                                         f32 %339 = OpFMul %336 %338 
					                                Private f32* %340 = OpAccessChain %334 %135 
					                                                      OpStore %340 %339 
					                                Private f32* %341 = OpAccessChain %65 %135 
					                                         f32 %342 = OpLoad %341 
					                                Private f32* %343 = OpAccessChain %65 %135 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                Private f32* %346 = OpAccessChain %334 %135 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpFNegate %347 
					                                         f32 %349 = OpFAdd %345 %348 
					                                Private f32* %350 = OpAccessChain %334 %135 
					                                                      OpStore %350 %349 
					                                       f32_4 %352 = OpLoad %65 
					                                       f32_4 %353 = OpVectorShuffle %352 %352 1 2 2 0 
					                                       f32_4 %354 = OpLoad %65 
					                                       f32_4 %355 = OpVectorShuffle %354 %354 0 1 2 2 
					                                       f32_4 %356 = OpFMul %353 %355 
					                                                      OpStore %351 %356 
					                              Uniform f32_4* %359 = OpAccessChain %24 %358 
					                                       f32_4 %360 = OpLoad %359 
					                                       f32_4 %361 = OpLoad %351 
					                                         f32 %362 = OpDot %360 %361 
					                                Private f32* %363 = OpAccessChain %357 %135 
					                                                      OpStore %363 %362 
					                              Uniform f32_4* %365 = OpAccessChain %24 %364 
					                                       f32_4 %366 = OpLoad %365 
					                                       f32_4 %367 = OpLoad %351 
					                                         f32 %368 = OpDot %366 %367 
					                                Private f32* %369 = OpAccessChain %357 %86 
					                                                      OpStore %369 %368 
					                              Uniform f32_4* %371 = OpAccessChain %24 %370 
					                                       f32_4 %372 = OpLoad %371 
					                                       f32_4 %373 = OpLoad %351 
					                                         f32 %374 = OpDot %372 %373 
					                                Private f32* %375 = OpAccessChain %357 %149 
					                                                      OpStore %375 %374 
					                              Uniform f32_4* %377 = OpAccessChain %24 %376 
					                                       f32_4 %378 = OpLoad %377 
					                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
					                                       f32_3 %380 = OpLoad %334 
					                                       f32_3 %381 = OpVectorShuffle %380 %380 0 0 0 
					                                       f32_3 %382 = OpFMul %379 %381 
					                                       f32_3 %383 = OpLoad %357 
					                                       f32_3 %384 = OpFAdd %382 %383 
					                                                      OpStore %334 %384 
					                                       f32_4 %386 = OpLoad %9 
					                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
					                                       f32_4 %388 = OpLoad %48 
					                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
					                                       f32_3 %390 = OpFMul %387 %389 
					                                       f32_3 %391 = OpLoad %334 
					                                       f32_3 %392 = OpFAdd %390 %391 
					                                                      OpStore %385 %392 
					                                                      OpStore %393 %266 
					                                 Output f32* %395 = OpAccessChain %90 %32 %86 
					                                         f32 %396 = OpLoad %395 
					                                         f32 %397 = OpFNegate %396 
					                                 Output f32* %398 = OpAccessChain %90 %32 %86 
					                                                      OpStore %398 %397 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 324
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %50 %76 %187 %300 %312 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %22 RelaxedPrecision 
					                                                      OpMemberDecorate %23 0 Offset 23 
					                                                      OpMemberDecorate %23 1 RelaxedPrecision 
					                                                      OpMemberDecorate %23 1 Offset 23 
					                                                      OpMemberDecorate %23 2 RelaxedPrecision 
					                                                      OpMemberDecorate %23 2 Offset 23 
					                                                      OpMemberDecorate %23 3 RelaxedPrecision 
					                                                      OpMemberDecorate %23 3 Offset 23 
					                                                      OpMemberDecorate %23 4 RelaxedPrecision 
					                                                      OpMemberDecorate %23 4 Offset 23 
					                                                      OpMemberDecorate %23 5 RelaxedPrecision 
					                                                      OpMemberDecorate %23 5 Offset 23 
					                                                      OpMemberDecorate %23 6 RelaxedPrecision 
					                                                      OpMemberDecorate %23 6 Offset 23 
					                                                      OpMemberDecorate %23 7 RelaxedPrecision 
					                                                      OpMemberDecorate %23 7 Offset 23 
					                                                      OpMemberDecorate %23 8 RelaxedPrecision 
					                                                      OpMemberDecorate %23 8 Offset 23 
					                                                      OpMemberDecorate %23 9 RelaxedPrecision 
					                                                      OpMemberDecorate %23 9 Offset 23 
					                                                      OpMemberDecorate %23 10 Offset 23 
					                                                      OpMemberDecorate %23 11 Offset 23 
					                                                      OpMemberDecorate %23 12 Offset 23 
					                                                      OpMemberDecorate %23 13 Offset 23 
					                                                      OpMemberDecorate %23 14 RelaxedPrecision 
					                                                      OpMemberDecorate %23 14 Offset 23 
					                                                      OpDecorate %23 Block 
					                                                      OpDecorate %25 DescriptorSet 25 
					                                                      OpDecorate %25 Binding 25 
					                                                      OpDecorate %30 RelaxedPrecision 
					                                                      OpDecorate %37 RelaxedPrecision 
					                                                      OpDecorate %44 RelaxedPrecision 
					                                                      OpDecorate %49 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %50 Location 50 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %52 RelaxedPrecision 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %56 RelaxedPrecision 
					                                                      OpDecorate %57 RelaxedPrecision 
					                                                      OpDecorate %58 RelaxedPrecision 
					                                                      OpDecorate %59 RelaxedPrecision 
					                                                      OpDecorate %60 RelaxedPrecision 
					                                                      OpDecorate %63 RelaxedPrecision 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %72 RelaxedPrecision 
					                                                      OpDecorate %73 RelaxedPrecision 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %76 Location 76 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %102 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %151 RelaxedPrecision 
					                                                      OpDecorate %153 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %161 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %171 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %173 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %180 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 DescriptorSet 184 
					                                                      OpDecorate %184 Binding 184 
					                                                      OpDecorate %185 RelaxedPrecision 
					                                                      OpDecorate %187 Location 187 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %205 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %250 RelaxedPrecision 
					                                                      OpDecorate %251 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %254 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %267 RelaxedPrecision 
					                                                      OpDecorate %268 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %279 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %294 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %298 DescriptorSet 298 
					                                                      OpDecorate %298 Binding 298 
					                                                      OpDecorate %299 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %300 Location 300 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %305 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %310 RelaxedPrecision 
					                                                      OpDecorate %312 RelaxedPrecision 
					                                                      OpDecorate %312 Location 312 
					                                                      OpDecorate %313 RelaxedPrecision 
					                                                      OpDecorate %317 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                          f32 %16 = OpConstant 3.674022E-40 
					                                              %17 = OpTypeInt 32 0 
					                                          u32 %18 = OpConstant 3 
					                                              %19 = OpTypePointer Private %6 
					                                              %21 = OpTypePointer Private %10 
					                               Private f32_3* %22 = OpVariable Private 
					                                              %23 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %7 
					                                              %24 = OpTypePointer Uniform %23 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %25 = OpVariable Uniform 
					                                              %26 = OpTypeInt 32 1 
					                                          i32 %27 = OpConstant 2 
					                                              %28 = OpTypePointer Uniform %7 
					                                          u32 %33 = OpConstant 0 
					                                          i32 %35 = OpConstant 3 
					                                          u32 %40 = OpConstant 1 
					                                          i32 %42 = OpConstant 4 
					                                          u32 %47 = OpConstant 2 
					                                 Input f32_3* %50 = OpVariable Input 
					                                          f32 %54 = OpConstant 3.674022E-40 
					                                        f32_3 %55 = OpConstantComposite %54 %54 %54 
					                               Private f32_3* %57 = OpVariable Private 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                        f32_3 %62 = OpConstantComposite %61 %61 %61 
					                                          f32 %67 = OpConstant 3.674022E-40 
					                                        f32_3 %68 = OpConstantComposite %67 %67 %67 
					                                          f32 %70 = OpConstant 3.674022E-40 
					                                        f32_3 %71 = OpConstantComposite %70 %70 %70 
					                               Private f32_4* %75 = OpVariable Private 
					                                 Input f32_3* %76 = OpVariable Input 
					                                          i32 %79 = OpConstant 0 
					                                              %80 = OpTypePointer Uniform %10 
					                                 Private f32* %86 = OpVariable Private 
					                                          i32 %99 = OpConstant 1 
					                                Private f32* %117 = OpVariable Private 
					                                Private f32* %121 = OpVariable Private 
					                                             %125 = OpTypeVector %6 2 
					                                         i32 %127 = OpConstant 12 
					                                             %128 = OpTypePointer Uniform %6 
					                                         i32 %131 = OpConstant 10 
					                                         i32 %163 = OpConstant 9 
					                                         f32 %166 = OpConstant 3.674022E-40 
					                                Private f32* %180 = OpVariable Private 
					                                             %181 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %182 = OpTypeSampledImage %181 
					                                             %183 = OpTypePointer UniformConstant %182 
					 UniformConstant read_only Texture2DSampled* %184 = OpVariable UniformConstant 
					                                             %186 = OpTypePointer Input %125 
					                                Input f32_2* %187 = OpVariable Input 
					                                Private f32* %196 = OpVariable Private 
					                                         i32 %199 = OpConstant 11 
					                                         i32 %203 = OpConstant 6 
					                                         i32 %210 = OpConstant 5 
					                              Private f32_3* %218 = OpVariable Private 
					                              Private f32_3* %233 = OpVariable Private 
					                                         i32 %236 = OpConstant 14 
					                              Private f32_3* %241 = OpVariable Private 
					                                         i32 %243 = OpConstant 13 
					                                         i32 %265 = OpConstant 7 
					                              Private f32_3* %294 = OpVariable Private 
					                                             %295 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %296 = OpTypeSampledImage %295 
					                                             %297 = OpTypePointer UniformConstant %296 
					UniformConstant read_only TextureCubeSampled* %298 = OpVariable UniformConstant 
					                                Input f32_3* %300 = OpVariable Input 
					                              Private f32_3* %304 = OpVariable Private 
					                                         i32 %306 = OpConstant 8 
					                                             %311 = OpTypePointer Output %7 
					                               Output f32_4* %312 = OpVariable Output 
					                                             %321 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_4 %14 = OpLoad %9 
					                                        f32_4 %15 = OpVectorShuffle %14 %13 4 5 6 3 
					                                                      OpStore %9 %15 
					                                 Private f32* %20 = OpAccessChain %9 %18 
					                                                      OpStore %20 %16 
					                               Uniform f32_4* %29 = OpAccessChain %25 %27 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %9 
					                                          f32 %32 = OpDot %30 %31 
					                                 Private f32* %34 = OpAccessChain %22 %33 
					                                                      OpStore %34 %32 
					                               Uniform f32_4* %36 = OpAccessChain %25 %35 
					                                        f32_4 %37 = OpLoad %36 
					                                        f32_4 %38 = OpLoad %9 
					                                          f32 %39 = OpDot %37 %38 
					                                 Private f32* %41 = OpAccessChain %22 %40 
					                                                      OpStore %41 %39 
					                               Uniform f32_4* %43 = OpAccessChain %25 %42 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_4 %45 = OpLoad %9 
					                                          f32 %46 = OpDot %44 %45 
					                                 Private f32* %48 = OpAccessChain %22 %47 
					                                                      OpStore %48 %46 
					                                        f32_3 %49 = OpLoad %22 
					                                        f32_3 %51 = OpLoad %50 
					                                        f32_3 %52 = OpFAdd %49 %51 
					                                                      OpStore %22 %52 
					                                        f32_3 %53 = OpLoad %22 
					                                        f32_3 %56 = OpExtInst %1 40 %53 %55 
					                                                      OpStore %22 %56 
					                                        f32_3 %58 = OpLoad %22 
					                                        f32_3 %59 = OpExtInst %1 30 %58 
					                                                      OpStore %57 %59 
					                                        f32_3 %60 = OpLoad %57 
					                                        f32_3 %63 = OpFMul %60 %62 
					                                                      OpStore %57 %63 
					                                        f32_3 %64 = OpLoad %57 
					                                        f32_3 %65 = OpExtInst %1 29 %64 
					                                                      OpStore %57 %65 
					                                        f32_3 %66 = OpLoad %57 
					                                        f32_3 %69 = OpFMul %66 %68 
					                                        f32_3 %72 = OpFAdd %69 %71 
					                                                      OpStore %57 %72 
					                                        f32_3 %73 = OpLoad %57 
					                                        f32_3 %74 = OpExtInst %1 40 %73 %55 
					                                                      OpStore %57 %74 
					                                        f32_3 %77 = OpLoad %76 
					                                        f32_3 %78 = OpFNegate %77 
					                               Uniform f32_3* %81 = OpAccessChain %25 %79 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %78 %82 
					                                        f32_4 %84 = OpLoad %75 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %75 %85 
					                                        f32_4 %87 = OpLoad %75 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                        f32_4 %89 = OpLoad %75 
					                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
					                                          f32 %91 = OpDot %88 %90 
					                                                      OpStore %86 %91 
					                                          f32 %92 = OpLoad %86 
					                                          f32 %93 = OpExtInst %1 32 %92 
					                                                      OpStore %86 %93 
					                                        f32_4 %94 = OpLoad %75 
					                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
					                                          f32 %96 = OpLoad %86 
					                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
					                                        f32_3 %98 = OpFMul %95 %97 
					                              Uniform f32_4* %100 = OpAccessChain %25 %99 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
					                                       f32_3 %103 = OpFAdd %98 %102 
					                                                      OpStore %22 %103 
					                                         f32 %104 = OpLoad %86 
					                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
					                                       f32_4 %106 = OpLoad %75 
					                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
					                                       f32_3 %108 = OpFMul %105 %107 
					                                       f32_4 %109 = OpLoad %75 
					                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
					                                                      OpStore %75 %110 
					                                       f32_4 %111 = OpLoad %75 
					                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
					                                       f32_3 %113 = OpLoad %12 
					                                         f32 %114 = OpDot %112 %113 
					                                                      OpStore %86 %114 
					                                         f32 %115 = OpLoad %86 
					                                         f32 %116 = OpExtInst %1 43 %115 %54 %16 
					                                                      OpStore %86 %116 
					                                         f32 %118 = OpLoad %86 
					                                         f32 %119 = OpFNegate %118 
					                                         f32 %120 = OpFAdd %119 %16 
					                                                      OpStore %117 %120 
					                                         f32 %122 = OpLoad %117 
					                                         f32 %123 = OpExtInst %1 30 %122 
					                                                      OpStore %121 %123 
					                                         f32 %124 = OpLoad %121 
					                                       f32_2 %126 = OpCompositeConstruct %124 %124 
					                                Uniform f32* %129 = OpAccessChain %25 %127 
					                                         f32 %130 = OpLoad %129 
					                                Uniform f32* %132 = OpAccessChain %25 %131 
					                                         f32 %133 = OpLoad %132 
					                                       f32_2 %134 = OpCompositeConstruct %130 %133 
					                                       f32_2 %135 = OpFMul %126 %134 
					                                       f32_4 %136 = OpLoad %75 
					                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 3 
					                                                      OpStore %75 %137 
					                                       f32_4 %138 = OpLoad %75 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
					                                       f32_2 %140 = OpExtInst %1 29 %139 
					                                       f32_4 %141 = OpLoad %75 
					                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
					                                                      OpStore %75 %142 
					                                       f32_3 %143 = OpLoad %22 
					                                       f32_3 %144 = OpLoad %22 
					                                         f32 %145 = OpDot %143 %144 
					                                                      OpStore %117 %145 
					                                         f32 %146 = OpLoad %117 
					                                         f32 %147 = OpExtInst %1 32 %146 
					                                                      OpStore %117 %147 
					                                         f32 %148 = OpLoad %117 
					                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
					                                       f32_3 %150 = OpLoad %22 
					                                       f32_3 %151 = OpFMul %149 %150 
					                                                      OpStore %22 %151 
					                                       f32_3 %152 = OpLoad %12 
					                                       f32_3 %153 = OpLoad %22 
					                                         f32 %154 = OpDot %152 %153 
					                                Private f32* %155 = OpAccessChain %22 %33 
					                                                      OpStore %155 %154 
					                                Private f32* %156 = OpAccessChain %22 %33 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpExtInst %1 40 %157 %54 
					                                Private f32* %159 = OpAccessChain %22 %33 
					                                                      OpStore %159 %158 
					                                Private f32* %160 = OpAccessChain %22 %33 
					                                         f32 %161 = OpLoad %160 
					                                         f32 %162 = OpExtInst %1 30 %161 
					                                                      OpStore %121 %162 
					                                Uniform f32* %164 = OpAccessChain %25 %163 
					                                         f32 %165 = OpLoad %164 
					                                         f32 %167 = OpFMul %165 %166 
					                                Private f32* %168 = OpAccessChain %22 %33 
					                                                      OpStore %168 %167 
					                                         f32 %169 = OpLoad %121 
					                                Private f32* %170 = OpAccessChain %22 %33 
					                                         f32 %171 = OpLoad %170 
					                                         f32 %172 = OpFMul %169 %171 
					                                                      OpStore %121 %172 
					                                         f32 %173 = OpLoad %121 
					                                         f32 %174 = OpExtInst %1 29 %173 
					                                                      OpStore %121 %174 
					                                Private f32* %175 = OpAccessChain %75 %33 
					                                         f32 %176 = OpLoad %175 
					                                         f32 %177 = OpFNegate %176 
					                                         f32 %178 = OpFAdd %177 %16 
					                                Private f32* %179 = OpAccessChain %22 %33 
					                                                      OpStore %179 %178 
					                  read_only Texture2DSampled %185 = OpLoad %184 
					                                       f32_2 %188 = OpLoad %187 
					                                       f32_4 %189 = OpImageSampleImplicitLod %185 %188 
					                                         f32 %190 = OpCompositeExtract %189 3 
					                                                      OpStore %180 %190 
					                                Private f32* %191 = OpAccessChain %22 %33 
					                                         f32 %192 = OpLoad %191 
					                                         f32 %193 = OpLoad %180 
					                                         f32 %194 = OpFMul %192 %193 
					                                Private f32* %195 = OpAccessChain %22 %33 
					                                                      OpStore %195 %194 
					                                Private f32* %197 = OpAccessChain %22 %33 
					                                         f32 %198 = OpLoad %197 
					                                Uniform f32* %200 = OpAccessChain %25 %199 
					                                         f32 %201 = OpLoad %200 
					                                         f32 %202 = OpFMul %198 %201 
					                                Uniform f32* %204 = OpAccessChain %25 %203 %18 
					                                         f32 %205 = OpLoad %204 
					                                         f32 %206 = OpFAdd %202 %205 
					                                                      OpStore %196 %206 
					                                         f32 %207 = OpLoad %121 
					                                         f32 %208 = OpLoad %196 
					                                         f32 %209 = OpFMul %207 %208 
					                                                      OpStore %86 %209 
					                              Uniform f32_4* %211 = OpAccessChain %25 %210 
					                                       f32_4 %212 = OpLoad %211 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                              Uniform f32_4* %214 = OpAccessChain %25 %203 
					                                       f32_4 %215 = OpLoad %214 
					                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
					                                       f32_3 %217 = OpFMul %213 %216 
					                                                      OpStore %22 %217 
					                                         f32 %219 = OpLoad %86 
					                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
					                                       f32_3 %221 = OpLoad %22 
					                                       f32_3 %222 = OpFMul %220 %221 
					                                                      OpStore %218 %222 
					                                       f32_3 %223 = OpLoad %12 
					                              Uniform f32_4* %224 = OpAccessChain %25 %99 
					                                       f32_4 %225 = OpLoad %224 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                         f32 %227 = OpDot %223 %226 
					                                Private f32* %228 = OpAccessChain %22 %33 
					                                                      OpStore %228 %227 
					                                Private f32* %229 = OpAccessChain %22 %33 
					                                         f32 %230 = OpLoad %229 
					                                         f32 %231 = OpExtInst %1 40 %230 %54 
					                                Private f32* %232 = OpAccessChain %22 %33 
					                                                      OpStore %232 %231 
					                                       f32_4 %234 = OpLoad %75 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
					                              Uniform f32_4* %237 = OpAccessChain %25 %236 
					                                       f32_4 %238 = OpLoad %237 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                       f32_3 %240 = OpFMul %235 %239 
					                                                      OpStore %233 %240 
					                                       f32_3 %242 = OpLoad %233 
					                                Uniform f32* %244 = OpAccessChain %25 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %246 = OpAccessChain %25 %243 
					                                         f32 %247 = OpLoad %246 
					                                Uniform f32* %248 = OpAccessChain %25 %243 
					                                         f32 %249 = OpLoad %248 
					                                       f32_3 %250 = OpCompositeConstruct %245 %247 %249 
					                                         f32 %251 = OpCompositeExtract %250 0 
					                                         f32 %252 = OpCompositeExtract %250 1 
					                                         f32 %253 = OpCompositeExtract %250 2 
					                                       f32_3 %254 = OpCompositeConstruct %251 %252 %253 
					                                       f32_3 %255 = OpFMul %242 %254 
					                                                      OpStore %241 %255 
					                                Private f32* %256 = OpAccessChain %75 %33 
					                                         f32 %257 = OpLoad %256 
					                                         f32 %258 = OpFNegate %257 
					                                Uniform f32* %259 = OpAccessChain %25 %243 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpFMul %258 %260 
					                                         f32 %262 = OpFAdd %261 %16 
					                                                      OpStore %86 %262 
					                                         f32 %263 = OpLoad %86 
					                                         f32 %264 = OpExtInst %1 43 %263 %54 %16 
					                                                      OpStore %86 %264 
					                              Uniform f32_4* %266 = OpAccessChain %25 %265 
					                                       f32_4 %267 = OpLoad %266 
					                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
					                                         f32 %269 = OpLoad %86 
					                                       f32_3 %270 = OpCompositeConstruct %269 %269 %269 
					                                       f32_3 %271 = OpFMul %268 %270 
					                                       f32_3 %272 = OpLoad %241 
					                                       f32_3 %273 = OpFAdd %271 %272 
					                                       f32_4 %274 = OpLoad %75 
					                                       f32_4 %275 = OpVectorShuffle %274 %273 4 1 5 6 
					                                                      OpStore %75 %275 
					                                       f32_4 %276 = OpLoad %75 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 2 3 
					                              Uniform f32_4* %278 = OpAccessChain %25 %210 
					                                       f32_4 %279 = OpLoad %278 
					                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
					                                       f32_3 %281 = OpFMul %277 %280 
					                                                      OpStore %233 %281 
					                                       f32_3 %282 = OpLoad %233 
					                                       f32_3 %283 = OpLoad %22 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
					                                       f32_3 %285 = OpFMul %282 %284 
					                                       f32_3 %286 = OpLoad %218 
					                                       f32_3 %287 = OpFAdd %285 %286 
					                                                      OpStore %218 %287 
					                                       f32_4 %288 = OpLoad %75 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 0 2 3 
					                                       f32_3 %290 = OpLoad %57 
					                                       f32_3 %291 = OpFMul %289 %290 
					                                       f32_3 %292 = OpLoad %218 
					                                       f32_3 %293 = OpFAdd %291 %292 
					                                                      OpStore %22 %293 
					                read_only TextureCubeSampled %299 = OpLoad %298 
					                                       f32_3 %301 = OpLoad %300 
					                                       f32_4 %302 = OpImageSampleImplicitLod %299 %301 
					                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
					                                                      OpStore %294 %303 
					                                       f32_3 %305 = OpLoad %294 
					                              Uniform f32_4* %307 = OpAccessChain %25 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %305 %309 
					                                                      OpStore %304 %310 
					                                       f32_3 %313 = OpLoad %304 
					                                       f32_4 %314 = OpLoad %75 
					                                       f32_3 %315 = OpVectorShuffle %314 %314 1 1 1 
					                                       f32_3 %316 = OpFMul %313 %315 
					                                       f32_3 %317 = OpLoad %22 
					                                       f32_3 %318 = OpFAdd %316 %317 
					                                       f32_4 %319 = OpLoad %312 
					                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
					                                                      OpStore %312 %320 
					                                 Output f32* %322 = OpAccessChain %312 %18 
					                                                      OpStore %322 %16 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 400
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %115 %128 %188 %191 %194 %385 %393 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 RelaxedPrecision 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 RelaxedPrecision 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 RelaxedPrecision 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 RelaxedPrecision 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %88 0 BuiltIn 88 
					                                                      OpMemberDecorate %88 1 BuiltIn 88 
					                                                      OpMemberDecorate %88 2 BuiltIn 88 
					                                                      OpDecorate %88 Block 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %103 Location 103 
					                                                      OpDecorate %115 Location 115 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %188 Location 188 
					                                                      OpDecorate %191 Location 191 
					                                                      OpDecorate %194 Location 194 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %276 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %334 RelaxedPrecision 
					                                                      OpDecorate %347 RelaxedPrecision 
					                                                      OpDecorate %348 RelaxedPrecision 
					                                                      OpDecorate %351 RelaxedPrecision 
					                                                      OpDecorate %357 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %361 RelaxedPrecision 
					                                                      OpDecorate %362 RelaxedPrecision 
					                                                      OpDecorate %366 RelaxedPrecision 
					                                                      OpDecorate %367 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %372 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %374 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %385 Location 385 
					                                                      OpDecorate %391 RelaxedPrecision 
					                                                      OpDecorate %393 Location 393 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 8 
					                                              %17 = OpTypeArray %7 %16 
					                                          u32 %18 = OpConstant 4 
					                                              %19 = OpTypeArray %7 %18 
					                                              %20 = OpTypeArray %7 %18 
					                                              %21 = OpTypeArray %7 %18 
					                                              %22 = OpTypeStruct %14 %7 %7 %7 %7 %17 %7 %7 %7 %7 %19 %20 %21 %7 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 10 
					                                          i32 %27 = OpConstant 1 
					                                              %28 = OpTypePointer Uniform %7 
					                                          i32 %32 = OpConstant 0 
					                                          i32 %40 = OpConstant 2 
					                               Private f32_4* %48 = OpVariable Private 
					                                          i32 %50 = OpConstant 3 
					                               Private f32_4* %65 = OpVariable Private 
					                                          i32 %68 = OpConstant 12 
					                                          u32 %86 = OpConstant 1 
					                                              %87 = OpTypeArray %6 %86 
					                                              %88 = OpTypeStruct %7 %6 %87 
					                                              %89 = OpTypePointer Output %88 
					         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
					                                              %98 = OpTypePointer Output %7 
					                                             %100 = OpTypeVector %6 2 
					                                             %101 = OpTypePointer Output %100 
					                               Output f32_2* %102 = OpVariable Output 
					                                Input f32_4* %103 = OpVariable Input 
					                                         i32 %106 = OpConstant 13 
					                               Output f32_2* %115 = OpVariable Output 
					                                         f32 %116 = OpConstant 3.674022E-40 
					                                       f32_2 %117 = OpConstantComposite %116 %116 
					                                             %121 = OpTypePointer Uniform %14 
					                                             %127 = OpTypePointer Input %14 
					                                Input f32_3* %128 = OpVariable Input 
					                                         i32 %130 = OpConstant 11 
					                                         u32 %135 = OpConstant 0 
					                                             %136 = OpTypePointer Private %6 
					                                         u32 %149 = OpConstant 2 
					                                Private f32* %151 = OpVariable Private 
					                                             %187 = OpTypePointer Output %14 
					                               Output f32_3* %188 = OpVariable Output 
					                               Output f32_3* %191 = OpVariable Output 
					                               Output f32_3* %194 = OpVariable Output 
					                              Private f32_4* %203 = OpVariable Private 
					                              Private f32_4* %216 = OpVariable Private 
					                                         f32 %247 = OpConstant 3.674022E-40 
					                                       f32_4 %248 = OpConstantComposite %247 %247 %247 %247 
					                                         i32 %253 = OpConstant 4 
					                                         f32 %257 = OpConstant 3.674022E-40 
					                                       f32_4 %258 = OpConstantComposite %257 %257 %257 %257 
					                                       f32_4 %266 = OpConstantComposite %116 %116 %116 %116 
					                                         i32 %273 = OpConstant 5 
					                                         f32 %315 = OpConstant 3.674022E-40 
					                                       f32_3 %316 = OpConstantComposite %315 %315 %315 
					                                         f32 %318 = OpConstant 3.674022E-40 
					                                       f32_3 %319 = OpConstantComposite %318 %318 %318 
					                                         f32 %328 = OpConstant 3.674022E-40 
					                                       f32_3 %329 = OpConstantComposite %328 %328 %328 
					                                             %333 = OpTypePointer Private %14 
					                              Private f32_3* %334 = OpVariable Private 
					                              Private f32_4* %351 = OpVariable Private 
					                              Private f32_3* %357 = OpVariable Private 
					                                         i32 %358 = OpConstant 6 
					                                         i32 %364 = OpConstant 7 
					                                         i32 %370 = OpConstant 8 
					                                         i32 %376 = OpConstant 9 
					                               Output f32_3* %385 = OpVariable Output 
					                               Output f32_4* %393 = OpVariable Output 
					                                             %394 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %29 = OpAccessChain %24 %26 %27 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpFMul %13 %30 
					                                                      OpStore %9 %31 
					                               Uniform f32_4* %33 = OpAccessChain %24 %26 %32 
					                                        f32_4 %34 = OpLoad %33 
					                                        f32_4 %35 = OpLoad %11 
					                                        f32_4 %36 = OpVectorShuffle %35 %35 0 0 0 0 
					                                        f32_4 %37 = OpFMul %34 %36 
					                                        f32_4 %38 = OpLoad %9 
					                                        f32_4 %39 = OpFAdd %37 %38 
					                                                      OpStore %9 %39 
					                               Uniform f32_4* %41 = OpAccessChain %24 %26 %40 
					                                        f32_4 %42 = OpLoad %41 
					                                        f32_4 %43 = OpLoad %11 
					                                        f32_4 %44 = OpVectorShuffle %43 %43 2 2 2 2 
					                                        f32_4 %45 = OpFMul %42 %44 
					                                        f32_4 %46 = OpLoad %9 
					                                        f32_4 %47 = OpFAdd %45 %46 
					                                                      OpStore %9 %47 
					                                        f32_4 %49 = OpLoad %9 
					                               Uniform f32_4* %51 = OpAccessChain %24 %26 %50 
					                                        f32_4 %52 = OpLoad %51 
					                                        f32_4 %53 = OpFAdd %49 %52 
					                                                      OpStore %48 %53 
					                               Uniform f32_4* %54 = OpAccessChain %24 %26 %50 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_4 %57 = OpLoad %11 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
					                                        f32_3 %59 = OpFMul %56 %58 
					                                        f32_4 %60 = OpLoad %9 
					                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
					                                        f32_3 %62 = OpFAdd %59 %61 
					                                        f32_4 %63 = OpLoad %9 
					                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
					                                                      OpStore %9 %64 
					                                        f32_4 %66 = OpLoad %48 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
					                               Uniform f32_4* %69 = OpAccessChain %24 %68 %27 
					                                        f32_4 %70 = OpLoad %69 
					                                        f32_4 %71 = OpFMul %67 %70 
					                                                      OpStore %65 %71 
					                               Uniform f32_4* %72 = OpAccessChain %24 %68 %32 
					                                        f32_4 %73 = OpLoad %72 
					                                        f32_4 %74 = OpLoad %48 
					                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
					                                        f32_4 %76 = OpFMul %73 %75 
					                                        f32_4 %77 = OpLoad %65 
					                                        f32_4 %78 = OpFAdd %76 %77 
					                                                      OpStore %65 %78 
					                               Uniform f32_4* %79 = OpAccessChain %24 %68 %40 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_4 %81 = OpLoad %48 
					                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
					                                        f32_4 %83 = OpFMul %80 %82 
					                                        f32_4 %84 = OpLoad %65 
					                                        f32_4 %85 = OpFAdd %83 %84 
					                                                      OpStore %65 %85 
					                               Uniform f32_4* %91 = OpAccessChain %24 %68 %50 
					                                        f32_4 %92 = OpLoad %91 
					                                        f32_4 %93 = OpLoad %48 
					                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
					                                        f32_4 %95 = OpFMul %92 %94 
					                                        f32_4 %96 = OpLoad %65 
					                                        f32_4 %97 = OpFAdd %95 %96 
					                                Output f32_4* %99 = OpAccessChain %90 %32 
					                                                      OpStore %99 %97 
					                                       f32_4 %104 = OpLoad %103 
					                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
					                              Uniform f32_4* %107 = OpAccessChain %24 %106 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
					                                       f32_2 %110 = OpFMul %105 %109 
					                              Uniform f32_4* %111 = OpAccessChain %24 %106 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
					                                       f32_2 %114 = OpFAdd %110 %113 
					                                                      OpStore %102 %114 
					                                                      OpStore %115 %117 
					                                       f32_4 %118 = OpLoad %9 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_3 %120 = OpFNegate %119 
					                              Uniform f32_3* %122 = OpAccessChain %24 %32 
					                                       f32_3 %123 = OpLoad %122 
					                                       f32_3 %124 = OpFAdd %120 %123 
					                                       f32_4 %125 = OpLoad %48 
					                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
					                                                      OpStore %48 %126 
					                                       f32_3 %129 = OpLoad %128 
					                              Uniform f32_4* %131 = OpAccessChain %24 %130 %32 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %129 %133 
					                                Private f32* %137 = OpAccessChain %65 %135 
					                                                      OpStore %137 %134 
					                                       f32_3 %138 = OpLoad %128 
					                              Uniform f32_4* %139 = OpAccessChain %24 %130 %27 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %65 %86 
					                                                      OpStore %143 %142 
					                                       f32_3 %144 = OpLoad %128 
					                              Uniform f32_4* %145 = OpAccessChain %24 %130 %40 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %144 %147 
					                                Private f32* %150 = OpAccessChain %65 %149 
					                                                      OpStore %150 %148 
					                                       f32_4 %152 = OpLoad %65 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %65 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                                      OpStore %151 %156 
					                                         f32 %157 = OpLoad %151 
					                                         f32 %158 = OpExtInst %1 32 %157 
					                                                      OpStore %151 %158 
					                                         f32 %159 = OpLoad %151 
					                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
					                                       f32_4 %161 = OpLoad %65 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %65 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %65 %165 
					                                       f32_4 %166 = OpLoad %48 
					                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
					                                       f32_3 %168 = OpFNegate %167 
					                                       f32_4 %169 = OpLoad %65 
					                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
					                                         f32 %171 = OpDot %168 %170 
					                                                      OpStore %151 %171 
					                                         f32 %172 = OpLoad %151 
					                                         f32 %173 = OpLoad %151 
					                                         f32 %174 = OpFAdd %172 %173 
					                                                      OpStore %151 %174 
					                                       f32_4 %175 = OpLoad %65 
					                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
					                                         f32 %177 = OpLoad %151 
					                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
					                                       f32_3 %179 = OpFNegate %178 
					                                       f32_3 %180 = OpFMul %176 %179 
					                                       f32_4 %181 = OpLoad %48 
					                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
					                                       f32_3 %183 = OpFNegate %182 
					                                       f32_3 %184 = OpFAdd %180 %183 
					                                       f32_4 %185 = OpLoad %48 
					                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
					                                                      OpStore %48 %186 
					                                       f32_4 %189 = OpLoad %48 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                                      OpStore %188 %190 
					                                       f32_4 %192 = OpLoad %65 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                                      OpStore %191 %193 
					                                       f32_4 %195 = OpLoad %9 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                                      OpStore %194 %196 
					                                       f32_4 %197 = OpLoad %9 
					                                       f32_4 %198 = OpVectorShuffle %197 %197 0 0 0 0 
					                                       f32_4 %199 = OpFNegate %198 
					                              Uniform f32_4* %200 = OpAccessChain %24 %27 
					                                       f32_4 %201 = OpLoad %200 
					                                       f32_4 %202 = OpFAdd %199 %201 
					                                                      OpStore %48 %202 
					                                       f32_4 %204 = OpLoad %9 
					                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
					                                       f32_4 %206 = OpFNegate %205 
					                              Uniform f32_4* %207 = OpAccessChain %24 %40 
					                                       f32_4 %208 = OpLoad %207 
					                                       f32_4 %209 = OpFAdd %206 %208 
					                                                      OpStore %203 %209 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
					                                       f32_4 %212 = OpFNegate %211 
					                              Uniform f32_4* %213 = OpAccessChain %24 %50 
					                                       f32_4 %214 = OpLoad %213 
					                                       f32_4 %215 = OpFAdd %212 %214 
					                                                      OpStore %9 %215 
					                                       f32_4 %217 = OpLoad %65 
					                                       f32_4 %218 = OpVectorShuffle %217 %217 1 1 1 1 
					                                       f32_4 %219 = OpLoad %203 
					                                       f32_4 %220 = OpFMul %218 %219 
					                                                      OpStore %216 %220 
					                                       f32_4 %221 = OpLoad %203 
					                                       f32_4 %222 = OpLoad %203 
					                                       f32_4 %223 = OpFMul %221 %222 
					                                                      OpStore %203 %223 
					                                       f32_4 %224 = OpLoad %48 
					                                       f32_4 %225 = OpLoad %48 
					                                       f32_4 %226 = OpFMul %224 %225 
					                                       f32_4 %227 = OpLoad %203 
					                                       f32_4 %228 = OpFAdd %226 %227 
					                                                      OpStore %203 %228 
					                                       f32_4 %229 = OpLoad %48 
					                                       f32_4 %230 = OpLoad %65 
					                                       f32_4 %231 = OpVectorShuffle %230 %230 0 0 0 0 
					                                       f32_4 %232 = OpFMul %229 %231 
					                                       f32_4 %233 = OpLoad %216 
					                                       f32_4 %234 = OpFAdd %232 %233 
					                                                      OpStore %48 %234 
					                                       f32_4 %235 = OpLoad %9 
					                                       f32_4 %236 = OpLoad %65 
					                                       f32_4 %237 = OpVectorShuffle %236 %236 2 2 2 2 
					                                       f32_4 %238 = OpFMul %235 %237 
					                                       f32_4 %239 = OpLoad %48 
					                                       f32_4 %240 = OpFAdd %238 %239 
					                                                      OpStore %48 %240 
					                                       f32_4 %241 = OpLoad %9 
					                                       f32_4 %242 = OpLoad %9 
					                                       f32_4 %243 = OpFMul %241 %242 
					                                       f32_4 %244 = OpLoad %203 
					                                       f32_4 %245 = OpFAdd %243 %244 
					                                                      OpStore %9 %245 
					                                       f32_4 %246 = OpLoad %9 
					                                       f32_4 %249 = OpExtInst %1 40 %246 %248 
					                                                      OpStore %9 %249 
					                                       f32_4 %250 = OpLoad %9 
					                                       f32_4 %251 = OpExtInst %1 32 %250 
					                                                      OpStore %203 %251 
					                                       f32_4 %252 = OpLoad %9 
					                              Uniform f32_4* %254 = OpAccessChain %24 %253 
					                                       f32_4 %255 = OpLoad %254 
					                                       f32_4 %256 = OpFMul %252 %255 
					                                       f32_4 %259 = OpFAdd %256 %258 
					                                                      OpStore %9 %259 
					                                       f32_4 %260 = OpLoad %9 
					                                       f32_4 %261 = OpFDiv %258 %260 
					                                                      OpStore %9 %261 
					                                       f32_4 %262 = OpLoad %48 
					                                       f32_4 %263 = OpLoad %203 
					                                       f32_4 %264 = OpFMul %262 %263 
					                                                      OpStore %48 %264 
					                                       f32_4 %265 = OpLoad %48 
					                                       f32_4 %267 = OpExtInst %1 40 %265 %266 
					                                                      OpStore %48 %267 
					                                       f32_4 %268 = OpLoad %9 
					                                       f32_4 %269 = OpLoad %48 
					                                       f32_4 %270 = OpFMul %268 %269 
					                                                      OpStore %9 %270 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 1 1 1 
					                              Uniform f32_4* %274 = OpAccessChain %24 %273 %27 
					                                       f32_4 %275 = OpLoad %274 
					                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
					                                       f32_3 %277 = OpFMul %272 %276 
					                                       f32_4 %278 = OpLoad %48 
					                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
					                                                      OpStore %48 %279 
					                              Uniform f32_4* %280 = OpAccessChain %24 %273 %32 
					                                       f32_4 %281 = OpLoad %280 
					                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
					                                       f32_4 %283 = OpLoad %9 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
					                                       f32_3 %285 = OpFMul %282 %284 
					                                       f32_4 %286 = OpLoad %48 
					                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
					                                       f32_3 %288 = OpFAdd %285 %287 
					                                       f32_4 %289 = OpLoad %48 
					                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
					                                                      OpStore %48 %290 
					                              Uniform f32_4* %291 = OpAccessChain %24 %273 %40 
					                                       f32_4 %292 = OpLoad %291 
					                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
					                                       f32_4 %294 = OpLoad %9 
					                                       f32_3 %295 = OpVectorShuffle %294 %294 2 2 2 
					                                       f32_3 %296 = OpFMul %293 %295 
					                                       f32_4 %297 = OpLoad %48 
					                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
					                                       f32_3 %299 = OpFAdd %296 %298 
					                                       f32_4 %300 = OpLoad %9 
					                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
					                                                      OpStore %9 %301 
					                              Uniform f32_4* %302 = OpAccessChain %24 %273 %50 
					                                       f32_4 %303 = OpLoad %302 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 3 3 3 
					                                       f32_3 %307 = OpFMul %304 %306 
					                                       f32_4 %308 = OpLoad %9 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFAdd %307 %309 
					                                       f32_4 %311 = OpLoad %9 
					                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
					                                                      OpStore %9 %312 
					                                       f32_4 %313 = OpLoad %9 
					                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
					                                       f32_3 %317 = OpFMul %314 %316 
					                                       f32_3 %320 = OpFAdd %317 %319 
					                                       f32_4 %321 = OpLoad %48 
					                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
					                                                      OpStore %48 %322 
					                                       f32_4 %323 = OpLoad %9 
					                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
					                                       f32_4 %325 = OpLoad %48 
					                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
					                                       f32_3 %327 = OpFMul %324 %326 
					                                       f32_3 %330 = OpFAdd %327 %329 
					                                       f32_4 %331 = OpLoad %48 
					                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
					                                                      OpStore %48 %332 
					                                Private f32* %335 = OpAccessChain %65 %86 
					                                         f32 %336 = OpLoad %335 
					                                Private f32* %337 = OpAccessChain %65 %86 
					                                         f32 %338 = OpLoad %337 
					                                         f32 %339 = OpFMul %336 %338 
					                                Private f32* %340 = OpAccessChain %334 %135 
					                                                      OpStore %340 %339 
					                                Private f32* %341 = OpAccessChain %65 %135 
					                                         f32 %342 = OpLoad %341 
					                                Private f32* %343 = OpAccessChain %65 %135 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                Private f32* %346 = OpAccessChain %334 %135 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpFNegate %347 
					                                         f32 %349 = OpFAdd %345 %348 
					                                Private f32* %350 = OpAccessChain %334 %135 
					                                                      OpStore %350 %349 
					                                       f32_4 %352 = OpLoad %65 
					                                       f32_4 %353 = OpVectorShuffle %352 %352 1 2 2 0 
					                                       f32_4 %354 = OpLoad %65 
					                                       f32_4 %355 = OpVectorShuffle %354 %354 0 1 2 2 
					                                       f32_4 %356 = OpFMul %353 %355 
					                                                      OpStore %351 %356 
					                              Uniform f32_4* %359 = OpAccessChain %24 %358 
					                                       f32_4 %360 = OpLoad %359 
					                                       f32_4 %361 = OpLoad %351 
					                                         f32 %362 = OpDot %360 %361 
					                                Private f32* %363 = OpAccessChain %357 %135 
					                                                      OpStore %363 %362 
					                              Uniform f32_4* %365 = OpAccessChain %24 %364 
					                                       f32_4 %366 = OpLoad %365 
					                                       f32_4 %367 = OpLoad %351 
					                                         f32 %368 = OpDot %366 %367 
					                                Private f32* %369 = OpAccessChain %357 %86 
					                                                      OpStore %369 %368 
					                              Uniform f32_4* %371 = OpAccessChain %24 %370 
					                                       f32_4 %372 = OpLoad %371 
					                                       f32_4 %373 = OpLoad %351 
					                                         f32 %374 = OpDot %372 %373 
					                                Private f32* %375 = OpAccessChain %357 %149 
					                                                      OpStore %375 %374 
					                              Uniform f32_4* %377 = OpAccessChain %24 %376 
					                                       f32_4 %378 = OpLoad %377 
					                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
					                                       f32_3 %380 = OpLoad %334 
					                                       f32_3 %381 = OpVectorShuffle %380 %380 0 0 0 
					                                       f32_3 %382 = OpFMul %379 %381 
					                                       f32_3 %383 = OpLoad %357 
					                                       f32_3 %384 = OpFAdd %382 %383 
					                                                      OpStore %334 %384 
					                                       f32_4 %386 = OpLoad %9 
					                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
					                                       f32_4 %388 = OpLoad %48 
					                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
					                                       f32_3 %390 = OpFMul %387 %389 
					                                       f32_3 %391 = OpLoad %334 
					                                       f32_3 %392 = OpFAdd %390 %391 
					                                                      OpStore %385 %392 
					                                                      OpStore %393 %266 
					                                 Output f32* %395 = OpAccessChain %90 %32 %86 
					                                         f32 %396 = OpLoad %395 
					                                         f32 %397 = OpFNegate %396 
					                                 Output f32* %398 = OpAccessChain %90 %32 %86 
					                                                      OpStore %398 %397 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 324
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %50 %76 %187 %300 %312 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %22 RelaxedPrecision 
					                                                      OpMemberDecorate %23 0 Offset 23 
					                                                      OpMemberDecorate %23 1 RelaxedPrecision 
					                                                      OpMemberDecorate %23 1 Offset 23 
					                                                      OpMemberDecorate %23 2 RelaxedPrecision 
					                                                      OpMemberDecorate %23 2 Offset 23 
					                                                      OpMemberDecorate %23 3 RelaxedPrecision 
					                                                      OpMemberDecorate %23 3 Offset 23 
					                                                      OpMemberDecorate %23 4 RelaxedPrecision 
					                                                      OpMemberDecorate %23 4 Offset 23 
					                                                      OpMemberDecorate %23 5 RelaxedPrecision 
					                                                      OpMemberDecorate %23 5 Offset 23 
					                                                      OpMemberDecorate %23 6 RelaxedPrecision 
					                                                      OpMemberDecorate %23 6 Offset 23 
					                                                      OpMemberDecorate %23 7 RelaxedPrecision 
					                                                      OpMemberDecorate %23 7 Offset 23 
					                                                      OpMemberDecorate %23 8 RelaxedPrecision 
					                                                      OpMemberDecorate %23 8 Offset 23 
					                                                      OpMemberDecorate %23 9 RelaxedPrecision 
					                                                      OpMemberDecorate %23 9 Offset 23 
					                                                      OpMemberDecorate %23 10 Offset 23 
					                                                      OpMemberDecorate %23 11 Offset 23 
					                                                      OpMemberDecorate %23 12 Offset 23 
					                                                      OpMemberDecorate %23 13 Offset 23 
					                                                      OpMemberDecorate %23 14 RelaxedPrecision 
					                                                      OpMemberDecorate %23 14 Offset 23 
					                                                      OpDecorate %23 Block 
					                                                      OpDecorate %25 DescriptorSet 25 
					                                                      OpDecorate %25 Binding 25 
					                                                      OpDecorate %30 RelaxedPrecision 
					                                                      OpDecorate %37 RelaxedPrecision 
					                                                      OpDecorate %44 RelaxedPrecision 
					                                                      OpDecorate %49 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %50 Location 50 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %52 RelaxedPrecision 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %56 RelaxedPrecision 
					                                                      OpDecorate %57 RelaxedPrecision 
					                                                      OpDecorate %58 RelaxedPrecision 
					                                                      OpDecorate %59 RelaxedPrecision 
					                                                      OpDecorate %60 RelaxedPrecision 
					                                                      OpDecorate %63 RelaxedPrecision 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %72 RelaxedPrecision 
					                                                      OpDecorate %73 RelaxedPrecision 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %76 Location 76 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %102 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %151 RelaxedPrecision 
					                                                      OpDecorate %153 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %161 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %171 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %173 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %180 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 DescriptorSet 184 
					                                                      OpDecorate %184 Binding 184 
					                                                      OpDecorate %185 RelaxedPrecision 
					                                                      OpDecorate %187 Location 187 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %205 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %250 RelaxedPrecision 
					                                                      OpDecorate %251 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %254 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %267 RelaxedPrecision 
					                                                      OpDecorate %268 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %279 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %294 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %298 DescriptorSet 298 
					                                                      OpDecorate %298 Binding 298 
					                                                      OpDecorate %299 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %300 Location 300 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %305 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %310 RelaxedPrecision 
					                                                      OpDecorate %312 RelaxedPrecision 
					                                                      OpDecorate %312 Location 312 
					                                                      OpDecorate %313 RelaxedPrecision 
					                                                      OpDecorate %317 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                          f32 %16 = OpConstant 3.674022E-40 
					                                              %17 = OpTypeInt 32 0 
					                                          u32 %18 = OpConstant 3 
					                                              %19 = OpTypePointer Private %6 
					                                              %21 = OpTypePointer Private %10 
					                               Private f32_3* %22 = OpVariable Private 
					                                              %23 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %7 
					                                              %24 = OpTypePointer Uniform %23 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %25 = OpVariable Uniform 
					                                              %26 = OpTypeInt 32 1 
					                                          i32 %27 = OpConstant 2 
					                                              %28 = OpTypePointer Uniform %7 
					                                          u32 %33 = OpConstant 0 
					                                          i32 %35 = OpConstant 3 
					                                          u32 %40 = OpConstant 1 
					                                          i32 %42 = OpConstant 4 
					                                          u32 %47 = OpConstant 2 
					                                 Input f32_3* %50 = OpVariable Input 
					                                          f32 %54 = OpConstant 3.674022E-40 
					                                        f32_3 %55 = OpConstantComposite %54 %54 %54 
					                               Private f32_3* %57 = OpVariable Private 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                        f32_3 %62 = OpConstantComposite %61 %61 %61 
					                                          f32 %67 = OpConstant 3.674022E-40 
					                                        f32_3 %68 = OpConstantComposite %67 %67 %67 
					                                          f32 %70 = OpConstant 3.674022E-40 
					                                        f32_3 %71 = OpConstantComposite %70 %70 %70 
					                               Private f32_4* %75 = OpVariable Private 
					                                 Input f32_3* %76 = OpVariable Input 
					                                          i32 %79 = OpConstant 0 
					                                              %80 = OpTypePointer Uniform %10 
					                                 Private f32* %86 = OpVariable Private 
					                                          i32 %99 = OpConstant 1 
					                                Private f32* %117 = OpVariable Private 
					                                Private f32* %121 = OpVariable Private 
					                                             %125 = OpTypeVector %6 2 
					                                         i32 %127 = OpConstant 12 
					                                             %128 = OpTypePointer Uniform %6 
					                                         i32 %131 = OpConstant 10 
					                                         i32 %163 = OpConstant 9 
					                                         f32 %166 = OpConstant 3.674022E-40 
					                                Private f32* %180 = OpVariable Private 
					                                             %181 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %182 = OpTypeSampledImage %181 
					                                             %183 = OpTypePointer UniformConstant %182 
					 UniformConstant read_only Texture2DSampled* %184 = OpVariable UniformConstant 
					                                             %186 = OpTypePointer Input %125 
					                                Input f32_2* %187 = OpVariable Input 
					                                Private f32* %196 = OpVariable Private 
					                                         i32 %199 = OpConstant 11 
					                                         i32 %203 = OpConstant 6 
					                                         i32 %210 = OpConstant 5 
					                              Private f32_3* %218 = OpVariable Private 
					                              Private f32_3* %233 = OpVariable Private 
					                                         i32 %236 = OpConstant 14 
					                              Private f32_3* %241 = OpVariable Private 
					                                         i32 %243 = OpConstant 13 
					                                         i32 %265 = OpConstant 7 
					                              Private f32_3* %294 = OpVariable Private 
					                                             %295 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %296 = OpTypeSampledImage %295 
					                                             %297 = OpTypePointer UniformConstant %296 
					UniformConstant read_only TextureCubeSampled* %298 = OpVariable UniformConstant 
					                                Input f32_3* %300 = OpVariable Input 
					                              Private f32_3* %304 = OpVariable Private 
					                                         i32 %306 = OpConstant 8 
					                                             %311 = OpTypePointer Output %7 
					                               Output f32_4* %312 = OpVariable Output 
					                                             %321 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_4 %14 = OpLoad %9 
					                                        f32_4 %15 = OpVectorShuffle %14 %13 4 5 6 3 
					                                                      OpStore %9 %15 
					                                 Private f32* %20 = OpAccessChain %9 %18 
					                                                      OpStore %20 %16 
					                               Uniform f32_4* %29 = OpAccessChain %25 %27 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %9 
					                                          f32 %32 = OpDot %30 %31 
					                                 Private f32* %34 = OpAccessChain %22 %33 
					                                                      OpStore %34 %32 
					                               Uniform f32_4* %36 = OpAccessChain %25 %35 
					                                        f32_4 %37 = OpLoad %36 
					                                        f32_4 %38 = OpLoad %9 
					                                          f32 %39 = OpDot %37 %38 
					                                 Private f32* %41 = OpAccessChain %22 %40 
					                                                      OpStore %41 %39 
					                               Uniform f32_4* %43 = OpAccessChain %25 %42 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_4 %45 = OpLoad %9 
					                                          f32 %46 = OpDot %44 %45 
					                                 Private f32* %48 = OpAccessChain %22 %47 
					                                                      OpStore %48 %46 
					                                        f32_3 %49 = OpLoad %22 
					                                        f32_3 %51 = OpLoad %50 
					                                        f32_3 %52 = OpFAdd %49 %51 
					                                                      OpStore %22 %52 
					                                        f32_3 %53 = OpLoad %22 
					                                        f32_3 %56 = OpExtInst %1 40 %53 %55 
					                                                      OpStore %22 %56 
					                                        f32_3 %58 = OpLoad %22 
					                                        f32_3 %59 = OpExtInst %1 30 %58 
					                                                      OpStore %57 %59 
					                                        f32_3 %60 = OpLoad %57 
					                                        f32_3 %63 = OpFMul %60 %62 
					                                                      OpStore %57 %63 
					                                        f32_3 %64 = OpLoad %57 
					                                        f32_3 %65 = OpExtInst %1 29 %64 
					                                                      OpStore %57 %65 
					                                        f32_3 %66 = OpLoad %57 
					                                        f32_3 %69 = OpFMul %66 %68 
					                                        f32_3 %72 = OpFAdd %69 %71 
					                                                      OpStore %57 %72 
					                                        f32_3 %73 = OpLoad %57 
					                                        f32_3 %74 = OpExtInst %1 40 %73 %55 
					                                                      OpStore %57 %74 
					                                        f32_3 %77 = OpLoad %76 
					                                        f32_3 %78 = OpFNegate %77 
					                               Uniform f32_3* %81 = OpAccessChain %25 %79 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %78 %82 
					                                        f32_4 %84 = OpLoad %75 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %75 %85 
					                                        f32_4 %87 = OpLoad %75 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                        f32_4 %89 = OpLoad %75 
					                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
					                                          f32 %91 = OpDot %88 %90 
					                                                      OpStore %86 %91 
					                                          f32 %92 = OpLoad %86 
					                                          f32 %93 = OpExtInst %1 32 %92 
					                                                      OpStore %86 %93 
					                                        f32_4 %94 = OpLoad %75 
					                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
					                                          f32 %96 = OpLoad %86 
					                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
					                                        f32_3 %98 = OpFMul %95 %97 
					                              Uniform f32_4* %100 = OpAccessChain %25 %99 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
					                                       f32_3 %103 = OpFAdd %98 %102 
					                                                      OpStore %22 %103 
					                                         f32 %104 = OpLoad %86 
					                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
					                                       f32_4 %106 = OpLoad %75 
					                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
					                                       f32_3 %108 = OpFMul %105 %107 
					                                       f32_4 %109 = OpLoad %75 
					                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
					                                                      OpStore %75 %110 
					                                       f32_4 %111 = OpLoad %75 
					                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
					                                       f32_3 %113 = OpLoad %12 
					                                         f32 %114 = OpDot %112 %113 
					                                                      OpStore %86 %114 
					                                         f32 %115 = OpLoad %86 
					                                         f32 %116 = OpExtInst %1 43 %115 %54 %16 
					                                                      OpStore %86 %116 
					                                         f32 %118 = OpLoad %86 
					                                         f32 %119 = OpFNegate %118 
					                                         f32 %120 = OpFAdd %119 %16 
					                                                      OpStore %117 %120 
					                                         f32 %122 = OpLoad %117 
					                                         f32 %123 = OpExtInst %1 30 %122 
					                                                      OpStore %121 %123 
					                                         f32 %124 = OpLoad %121 
					                                       f32_2 %126 = OpCompositeConstruct %124 %124 
					                                Uniform f32* %129 = OpAccessChain %25 %127 
					                                         f32 %130 = OpLoad %129 
					                                Uniform f32* %132 = OpAccessChain %25 %131 
					                                         f32 %133 = OpLoad %132 
					                                       f32_2 %134 = OpCompositeConstruct %130 %133 
					                                       f32_2 %135 = OpFMul %126 %134 
					                                       f32_4 %136 = OpLoad %75 
					                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 3 
					                                                      OpStore %75 %137 
					                                       f32_4 %138 = OpLoad %75 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
					                                       f32_2 %140 = OpExtInst %1 29 %139 
					                                       f32_4 %141 = OpLoad %75 
					                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
					                                                      OpStore %75 %142 
					                                       f32_3 %143 = OpLoad %22 
					                                       f32_3 %144 = OpLoad %22 
					                                         f32 %145 = OpDot %143 %144 
					                                                      OpStore %117 %145 
					                                         f32 %146 = OpLoad %117 
					                                         f32 %147 = OpExtInst %1 32 %146 
					                                                      OpStore %117 %147 
					                                         f32 %148 = OpLoad %117 
					                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
					                                       f32_3 %150 = OpLoad %22 
					                                       f32_3 %151 = OpFMul %149 %150 
					                                                      OpStore %22 %151 
					                                       f32_3 %152 = OpLoad %12 
					                                       f32_3 %153 = OpLoad %22 
					                                         f32 %154 = OpDot %152 %153 
					                                Private f32* %155 = OpAccessChain %22 %33 
					                                                      OpStore %155 %154 
					                                Private f32* %156 = OpAccessChain %22 %33 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpExtInst %1 40 %157 %54 
					                                Private f32* %159 = OpAccessChain %22 %33 
					                                                      OpStore %159 %158 
					                                Private f32* %160 = OpAccessChain %22 %33 
					                                         f32 %161 = OpLoad %160 
					                                         f32 %162 = OpExtInst %1 30 %161 
					                                                      OpStore %121 %162 
					                                Uniform f32* %164 = OpAccessChain %25 %163 
					                                         f32 %165 = OpLoad %164 
					                                         f32 %167 = OpFMul %165 %166 
					                                Private f32* %168 = OpAccessChain %22 %33 
					                                                      OpStore %168 %167 
					                                         f32 %169 = OpLoad %121 
					                                Private f32* %170 = OpAccessChain %22 %33 
					                                         f32 %171 = OpLoad %170 
					                                         f32 %172 = OpFMul %169 %171 
					                                                      OpStore %121 %172 
					                                         f32 %173 = OpLoad %121 
					                                         f32 %174 = OpExtInst %1 29 %173 
					                                                      OpStore %121 %174 
					                                Private f32* %175 = OpAccessChain %75 %33 
					                                         f32 %176 = OpLoad %175 
					                                         f32 %177 = OpFNegate %176 
					                                         f32 %178 = OpFAdd %177 %16 
					                                Private f32* %179 = OpAccessChain %22 %33 
					                                                      OpStore %179 %178 
					                  read_only Texture2DSampled %185 = OpLoad %184 
					                                       f32_2 %188 = OpLoad %187 
					                                       f32_4 %189 = OpImageSampleImplicitLod %185 %188 
					                                         f32 %190 = OpCompositeExtract %189 3 
					                                                      OpStore %180 %190 
					                                Private f32* %191 = OpAccessChain %22 %33 
					                                         f32 %192 = OpLoad %191 
					                                         f32 %193 = OpLoad %180 
					                                         f32 %194 = OpFMul %192 %193 
					                                Private f32* %195 = OpAccessChain %22 %33 
					                                                      OpStore %195 %194 
					                                Private f32* %197 = OpAccessChain %22 %33 
					                                         f32 %198 = OpLoad %197 
					                                Uniform f32* %200 = OpAccessChain %25 %199 
					                                         f32 %201 = OpLoad %200 
					                                         f32 %202 = OpFMul %198 %201 
					                                Uniform f32* %204 = OpAccessChain %25 %203 %18 
					                                         f32 %205 = OpLoad %204 
					                                         f32 %206 = OpFAdd %202 %205 
					                                                      OpStore %196 %206 
					                                         f32 %207 = OpLoad %121 
					                                         f32 %208 = OpLoad %196 
					                                         f32 %209 = OpFMul %207 %208 
					                                                      OpStore %86 %209 
					                              Uniform f32_4* %211 = OpAccessChain %25 %210 
					                                       f32_4 %212 = OpLoad %211 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                              Uniform f32_4* %214 = OpAccessChain %25 %203 
					                                       f32_4 %215 = OpLoad %214 
					                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
					                                       f32_3 %217 = OpFMul %213 %216 
					                                                      OpStore %22 %217 
					                                         f32 %219 = OpLoad %86 
					                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
					                                       f32_3 %221 = OpLoad %22 
					                                       f32_3 %222 = OpFMul %220 %221 
					                                                      OpStore %218 %222 
					                                       f32_3 %223 = OpLoad %12 
					                              Uniform f32_4* %224 = OpAccessChain %25 %99 
					                                       f32_4 %225 = OpLoad %224 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                         f32 %227 = OpDot %223 %226 
					                                Private f32* %228 = OpAccessChain %22 %33 
					                                                      OpStore %228 %227 
					                                Private f32* %229 = OpAccessChain %22 %33 
					                                         f32 %230 = OpLoad %229 
					                                         f32 %231 = OpExtInst %1 40 %230 %54 
					                                Private f32* %232 = OpAccessChain %22 %33 
					                                                      OpStore %232 %231 
					                                       f32_4 %234 = OpLoad %75 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
					                              Uniform f32_4* %237 = OpAccessChain %25 %236 
					                                       f32_4 %238 = OpLoad %237 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                       f32_3 %240 = OpFMul %235 %239 
					                                                      OpStore %233 %240 
					                                       f32_3 %242 = OpLoad %233 
					                                Uniform f32* %244 = OpAccessChain %25 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %246 = OpAccessChain %25 %243 
					                                         f32 %247 = OpLoad %246 
					                                Uniform f32* %248 = OpAccessChain %25 %243 
					                                         f32 %249 = OpLoad %248 
					                                       f32_3 %250 = OpCompositeConstruct %245 %247 %249 
					                                         f32 %251 = OpCompositeExtract %250 0 
					                                         f32 %252 = OpCompositeExtract %250 1 
					                                         f32 %253 = OpCompositeExtract %250 2 
					                                       f32_3 %254 = OpCompositeConstruct %251 %252 %253 
					                                       f32_3 %255 = OpFMul %242 %254 
					                                                      OpStore %241 %255 
					                                Private f32* %256 = OpAccessChain %75 %33 
					                                         f32 %257 = OpLoad %256 
					                                         f32 %258 = OpFNegate %257 
					                                Uniform f32* %259 = OpAccessChain %25 %243 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpFMul %258 %260 
					                                         f32 %262 = OpFAdd %261 %16 
					                                                      OpStore %86 %262 
					                                         f32 %263 = OpLoad %86 
					                                         f32 %264 = OpExtInst %1 43 %263 %54 %16 
					                                                      OpStore %86 %264 
					                              Uniform f32_4* %266 = OpAccessChain %25 %265 
					                                       f32_4 %267 = OpLoad %266 
					                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
					                                         f32 %269 = OpLoad %86 
					                                       f32_3 %270 = OpCompositeConstruct %269 %269 %269 
					                                       f32_3 %271 = OpFMul %268 %270 
					                                       f32_3 %272 = OpLoad %241 
					                                       f32_3 %273 = OpFAdd %271 %272 
					                                       f32_4 %274 = OpLoad %75 
					                                       f32_4 %275 = OpVectorShuffle %274 %273 4 1 5 6 
					                                                      OpStore %75 %275 
					                                       f32_4 %276 = OpLoad %75 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 2 3 
					                              Uniform f32_4* %278 = OpAccessChain %25 %210 
					                                       f32_4 %279 = OpLoad %278 
					                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
					                                       f32_3 %281 = OpFMul %277 %280 
					                                                      OpStore %233 %281 
					                                       f32_3 %282 = OpLoad %233 
					                                       f32_3 %283 = OpLoad %22 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
					                                       f32_3 %285 = OpFMul %282 %284 
					                                       f32_3 %286 = OpLoad %218 
					                                       f32_3 %287 = OpFAdd %285 %286 
					                                                      OpStore %218 %287 
					                                       f32_4 %288 = OpLoad %75 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 0 2 3 
					                                       f32_3 %290 = OpLoad %57 
					                                       f32_3 %291 = OpFMul %289 %290 
					                                       f32_3 %292 = OpLoad %218 
					                                       f32_3 %293 = OpFAdd %291 %292 
					                                                      OpStore %22 %293 
					                read_only TextureCubeSampled %299 = OpLoad %298 
					                                       f32_3 %301 = OpLoad %300 
					                                       f32_4 %302 = OpImageSampleImplicitLod %299 %301 
					                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
					                                                      OpStore %294 %303 
					                                       f32_3 %305 = OpLoad %294 
					                              Uniform f32_4* %307 = OpAccessChain %25 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %305 %309 
					                                                      OpStore %304 %310 
					                                       f32_3 %313 = OpLoad %304 
					                                       f32_4 %314 = OpLoad %75 
					                                       f32_3 %315 = OpVectorShuffle %314 %314 1 1 1 
					                                       f32_3 %316 = OpFMul %313 %315 
					                                       f32_3 %317 = OpLoad %22 
					                                       f32_3 %318 = OpFAdd %316 %317 
					                                       f32_4 %319 = OpLoad %312 
					                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
					                                                      OpStore %312 %320 
					                                 Output f32* %322 = OpAccessChain %312 %18 
					                                                      OpStore %322 %16 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 400
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %115 %128 %188 %191 %194 %385 %393 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 RelaxedPrecision 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 RelaxedPrecision 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 RelaxedPrecision 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 RelaxedPrecision 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %88 0 BuiltIn 88 
					                                                      OpMemberDecorate %88 1 BuiltIn 88 
					                                                      OpMemberDecorate %88 2 BuiltIn 88 
					                                                      OpDecorate %88 Block 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %103 Location 103 
					                                                      OpDecorate %115 Location 115 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %188 Location 188 
					                                                      OpDecorate %191 Location 191 
					                                                      OpDecorate %194 Location 194 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %276 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %334 RelaxedPrecision 
					                                                      OpDecorate %347 RelaxedPrecision 
					                                                      OpDecorate %348 RelaxedPrecision 
					                                                      OpDecorate %351 RelaxedPrecision 
					                                                      OpDecorate %357 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %361 RelaxedPrecision 
					                                                      OpDecorate %362 RelaxedPrecision 
					                                                      OpDecorate %366 RelaxedPrecision 
					                                                      OpDecorate %367 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %372 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %374 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %385 Location 385 
					                                                      OpDecorate %391 RelaxedPrecision 
					                                                      OpDecorate %393 Location 393 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 8 
					                                              %17 = OpTypeArray %7 %16 
					                                          u32 %18 = OpConstant 4 
					                                              %19 = OpTypeArray %7 %18 
					                                              %20 = OpTypeArray %7 %18 
					                                              %21 = OpTypeArray %7 %18 
					                                              %22 = OpTypeStruct %14 %7 %7 %7 %7 %17 %7 %7 %7 %7 %19 %20 %21 %7 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 10 
					                                          i32 %27 = OpConstant 1 
					                                              %28 = OpTypePointer Uniform %7 
					                                          i32 %32 = OpConstant 0 
					                                          i32 %40 = OpConstant 2 
					                               Private f32_4* %48 = OpVariable Private 
					                                          i32 %50 = OpConstant 3 
					                               Private f32_4* %65 = OpVariable Private 
					                                          i32 %68 = OpConstant 12 
					                                          u32 %86 = OpConstant 1 
					                                              %87 = OpTypeArray %6 %86 
					                                              %88 = OpTypeStruct %7 %6 %87 
					                                              %89 = OpTypePointer Output %88 
					         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
					                                              %98 = OpTypePointer Output %7 
					                                             %100 = OpTypeVector %6 2 
					                                             %101 = OpTypePointer Output %100 
					                               Output f32_2* %102 = OpVariable Output 
					                                Input f32_4* %103 = OpVariable Input 
					                                         i32 %106 = OpConstant 13 
					                               Output f32_2* %115 = OpVariable Output 
					                                         f32 %116 = OpConstant 3.674022E-40 
					                                       f32_2 %117 = OpConstantComposite %116 %116 
					                                             %121 = OpTypePointer Uniform %14 
					                                             %127 = OpTypePointer Input %14 
					                                Input f32_3* %128 = OpVariable Input 
					                                         i32 %130 = OpConstant 11 
					                                         u32 %135 = OpConstant 0 
					                                             %136 = OpTypePointer Private %6 
					                                         u32 %149 = OpConstant 2 
					                                Private f32* %151 = OpVariable Private 
					                                             %187 = OpTypePointer Output %14 
					                               Output f32_3* %188 = OpVariable Output 
					                               Output f32_3* %191 = OpVariable Output 
					                               Output f32_3* %194 = OpVariable Output 
					                              Private f32_4* %203 = OpVariable Private 
					                              Private f32_4* %216 = OpVariable Private 
					                                         f32 %247 = OpConstant 3.674022E-40 
					                                       f32_4 %248 = OpConstantComposite %247 %247 %247 %247 
					                                         i32 %253 = OpConstant 4 
					                                         f32 %257 = OpConstant 3.674022E-40 
					                                       f32_4 %258 = OpConstantComposite %257 %257 %257 %257 
					                                       f32_4 %266 = OpConstantComposite %116 %116 %116 %116 
					                                         i32 %273 = OpConstant 5 
					                                         f32 %315 = OpConstant 3.674022E-40 
					                                       f32_3 %316 = OpConstantComposite %315 %315 %315 
					                                         f32 %318 = OpConstant 3.674022E-40 
					                                       f32_3 %319 = OpConstantComposite %318 %318 %318 
					                                         f32 %328 = OpConstant 3.674022E-40 
					                                       f32_3 %329 = OpConstantComposite %328 %328 %328 
					                                             %333 = OpTypePointer Private %14 
					                              Private f32_3* %334 = OpVariable Private 
					                              Private f32_4* %351 = OpVariable Private 
					                              Private f32_3* %357 = OpVariable Private 
					                                         i32 %358 = OpConstant 6 
					                                         i32 %364 = OpConstant 7 
					                                         i32 %370 = OpConstant 8 
					                                         i32 %376 = OpConstant 9 
					                               Output f32_3* %385 = OpVariable Output 
					                               Output f32_4* %393 = OpVariable Output 
					                                             %394 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %29 = OpAccessChain %24 %26 %27 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpFMul %13 %30 
					                                                      OpStore %9 %31 
					                               Uniform f32_4* %33 = OpAccessChain %24 %26 %32 
					                                        f32_4 %34 = OpLoad %33 
					                                        f32_4 %35 = OpLoad %11 
					                                        f32_4 %36 = OpVectorShuffle %35 %35 0 0 0 0 
					                                        f32_4 %37 = OpFMul %34 %36 
					                                        f32_4 %38 = OpLoad %9 
					                                        f32_4 %39 = OpFAdd %37 %38 
					                                                      OpStore %9 %39 
					                               Uniform f32_4* %41 = OpAccessChain %24 %26 %40 
					                                        f32_4 %42 = OpLoad %41 
					                                        f32_4 %43 = OpLoad %11 
					                                        f32_4 %44 = OpVectorShuffle %43 %43 2 2 2 2 
					                                        f32_4 %45 = OpFMul %42 %44 
					                                        f32_4 %46 = OpLoad %9 
					                                        f32_4 %47 = OpFAdd %45 %46 
					                                                      OpStore %9 %47 
					                                        f32_4 %49 = OpLoad %9 
					                               Uniform f32_4* %51 = OpAccessChain %24 %26 %50 
					                                        f32_4 %52 = OpLoad %51 
					                                        f32_4 %53 = OpFAdd %49 %52 
					                                                      OpStore %48 %53 
					                               Uniform f32_4* %54 = OpAccessChain %24 %26 %50 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_4 %57 = OpLoad %11 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
					                                        f32_3 %59 = OpFMul %56 %58 
					                                        f32_4 %60 = OpLoad %9 
					                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
					                                        f32_3 %62 = OpFAdd %59 %61 
					                                        f32_4 %63 = OpLoad %9 
					                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
					                                                      OpStore %9 %64 
					                                        f32_4 %66 = OpLoad %48 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
					                               Uniform f32_4* %69 = OpAccessChain %24 %68 %27 
					                                        f32_4 %70 = OpLoad %69 
					                                        f32_4 %71 = OpFMul %67 %70 
					                                                      OpStore %65 %71 
					                               Uniform f32_4* %72 = OpAccessChain %24 %68 %32 
					                                        f32_4 %73 = OpLoad %72 
					                                        f32_4 %74 = OpLoad %48 
					                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
					                                        f32_4 %76 = OpFMul %73 %75 
					                                        f32_4 %77 = OpLoad %65 
					                                        f32_4 %78 = OpFAdd %76 %77 
					                                                      OpStore %65 %78 
					                               Uniform f32_4* %79 = OpAccessChain %24 %68 %40 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_4 %81 = OpLoad %48 
					                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
					                                        f32_4 %83 = OpFMul %80 %82 
					                                        f32_4 %84 = OpLoad %65 
					                                        f32_4 %85 = OpFAdd %83 %84 
					                                                      OpStore %65 %85 
					                               Uniform f32_4* %91 = OpAccessChain %24 %68 %50 
					                                        f32_4 %92 = OpLoad %91 
					                                        f32_4 %93 = OpLoad %48 
					                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
					                                        f32_4 %95 = OpFMul %92 %94 
					                                        f32_4 %96 = OpLoad %65 
					                                        f32_4 %97 = OpFAdd %95 %96 
					                                Output f32_4* %99 = OpAccessChain %90 %32 
					                                                      OpStore %99 %97 
					                                       f32_4 %104 = OpLoad %103 
					                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
					                              Uniform f32_4* %107 = OpAccessChain %24 %106 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
					                                       f32_2 %110 = OpFMul %105 %109 
					                              Uniform f32_4* %111 = OpAccessChain %24 %106 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
					                                       f32_2 %114 = OpFAdd %110 %113 
					                                                      OpStore %102 %114 
					                                                      OpStore %115 %117 
					                                       f32_4 %118 = OpLoad %9 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_3 %120 = OpFNegate %119 
					                              Uniform f32_3* %122 = OpAccessChain %24 %32 
					                                       f32_3 %123 = OpLoad %122 
					                                       f32_3 %124 = OpFAdd %120 %123 
					                                       f32_4 %125 = OpLoad %48 
					                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
					                                                      OpStore %48 %126 
					                                       f32_3 %129 = OpLoad %128 
					                              Uniform f32_4* %131 = OpAccessChain %24 %130 %32 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %129 %133 
					                                Private f32* %137 = OpAccessChain %65 %135 
					                                                      OpStore %137 %134 
					                                       f32_3 %138 = OpLoad %128 
					                              Uniform f32_4* %139 = OpAccessChain %24 %130 %27 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %65 %86 
					                                                      OpStore %143 %142 
					                                       f32_3 %144 = OpLoad %128 
					                              Uniform f32_4* %145 = OpAccessChain %24 %130 %40 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %144 %147 
					                                Private f32* %150 = OpAccessChain %65 %149 
					                                                      OpStore %150 %148 
					                                       f32_4 %152 = OpLoad %65 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %65 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                                      OpStore %151 %156 
					                                         f32 %157 = OpLoad %151 
					                                         f32 %158 = OpExtInst %1 32 %157 
					                                                      OpStore %151 %158 
					                                         f32 %159 = OpLoad %151 
					                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
					                                       f32_4 %161 = OpLoad %65 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %65 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %65 %165 
					                                       f32_4 %166 = OpLoad %48 
					                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
					                                       f32_3 %168 = OpFNegate %167 
					                                       f32_4 %169 = OpLoad %65 
					                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
					                                         f32 %171 = OpDot %168 %170 
					                                                      OpStore %151 %171 
					                                         f32 %172 = OpLoad %151 
					                                         f32 %173 = OpLoad %151 
					                                         f32 %174 = OpFAdd %172 %173 
					                                                      OpStore %151 %174 
					                                       f32_4 %175 = OpLoad %65 
					                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
					                                         f32 %177 = OpLoad %151 
					                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
					                                       f32_3 %179 = OpFNegate %178 
					                                       f32_3 %180 = OpFMul %176 %179 
					                                       f32_4 %181 = OpLoad %48 
					                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
					                                       f32_3 %183 = OpFNegate %182 
					                                       f32_3 %184 = OpFAdd %180 %183 
					                                       f32_4 %185 = OpLoad %48 
					                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
					                                                      OpStore %48 %186 
					                                       f32_4 %189 = OpLoad %48 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                                      OpStore %188 %190 
					                                       f32_4 %192 = OpLoad %65 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                                      OpStore %191 %193 
					                                       f32_4 %195 = OpLoad %9 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                                      OpStore %194 %196 
					                                       f32_4 %197 = OpLoad %9 
					                                       f32_4 %198 = OpVectorShuffle %197 %197 0 0 0 0 
					                                       f32_4 %199 = OpFNegate %198 
					                              Uniform f32_4* %200 = OpAccessChain %24 %27 
					                                       f32_4 %201 = OpLoad %200 
					                                       f32_4 %202 = OpFAdd %199 %201 
					                                                      OpStore %48 %202 
					                                       f32_4 %204 = OpLoad %9 
					                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
					                                       f32_4 %206 = OpFNegate %205 
					                              Uniform f32_4* %207 = OpAccessChain %24 %40 
					                                       f32_4 %208 = OpLoad %207 
					                                       f32_4 %209 = OpFAdd %206 %208 
					                                                      OpStore %203 %209 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
					                                       f32_4 %212 = OpFNegate %211 
					                              Uniform f32_4* %213 = OpAccessChain %24 %50 
					                                       f32_4 %214 = OpLoad %213 
					                                       f32_4 %215 = OpFAdd %212 %214 
					                                                      OpStore %9 %215 
					                                       f32_4 %217 = OpLoad %65 
					                                       f32_4 %218 = OpVectorShuffle %217 %217 1 1 1 1 
					                                       f32_4 %219 = OpLoad %203 
					                                       f32_4 %220 = OpFMul %218 %219 
					                                                      OpStore %216 %220 
					                                       f32_4 %221 = OpLoad %203 
					                                       f32_4 %222 = OpLoad %203 
					                                       f32_4 %223 = OpFMul %221 %222 
					                                                      OpStore %203 %223 
					                                       f32_4 %224 = OpLoad %48 
					                                       f32_4 %225 = OpLoad %48 
					                                       f32_4 %226 = OpFMul %224 %225 
					                                       f32_4 %227 = OpLoad %203 
					                                       f32_4 %228 = OpFAdd %226 %227 
					                                                      OpStore %203 %228 
					                                       f32_4 %229 = OpLoad %48 
					                                       f32_4 %230 = OpLoad %65 
					                                       f32_4 %231 = OpVectorShuffle %230 %230 0 0 0 0 
					                                       f32_4 %232 = OpFMul %229 %231 
					                                       f32_4 %233 = OpLoad %216 
					                                       f32_4 %234 = OpFAdd %232 %233 
					                                                      OpStore %48 %234 
					                                       f32_4 %235 = OpLoad %9 
					                                       f32_4 %236 = OpLoad %65 
					                                       f32_4 %237 = OpVectorShuffle %236 %236 2 2 2 2 
					                                       f32_4 %238 = OpFMul %235 %237 
					                                       f32_4 %239 = OpLoad %48 
					                                       f32_4 %240 = OpFAdd %238 %239 
					                                                      OpStore %48 %240 
					                                       f32_4 %241 = OpLoad %9 
					                                       f32_4 %242 = OpLoad %9 
					                                       f32_4 %243 = OpFMul %241 %242 
					                                       f32_4 %244 = OpLoad %203 
					                                       f32_4 %245 = OpFAdd %243 %244 
					                                                      OpStore %9 %245 
					                                       f32_4 %246 = OpLoad %9 
					                                       f32_4 %249 = OpExtInst %1 40 %246 %248 
					                                                      OpStore %9 %249 
					                                       f32_4 %250 = OpLoad %9 
					                                       f32_4 %251 = OpExtInst %1 32 %250 
					                                                      OpStore %203 %251 
					                                       f32_4 %252 = OpLoad %9 
					                              Uniform f32_4* %254 = OpAccessChain %24 %253 
					                                       f32_4 %255 = OpLoad %254 
					                                       f32_4 %256 = OpFMul %252 %255 
					                                       f32_4 %259 = OpFAdd %256 %258 
					                                                      OpStore %9 %259 
					                                       f32_4 %260 = OpLoad %9 
					                                       f32_4 %261 = OpFDiv %258 %260 
					                                                      OpStore %9 %261 
					                                       f32_4 %262 = OpLoad %48 
					                                       f32_4 %263 = OpLoad %203 
					                                       f32_4 %264 = OpFMul %262 %263 
					                                                      OpStore %48 %264 
					                                       f32_4 %265 = OpLoad %48 
					                                       f32_4 %267 = OpExtInst %1 40 %265 %266 
					                                                      OpStore %48 %267 
					                                       f32_4 %268 = OpLoad %9 
					                                       f32_4 %269 = OpLoad %48 
					                                       f32_4 %270 = OpFMul %268 %269 
					                                                      OpStore %9 %270 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 1 1 1 
					                              Uniform f32_4* %274 = OpAccessChain %24 %273 %27 
					                                       f32_4 %275 = OpLoad %274 
					                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
					                                       f32_3 %277 = OpFMul %272 %276 
					                                       f32_4 %278 = OpLoad %48 
					                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
					                                                      OpStore %48 %279 
					                              Uniform f32_4* %280 = OpAccessChain %24 %273 %32 
					                                       f32_4 %281 = OpLoad %280 
					                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
					                                       f32_4 %283 = OpLoad %9 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
					                                       f32_3 %285 = OpFMul %282 %284 
					                                       f32_4 %286 = OpLoad %48 
					                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
					                                       f32_3 %288 = OpFAdd %285 %287 
					                                       f32_4 %289 = OpLoad %48 
					                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
					                                                      OpStore %48 %290 
					                              Uniform f32_4* %291 = OpAccessChain %24 %273 %40 
					                                       f32_4 %292 = OpLoad %291 
					                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
					                                       f32_4 %294 = OpLoad %9 
					                                       f32_3 %295 = OpVectorShuffle %294 %294 2 2 2 
					                                       f32_3 %296 = OpFMul %293 %295 
					                                       f32_4 %297 = OpLoad %48 
					                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
					                                       f32_3 %299 = OpFAdd %296 %298 
					                                       f32_4 %300 = OpLoad %9 
					                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
					                                                      OpStore %9 %301 
					                              Uniform f32_4* %302 = OpAccessChain %24 %273 %50 
					                                       f32_4 %303 = OpLoad %302 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 3 3 3 
					                                       f32_3 %307 = OpFMul %304 %306 
					                                       f32_4 %308 = OpLoad %9 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFAdd %307 %309 
					                                       f32_4 %311 = OpLoad %9 
					                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
					                                                      OpStore %9 %312 
					                                       f32_4 %313 = OpLoad %9 
					                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
					                                       f32_3 %317 = OpFMul %314 %316 
					                                       f32_3 %320 = OpFAdd %317 %319 
					                                       f32_4 %321 = OpLoad %48 
					                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
					                                                      OpStore %48 %322 
					                                       f32_4 %323 = OpLoad %9 
					                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
					                                       f32_4 %325 = OpLoad %48 
					                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
					                                       f32_3 %327 = OpFMul %324 %326 
					                                       f32_3 %330 = OpFAdd %327 %329 
					                                       f32_4 %331 = OpLoad %48 
					                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
					                                                      OpStore %48 %332 
					                                Private f32* %335 = OpAccessChain %65 %86 
					                                         f32 %336 = OpLoad %335 
					                                Private f32* %337 = OpAccessChain %65 %86 
					                                         f32 %338 = OpLoad %337 
					                                         f32 %339 = OpFMul %336 %338 
					                                Private f32* %340 = OpAccessChain %334 %135 
					                                                      OpStore %340 %339 
					                                Private f32* %341 = OpAccessChain %65 %135 
					                                         f32 %342 = OpLoad %341 
					                                Private f32* %343 = OpAccessChain %65 %135 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                Private f32* %346 = OpAccessChain %334 %135 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpFNegate %347 
					                                         f32 %349 = OpFAdd %345 %348 
					                                Private f32* %350 = OpAccessChain %334 %135 
					                                                      OpStore %350 %349 
					                                       f32_4 %352 = OpLoad %65 
					                                       f32_4 %353 = OpVectorShuffle %352 %352 1 2 2 0 
					                                       f32_4 %354 = OpLoad %65 
					                                       f32_4 %355 = OpVectorShuffle %354 %354 0 1 2 2 
					                                       f32_4 %356 = OpFMul %353 %355 
					                                                      OpStore %351 %356 
					                              Uniform f32_4* %359 = OpAccessChain %24 %358 
					                                       f32_4 %360 = OpLoad %359 
					                                       f32_4 %361 = OpLoad %351 
					                                         f32 %362 = OpDot %360 %361 
					                                Private f32* %363 = OpAccessChain %357 %135 
					                                                      OpStore %363 %362 
					                              Uniform f32_4* %365 = OpAccessChain %24 %364 
					                                       f32_4 %366 = OpLoad %365 
					                                       f32_4 %367 = OpLoad %351 
					                                         f32 %368 = OpDot %366 %367 
					                                Private f32* %369 = OpAccessChain %357 %86 
					                                                      OpStore %369 %368 
					                              Uniform f32_4* %371 = OpAccessChain %24 %370 
					                                       f32_4 %372 = OpLoad %371 
					                                       f32_4 %373 = OpLoad %351 
					                                         f32 %374 = OpDot %372 %373 
					                                Private f32* %375 = OpAccessChain %357 %149 
					                                                      OpStore %375 %374 
					                              Uniform f32_4* %377 = OpAccessChain %24 %376 
					                                       f32_4 %378 = OpLoad %377 
					                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
					                                       f32_3 %380 = OpLoad %334 
					                                       f32_3 %381 = OpVectorShuffle %380 %380 0 0 0 
					                                       f32_3 %382 = OpFMul %379 %381 
					                                       f32_3 %383 = OpLoad %357 
					                                       f32_3 %384 = OpFAdd %382 %383 
					                                                      OpStore %334 %384 
					                                       f32_4 %386 = OpLoad %9 
					                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
					                                       f32_4 %388 = OpLoad %48 
					                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
					                                       f32_3 %390 = OpFMul %387 %389 
					                                       f32_3 %391 = OpLoad %334 
					                                       f32_3 %392 = OpFAdd %390 %391 
					                                                      OpStore %385 %392 
					                                                      OpStore %393 %266 
					                                 Output f32* %395 = OpAccessChain %90 %32 %86 
					                                         f32 %396 = OpLoad %395 
					                                         f32 %397 = OpFNegate %396 
					                                 Output f32* %398 = OpAccessChain %90 %32 %86 
					                                                      OpStore %398 %397 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 324
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %50 %76 %187 %300 %312 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %22 RelaxedPrecision 
					                                                      OpMemberDecorate %23 0 Offset 23 
					                                                      OpMemberDecorate %23 1 RelaxedPrecision 
					                                                      OpMemberDecorate %23 1 Offset 23 
					                                                      OpMemberDecorate %23 2 RelaxedPrecision 
					                                                      OpMemberDecorate %23 2 Offset 23 
					                                                      OpMemberDecorate %23 3 RelaxedPrecision 
					                                                      OpMemberDecorate %23 3 Offset 23 
					                                                      OpMemberDecorate %23 4 RelaxedPrecision 
					                                                      OpMemberDecorate %23 4 Offset 23 
					                                                      OpMemberDecorate %23 5 RelaxedPrecision 
					                                                      OpMemberDecorate %23 5 Offset 23 
					                                                      OpMemberDecorate %23 6 RelaxedPrecision 
					                                                      OpMemberDecorate %23 6 Offset 23 
					                                                      OpMemberDecorate %23 7 RelaxedPrecision 
					                                                      OpMemberDecorate %23 7 Offset 23 
					                                                      OpMemberDecorate %23 8 RelaxedPrecision 
					                                                      OpMemberDecorate %23 8 Offset 23 
					                                                      OpMemberDecorate %23 9 RelaxedPrecision 
					                                                      OpMemberDecorate %23 9 Offset 23 
					                                                      OpMemberDecorate %23 10 Offset 23 
					                                                      OpMemberDecorate %23 11 Offset 23 
					                                                      OpMemberDecorate %23 12 Offset 23 
					                                                      OpMemberDecorate %23 13 Offset 23 
					                                                      OpMemberDecorate %23 14 RelaxedPrecision 
					                                                      OpMemberDecorate %23 14 Offset 23 
					                                                      OpDecorate %23 Block 
					                                                      OpDecorate %25 DescriptorSet 25 
					                                                      OpDecorate %25 Binding 25 
					                                                      OpDecorate %30 RelaxedPrecision 
					                                                      OpDecorate %37 RelaxedPrecision 
					                                                      OpDecorate %44 RelaxedPrecision 
					                                                      OpDecorate %49 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %50 Location 50 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %52 RelaxedPrecision 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %56 RelaxedPrecision 
					                                                      OpDecorate %57 RelaxedPrecision 
					                                                      OpDecorate %58 RelaxedPrecision 
					                                                      OpDecorate %59 RelaxedPrecision 
					                                                      OpDecorate %60 RelaxedPrecision 
					                                                      OpDecorate %63 RelaxedPrecision 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %72 RelaxedPrecision 
					                                                      OpDecorate %73 RelaxedPrecision 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %76 Location 76 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %102 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %151 RelaxedPrecision 
					                                                      OpDecorate %153 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %161 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %171 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %173 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %180 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 DescriptorSet 184 
					                                                      OpDecorate %184 Binding 184 
					                                                      OpDecorate %185 RelaxedPrecision 
					                                                      OpDecorate %187 Location 187 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %205 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %250 RelaxedPrecision 
					                                                      OpDecorate %251 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %254 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %267 RelaxedPrecision 
					                                                      OpDecorate %268 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %279 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %294 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %298 DescriptorSet 298 
					                                                      OpDecorate %298 Binding 298 
					                                                      OpDecorate %299 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %300 Location 300 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %305 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %310 RelaxedPrecision 
					                                                      OpDecorate %312 RelaxedPrecision 
					                                                      OpDecorate %312 Location 312 
					                                                      OpDecorate %313 RelaxedPrecision 
					                                                      OpDecorate %317 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                          f32 %16 = OpConstant 3.674022E-40 
					                                              %17 = OpTypeInt 32 0 
					                                          u32 %18 = OpConstant 3 
					                                              %19 = OpTypePointer Private %6 
					                                              %21 = OpTypePointer Private %10 
					                               Private f32_3* %22 = OpVariable Private 
					                                              %23 = OpTypeStruct %10 %7 %7 %7 %7 %7 %7 %7 %7 %6 %6 %6 %6 %6 %7 
					                                              %24 = OpTypePointer Uniform %23 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %25 = OpVariable Uniform 
					                                              %26 = OpTypeInt 32 1 
					                                          i32 %27 = OpConstant 2 
					                                              %28 = OpTypePointer Uniform %7 
					                                          u32 %33 = OpConstant 0 
					                                          i32 %35 = OpConstant 3 
					                                          u32 %40 = OpConstant 1 
					                                          i32 %42 = OpConstant 4 
					                                          u32 %47 = OpConstant 2 
					                                 Input f32_3* %50 = OpVariable Input 
					                                          f32 %54 = OpConstant 3.674022E-40 
					                                        f32_3 %55 = OpConstantComposite %54 %54 %54 
					                               Private f32_3* %57 = OpVariable Private 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                        f32_3 %62 = OpConstantComposite %61 %61 %61 
					                                          f32 %67 = OpConstant 3.674022E-40 
					                                        f32_3 %68 = OpConstantComposite %67 %67 %67 
					                                          f32 %70 = OpConstant 3.674022E-40 
					                                        f32_3 %71 = OpConstantComposite %70 %70 %70 
					                               Private f32_4* %75 = OpVariable Private 
					                                 Input f32_3* %76 = OpVariable Input 
					                                          i32 %79 = OpConstant 0 
					                                              %80 = OpTypePointer Uniform %10 
					                                 Private f32* %86 = OpVariable Private 
					                                          i32 %99 = OpConstant 1 
					                                Private f32* %117 = OpVariable Private 
					                                Private f32* %121 = OpVariable Private 
					                                             %125 = OpTypeVector %6 2 
					                                         i32 %127 = OpConstant 12 
					                                             %128 = OpTypePointer Uniform %6 
					                                         i32 %131 = OpConstant 10 
					                                         i32 %163 = OpConstant 9 
					                                         f32 %166 = OpConstant 3.674022E-40 
					                                Private f32* %180 = OpVariable Private 
					                                             %181 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %182 = OpTypeSampledImage %181 
					                                             %183 = OpTypePointer UniformConstant %182 
					 UniformConstant read_only Texture2DSampled* %184 = OpVariable UniformConstant 
					                                             %186 = OpTypePointer Input %125 
					                                Input f32_2* %187 = OpVariable Input 
					                                Private f32* %196 = OpVariable Private 
					                                         i32 %199 = OpConstant 11 
					                                         i32 %203 = OpConstant 6 
					                                         i32 %210 = OpConstant 5 
					                              Private f32_3* %218 = OpVariable Private 
					                              Private f32_3* %233 = OpVariable Private 
					                                         i32 %236 = OpConstant 14 
					                              Private f32_3* %241 = OpVariable Private 
					                                         i32 %243 = OpConstant 13 
					                                         i32 %265 = OpConstant 7 
					                              Private f32_3* %294 = OpVariable Private 
					                                             %295 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %296 = OpTypeSampledImage %295 
					                                             %297 = OpTypePointer UniformConstant %296 
					UniformConstant read_only TextureCubeSampled* %298 = OpVariable UniformConstant 
					                                Input f32_3* %300 = OpVariable Input 
					                              Private f32_3* %304 = OpVariable Private 
					                                         i32 %306 = OpConstant 8 
					                                             %311 = OpTypePointer Output %7 
					                               Output f32_4* %312 = OpVariable Output 
					                                             %321 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_4 %14 = OpLoad %9 
					                                        f32_4 %15 = OpVectorShuffle %14 %13 4 5 6 3 
					                                                      OpStore %9 %15 
					                                 Private f32* %20 = OpAccessChain %9 %18 
					                                                      OpStore %20 %16 
					                               Uniform f32_4* %29 = OpAccessChain %25 %27 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %9 
					                                          f32 %32 = OpDot %30 %31 
					                                 Private f32* %34 = OpAccessChain %22 %33 
					                                                      OpStore %34 %32 
					                               Uniform f32_4* %36 = OpAccessChain %25 %35 
					                                        f32_4 %37 = OpLoad %36 
					                                        f32_4 %38 = OpLoad %9 
					                                          f32 %39 = OpDot %37 %38 
					                                 Private f32* %41 = OpAccessChain %22 %40 
					                                                      OpStore %41 %39 
					                               Uniform f32_4* %43 = OpAccessChain %25 %42 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_4 %45 = OpLoad %9 
					                                          f32 %46 = OpDot %44 %45 
					                                 Private f32* %48 = OpAccessChain %22 %47 
					                                                      OpStore %48 %46 
					                                        f32_3 %49 = OpLoad %22 
					                                        f32_3 %51 = OpLoad %50 
					                                        f32_3 %52 = OpFAdd %49 %51 
					                                                      OpStore %22 %52 
					                                        f32_3 %53 = OpLoad %22 
					                                        f32_3 %56 = OpExtInst %1 40 %53 %55 
					                                                      OpStore %22 %56 
					                                        f32_3 %58 = OpLoad %22 
					                                        f32_3 %59 = OpExtInst %1 30 %58 
					                                                      OpStore %57 %59 
					                                        f32_3 %60 = OpLoad %57 
					                                        f32_3 %63 = OpFMul %60 %62 
					                                                      OpStore %57 %63 
					                                        f32_3 %64 = OpLoad %57 
					                                        f32_3 %65 = OpExtInst %1 29 %64 
					                                                      OpStore %57 %65 
					                                        f32_3 %66 = OpLoad %57 
					                                        f32_3 %69 = OpFMul %66 %68 
					                                        f32_3 %72 = OpFAdd %69 %71 
					                                                      OpStore %57 %72 
					                                        f32_3 %73 = OpLoad %57 
					                                        f32_3 %74 = OpExtInst %1 40 %73 %55 
					                                                      OpStore %57 %74 
					                                        f32_3 %77 = OpLoad %76 
					                                        f32_3 %78 = OpFNegate %77 
					                               Uniform f32_3* %81 = OpAccessChain %25 %79 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %78 %82 
					                                        f32_4 %84 = OpLoad %75 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %75 %85 
					                                        f32_4 %87 = OpLoad %75 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                        f32_4 %89 = OpLoad %75 
					                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
					                                          f32 %91 = OpDot %88 %90 
					                                                      OpStore %86 %91 
					                                          f32 %92 = OpLoad %86 
					                                          f32 %93 = OpExtInst %1 32 %92 
					                                                      OpStore %86 %93 
					                                        f32_4 %94 = OpLoad %75 
					                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
					                                          f32 %96 = OpLoad %86 
					                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
					                                        f32_3 %98 = OpFMul %95 %97 
					                              Uniform f32_4* %100 = OpAccessChain %25 %99 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
					                                       f32_3 %103 = OpFAdd %98 %102 
					                                                      OpStore %22 %103 
					                                         f32 %104 = OpLoad %86 
					                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
					                                       f32_4 %106 = OpLoad %75 
					                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
					                                       f32_3 %108 = OpFMul %105 %107 
					                                       f32_4 %109 = OpLoad %75 
					                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
					                                                      OpStore %75 %110 
					                                       f32_4 %111 = OpLoad %75 
					                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
					                                       f32_3 %113 = OpLoad %12 
					                                         f32 %114 = OpDot %112 %113 
					                                                      OpStore %86 %114 
					                                         f32 %115 = OpLoad %86 
					                                         f32 %116 = OpExtInst %1 43 %115 %54 %16 
					                                                      OpStore %86 %116 
					                                         f32 %118 = OpLoad %86 
					                                         f32 %119 = OpFNegate %118 
					                                         f32 %120 = OpFAdd %119 %16 
					                                                      OpStore %117 %120 
					                                         f32 %122 = OpLoad %117 
					                                         f32 %123 = OpExtInst %1 30 %122 
					                                                      OpStore %121 %123 
					                                         f32 %124 = OpLoad %121 
					                                       f32_2 %126 = OpCompositeConstruct %124 %124 
					                                Uniform f32* %129 = OpAccessChain %25 %127 
					                                         f32 %130 = OpLoad %129 
					                                Uniform f32* %132 = OpAccessChain %25 %131 
					                                         f32 %133 = OpLoad %132 
					                                       f32_2 %134 = OpCompositeConstruct %130 %133 
					                                       f32_2 %135 = OpFMul %126 %134 
					                                       f32_4 %136 = OpLoad %75 
					                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 3 
					                                                      OpStore %75 %137 
					                                       f32_4 %138 = OpLoad %75 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
					                                       f32_2 %140 = OpExtInst %1 29 %139 
					                                       f32_4 %141 = OpLoad %75 
					                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
					                                                      OpStore %75 %142 
					                                       f32_3 %143 = OpLoad %22 
					                                       f32_3 %144 = OpLoad %22 
					                                         f32 %145 = OpDot %143 %144 
					                                                      OpStore %117 %145 
					                                         f32 %146 = OpLoad %117 
					                                         f32 %147 = OpExtInst %1 32 %146 
					                                                      OpStore %117 %147 
					                                         f32 %148 = OpLoad %117 
					                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
					                                       f32_3 %150 = OpLoad %22 
					                                       f32_3 %151 = OpFMul %149 %150 
					                                                      OpStore %22 %151 
					                                       f32_3 %152 = OpLoad %12 
					                                       f32_3 %153 = OpLoad %22 
					                                         f32 %154 = OpDot %152 %153 
					                                Private f32* %155 = OpAccessChain %22 %33 
					                                                      OpStore %155 %154 
					                                Private f32* %156 = OpAccessChain %22 %33 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpExtInst %1 40 %157 %54 
					                                Private f32* %159 = OpAccessChain %22 %33 
					                                                      OpStore %159 %158 
					                                Private f32* %160 = OpAccessChain %22 %33 
					                                         f32 %161 = OpLoad %160 
					                                         f32 %162 = OpExtInst %1 30 %161 
					                                                      OpStore %121 %162 
					                                Uniform f32* %164 = OpAccessChain %25 %163 
					                                         f32 %165 = OpLoad %164 
					                                         f32 %167 = OpFMul %165 %166 
					                                Private f32* %168 = OpAccessChain %22 %33 
					                                                      OpStore %168 %167 
					                                         f32 %169 = OpLoad %121 
					                                Private f32* %170 = OpAccessChain %22 %33 
					                                         f32 %171 = OpLoad %170 
					                                         f32 %172 = OpFMul %169 %171 
					                                                      OpStore %121 %172 
					                                         f32 %173 = OpLoad %121 
					                                         f32 %174 = OpExtInst %1 29 %173 
					                                                      OpStore %121 %174 
					                                Private f32* %175 = OpAccessChain %75 %33 
					                                         f32 %176 = OpLoad %175 
					                                         f32 %177 = OpFNegate %176 
					                                         f32 %178 = OpFAdd %177 %16 
					                                Private f32* %179 = OpAccessChain %22 %33 
					                                                      OpStore %179 %178 
					                  read_only Texture2DSampled %185 = OpLoad %184 
					                                       f32_2 %188 = OpLoad %187 
					                                       f32_4 %189 = OpImageSampleImplicitLod %185 %188 
					                                         f32 %190 = OpCompositeExtract %189 3 
					                                                      OpStore %180 %190 
					                                Private f32* %191 = OpAccessChain %22 %33 
					                                         f32 %192 = OpLoad %191 
					                                         f32 %193 = OpLoad %180 
					                                         f32 %194 = OpFMul %192 %193 
					                                Private f32* %195 = OpAccessChain %22 %33 
					                                                      OpStore %195 %194 
					                                Private f32* %197 = OpAccessChain %22 %33 
					                                         f32 %198 = OpLoad %197 
					                                Uniform f32* %200 = OpAccessChain %25 %199 
					                                         f32 %201 = OpLoad %200 
					                                         f32 %202 = OpFMul %198 %201 
					                                Uniform f32* %204 = OpAccessChain %25 %203 %18 
					                                         f32 %205 = OpLoad %204 
					                                         f32 %206 = OpFAdd %202 %205 
					                                                      OpStore %196 %206 
					                                         f32 %207 = OpLoad %121 
					                                         f32 %208 = OpLoad %196 
					                                         f32 %209 = OpFMul %207 %208 
					                                                      OpStore %86 %209 
					                              Uniform f32_4* %211 = OpAccessChain %25 %210 
					                                       f32_4 %212 = OpLoad %211 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                              Uniform f32_4* %214 = OpAccessChain %25 %203 
					                                       f32_4 %215 = OpLoad %214 
					                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
					                                       f32_3 %217 = OpFMul %213 %216 
					                                                      OpStore %22 %217 
					                                         f32 %219 = OpLoad %86 
					                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
					                                       f32_3 %221 = OpLoad %22 
					                                       f32_3 %222 = OpFMul %220 %221 
					                                                      OpStore %218 %222 
					                                       f32_3 %223 = OpLoad %12 
					                              Uniform f32_4* %224 = OpAccessChain %25 %99 
					                                       f32_4 %225 = OpLoad %224 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                         f32 %227 = OpDot %223 %226 
					                                Private f32* %228 = OpAccessChain %22 %33 
					                                                      OpStore %228 %227 
					                                Private f32* %229 = OpAccessChain %22 %33 
					                                         f32 %230 = OpLoad %229 
					                                         f32 %231 = OpExtInst %1 40 %230 %54 
					                                Private f32* %232 = OpAccessChain %22 %33 
					                                                      OpStore %232 %231 
					                                       f32_4 %234 = OpLoad %75 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
					                              Uniform f32_4* %237 = OpAccessChain %25 %236 
					                                       f32_4 %238 = OpLoad %237 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                       f32_3 %240 = OpFMul %235 %239 
					                                                      OpStore %233 %240 
					                                       f32_3 %242 = OpLoad %233 
					                                Uniform f32* %244 = OpAccessChain %25 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %246 = OpAccessChain %25 %243 
					                                         f32 %247 = OpLoad %246 
					                                Uniform f32* %248 = OpAccessChain %25 %243 
					                                         f32 %249 = OpLoad %248 
					                                       f32_3 %250 = OpCompositeConstruct %245 %247 %249 
					                                         f32 %251 = OpCompositeExtract %250 0 
					                                         f32 %252 = OpCompositeExtract %250 1 
					                                         f32 %253 = OpCompositeExtract %250 2 
					                                       f32_3 %254 = OpCompositeConstruct %251 %252 %253 
					                                       f32_3 %255 = OpFMul %242 %254 
					                                                      OpStore %241 %255 
					                                Private f32* %256 = OpAccessChain %75 %33 
					                                         f32 %257 = OpLoad %256 
					                                         f32 %258 = OpFNegate %257 
					                                Uniform f32* %259 = OpAccessChain %25 %243 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpFMul %258 %260 
					                                         f32 %262 = OpFAdd %261 %16 
					                                                      OpStore %86 %262 
					                                         f32 %263 = OpLoad %86 
					                                         f32 %264 = OpExtInst %1 43 %263 %54 %16 
					                                                      OpStore %86 %264 
					                              Uniform f32_4* %266 = OpAccessChain %25 %265 
					                                       f32_4 %267 = OpLoad %266 
					                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
					                                         f32 %269 = OpLoad %86 
					                                       f32_3 %270 = OpCompositeConstruct %269 %269 %269 
					                                       f32_3 %271 = OpFMul %268 %270 
					                                       f32_3 %272 = OpLoad %241 
					                                       f32_3 %273 = OpFAdd %271 %272 
					                                       f32_4 %274 = OpLoad %75 
					                                       f32_4 %275 = OpVectorShuffle %274 %273 4 1 5 6 
					                                                      OpStore %75 %275 
					                                       f32_4 %276 = OpLoad %75 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 2 3 
					                              Uniform f32_4* %278 = OpAccessChain %25 %210 
					                                       f32_4 %279 = OpLoad %278 
					                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
					                                       f32_3 %281 = OpFMul %277 %280 
					                                                      OpStore %233 %281 
					                                       f32_3 %282 = OpLoad %233 
					                                       f32_3 %283 = OpLoad %22 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
					                                       f32_3 %285 = OpFMul %282 %284 
					                                       f32_3 %286 = OpLoad %218 
					                                       f32_3 %287 = OpFAdd %285 %286 
					                                                      OpStore %218 %287 
					                                       f32_4 %288 = OpLoad %75 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 0 2 3 
					                                       f32_3 %290 = OpLoad %57 
					                                       f32_3 %291 = OpFMul %289 %290 
					                                       f32_3 %292 = OpLoad %218 
					                                       f32_3 %293 = OpFAdd %291 %292 
					                                                      OpStore %22 %293 
					                read_only TextureCubeSampled %299 = OpLoad %298 
					                                       f32_3 %301 = OpLoad %300 
					                                       f32_4 %302 = OpImageSampleImplicitLod %299 %301 
					                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
					                                                      OpStore %294 %303 
					                                       f32_3 %305 = OpLoad %294 
					                              Uniform f32_4* %307 = OpAccessChain %25 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %305 %309 
					                                                      OpStore %304 %310 
					                                       f32_3 %313 = OpLoad %304 
					                                       f32_4 %314 = OpLoad %75 
					                                       f32_3 %315 = OpVectorShuffle %314 %314 1 1 1 
					                                       f32_3 %316 = OpFMul %313 %315 
					                                       f32_3 %317 = OpLoad %22 
					                                       f32_3 %318 = OpFAdd %316 %317 
					                                       f32_4 %319 = OpLoad %312 
					                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
					                                                      OpStore %312 %320 
					                                 Output f32* %322 = OpAccessChain %312 %18 
					                                                      OpStore %322 %16 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec2 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec2 tmpvar_3;
					  highp vec4 tmpvar_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_7;
					  tmpvar_7[0] = unity_WorldToObject[0].xyz;
					  tmpvar_7[1] = unity_WorldToObject[1].xyz;
					  tmpvar_7[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
					  highp vec3 tmpvar_9;
					  highp vec3 I_10;
					  I_10 = (tmpvar_6 - _WorldSpaceCameraPos);
					  tmpvar_9 = (I_10 - (2.0 * (
					    dot (tmpvar_8, I_10)
					   * tmpvar_8)));
					  tmpvar_1 = tmpvar_9;
					  highp vec3 lightColor0_11;
					  lightColor0_11 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_12;
					  lightColor1_12 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_13;
					  lightColor2_13 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_14;
					  lightColor3_14 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_15;
					  lightAttenSq_15 = unity_4LightAtten0;
					  highp vec3 col_16;
					  highp vec4 ndotl_17;
					  highp vec4 lengthSq_18;
					  highp vec4 tmpvar_19;
					  tmpvar_19 = (unity_4LightPosX0 - tmpvar_6.x);
					  highp vec4 tmpvar_20;
					  tmpvar_20 = (unity_4LightPosY0 - tmpvar_6.y);
					  highp vec4 tmpvar_21;
					  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_6.z);
					  lengthSq_18 = (tmpvar_19 * tmpvar_19);
					  lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
					  lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
					  highp vec4 tmpvar_22;
					  tmpvar_22 = max (lengthSq_18, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_18 = tmpvar_22;
					  ndotl_17 = (tmpvar_19 * tmpvar_8.x);
					  ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_8.y));
					  ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_8.z));
					  highp vec4 tmpvar_23;
					  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
					  ndotl_17 = tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
					    (tmpvar_22 * lightAttenSq_15)
					  ))));
					  col_16 = (lightColor0_11 * tmpvar_24.x);
					  col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
					  col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
					  col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
					  tmpvar_2 = col_16;
					  mediump vec3 normal_25;
					  normal_25 = tmpvar_8;
					  mediump vec3 ambient_26;
					  mediump vec3 x1_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
					  x1_27.x = dot (unity_SHBr, tmpvar_28);
					  x1_27.y = dot (unity_SHBg, tmpvar_28);
					  x1_27.z = dot (unity_SHBb, tmpvar_28);
					  ambient_26 = ((tmpvar_2 * (
					    (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
					    ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
					  )));
					  tmpvar_2 = ambient_26;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_8;
					  xlv_TEXCOORD3 = tmpvar_6;
					  xlv_TEXCOORD4 = ambient_26;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD7 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform highp sampler2D _ShadowMapTexture;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					void main ()
					{
					  mediump float tmpvar_1;
					  mediump vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp vec3 viewDir_7;
					  lowp vec3 lightDir_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  tmpvar_11 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = (_WorldSpaceCameraPos - xlv_TEXCOORD3);
					  tmpvar_12 = normalize(tmpvar_13);
					  viewDir_7 = tmpvar_12;
					  tmpvar_9 = xlv_TEXCOORD1;
					  tmpvar_10 = viewDir_7;
					  tmpvar_6 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_14;
					  lowp vec3 tmpvar_15;
					  lowp float tmpvar_16;
					  mediump float fres_17;
					  mediump float rim_18;
					  mediump float tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp (dot (normalize(tmpvar_10), tmpvar_6), 0.0, 1.0);
					  tmpvar_19 = tmpvar_20;
					  rim_18 = (1.0 - tmpvar_19);
					  fres_17 = rim_18;
					  highp float tmpvar_21;
					  tmpvar_21 = pow (rim_18, _RimAmt);
					  rim_18 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = pow (fres_17, _FresAmt);
					  fres_17 = tmpvar_22;
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((1.0 - (rim_18 * _RimPwr)), 0.0, 1.0);
					  tmpvar_14 = (_Color.xyz * tmpvar_23);
					  highp vec3 tmpvar_24;
					  tmpvar_24 = ((rim_18 * _RimColor) * _RimPwr).xyz;
					  tmpvar_14 = (tmpvar_14 + tmpvar_24);
					  tmpvar_16 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_18)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_25;
					  tmpvar_25 = textureCube (_Cube, tmpvar_9);
					  tmpvar_15 = ((tmpvar_25.xyz * _ReflectColor.xyz) * fres_17);
					  mediump float realtimeShadowAttenuation_26;
					  highp vec4 v_27;
					  v_27.x = unity_MatrixV[0].z;
					  v_27.y = unity_MatrixV[1].z;
					  v_27.z = unity_MatrixV[2].z;
					  v_27.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (xlv_TEXCOORD3 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_29;
					  highp float tmpvar_30;
					  tmpvar_30 = clamp (((
					    mix (dot (tmpvar_13, v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_29 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = xlv_TEXCOORD3;
					  lowp float tmpvar_32;
					  highp vec4 shadowCoord_33;
					  shadowCoord_33 = (unity_WorldToShadow[0] * tmpvar_31);
					  highp float lightShadowDataX_34;
					  mediump float tmpvar_35;
					  tmpvar_35 = _LightShadowData.x;
					  lightShadowDataX_34 = tmpvar_35;
					  highp float tmpvar_36;
					  tmpvar_36 = max (float((texture2D (_ShadowMapTexture, shadowCoord_33.xy).x > shadowCoord_33.z)), lightShadowDataX_34);
					  tmpvar_32 = tmpvar_36;
					  realtimeShadowAttenuation_26 = tmpvar_32;
					  mediump float tmpvar_37;
					  tmpvar_37 = clamp ((realtimeShadowAttenuation_26 + tmpvar_29), 0.0, 1.0);
					  atten_5 = tmpvar_37;
					  tmpvar_2 = _LightColor0.xyz;
					  tmpvar_3 = lightDir_8;
					  tmpvar_1 = atten_5;
					  mediump vec3 normalWorld_38;
					  normalWorld_38 = tmpvar_6;
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = (tmpvar_2 * tmpvar_1);
					  mediump vec4 tmpvar_40;
					  tmpvar_40.w = 1.0;
					  tmpvar_40.xyz = normalWorld_38;
					  mediump vec3 x_41;
					  x_41.x = dot (unity_SHAr, tmpvar_40);
					  x_41.y = dot (unity_SHAg, tmpvar_40);
					  x_41.z = dot (unity_SHAb, tmpvar_40);
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_41)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  tmpvar_2 = tmpvar_39;
					  mediump vec3 viewDir_43;
					  viewDir_43 = tmpvar_12;
					  lowp vec4 c_44;
					  lowp vec4 c_45;
					  highp float nh_46;
					  lowp float diff_47;
					  mediump float tmpvar_48;
					  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
					  diff_47 = tmpvar_48;
					  mediump float tmpvar_49;
					  tmpvar_49 = max (0.0, dot (tmpvar_6, normalize(
					    (tmpvar_3 + viewDir_43)
					  )));
					  nh_46 = tmpvar_49;
					  mediump float y_50;
					  y_50 = (_Shininess * 128.0);
					  highp float tmpvar_51;
					  tmpvar_51 = (pow (nh_46, y_50) * tmpvar_16);
					  c_45.xyz = (((tmpvar_14 * tmpvar_39) * diff_47) + ((tmpvar_39 * _SpecColor.xyz) * tmpvar_51));
					  c_45.w = (tmpvar_25.w * _ReflectColor.w);
					  c_44.w = c_45.w;
					  c_44.xyz = (c_45.xyz + (tmpvar_14 * tmpvar_42));
					  c_4.xyz = (c_44.xyz + tmpvar_15);
					  c_4.w = 1.0;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec2 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec2 tmpvar_3;
					  highp vec4 tmpvar_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_7;
					  tmpvar_7[0] = unity_WorldToObject[0].xyz;
					  tmpvar_7[1] = unity_WorldToObject[1].xyz;
					  tmpvar_7[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
					  highp vec3 tmpvar_9;
					  highp vec3 I_10;
					  I_10 = (tmpvar_6 - _WorldSpaceCameraPos);
					  tmpvar_9 = (I_10 - (2.0 * (
					    dot (tmpvar_8, I_10)
					   * tmpvar_8)));
					  tmpvar_1 = tmpvar_9;
					  highp vec3 lightColor0_11;
					  lightColor0_11 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_12;
					  lightColor1_12 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_13;
					  lightColor2_13 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_14;
					  lightColor3_14 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_15;
					  lightAttenSq_15 = unity_4LightAtten0;
					  highp vec3 col_16;
					  highp vec4 ndotl_17;
					  highp vec4 lengthSq_18;
					  highp vec4 tmpvar_19;
					  tmpvar_19 = (unity_4LightPosX0 - tmpvar_6.x);
					  highp vec4 tmpvar_20;
					  tmpvar_20 = (unity_4LightPosY0 - tmpvar_6.y);
					  highp vec4 tmpvar_21;
					  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_6.z);
					  lengthSq_18 = (tmpvar_19 * tmpvar_19);
					  lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
					  lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
					  highp vec4 tmpvar_22;
					  tmpvar_22 = max (lengthSq_18, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_18 = tmpvar_22;
					  ndotl_17 = (tmpvar_19 * tmpvar_8.x);
					  ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_8.y));
					  ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_8.z));
					  highp vec4 tmpvar_23;
					  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
					  ndotl_17 = tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
					    (tmpvar_22 * lightAttenSq_15)
					  ))));
					  col_16 = (lightColor0_11 * tmpvar_24.x);
					  col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
					  col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
					  col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
					  tmpvar_2 = col_16;
					  mediump vec3 normal_25;
					  normal_25 = tmpvar_8;
					  mediump vec3 ambient_26;
					  mediump vec3 x1_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
					  x1_27.x = dot (unity_SHBr, tmpvar_28);
					  x1_27.y = dot (unity_SHBg, tmpvar_28);
					  x1_27.z = dot (unity_SHBb, tmpvar_28);
					  ambient_26 = ((tmpvar_2 * (
					    (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
					    ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
					  )));
					  tmpvar_2 = ambient_26;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_8;
					  xlv_TEXCOORD3 = tmpvar_6;
					  xlv_TEXCOORD4 = ambient_26;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD7 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform highp sampler2D _ShadowMapTexture;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					void main ()
					{
					  mediump float tmpvar_1;
					  mediump vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp vec3 viewDir_7;
					  lowp vec3 lightDir_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  tmpvar_11 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = (_WorldSpaceCameraPos - xlv_TEXCOORD3);
					  tmpvar_12 = normalize(tmpvar_13);
					  viewDir_7 = tmpvar_12;
					  tmpvar_9 = xlv_TEXCOORD1;
					  tmpvar_10 = viewDir_7;
					  tmpvar_6 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_14;
					  lowp vec3 tmpvar_15;
					  lowp float tmpvar_16;
					  mediump float fres_17;
					  mediump float rim_18;
					  mediump float tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp (dot (normalize(tmpvar_10), tmpvar_6), 0.0, 1.0);
					  tmpvar_19 = tmpvar_20;
					  rim_18 = (1.0 - tmpvar_19);
					  fres_17 = rim_18;
					  highp float tmpvar_21;
					  tmpvar_21 = pow (rim_18, _RimAmt);
					  rim_18 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = pow (fres_17, _FresAmt);
					  fres_17 = tmpvar_22;
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((1.0 - (rim_18 * _RimPwr)), 0.0, 1.0);
					  tmpvar_14 = (_Color.xyz * tmpvar_23);
					  highp vec3 tmpvar_24;
					  tmpvar_24 = ((rim_18 * _RimColor) * _RimPwr).xyz;
					  tmpvar_14 = (tmpvar_14 + tmpvar_24);
					  tmpvar_16 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_18)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_25;
					  tmpvar_25 = textureCube (_Cube, tmpvar_9);
					  tmpvar_15 = ((tmpvar_25.xyz * _ReflectColor.xyz) * fres_17);
					  mediump float realtimeShadowAttenuation_26;
					  highp vec4 v_27;
					  v_27.x = unity_MatrixV[0].z;
					  v_27.y = unity_MatrixV[1].z;
					  v_27.z = unity_MatrixV[2].z;
					  v_27.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (xlv_TEXCOORD3 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_29;
					  highp float tmpvar_30;
					  tmpvar_30 = clamp (((
					    mix (dot (tmpvar_13, v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_29 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = xlv_TEXCOORD3;
					  lowp float tmpvar_32;
					  highp vec4 shadowCoord_33;
					  shadowCoord_33 = (unity_WorldToShadow[0] * tmpvar_31);
					  highp float lightShadowDataX_34;
					  mediump float tmpvar_35;
					  tmpvar_35 = _LightShadowData.x;
					  lightShadowDataX_34 = tmpvar_35;
					  highp float tmpvar_36;
					  tmpvar_36 = max (float((texture2D (_ShadowMapTexture, shadowCoord_33.xy).x > shadowCoord_33.z)), lightShadowDataX_34);
					  tmpvar_32 = tmpvar_36;
					  realtimeShadowAttenuation_26 = tmpvar_32;
					  mediump float tmpvar_37;
					  tmpvar_37 = clamp ((realtimeShadowAttenuation_26 + tmpvar_29), 0.0, 1.0);
					  atten_5 = tmpvar_37;
					  tmpvar_2 = _LightColor0.xyz;
					  tmpvar_3 = lightDir_8;
					  tmpvar_1 = atten_5;
					  mediump vec3 normalWorld_38;
					  normalWorld_38 = tmpvar_6;
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = (tmpvar_2 * tmpvar_1);
					  mediump vec4 tmpvar_40;
					  tmpvar_40.w = 1.0;
					  tmpvar_40.xyz = normalWorld_38;
					  mediump vec3 x_41;
					  x_41.x = dot (unity_SHAr, tmpvar_40);
					  x_41.y = dot (unity_SHAg, tmpvar_40);
					  x_41.z = dot (unity_SHAb, tmpvar_40);
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_41)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  tmpvar_2 = tmpvar_39;
					  mediump vec3 viewDir_43;
					  viewDir_43 = tmpvar_12;
					  lowp vec4 c_44;
					  lowp vec4 c_45;
					  highp float nh_46;
					  lowp float diff_47;
					  mediump float tmpvar_48;
					  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
					  diff_47 = tmpvar_48;
					  mediump float tmpvar_49;
					  tmpvar_49 = max (0.0, dot (tmpvar_6, normalize(
					    (tmpvar_3 + viewDir_43)
					  )));
					  nh_46 = tmpvar_49;
					  mediump float y_50;
					  y_50 = (_Shininess * 128.0);
					  highp float tmpvar_51;
					  tmpvar_51 = (pow (nh_46, y_50) * tmpvar_16);
					  c_45.xyz = (((tmpvar_14 * tmpvar_39) * diff_47) + ((tmpvar_39 * _SpecColor.xyz) * tmpvar_51));
					  c_45.w = (tmpvar_25.w * _ReflectColor.w);
					  c_44.w = c_45.w;
					  c_44.xyz = (c_45.xyz + (tmpvar_14 * tmpvar_42));
					  c_4.xyz = (c_44.xyz + tmpvar_15);
					  c_4.w = 1.0;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 unity_4LightPosX0;
					uniform highp vec4 unity_4LightPosY0;
					uniform highp vec4 unity_4LightPosZ0;
					uniform mediump vec4 unity_4LightAtten0;
					uniform mediump vec4 unity_LightColor[8];
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec2 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec2 tmpvar_3;
					  highp vec4 tmpvar_4;
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_7;
					  tmpvar_7[0] = unity_WorldToObject[0].xyz;
					  tmpvar_7[1] = unity_WorldToObject[1].xyz;
					  tmpvar_7[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
					  highp vec3 tmpvar_9;
					  highp vec3 I_10;
					  I_10 = (tmpvar_6 - _WorldSpaceCameraPos);
					  tmpvar_9 = (I_10 - (2.0 * (
					    dot (tmpvar_8, I_10)
					   * tmpvar_8)));
					  tmpvar_1 = tmpvar_9;
					  highp vec3 lightColor0_11;
					  lightColor0_11 = unity_LightColor[0].xyz;
					  highp vec3 lightColor1_12;
					  lightColor1_12 = unity_LightColor[1].xyz;
					  highp vec3 lightColor2_13;
					  lightColor2_13 = unity_LightColor[2].xyz;
					  highp vec3 lightColor3_14;
					  lightColor3_14 = unity_LightColor[3].xyz;
					  highp vec4 lightAttenSq_15;
					  lightAttenSq_15 = unity_4LightAtten0;
					  highp vec3 col_16;
					  highp vec4 ndotl_17;
					  highp vec4 lengthSq_18;
					  highp vec4 tmpvar_19;
					  tmpvar_19 = (unity_4LightPosX0 - tmpvar_6.x);
					  highp vec4 tmpvar_20;
					  tmpvar_20 = (unity_4LightPosY0 - tmpvar_6.y);
					  highp vec4 tmpvar_21;
					  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_6.z);
					  lengthSq_18 = (tmpvar_19 * tmpvar_19);
					  lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
					  lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
					  highp vec4 tmpvar_22;
					  tmpvar_22 = max (lengthSq_18, vec4(1e-06, 1e-06, 1e-06, 1e-06));
					  lengthSq_18 = tmpvar_22;
					  ndotl_17 = (tmpvar_19 * tmpvar_8.x);
					  ndotl_17 = (ndotl_17 + (tmpvar_20 * tmpvar_8.y));
					  ndotl_17 = (ndotl_17 + (tmpvar_21 * tmpvar_8.z));
					  highp vec4 tmpvar_23;
					  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
					  ndotl_17 = tmpvar_23;
					  highp vec4 tmpvar_24;
					  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
					    (tmpvar_22 * lightAttenSq_15)
					  ))));
					  col_16 = (lightColor0_11 * tmpvar_24.x);
					  col_16 = (col_16 + (lightColor1_12 * tmpvar_24.y));
					  col_16 = (col_16 + (lightColor2_13 * tmpvar_24.z));
					  col_16 = (col_16 + (lightColor3_14 * tmpvar_24.w));
					  tmpvar_2 = col_16;
					  mediump vec3 normal_25;
					  normal_25 = tmpvar_8;
					  mediump vec3 ambient_26;
					  mediump vec3 x1_27;
					  mediump vec4 tmpvar_28;
					  tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
					  x1_27.x = dot (unity_SHBr, tmpvar_28);
					  x1_27.y = dot (unity_SHBg, tmpvar_28);
					  x1_27.z = dot (unity_SHBb, tmpvar_28);
					  ambient_26 = ((tmpvar_2 * (
					    (tmpvar_2 * ((tmpvar_2 * 0.305306) + 0.6821711))
					   + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
					    ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
					  )));
					  tmpvar_2 = ambient_26;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_8;
					  xlv_TEXCOORD3 = tmpvar_6;
					  xlv_TEXCOORD4 = ambient_26;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD7 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform highp mat4 unity_WorldToShadow[4];
					uniform mediump vec4 _LightShadowData;
					uniform highp vec4 unity_ShadowFadeCenterAndType;
					uniform highp mat4 unity_MatrixV;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform highp sampler2D _ShadowMapTexture;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					void main ()
					{
					  mediump float tmpvar_1;
					  mediump vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  lowp vec4 c_4;
					  lowp float atten_5;
					  lowp vec3 tmpvar_6;
					  lowp vec3 viewDir_7;
					  lowp vec3 lightDir_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  mediump vec3 tmpvar_11;
					  tmpvar_11 = _WorldSpaceLightPos0.xyz;
					  lightDir_8 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  highp vec3 tmpvar_13;
					  tmpvar_13 = (_WorldSpaceCameraPos - xlv_TEXCOORD3);
					  tmpvar_12 = normalize(tmpvar_13);
					  viewDir_7 = tmpvar_12;
					  tmpvar_9 = xlv_TEXCOORD1;
					  tmpvar_10 = viewDir_7;
					  tmpvar_6 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_14;
					  lowp vec3 tmpvar_15;
					  lowp float tmpvar_16;
					  mediump float fres_17;
					  mediump float rim_18;
					  mediump float tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp (dot (normalize(tmpvar_10), tmpvar_6), 0.0, 1.0);
					  tmpvar_19 = tmpvar_20;
					  rim_18 = (1.0 - tmpvar_19);
					  fres_17 = rim_18;
					  highp float tmpvar_21;
					  tmpvar_21 = pow (rim_18, _RimAmt);
					  rim_18 = tmpvar_21;
					  highp float tmpvar_22;
					  tmpvar_22 = pow (fres_17, _FresAmt);
					  fres_17 = tmpvar_22;
					  highp float tmpvar_23;
					  tmpvar_23 = clamp ((1.0 - (rim_18 * _RimPwr)), 0.0, 1.0);
					  tmpvar_14 = (_Color.xyz * tmpvar_23);
					  highp vec3 tmpvar_24;
					  tmpvar_24 = ((rim_18 * _RimColor) * _RimPwr).xyz;
					  tmpvar_14 = (tmpvar_14 + tmpvar_24);
					  tmpvar_16 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_18)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_25;
					  tmpvar_25 = textureCube (_Cube, tmpvar_9);
					  tmpvar_15 = ((tmpvar_25.xyz * _ReflectColor.xyz) * fres_17);
					  mediump float realtimeShadowAttenuation_26;
					  highp vec4 v_27;
					  v_27.x = unity_MatrixV[0].z;
					  v_27.y = unity_MatrixV[1].z;
					  v_27.z = unity_MatrixV[2].z;
					  v_27.w = unity_MatrixV[3].z;
					  highp vec3 tmpvar_28;
					  tmpvar_28 = (xlv_TEXCOORD3 - unity_ShadowFadeCenterAndType.xyz);
					  mediump float tmpvar_29;
					  highp float tmpvar_30;
					  tmpvar_30 = clamp (((
					    mix (dot (tmpvar_13, v_27.xyz), sqrt(dot (tmpvar_28, tmpvar_28)), unity_ShadowFadeCenterAndType.w)
					   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
					  tmpvar_29 = tmpvar_30;
					  highp vec4 tmpvar_31;
					  tmpvar_31.w = 1.0;
					  tmpvar_31.xyz = xlv_TEXCOORD3;
					  lowp float tmpvar_32;
					  highp vec4 shadowCoord_33;
					  shadowCoord_33 = (unity_WorldToShadow[0] * tmpvar_31);
					  highp float lightShadowDataX_34;
					  mediump float tmpvar_35;
					  tmpvar_35 = _LightShadowData.x;
					  lightShadowDataX_34 = tmpvar_35;
					  highp float tmpvar_36;
					  tmpvar_36 = max (float((texture2D (_ShadowMapTexture, shadowCoord_33.xy).x > shadowCoord_33.z)), lightShadowDataX_34);
					  tmpvar_32 = tmpvar_36;
					  realtimeShadowAttenuation_26 = tmpvar_32;
					  mediump float tmpvar_37;
					  tmpvar_37 = clamp ((realtimeShadowAttenuation_26 + tmpvar_29), 0.0, 1.0);
					  atten_5 = tmpvar_37;
					  tmpvar_2 = _LightColor0.xyz;
					  tmpvar_3 = lightDir_8;
					  tmpvar_1 = atten_5;
					  mediump vec3 normalWorld_38;
					  normalWorld_38 = tmpvar_6;
					  mediump vec3 tmpvar_39;
					  tmpvar_39 = (tmpvar_2 * tmpvar_1);
					  mediump vec4 tmpvar_40;
					  tmpvar_40.w = 1.0;
					  tmpvar_40.xyz = normalWorld_38;
					  mediump vec3 x_41;
					  x_41.x = dot (unity_SHAr, tmpvar_40);
					  x_41.y = dot (unity_SHAg, tmpvar_40);
					  x_41.z = dot (unity_SHAb, tmpvar_40);
					  mediump vec3 tmpvar_42;
					  tmpvar_42 = max (((1.055 * 
					    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD4 + x_41)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  tmpvar_2 = tmpvar_39;
					  mediump vec3 viewDir_43;
					  viewDir_43 = tmpvar_12;
					  lowp vec4 c_44;
					  lowp vec4 c_45;
					  highp float nh_46;
					  lowp float diff_47;
					  mediump float tmpvar_48;
					  tmpvar_48 = max (0.0, dot (tmpvar_6, tmpvar_3));
					  diff_47 = tmpvar_48;
					  mediump float tmpvar_49;
					  tmpvar_49 = max (0.0, dot (tmpvar_6, normalize(
					    (tmpvar_3 + viewDir_43)
					  )));
					  nh_46 = tmpvar_49;
					  mediump float y_50;
					  y_50 = (_Shininess * 128.0);
					  highp float tmpvar_51;
					  tmpvar_51 = (pow (nh_46, y_50) * tmpvar_16);
					  c_45.xyz = (((tmpvar_14 * tmpvar_39) * diff_47) + ((tmpvar_39 * _SpecColor.xyz) * tmpvar_51));
					  c_45.w = (tmpvar_25.w * _ReflectColor.w);
					  c_44.w = c_45.w;
					  c_44.xyz = (c_45.xyz + (tmpvar_14 * tmpvar_42));
					  c_4.xyz = (c_44.xyz + tmpvar_15);
					  c_4.w = 1.0;
					  gl_FragData[0] = c_4;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat21 = u_xlat21 + u_xlat21;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat21)) + (-u_xlat1.xyz);
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					lowp float u_xlat10_6;
					float u_xlat14;
					lowp float u_xlat10_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat18) + 1.0;
					    u_xlat16_18 = log2(u_xlat16_19);
					    u_xlat2.xy = vec2(u_xlat16_18) * vec2(_RimAmt, _FresAmt);
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat16_19 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_19 = inversesqrt(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_18 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_1.x = (-u_xlat2.x) + 1.0;
					    u_xlat10_14 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_14;
					    u_xlat14 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat18 = u_xlat16_18 * u_xlat14;
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = (-u_xlat0.x) + u_xlat6;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat6 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_6 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat0.x + u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat2.xxx * _RimColor.xyz;
					    u_xlat3.xyz = u_xlat16_4.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat18 = (-u_xlat2.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat2.xzw = _Color.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat2.xzw;
					    u_xlat16_19 = dot(vs_TEXCOORD2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = u_xlat2.xzw * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat2.yyy + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat21 = u_xlat21 + u_xlat21;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat21)) + (-u_xlat1.xyz);
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					lowp float u_xlat10_6;
					float u_xlat14;
					lowp float u_xlat10_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat18) + 1.0;
					    u_xlat16_18 = log2(u_xlat16_19);
					    u_xlat2.xy = vec2(u_xlat16_18) * vec2(_RimAmt, _FresAmt);
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat16_19 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_19 = inversesqrt(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_18 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_1.x = (-u_xlat2.x) + 1.0;
					    u_xlat10_14 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_14;
					    u_xlat14 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat18 = u_xlat16_18 * u_xlat14;
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = (-u_xlat0.x) + u_xlat6;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat6 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_6 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat0.x + u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat2.xxx * _RimColor.xyz;
					    u_xlat3.xyz = u_xlat16_4.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat18 = (-u_xlat2.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat2.xzw = _Color.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat2.xzw;
					    u_xlat16_19 = dot(vs_TEXCOORD2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = u_xlat2.xzw * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat2.yyy + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat21 = u_xlat21 + u_xlat21;
					    u_xlat1.xyz = u_xlat2.xyz * (-vec3(u_xlat21)) + (-u_xlat1.xyz);
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform lowp sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					lowp vec3 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					lowp float u_xlat10_6;
					float u_xlat14;
					lowp float u_xlat10_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_19 = (-u_xlat18) + 1.0;
					    u_xlat16_18 = log2(u_xlat16_19);
					    u_xlat2.xy = vec2(u_xlat16_18) * vec2(_RimAmt, _FresAmt);
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat16_19 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_19 = inversesqrt(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_18 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_1.x = (-u_xlat2.x) + 1.0;
					    u_xlat10_14 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_14;
					    u_xlat14 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat18 = u_xlat16_18 * u_xlat14;
					    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat6 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = (-u_xlat0.x) + u_xlat6;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat6 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat10_6 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_1.x = u_xlat0.x + u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat2.xxx * _RimColor.xyz;
					    u_xlat3.xyz = u_xlat16_4.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat18 = (-u_xlat2.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat2.xzw = _Color.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat2.xzw;
					    u_xlat16_19 = dot(vs_TEXCOORD2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_19) + u_xlat0.xyz;
					    u_xlat1.xyz = vs_TEXCOORD2.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = log2(u_xlat16_4.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = u_xlat2.xzw * u_xlat16_3.xyz + u_xlat0.xyz;
					    u_xlat10_0.xyz = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat2.yyy + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 400
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %115 %128 %188 %191 %194 %385 %393 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 RelaxedPrecision 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 RelaxedPrecision 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 RelaxedPrecision 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 RelaxedPrecision 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %88 0 BuiltIn 88 
					                                                      OpMemberDecorate %88 1 BuiltIn 88 
					                                                      OpMemberDecorate %88 2 BuiltIn 88 
					                                                      OpDecorate %88 Block 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %103 Location 103 
					                                                      OpDecorate %115 Location 115 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %188 Location 188 
					                                                      OpDecorate %191 Location 191 
					                                                      OpDecorate %194 Location 194 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %276 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %334 RelaxedPrecision 
					                                                      OpDecorate %347 RelaxedPrecision 
					                                                      OpDecorate %348 RelaxedPrecision 
					                                                      OpDecorate %351 RelaxedPrecision 
					                                                      OpDecorate %357 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %361 RelaxedPrecision 
					                                                      OpDecorate %362 RelaxedPrecision 
					                                                      OpDecorate %366 RelaxedPrecision 
					                                                      OpDecorate %367 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %372 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %374 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %385 Location 385 
					                                                      OpDecorate %391 RelaxedPrecision 
					                                                      OpDecorate %393 Location 393 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 8 
					                                              %17 = OpTypeArray %7 %16 
					                                          u32 %18 = OpConstant 4 
					                                              %19 = OpTypeArray %7 %18 
					                                              %20 = OpTypeArray %7 %18 
					                                              %21 = OpTypeArray %7 %18 
					                                              %22 = OpTypeStruct %14 %7 %7 %7 %7 %17 %7 %7 %7 %7 %19 %20 %21 %7 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 10 
					                                          i32 %27 = OpConstant 1 
					                                              %28 = OpTypePointer Uniform %7 
					                                          i32 %32 = OpConstant 0 
					                                          i32 %40 = OpConstant 2 
					                               Private f32_4* %48 = OpVariable Private 
					                                          i32 %50 = OpConstant 3 
					                               Private f32_4* %65 = OpVariable Private 
					                                          i32 %68 = OpConstant 12 
					                                          u32 %86 = OpConstant 1 
					                                              %87 = OpTypeArray %6 %86 
					                                              %88 = OpTypeStruct %7 %6 %87 
					                                              %89 = OpTypePointer Output %88 
					         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
					                                              %98 = OpTypePointer Output %7 
					                                             %100 = OpTypeVector %6 2 
					                                             %101 = OpTypePointer Output %100 
					                               Output f32_2* %102 = OpVariable Output 
					                                Input f32_4* %103 = OpVariable Input 
					                                         i32 %106 = OpConstant 13 
					                               Output f32_2* %115 = OpVariable Output 
					                                         f32 %116 = OpConstant 3.674022E-40 
					                                       f32_2 %117 = OpConstantComposite %116 %116 
					                                             %121 = OpTypePointer Uniform %14 
					                                             %127 = OpTypePointer Input %14 
					                                Input f32_3* %128 = OpVariable Input 
					                                         i32 %130 = OpConstant 11 
					                                         u32 %135 = OpConstant 0 
					                                             %136 = OpTypePointer Private %6 
					                                         u32 %149 = OpConstant 2 
					                                Private f32* %151 = OpVariable Private 
					                                             %187 = OpTypePointer Output %14 
					                               Output f32_3* %188 = OpVariable Output 
					                               Output f32_3* %191 = OpVariable Output 
					                               Output f32_3* %194 = OpVariable Output 
					                              Private f32_4* %203 = OpVariable Private 
					                              Private f32_4* %216 = OpVariable Private 
					                                         f32 %247 = OpConstant 3.674022E-40 
					                                       f32_4 %248 = OpConstantComposite %247 %247 %247 %247 
					                                         i32 %253 = OpConstant 4 
					                                         f32 %257 = OpConstant 3.674022E-40 
					                                       f32_4 %258 = OpConstantComposite %257 %257 %257 %257 
					                                       f32_4 %266 = OpConstantComposite %116 %116 %116 %116 
					                                         i32 %273 = OpConstant 5 
					                                         f32 %315 = OpConstant 3.674022E-40 
					                                       f32_3 %316 = OpConstantComposite %315 %315 %315 
					                                         f32 %318 = OpConstant 3.674022E-40 
					                                       f32_3 %319 = OpConstantComposite %318 %318 %318 
					                                         f32 %328 = OpConstant 3.674022E-40 
					                                       f32_3 %329 = OpConstantComposite %328 %328 %328 
					                                             %333 = OpTypePointer Private %14 
					                              Private f32_3* %334 = OpVariable Private 
					                              Private f32_4* %351 = OpVariable Private 
					                              Private f32_3* %357 = OpVariable Private 
					                                         i32 %358 = OpConstant 6 
					                                         i32 %364 = OpConstant 7 
					                                         i32 %370 = OpConstant 8 
					                                         i32 %376 = OpConstant 9 
					                               Output f32_3* %385 = OpVariable Output 
					                               Output f32_4* %393 = OpVariable Output 
					                                             %394 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %29 = OpAccessChain %24 %26 %27 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpFMul %13 %30 
					                                                      OpStore %9 %31 
					                               Uniform f32_4* %33 = OpAccessChain %24 %26 %32 
					                                        f32_4 %34 = OpLoad %33 
					                                        f32_4 %35 = OpLoad %11 
					                                        f32_4 %36 = OpVectorShuffle %35 %35 0 0 0 0 
					                                        f32_4 %37 = OpFMul %34 %36 
					                                        f32_4 %38 = OpLoad %9 
					                                        f32_4 %39 = OpFAdd %37 %38 
					                                                      OpStore %9 %39 
					                               Uniform f32_4* %41 = OpAccessChain %24 %26 %40 
					                                        f32_4 %42 = OpLoad %41 
					                                        f32_4 %43 = OpLoad %11 
					                                        f32_4 %44 = OpVectorShuffle %43 %43 2 2 2 2 
					                                        f32_4 %45 = OpFMul %42 %44 
					                                        f32_4 %46 = OpLoad %9 
					                                        f32_4 %47 = OpFAdd %45 %46 
					                                                      OpStore %9 %47 
					                                        f32_4 %49 = OpLoad %9 
					                               Uniform f32_4* %51 = OpAccessChain %24 %26 %50 
					                                        f32_4 %52 = OpLoad %51 
					                                        f32_4 %53 = OpFAdd %49 %52 
					                                                      OpStore %48 %53 
					                               Uniform f32_4* %54 = OpAccessChain %24 %26 %50 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_4 %57 = OpLoad %11 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
					                                        f32_3 %59 = OpFMul %56 %58 
					                                        f32_4 %60 = OpLoad %9 
					                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
					                                        f32_3 %62 = OpFAdd %59 %61 
					                                        f32_4 %63 = OpLoad %9 
					                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
					                                                      OpStore %9 %64 
					                                        f32_4 %66 = OpLoad %48 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
					                               Uniform f32_4* %69 = OpAccessChain %24 %68 %27 
					                                        f32_4 %70 = OpLoad %69 
					                                        f32_4 %71 = OpFMul %67 %70 
					                                                      OpStore %65 %71 
					                               Uniform f32_4* %72 = OpAccessChain %24 %68 %32 
					                                        f32_4 %73 = OpLoad %72 
					                                        f32_4 %74 = OpLoad %48 
					                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
					                                        f32_4 %76 = OpFMul %73 %75 
					                                        f32_4 %77 = OpLoad %65 
					                                        f32_4 %78 = OpFAdd %76 %77 
					                                                      OpStore %65 %78 
					                               Uniform f32_4* %79 = OpAccessChain %24 %68 %40 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_4 %81 = OpLoad %48 
					                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
					                                        f32_4 %83 = OpFMul %80 %82 
					                                        f32_4 %84 = OpLoad %65 
					                                        f32_4 %85 = OpFAdd %83 %84 
					                                                      OpStore %65 %85 
					                               Uniform f32_4* %91 = OpAccessChain %24 %68 %50 
					                                        f32_4 %92 = OpLoad %91 
					                                        f32_4 %93 = OpLoad %48 
					                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
					                                        f32_4 %95 = OpFMul %92 %94 
					                                        f32_4 %96 = OpLoad %65 
					                                        f32_4 %97 = OpFAdd %95 %96 
					                                Output f32_4* %99 = OpAccessChain %90 %32 
					                                                      OpStore %99 %97 
					                                       f32_4 %104 = OpLoad %103 
					                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
					                              Uniform f32_4* %107 = OpAccessChain %24 %106 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
					                                       f32_2 %110 = OpFMul %105 %109 
					                              Uniform f32_4* %111 = OpAccessChain %24 %106 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
					                                       f32_2 %114 = OpFAdd %110 %113 
					                                                      OpStore %102 %114 
					                                                      OpStore %115 %117 
					                                       f32_4 %118 = OpLoad %9 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_3 %120 = OpFNegate %119 
					                              Uniform f32_3* %122 = OpAccessChain %24 %32 
					                                       f32_3 %123 = OpLoad %122 
					                                       f32_3 %124 = OpFAdd %120 %123 
					                                       f32_4 %125 = OpLoad %48 
					                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
					                                                      OpStore %48 %126 
					                                       f32_3 %129 = OpLoad %128 
					                              Uniform f32_4* %131 = OpAccessChain %24 %130 %32 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %129 %133 
					                                Private f32* %137 = OpAccessChain %65 %135 
					                                                      OpStore %137 %134 
					                                       f32_3 %138 = OpLoad %128 
					                              Uniform f32_4* %139 = OpAccessChain %24 %130 %27 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %65 %86 
					                                                      OpStore %143 %142 
					                                       f32_3 %144 = OpLoad %128 
					                              Uniform f32_4* %145 = OpAccessChain %24 %130 %40 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %144 %147 
					                                Private f32* %150 = OpAccessChain %65 %149 
					                                                      OpStore %150 %148 
					                                       f32_4 %152 = OpLoad %65 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %65 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                                      OpStore %151 %156 
					                                         f32 %157 = OpLoad %151 
					                                         f32 %158 = OpExtInst %1 32 %157 
					                                                      OpStore %151 %158 
					                                         f32 %159 = OpLoad %151 
					                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
					                                       f32_4 %161 = OpLoad %65 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %65 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %65 %165 
					                                       f32_4 %166 = OpLoad %48 
					                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
					                                       f32_3 %168 = OpFNegate %167 
					                                       f32_4 %169 = OpLoad %65 
					                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
					                                         f32 %171 = OpDot %168 %170 
					                                                      OpStore %151 %171 
					                                         f32 %172 = OpLoad %151 
					                                         f32 %173 = OpLoad %151 
					                                         f32 %174 = OpFAdd %172 %173 
					                                                      OpStore %151 %174 
					                                       f32_4 %175 = OpLoad %65 
					                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
					                                         f32 %177 = OpLoad %151 
					                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
					                                       f32_3 %179 = OpFNegate %178 
					                                       f32_3 %180 = OpFMul %176 %179 
					                                       f32_4 %181 = OpLoad %48 
					                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
					                                       f32_3 %183 = OpFNegate %182 
					                                       f32_3 %184 = OpFAdd %180 %183 
					                                       f32_4 %185 = OpLoad %48 
					                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
					                                                      OpStore %48 %186 
					                                       f32_4 %189 = OpLoad %48 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                                      OpStore %188 %190 
					                                       f32_4 %192 = OpLoad %65 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                                      OpStore %191 %193 
					                                       f32_4 %195 = OpLoad %9 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                                      OpStore %194 %196 
					                                       f32_4 %197 = OpLoad %9 
					                                       f32_4 %198 = OpVectorShuffle %197 %197 0 0 0 0 
					                                       f32_4 %199 = OpFNegate %198 
					                              Uniform f32_4* %200 = OpAccessChain %24 %27 
					                                       f32_4 %201 = OpLoad %200 
					                                       f32_4 %202 = OpFAdd %199 %201 
					                                                      OpStore %48 %202 
					                                       f32_4 %204 = OpLoad %9 
					                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
					                                       f32_4 %206 = OpFNegate %205 
					                              Uniform f32_4* %207 = OpAccessChain %24 %40 
					                                       f32_4 %208 = OpLoad %207 
					                                       f32_4 %209 = OpFAdd %206 %208 
					                                                      OpStore %203 %209 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
					                                       f32_4 %212 = OpFNegate %211 
					                              Uniform f32_4* %213 = OpAccessChain %24 %50 
					                                       f32_4 %214 = OpLoad %213 
					                                       f32_4 %215 = OpFAdd %212 %214 
					                                                      OpStore %9 %215 
					                                       f32_4 %217 = OpLoad %65 
					                                       f32_4 %218 = OpVectorShuffle %217 %217 1 1 1 1 
					                                       f32_4 %219 = OpLoad %203 
					                                       f32_4 %220 = OpFMul %218 %219 
					                                                      OpStore %216 %220 
					                                       f32_4 %221 = OpLoad %203 
					                                       f32_4 %222 = OpLoad %203 
					                                       f32_4 %223 = OpFMul %221 %222 
					                                                      OpStore %203 %223 
					                                       f32_4 %224 = OpLoad %48 
					                                       f32_4 %225 = OpLoad %48 
					                                       f32_4 %226 = OpFMul %224 %225 
					                                       f32_4 %227 = OpLoad %203 
					                                       f32_4 %228 = OpFAdd %226 %227 
					                                                      OpStore %203 %228 
					                                       f32_4 %229 = OpLoad %48 
					                                       f32_4 %230 = OpLoad %65 
					                                       f32_4 %231 = OpVectorShuffle %230 %230 0 0 0 0 
					                                       f32_4 %232 = OpFMul %229 %231 
					                                       f32_4 %233 = OpLoad %216 
					                                       f32_4 %234 = OpFAdd %232 %233 
					                                                      OpStore %48 %234 
					                                       f32_4 %235 = OpLoad %9 
					                                       f32_4 %236 = OpLoad %65 
					                                       f32_4 %237 = OpVectorShuffle %236 %236 2 2 2 2 
					                                       f32_4 %238 = OpFMul %235 %237 
					                                       f32_4 %239 = OpLoad %48 
					                                       f32_4 %240 = OpFAdd %238 %239 
					                                                      OpStore %48 %240 
					                                       f32_4 %241 = OpLoad %9 
					                                       f32_4 %242 = OpLoad %9 
					                                       f32_4 %243 = OpFMul %241 %242 
					                                       f32_4 %244 = OpLoad %203 
					                                       f32_4 %245 = OpFAdd %243 %244 
					                                                      OpStore %9 %245 
					                                       f32_4 %246 = OpLoad %9 
					                                       f32_4 %249 = OpExtInst %1 40 %246 %248 
					                                                      OpStore %9 %249 
					                                       f32_4 %250 = OpLoad %9 
					                                       f32_4 %251 = OpExtInst %1 32 %250 
					                                                      OpStore %203 %251 
					                                       f32_4 %252 = OpLoad %9 
					                              Uniform f32_4* %254 = OpAccessChain %24 %253 
					                                       f32_4 %255 = OpLoad %254 
					                                       f32_4 %256 = OpFMul %252 %255 
					                                       f32_4 %259 = OpFAdd %256 %258 
					                                                      OpStore %9 %259 
					                                       f32_4 %260 = OpLoad %9 
					                                       f32_4 %261 = OpFDiv %258 %260 
					                                                      OpStore %9 %261 
					                                       f32_4 %262 = OpLoad %48 
					                                       f32_4 %263 = OpLoad %203 
					                                       f32_4 %264 = OpFMul %262 %263 
					                                                      OpStore %48 %264 
					                                       f32_4 %265 = OpLoad %48 
					                                       f32_4 %267 = OpExtInst %1 40 %265 %266 
					                                                      OpStore %48 %267 
					                                       f32_4 %268 = OpLoad %9 
					                                       f32_4 %269 = OpLoad %48 
					                                       f32_4 %270 = OpFMul %268 %269 
					                                                      OpStore %9 %270 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 1 1 1 
					                              Uniform f32_4* %274 = OpAccessChain %24 %273 %27 
					                                       f32_4 %275 = OpLoad %274 
					                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
					                                       f32_3 %277 = OpFMul %272 %276 
					                                       f32_4 %278 = OpLoad %48 
					                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
					                                                      OpStore %48 %279 
					                              Uniform f32_4* %280 = OpAccessChain %24 %273 %32 
					                                       f32_4 %281 = OpLoad %280 
					                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
					                                       f32_4 %283 = OpLoad %9 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
					                                       f32_3 %285 = OpFMul %282 %284 
					                                       f32_4 %286 = OpLoad %48 
					                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
					                                       f32_3 %288 = OpFAdd %285 %287 
					                                       f32_4 %289 = OpLoad %48 
					                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
					                                                      OpStore %48 %290 
					                              Uniform f32_4* %291 = OpAccessChain %24 %273 %40 
					                                       f32_4 %292 = OpLoad %291 
					                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
					                                       f32_4 %294 = OpLoad %9 
					                                       f32_3 %295 = OpVectorShuffle %294 %294 2 2 2 
					                                       f32_3 %296 = OpFMul %293 %295 
					                                       f32_4 %297 = OpLoad %48 
					                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
					                                       f32_3 %299 = OpFAdd %296 %298 
					                                       f32_4 %300 = OpLoad %9 
					                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
					                                                      OpStore %9 %301 
					                              Uniform f32_4* %302 = OpAccessChain %24 %273 %50 
					                                       f32_4 %303 = OpLoad %302 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 3 3 3 
					                                       f32_3 %307 = OpFMul %304 %306 
					                                       f32_4 %308 = OpLoad %9 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFAdd %307 %309 
					                                       f32_4 %311 = OpLoad %9 
					                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
					                                                      OpStore %9 %312 
					                                       f32_4 %313 = OpLoad %9 
					                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
					                                       f32_3 %317 = OpFMul %314 %316 
					                                       f32_3 %320 = OpFAdd %317 %319 
					                                       f32_4 %321 = OpLoad %48 
					                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
					                                                      OpStore %48 %322 
					                                       f32_4 %323 = OpLoad %9 
					                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
					                                       f32_4 %325 = OpLoad %48 
					                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
					                                       f32_3 %327 = OpFMul %324 %326 
					                                       f32_3 %330 = OpFAdd %327 %329 
					                                       f32_4 %331 = OpLoad %48 
					                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
					                                                      OpStore %48 %332 
					                                Private f32* %335 = OpAccessChain %65 %86 
					                                         f32 %336 = OpLoad %335 
					                                Private f32* %337 = OpAccessChain %65 %86 
					                                         f32 %338 = OpLoad %337 
					                                         f32 %339 = OpFMul %336 %338 
					                                Private f32* %340 = OpAccessChain %334 %135 
					                                                      OpStore %340 %339 
					                                Private f32* %341 = OpAccessChain %65 %135 
					                                         f32 %342 = OpLoad %341 
					                                Private f32* %343 = OpAccessChain %65 %135 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                Private f32* %346 = OpAccessChain %334 %135 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpFNegate %347 
					                                         f32 %349 = OpFAdd %345 %348 
					                                Private f32* %350 = OpAccessChain %334 %135 
					                                                      OpStore %350 %349 
					                                       f32_4 %352 = OpLoad %65 
					                                       f32_4 %353 = OpVectorShuffle %352 %352 1 2 2 0 
					                                       f32_4 %354 = OpLoad %65 
					                                       f32_4 %355 = OpVectorShuffle %354 %354 0 1 2 2 
					                                       f32_4 %356 = OpFMul %353 %355 
					                                                      OpStore %351 %356 
					                              Uniform f32_4* %359 = OpAccessChain %24 %358 
					                                       f32_4 %360 = OpLoad %359 
					                                       f32_4 %361 = OpLoad %351 
					                                         f32 %362 = OpDot %360 %361 
					                                Private f32* %363 = OpAccessChain %357 %135 
					                                                      OpStore %363 %362 
					                              Uniform f32_4* %365 = OpAccessChain %24 %364 
					                                       f32_4 %366 = OpLoad %365 
					                                       f32_4 %367 = OpLoad %351 
					                                         f32 %368 = OpDot %366 %367 
					                                Private f32* %369 = OpAccessChain %357 %86 
					                                                      OpStore %369 %368 
					                              Uniform f32_4* %371 = OpAccessChain %24 %370 
					                                       f32_4 %372 = OpLoad %371 
					                                       f32_4 %373 = OpLoad %351 
					                                         f32 %374 = OpDot %372 %373 
					                                Private f32* %375 = OpAccessChain %357 %149 
					                                                      OpStore %375 %374 
					                              Uniform f32_4* %377 = OpAccessChain %24 %376 
					                                       f32_4 %378 = OpLoad %377 
					                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
					                                       f32_3 %380 = OpLoad %334 
					                                       f32_3 %381 = OpVectorShuffle %380 %380 0 0 0 
					                                       f32_3 %382 = OpFMul %379 %381 
					                                       f32_3 %383 = OpLoad %357 
					                                       f32_3 %384 = OpFAdd %382 %383 
					                                                      OpStore %334 %384 
					                                       f32_4 %386 = OpLoad %9 
					                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
					                                       f32_4 %388 = OpLoad %48 
					                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
					                                       f32_3 %390 = OpFMul %387 %389 
					                                       f32_3 %391 = OpLoad %334 
					                                       f32_3 %392 = OpFAdd %390 %391 
					                                                      OpStore %385 %392 
					                                                      OpStore %393 %266 
					                                 Output f32* %395 = OpAccessChain %90 %32 %86 
					                                         f32 %396 = OpLoad %395 
					                                         f32 %397 = OpFNegate %396 
					                                 Output f32* %398 = OpAccessChain %90 %32 %86 
					                                                      OpStore %398 %397 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 445
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %57 %135 %384 %420 %432 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 RelaxedPrecision 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpMemberDecorate %20 9 RelaxedPrecision 
					                                                      OpMemberDecorate %20 9 Offset 20 
					                                                      OpMemberDecorate %20 10 RelaxedPrecision 
					                                                      OpMemberDecorate %20 10 Offset 20 
					                                                      OpMemberDecorate %20 11 RelaxedPrecision 
					                                                      OpMemberDecorate %20 11 Offset 20 
					                                                      OpMemberDecorate %20 12 RelaxedPrecision 
					                                                      OpMemberDecorate %20 12 Offset 20 
					                                                      OpMemberDecorate %20 13 RelaxedPrecision 
					                                                      OpMemberDecorate %20 13 Offset 20 
					                                                      OpMemberDecorate %20 14 Offset 20 
					                                                      OpMemberDecorate %20 15 Offset 20 
					                                                      OpMemberDecorate %20 16 Offset 20 
					                                                      OpMemberDecorate %20 17 Offset 20 
					                                                      OpMemberDecorate %20 18 RelaxedPrecision 
					                                                      OpMemberDecorate %20 18 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpDecorate %36 RelaxedPrecision 
					                                                      OpDecorate %44 RelaxedPrecision 
					                                                      OpDecorate %45 RelaxedPrecision 
					                                                      OpDecorate %57 Location 57 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %91 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %119 RelaxedPrecision 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %132 DescriptorSet 132 
					                                                      OpDecorate %132 Binding 132 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %135 Location 135 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %156 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %259 DescriptorSet 259 
					                                                      OpDecorate %259 Binding 259 
					                                                      OpDecorate %260 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %267 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %287 RelaxedPrecision 
					                                                      OpDecorate %288 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %294 RelaxedPrecision 
					                                                      OpDecorate %295 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %299 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %311 RelaxedPrecision 
					                                                      OpDecorate %319 RelaxedPrecision 
					                                                      OpDecorate %320 RelaxedPrecision 
					                                                      OpDecorate %321 RelaxedPrecision 
					                                                      OpDecorate %322 RelaxedPrecision 
					                                                      OpDecorate %323 RelaxedPrecision 
					                                                      OpDecorate %324 RelaxedPrecision 
					                                                      OpDecorate %336 RelaxedPrecision 
					                                                      OpDecorate %337 RelaxedPrecision 
					                                                      OpDecorate %339 RelaxedPrecision 
					                                                      OpDecorate %340 RelaxedPrecision 
					                                                      OpDecorate %345 RelaxedPrecision 
					                                                      OpDecorate %351 RelaxedPrecision 
					                                                      OpDecorate %352 RelaxedPrecision 
					                                                      OpDecorate %354 RelaxedPrecision 
					                                                      OpDecorate %355 RelaxedPrecision 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %357 RelaxedPrecision 
					                                                      OpDecorate %358 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate %384 Location 384 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate %387 RelaxedPrecision 
					                                                      OpDecorate %389 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %391 RelaxedPrecision 
					                                                      OpDecorate %392 RelaxedPrecision 
					                                                      OpDecorate %393 RelaxedPrecision 
					                                                      OpDecorate %396 RelaxedPrecision 
					                                                      OpDecorate %397 RelaxedPrecision 
					                                                      OpDecorate %398 RelaxedPrecision 
					                                                      OpDecorate %399 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %406 RelaxedPrecision 
					                                                      OpDecorate %407 RelaxedPrecision 
					                                                      OpDecorate %410 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %418 DescriptorSet 418 
					                                                      OpDecorate %418 Binding 418 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate %421 RelaxedPrecision 
					                                                      OpDecorate %423 RelaxedPrecision 
					                                                      OpDecorate %424 RelaxedPrecision 
					                                                      OpDecorate %425 RelaxedPrecision 
					                                                      OpDecorate %428 RelaxedPrecision 
					                                                      OpDecorate %429 RelaxedPrecision 
					                                                      OpDecorate %430 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate %432 Location 432 
					                                                      OpDecorate %433 RelaxedPrecision 
					                                                      OpDecorate %437 RelaxedPrecision 
					                                                      OpDecorate %444 RelaxedPrecision 
					                                                      OpDecorate %444 DescriptorSet 444 
					                                                      OpDecorate %444 Binding 444 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 16 
					                                              %17 = OpTypeArray %14 %16 
					                                          u32 %18 = OpConstant 4 
					                                              %19 = OpTypeArray %14 %18 
					                                              %20 = OpTypeStruct %7 %14 %14 %14 %14 %17 %14 %14 %19 %14 %14 %14 %14 %6 %6 %6 %6 %6 %14 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                              %25 = OpTypePointer Uniform %7 
					                                              %29 = OpTypePointer Private %6 
					                                 Private f32* %30 = OpVariable Private 
					                               Private f32_3* %36 = OpVariable Private 
					                                          i32 %41 = OpConstant 1 
					                                              %42 = OpTypePointer Uniform %14 
					                                              %47 = OpTypePointer Private %14 
					                               Private f32_4* %48 = OpVariable Private 
					                                 Input f32_3* %57 = OpVariable Input 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                          f32 %62 = OpConstant 3.674022E-40 
					                                 Private f32* %64 = OpVariable Private 
					                                 Private f32* %68 = OpVariable Private 
					                                              %72 = OpTypeVector %6 2 
					                                          i32 %74 = OpConstant 16 
					                                              %75 = OpTypePointer Uniform %6 
					                                          i32 %78 = OpConstant 14 
					                                         u32 %102 = OpConstant 0 
					                                         i32 %111 = OpConstant 13 
					                                         f32 %114 = OpConstant 3.674022E-40 
					                                Private f32* %128 = OpVariable Private 
					                                             %129 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %130 = OpTypeSampledImage %129 
					                                             %131 = OpTypePointer UniformConstant %130 
					 UniformConstant read_only Texture2DSampled* %132 = OpVariable UniformConstant 
					                                             %134 = OpTypePointer Input %72 
					                                Input f32_2* %135 = OpVariable Input 
					                                         u32 %138 = OpConstant 3 
					                                Private f32* %145 = OpVariable Private 
					                                         i32 %148 = OpConstant 15 
					                                         i32 %152 = OpConstant 10 
					                              Private f32_3* %159 = OpVariable Private 
					                                         i32 %160 = OpConstant 8 
					                                         u32 %161 = OpConstant 2 
					                                         u32 %167 = OpConstant 1 
					                                         i32 %169 = OpConstant 2 
					                                         i32 %178 = OpConstant 7 
					                                Private f32* %184 = OpVariable Private 
					                                         i32 %205 = OpConstant 6 
					                                         i32 %219 = OpConstant 5 
					                                         i32 %241 = OpConstant 3 
					                                             %246 = OpTypePointer Function %7 
					                                Private f32* %255 = OpVariable Private 
					                                             %256 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
					                                             %257 = OpTypeSampledImage %256 
					                                             %258 = OpTypePointer UniformConstant %257 
					 UniformConstant read_only Texture2DSampled* %259 = OpVariable UniformConstant 
					                                         i32 %289 = OpConstant 9 
					                              Private f32_3* %294 = OpVariable Private 
					                                         i32 %306 = OpConstant 18 
					                                         i32 %312 = OpConstant 17 
					                                         i32 %334 = OpConstant 11 
					                              Private f32_4* %362 = OpVariable Private 
					                                         i32 %377 = OpConstant 4 
					                                Input f32_3* %384 = OpVariable Input 
					                                       f32_3 %388 = OpConstantComposite %61 %61 %61 
					                              Private f32_3* %390 = OpVariable Private 
					                                         f32 %394 = OpConstant 3.674022E-40 
					                                       f32_3 %395 = OpConstantComposite %394 %394 %394 
					                                         f32 %400 = OpConstant 3.674022E-40 
					                                       f32_3 %401 = OpConstantComposite %400 %400 %400 
					                                         f32 %403 = OpConstant 3.674022E-40 
					                                       f32_3 %404 = OpConstantComposite %403 %403 %403 
					                              Private f32_3* %414 = OpVariable Private 
					                                             %415 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %416 = OpTypeSampledImage %415 
					                                             %417 = OpTypePointer UniformConstant %416 
					UniformConstant read_only TextureCubeSampled* %418 = OpVariable UniformConstant 
					                                Input f32_3* %420 = OpVariable Input 
					                              Private f32_3* %424 = OpVariable Private 
					                                         i32 %426 = OpConstant 12 
					                                             %431 = OpTypePointer Output %14 
					                               Output f32_4* %432 = OpVariable Output 
					                                             %441 = OpTypePointer Output %6 
					 UniformConstant read_only Texture2DSampled* %444 = OpVariable UniformConstant 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %247 = OpVariable Function 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %26 = OpAccessChain %22 %24 
					                                        f32_3 %27 = OpLoad %26 
					                                        f32_3 %28 = OpFAdd %13 %27 
					                                                      OpStore %9 %28 
					                                        f32_3 %31 = OpLoad %9 
					                                        f32_3 %32 = OpLoad %9 
					                                          f32 %33 = OpDot %31 %32 
					                                                      OpStore %30 %33 
					                                          f32 %34 = OpLoad %30 
					                                          f32 %35 = OpExtInst %1 32 %34 
					                                                      OpStore %30 %35 
					                                        f32_3 %37 = OpLoad %9 
					                                          f32 %38 = OpLoad %30 
					                                        f32_3 %39 = OpCompositeConstruct %38 %38 %38 
					                                        f32_3 %40 = OpFMul %37 %39 
					                               Uniform f32_4* %43 = OpAccessChain %22 %41 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %46 = OpFAdd %40 %45 
					                                                      OpStore %36 %46 
					                                          f32 %49 = OpLoad %30 
					                                        f32_3 %50 = OpCompositeConstruct %49 %49 %49 
					                                        f32_3 %51 = OpLoad %9 
					                                        f32_3 %52 = OpFMul %50 %51 
					                                        f32_4 %53 = OpLoad %48 
					                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
					                                                      OpStore %48 %54 
					                                        f32_4 %55 = OpLoad %48 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_3 %58 = OpLoad %57 
					                                          f32 %59 = OpDot %56 %58 
					                                                      OpStore %30 %59 
					                                          f32 %60 = OpLoad %30 
					                                          f32 %63 = OpExtInst %1 43 %60 %61 %62 
					                                                      OpStore %30 %63 
					                                          f32 %65 = OpLoad %30 
					                                          f32 %66 = OpFNegate %65 
					                                          f32 %67 = OpFAdd %66 %62 
					                                                      OpStore %64 %67 
					                                          f32 %69 = OpLoad %64 
					                                          f32 %70 = OpExtInst %1 30 %69 
					                                                      OpStore %68 %70 
					                                          f32 %71 = OpLoad %68 
					                                        f32_2 %73 = OpCompositeConstruct %71 %71 
					                                 Uniform f32* %76 = OpAccessChain %22 %74 
					                                          f32 %77 = OpLoad %76 
					                                 Uniform f32* %79 = OpAccessChain %22 %78 
					                                          f32 %80 = OpLoad %79 
					                                        f32_2 %81 = OpCompositeConstruct %77 %80 
					                                        f32_2 %82 = OpFMul %73 %81 
					                                        f32_4 %83 = OpLoad %48 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 2 3 
					                                                      OpStore %48 %84 
					                                        f32_4 %85 = OpLoad %48 
					                                        f32_2 %86 = OpVectorShuffle %85 %85 0 1 
					                                        f32_2 %87 = OpExtInst %1 29 %86 
					                                        f32_4 %88 = OpLoad %48 
					                                        f32_4 %89 = OpVectorShuffle %88 %87 4 5 2 3 
					                                                      OpStore %48 %89 
					                                        f32_3 %90 = OpLoad %36 
					                                        f32_3 %91 = OpLoad %36 
					                                          f32 %92 = OpDot %90 %91 
					                                                      OpStore %64 %92 
					                                          f32 %93 = OpLoad %64 
					                                          f32 %94 = OpExtInst %1 32 %93 
					                                                      OpStore %64 %94 
					                                          f32 %95 = OpLoad %64 
					                                        f32_3 %96 = OpCompositeConstruct %95 %95 %95 
					                                        f32_3 %97 = OpLoad %36 
					                                        f32_3 %98 = OpFMul %96 %97 
					                                                      OpStore %36 %98 
					                                        f32_3 %99 = OpLoad %57 
					                                       f32_3 %100 = OpLoad %36 
					                                         f32 %101 = OpDot %99 %100 
					                                Private f32* %103 = OpAccessChain %36 %102 
					                                                      OpStore %103 %101 
					                                Private f32* %104 = OpAccessChain %36 %102 
					                                         f32 %105 = OpLoad %104 
					                                         f32 %106 = OpExtInst %1 40 %105 %61 
					                                Private f32* %107 = OpAccessChain %36 %102 
					                                                      OpStore %107 %106 
					                                Private f32* %108 = OpAccessChain %36 %102 
					                                         f32 %109 = OpLoad %108 
					                                         f32 %110 = OpExtInst %1 30 %109 
					                                                      OpStore %68 %110 
					                                Uniform f32* %112 = OpAccessChain %22 %111 
					                                         f32 %113 = OpLoad %112 
					                                         f32 %115 = OpFMul %113 %114 
					                                Private f32* %116 = OpAccessChain %36 %102 
					                                                      OpStore %116 %115 
					                                         f32 %117 = OpLoad %68 
					                                Private f32* %118 = OpAccessChain %36 %102 
					                                         f32 %119 = OpLoad %118 
					                                         f32 %120 = OpFMul %117 %119 
					                                                      OpStore %68 %120 
					                                         f32 %121 = OpLoad %68 
					                                         f32 %122 = OpExtInst %1 29 %121 
					                                                      OpStore %68 %122 
					                                Private f32* %123 = OpAccessChain %48 %102 
					                                         f32 %124 = OpLoad %123 
					                                         f32 %125 = OpFNegate %124 
					                                         f32 %126 = OpFAdd %125 %62 
					                                Private f32* %127 = OpAccessChain %36 %102 
					                                                      OpStore %127 %126 
					                  read_only Texture2DSampled %133 = OpLoad %132 
					                                       f32_2 %136 = OpLoad %135 
					                                       f32_4 %137 = OpImageSampleImplicitLod %133 %136 
					                                         f32 %139 = OpCompositeExtract %137 3 
					                                                      OpStore %128 %139 
					                                Private f32* %140 = OpAccessChain %36 %102 
					                                         f32 %141 = OpLoad %140 
					                                         f32 %142 = OpLoad %128 
					                                         f32 %143 = OpFMul %141 %142 
					                                Private f32* %144 = OpAccessChain %36 %102 
					                                                      OpStore %144 %143 
					                                Private f32* %146 = OpAccessChain %36 %102 
					                                         f32 %147 = OpLoad %146 
					                                Uniform f32* %149 = OpAccessChain %22 %148 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpFMul %147 %150 
					                                Uniform f32* %153 = OpAccessChain %22 %152 %138 
					                                         f32 %154 = OpLoad %153 
					                                         f32 %155 = OpFAdd %151 %154 
					                                                      OpStore %145 %155 
					                                         f32 %156 = OpLoad %68 
					                                         f32 %157 = OpLoad %145 
					                                         f32 %158 = OpFMul %156 %157 
					                                                      OpStore %30 %158 
					                                Uniform f32* %162 = OpAccessChain %22 %160 %24 %161 
					                                         f32 %163 = OpLoad %162 
					                                Private f32* %164 = OpAccessChain %159 %102 
					                                                      OpStore %164 %163 
					                                Uniform f32* %165 = OpAccessChain %22 %160 %41 %161 
					                                         f32 %166 = OpLoad %165 
					                                Private f32* %168 = OpAccessChain %159 %167 
					                                                      OpStore %168 %166 
					                                Uniform f32* %170 = OpAccessChain %22 %160 %169 %161 
					                                         f32 %171 = OpLoad %170 
					                                Private f32* %172 = OpAccessChain %159 %161 
					                                                      OpStore %172 %171 
					                                       f32_3 %173 = OpLoad %9 
					                                       f32_3 %174 = OpLoad %159 
					                                         f32 %175 = OpDot %173 %174 
					                                Private f32* %176 = OpAccessChain %9 %102 
					                                                      OpStore %176 %175 
					                                       f32_3 %177 = OpLoad %11 
					                              Uniform f32_4* %179 = OpAccessChain %22 %178 
					                                       f32_4 %180 = OpLoad %179 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFAdd %177 %182 
					                                                      OpStore %159 %183 
					                                       f32_3 %185 = OpLoad %159 
					                                       f32_3 %186 = OpLoad %159 
					                                         f32 %187 = OpDot %185 %186 
					                                                      OpStore %184 %187 
					                                         f32 %188 = OpLoad %184 
					                                         f32 %189 = OpExtInst %1 31 %188 
					                                                      OpStore %184 %189 
					                                Private f32* %190 = OpAccessChain %9 %102 
					                                         f32 %191 = OpLoad %190 
					                                         f32 %192 = OpFNegate %191 
					                                         f32 %193 = OpLoad %184 
					                                         f32 %194 = OpFAdd %192 %193 
					                                                      OpStore %184 %194 
					                                Uniform f32* %195 = OpAccessChain %22 %178 %138 
					                                         f32 %196 = OpLoad %195 
					                                         f32 %197 = OpLoad %184 
					                                         f32 %198 = OpFMul %196 %197 
					                                Private f32* %199 = OpAccessChain %9 %102 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpFAdd %198 %200 
					                                Private f32* %202 = OpAccessChain %9 %102 
					                                                      OpStore %202 %201 
					                                Private f32* %203 = OpAccessChain %9 %102 
					                                         f32 %204 = OpLoad %203 
					                                Uniform f32* %206 = OpAccessChain %22 %205 %161 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFMul %204 %207 
					                                Uniform f32* %209 = OpAccessChain %22 %205 %138 
					                                         f32 %210 = OpLoad %209 
					                                         f32 %211 = OpFAdd %208 %210 
					                                Private f32* %212 = OpAccessChain %9 %102 
					                                                      OpStore %212 %211 
					                                Private f32* %213 = OpAccessChain %9 %102 
					                                         f32 %214 = OpLoad %213 
					                                         f32 %215 = OpExtInst %1 43 %214 %61 %62 
					                                Private f32* %216 = OpAccessChain %9 %102 
					                                                      OpStore %216 %215 
					                                       f32_3 %217 = OpLoad %11 
					                                       f32_3 %218 = OpVectorShuffle %217 %217 1 1 1 
					                              Uniform f32_4* %220 = OpAccessChain %22 %219 %41 
					                                       f32_4 %221 = OpLoad %220 
					                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
					                                       f32_3 %223 = OpFMul %218 %222 
					                                                      OpStore %159 %223 
					                              Uniform f32_4* %224 = OpAccessChain %22 %219 %24 
					                                       f32_4 %225 = OpLoad %224 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpLoad %11 
					                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
					                                       f32_3 %229 = OpFMul %226 %228 
					                                       f32_3 %230 = OpLoad %159 
					                                       f32_3 %231 = OpFAdd %229 %230 
					                                                      OpStore %159 %231 
					                              Uniform f32_4* %232 = OpAccessChain %22 %219 %169 
					                                       f32_4 %233 = OpLoad %232 
					                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
					                                       f32_3 %235 = OpLoad %11 
					                                       f32_3 %236 = OpVectorShuffle %235 %235 2 2 2 
					                                       f32_3 %237 = OpFMul %234 %236 
					                                       f32_3 %238 = OpLoad %159 
					                                       f32_3 %239 = OpFAdd %237 %238 
					                                                      OpStore %159 %239 
					                                       f32_3 %240 = OpLoad %159 
					                              Uniform f32_4* %242 = OpAccessChain %22 %219 %241 
					                                       f32_4 %243 = OpLoad %242 
					                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
					                                       f32_3 %245 = OpFAdd %240 %244 
					                                                      OpStore %159 %245 
					                                       f32_3 %248 = OpLoad %159 
					                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
					                                Private f32* %250 = OpAccessChain %159 %161 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpCompositeExtract %249 0 
					                                         f32 %253 = OpCompositeExtract %249 1 
					                                       f32_3 %254 = OpCompositeConstruct %252 %253 %251 
					                                                      OpStore %247 %254 
					                  read_only Texture2DSampled %260 = OpLoad %259 
					                                       f32_3 %261 = OpLoad %247 
					                                         f32 %262 = OpCompositeExtract %261 2 
					                                         f32 %263 = OpImageSampleDrefExplicitLod %260 %261 %262 Lod %6 
					                                                      OpStore %255 %263 
					                                Uniform f32* %264 = OpAccessChain %22 %205 %102 
					                                         f32 %265 = OpLoad %264 
					                                         f32 %266 = OpFNegate %265 
					                                         f32 %267 = OpFAdd %266 %62 
					                                Private f32* %268 = OpAccessChain %36 %102 
					                                                      OpStore %268 %267 
					                                         f32 %269 = OpLoad %255 
					                                Private f32* %270 = OpAccessChain %36 %102 
					                                         f32 %271 = OpLoad %270 
					                                         f32 %272 = OpFMul %269 %271 
					                                Uniform f32* %273 = OpAccessChain %22 %205 %102 
					                                         f32 %274 = OpLoad %273 
					                                         f32 %275 = OpFAdd %272 %274 
					                                Private f32* %276 = OpAccessChain %36 %102 
					                                                      OpStore %276 %275 
					                                Private f32* %277 = OpAccessChain %9 %102 
					                                         f32 %278 = OpLoad %277 
					                                Private f32* %279 = OpAccessChain %36 %102 
					                                         f32 %280 = OpLoad %279 
					                                         f32 %281 = OpFAdd %278 %280 
					                                Private f32* %282 = OpAccessChain %36 %102 
					                                                      OpStore %282 %281 
					                                Private f32* %283 = OpAccessChain %36 %102 
					                                         f32 %284 = OpLoad %283 
					                                         f32 %285 = OpExtInst %1 43 %284 %61 %62 
					                                Private f32* %286 = OpAccessChain %36 %102 
					                                                      OpStore %286 %285 
					                                       f32_3 %287 = OpLoad %36 
					                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
					                              Uniform f32_4* %290 = OpAccessChain %22 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_3 %293 = OpFMul %288 %292 
					                                                      OpStore %36 %293 
					                                       f32_3 %295 = OpLoad %36 
					                              Uniform f32_4* %296 = OpAccessChain %22 %152 
					                                       f32_4 %297 = OpLoad %296 
					                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
					                                       f32_3 %299 = OpFMul %295 %298 
					                                                      OpStore %294 %299 
					                                         f32 %300 = OpLoad %30 
					                                       f32_3 %301 = OpCompositeConstruct %300 %300 %300 
					                                       f32_3 %302 = OpLoad %294 
					                                       f32_3 %303 = OpFMul %301 %302 
					                                                      OpStore %9 %303 
					                                       f32_4 %304 = OpLoad %48 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 0 0 
					                              Uniform f32_4* %307 = OpAccessChain %22 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %305 %309 
					                                                      OpStore %294 %310 
					                                       f32_3 %311 = OpLoad %294 
					                                Uniform f32* %313 = OpAccessChain %22 %312 
					                                         f32 %314 = OpLoad %313 
					                                Uniform f32* %315 = OpAccessChain %22 %312 
					                                         f32 %316 = OpLoad %315 
					                                Uniform f32* %317 = OpAccessChain %22 %312 
					                                         f32 %318 = OpLoad %317 
					                                       f32_3 %319 = OpCompositeConstruct %314 %316 %318 
					                                         f32 %320 = OpCompositeExtract %319 0 
					                                         f32 %321 = OpCompositeExtract %319 1 
					                                         f32 %322 = OpCompositeExtract %319 2 
					                                       f32_3 %323 = OpCompositeConstruct %320 %321 %322 
					                                       f32_3 %324 = OpFMul %311 %323 
					                                                      OpStore %159 %324 
					                                Private f32* %325 = OpAccessChain %48 %102 
					                                         f32 %326 = OpLoad %325 
					                                         f32 %327 = OpFNegate %326 
					                                Uniform f32* %328 = OpAccessChain %22 %312 
					                                         f32 %329 = OpLoad %328 
					                                         f32 %330 = OpFMul %327 %329 
					                                         f32 %331 = OpFAdd %330 %62 
					                                                      OpStore %30 %331 
					                                         f32 %332 = OpLoad %30 
					                                         f32 %333 = OpExtInst %1 43 %332 %61 %62 
					                                                      OpStore %30 %333 
					                              Uniform f32_4* %335 = OpAccessChain %22 %334 
					                                       f32_4 %336 = OpLoad %335 
					                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
					                                         f32 %338 = OpLoad %30 
					                                       f32_3 %339 = OpCompositeConstruct %338 %338 %338 
					                                       f32_3 %340 = OpFMul %337 %339 
					                                       f32_3 %341 = OpLoad %159 
					                                       f32_3 %342 = OpFAdd %340 %341 
					                                       f32_4 %343 = OpLoad %48 
					                                       f32_4 %344 = OpVectorShuffle %343 %342 4 1 5 6 
					                                                      OpStore %48 %344 
					                                       f32_3 %345 = OpLoad %36 
					                                       f32_4 %346 = OpLoad %48 
					                                       f32_3 %347 = OpVectorShuffle %346 %346 0 2 3 
					                                       f32_3 %348 = OpFMul %345 %347 
					                                                      OpStore %36 %348 
					                                       f32_3 %349 = OpLoad %57 
					                              Uniform f32_4* %350 = OpAccessChain %22 %41 
					                                       f32_4 %351 = OpLoad %350 
					                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
					                                         f32 %353 = OpDot %349 %352 
					                                                      OpStore %64 %353 
					                                         f32 %354 = OpLoad %64 
					                                         f32 %355 = OpExtInst %1 40 %354 %61 
					                                                      OpStore %64 %355 
					                                       f32_3 %356 = OpLoad %36 
					                                         f32 %357 = OpLoad %64 
					                                       f32_3 %358 = OpCompositeConstruct %357 %357 %357 
					                                       f32_3 %359 = OpFMul %356 %358 
					                                       f32_3 %360 = OpLoad %9 
					                                       f32_3 %361 = OpFAdd %359 %360 
					                                                      OpStore %9 %361 
					                                       f32_3 %363 = OpLoad %57 
					                                       f32_4 %364 = OpLoad %362 
					                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
					                                                      OpStore %362 %365 
					                                Private f32* %366 = OpAccessChain %362 %138 
					                                                      OpStore %366 %62 
					                              Uniform f32_4* %367 = OpAccessChain %22 %169 
					                                       f32_4 %368 = OpLoad %367 
					                                       f32_4 %369 = OpLoad %362 
					                                         f32 %370 = OpDot %368 %369 
					                                Private f32* %371 = OpAccessChain %294 %102 
					                                                      OpStore %371 %370 
					                              Uniform f32_4* %372 = OpAccessChain %22 %241 
					                                       f32_4 %373 = OpLoad %372 
					                                       f32_4 %374 = OpLoad %362 
					                                         f32 %375 = OpDot %373 %374 
					                                Private f32* %376 = OpAccessChain %294 %167 
					                                                      OpStore %376 %375 
					                              Uniform f32_4* %378 = OpAccessChain %22 %377 
					                                       f32_4 %379 = OpLoad %378 
					                                       f32_4 %380 = OpLoad %362 
					                                         f32 %381 = OpDot %379 %380 
					                                Private f32* %382 = OpAccessChain %294 %161 
					                                                      OpStore %382 %381 
					                                       f32_3 %383 = OpLoad %294 
					                                       f32_3 %385 = OpLoad %384 
					                                       f32_3 %386 = OpFAdd %383 %385 
					                                                      OpStore %294 %386 
					                                       f32_3 %387 = OpLoad %294 
					                                       f32_3 %389 = OpExtInst %1 40 %387 %388 
					                                                      OpStore %294 %389 
					                                       f32_3 %391 = OpLoad %294 
					                                       f32_3 %392 = OpExtInst %1 30 %391 
					                                                      OpStore %390 %392 
					                                       f32_3 %393 = OpLoad %390 
					                                       f32_3 %396 = OpFMul %393 %395 
					                                                      OpStore %390 %396 
					                                       f32_3 %397 = OpLoad %390 
					                                       f32_3 %398 = OpExtInst %1 29 %397 
					                                                      OpStore %390 %398 
					                                       f32_3 %399 = OpLoad %390 
					                                       f32_3 %402 = OpFMul %399 %401 
					                                       f32_3 %405 = OpFAdd %402 %404 
					                                                      OpStore %390 %405 
					                                       f32_3 %406 = OpLoad %390 
					                                       f32_3 %407 = OpExtInst %1 40 %406 %388 
					                                                      OpStore %390 %407 
					                                       f32_4 %408 = OpLoad %48 
					                                       f32_3 %409 = OpVectorShuffle %408 %408 0 2 3 
					                                       f32_3 %410 = OpLoad %390 
					                                       f32_3 %411 = OpFMul %409 %410 
					                                       f32_3 %412 = OpLoad %9 
					                                       f32_3 %413 = OpFAdd %411 %412 
					                                                      OpStore %294 %413 
					                read_only TextureCubeSampled %419 = OpLoad %418 
					                                       f32_3 %421 = OpLoad %420 
					                                       f32_4 %422 = OpImageSampleImplicitLod %419 %421 
					                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
					                                                      OpStore %414 %423 
					                                       f32_3 %425 = OpLoad %414 
					                              Uniform f32_4* %427 = OpAccessChain %22 %426 
					                                       f32_4 %428 = OpLoad %427 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFMul %425 %429 
					                                                      OpStore %424 %430 
					                                       f32_3 %433 = OpLoad %424 
					                                       f32_4 %434 = OpLoad %48 
					                                       f32_3 %435 = OpVectorShuffle %434 %434 1 1 1 
					                                       f32_3 %436 = OpFMul %433 %435 
					                                       f32_3 %437 = OpLoad %294 
					                                       f32_3 %438 = OpFAdd %436 %437 
					                                       f32_4 %439 = OpLoad %432 
					                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
					                                                      OpStore %432 %440 
					                                 Output f32* %442 = OpAccessChain %432 %138 
					                                                      OpStore %442 %62 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 400
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %115 %128 %188 %191 %194 %385 %393 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 RelaxedPrecision 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 RelaxedPrecision 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 RelaxedPrecision 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 RelaxedPrecision 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %88 0 BuiltIn 88 
					                                                      OpMemberDecorate %88 1 BuiltIn 88 
					                                                      OpMemberDecorate %88 2 BuiltIn 88 
					                                                      OpDecorate %88 Block 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %103 Location 103 
					                                                      OpDecorate %115 Location 115 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %188 Location 188 
					                                                      OpDecorate %191 Location 191 
					                                                      OpDecorate %194 Location 194 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %276 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %334 RelaxedPrecision 
					                                                      OpDecorate %347 RelaxedPrecision 
					                                                      OpDecorate %348 RelaxedPrecision 
					                                                      OpDecorate %351 RelaxedPrecision 
					                                                      OpDecorate %357 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %361 RelaxedPrecision 
					                                                      OpDecorate %362 RelaxedPrecision 
					                                                      OpDecorate %366 RelaxedPrecision 
					                                                      OpDecorate %367 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %372 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %374 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %385 Location 385 
					                                                      OpDecorate %391 RelaxedPrecision 
					                                                      OpDecorate %393 Location 393 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 8 
					                                              %17 = OpTypeArray %7 %16 
					                                          u32 %18 = OpConstant 4 
					                                              %19 = OpTypeArray %7 %18 
					                                              %20 = OpTypeArray %7 %18 
					                                              %21 = OpTypeArray %7 %18 
					                                              %22 = OpTypeStruct %14 %7 %7 %7 %7 %17 %7 %7 %7 %7 %19 %20 %21 %7 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 10 
					                                          i32 %27 = OpConstant 1 
					                                              %28 = OpTypePointer Uniform %7 
					                                          i32 %32 = OpConstant 0 
					                                          i32 %40 = OpConstant 2 
					                               Private f32_4* %48 = OpVariable Private 
					                                          i32 %50 = OpConstant 3 
					                               Private f32_4* %65 = OpVariable Private 
					                                          i32 %68 = OpConstant 12 
					                                          u32 %86 = OpConstant 1 
					                                              %87 = OpTypeArray %6 %86 
					                                              %88 = OpTypeStruct %7 %6 %87 
					                                              %89 = OpTypePointer Output %88 
					         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
					                                              %98 = OpTypePointer Output %7 
					                                             %100 = OpTypeVector %6 2 
					                                             %101 = OpTypePointer Output %100 
					                               Output f32_2* %102 = OpVariable Output 
					                                Input f32_4* %103 = OpVariable Input 
					                                         i32 %106 = OpConstant 13 
					                               Output f32_2* %115 = OpVariable Output 
					                                         f32 %116 = OpConstant 3.674022E-40 
					                                       f32_2 %117 = OpConstantComposite %116 %116 
					                                             %121 = OpTypePointer Uniform %14 
					                                             %127 = OpTypePointer Input %14 
					                                Input f32_3* %128 = OpVariable Input 
					                                         i32 %130 = OpConstant 11 
					                                         u32 %135 = OpConstant 0 
					                                             %136 = OpTypePointer Private %6 
					                                         u32 %149 = OpConstant 2 
					                                Private f32* %151 = OpVariable Private 
					                                             %187 = OpTypePointer Output %14 
					                               Output f32_3* %188 = OpVariable Output 
					                               Output f32_3* %191 = OpVariable Output 
					                               Output f32_3* %194 = OpVariable Output 
					                              Private f32_4* %203 = OpVariable Private 
					                              Private f32_4* %216 = OpVariable Private 
					                                         f32 %247 = OpConstant 3.674022E-40 
					                                       f32_4 %248 = OpConstantComposite %247 %247 %247 %247 
					                                         i32 %253 = OpConstant 4 
					                                         f32 %257 = OpConstant 3.674022E-40 
					                                       f32_4 %258 = OpConstantComposite %257 %257 %257 %257 
					                                       f32_4 %266 = OpConstantComposite %116 %116 %116 %116 
					                                         i32 %273 = OpConstant 5 
					                                         f32 %315 = OpConstant 3.674022E-40 
					                                       f32_3 %316 = OpConstantComposite %315 %315 %315 
					                                         f32 %318 = OpConstant 3.674022E-40 
					                                       f32_3 %319 = OpConstantComposite %318 %318 %318 
					                                         f32 %328 = OpConstant 3.674022E-40 
					                                       f32_3 %329 = OpConstantComposite %328 %328 %328 
					                                             %333 = OpTypePointer Private %14 
					                              Private f32_3* %334 = OpVariable Private 
					                              Private f32_4* %351 = OpVariable Private 
					                              Private f32_3* %357 = OpVariable Private 
					                                         i32 %358 = OpConstant 6 
					                                         i32 %364 = OpConstant 7 
					                                         i32 %370 = OpConstant 8 
					                                         i32 %376 = OpConstant 9 
					                               Output f32_3* %385 = OpVariable Output 
					                               Output f32_4* %393 = OpVariable Output 
					                                             %394 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %29 = OpAccessChain %24 %26 %27 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpFMul %13 %30 
					                                                      OpStore %9 %31 
					                               Uniform f32_4* %33 = OpAccessChain %24 %26 %32 
					                                        f32_4 %34 = OpLoad %33 
					                                        f32_4 %35 = OpLoad %11 
					                                        f32_4 %36 = OpVectorShuffle %35 %35 0 0 0 0 
					                                        f32_4 %37 = OpFMul %34 %36 
					                                        f32_4 %38 = OpLoad %9 
					                                        f32_4 %39 = OpFAdd %37 %38 
					                                                      OpStore %9 %39 
					                               Uniform f32_4* %41 = OpAccessChain %24 %26 %40 
					                                        f32_4 %42 = OpLoad %41 
					                                        f32_4 %43 = OpLoad %11 
					                                        f32_4 %44 = OpVectorShuffle %43 %43 2 2 2 2 
					                                        f32_4 %45 = OpFMul %42 %44 
					                                        f32_4 %46 = OpLoad %9 
					                                        f32_4 %47 = OpFAdd %45 %46 
					                                                      OpStore %9 %47 
					                                        f32_4 %49 = OpLoad %9 
					                               Uniform f32_4* %51 = OpAccessChain %24 %26 %50 
					                                        f32_4 %52 = OpLoad %51 
					                                        f32_4 %53 = OpFAdd %49 %52 
					                                                      OpStore %48 %53 
					                               Uniform f32_4* %54 = OpAccessChain %24 %26 %50 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_4 %57 = OpLoad %11 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
					                                        f32_3 %59 = OpFMul %56 %58 
					                                        f32_4 %60 = OpLoad %9 
					                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
					                                        f32_3 %62 = OpFAdd %59 %61 
					                                        f32_4 %63 = OpLoad %9 
					                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
					                                                      OpStore %9 %64 
					                                        f32_4 %66 = OpLoad %48 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
					                               Uniform f32_4* %69 = OpAccessChain %24 %68 %27 
					                                        f32_4 %70 = OpLoad %69 
					                                        f32_4 %71 = OpFMul %67 %70 
					                                                      OpStore %65 %71 
					                               Uniform f32_4* %72 = OpAccessChain %24 %68 %32 
					                                        f32_4 %73 = OpLoad %72 
					                                        f32_4 %74 = OpLoad %48 
					                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
					                                        f32_4 %76 = OpFMul %73 %75 
					                                        f32_4 %77 = OpLoad %65 
					                                        f32_4 %78 = OpFAdd %76 %77 
					                                                      OpStore %65 %78 
					                               Uniform f32_4* %79 = OpAccessChain %24 %68 %40 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_4 %81 = OpLoad %48 
					                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
					                                        f32_4 %83 = OpFMul %80 %82 
					                                        f32_4 %84 = OpLoad %65 
					                                        f32_4 %85 = OpFAdd %83 %84 
					                                                      OpStore %65 %85 
					                               Uniform f32_4* %91 = OpAccessChain %24 %68 %50 
					                                        f32_4 %92 = OpLoad %91 
					                                        f32_4 %93 = OpLoad %48 
					                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
					                                        f32_4 %95 = OpFMul %92 %94 
					                                        f32_4 %96 = OpLoad %65 
					                                        f32_4 %97 = OpFAdd %95 %96 
					                                Output f32_4* %99 = OpAccessChain %90 %32 
					                                                      OpStore %99 %97 
					                                       f32_4 %104 = OpLoad %103 
					                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
					                              Uniform f32_4* %107 = OpAccessChain %24 %106 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
					                                       f32_2 %110 = OpFMul %105 %109 
					                              Uniform f32_4* %111 = OpAccessChain %24 %106 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
					                                       f32_2 %114 = OpFAdd %110 %113 
					                                                      OpStore %102 %114 
					                                                      OpStore %115 %117 
					                                       f32_4 %118 = OpLoad %9 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_3 %120 = OpFNegate %119 
					                              Uniform f32_3* %122 = OpAccessChain %24 %32 
					                                       f32_3 %123 = OpLoad %122 
					                                       f32_3 %124 = OpFAdd %120 %123 
					                                       f32_4 %125 = OpLoad %48 
					                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
					                                                      OpStore %48 %126 
					                                       f32_3 %129 = OpLoad %128 
					                              Uniform f32_4* %131 = OpAccessChain %24 %130 %32 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %129 %133 
					                                Private f32* %137 = OpAccessChain %65 %135 
					                                                      OpStore %137 %134 
					                                       f32_3 %138 = OpLoad %128 
					                              Uniform f32_4* %139 = OpAccessChain %24 %130 %27 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %65 %86 
					                                                      OpStore %143 %142 
					                                       f32_3 %144 = OpLoad %128 
					                              Uniform f32_4* %145 = OpAccessChain %24 %130 %40 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %144 %147 
					                                Private f32* %150 = OpAccessChain %65 %149 
					                                                      OpStore %150 %148 
					                                       f32_4 %152 = OpLoad %65 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %65 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                                      OpStore %151 %156 
					                                         f32 %157 = OpLoad %151 
					                                         f32 %158 = OpExtInst %1 32 %157 
					                                                      OpStore %151 %158 
					                                         f32 %159 = OpLoad %151 
					                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
					                                       f32_4 %161 = OpLoad %65 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %65 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %65 %165 
					                                       f32_4 %166 = OpLoad %48 
					                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
					                                       f32_3 %168 = OpFNegate %167 
					                                       f32_4 %169 = OpLoad %65 
					                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
					                                         f32 %171 = OpDot %168 %170 
					                                                      OpStore %151 %171 
					                                         f32 %172 = OpLoad %151 
					                                         f32 %173 = OpLoad %151 
					                                         f32 %174 = OpFAdd %172 %173 
					                                                      OpStore %151 %174 
					                                       f32_4 %175 = OpLoad %65 
					                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
					                                         f32 %177 = OpLoad %151 
					                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
					                                       f32_3 %179 = OpFNegate %178 
					                                       f32_3 %180 = OpFMul %176 %179 
					                                       f32_4 %181 = OpLoad %48 
					                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
					                                       f32_3 %183 = OpFNegate %182 
					                                       f32_3 %184 = OpFAdd %180 %183 
					                                       f32_4 %185 = OpLoad %48 
					                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
					                                                      OpStore %48 %186 
					                                       f32_4 %189 = OpLoad %48 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                                      OpStore %188 %190 
					                                       f32_4 %192 = OpLoad %65 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                                      OpStore %191 %193 
					                                       f32_4 %195 = OpLoad %9 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                                      OpStore %194 %196 
					                                       f32_4 %197 = OpLoad %9 
					                                       f32_4 %198 = OpVectorShuffle %197 %197 0 0 0 0 
					                                       f32_4 %199 = OpFNegate %198 
					                              Uniform f32_4* %200 = OpAccessChain %24 %27 
					                                       f32_4 %201 = OpLoad %200 
					                                       f32_4 %202 = OpFAdd %199 %201 
					                                                      OpStore %48 %202 
					                                       f32_4 %204 = OpLoad %9 
					                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
					                                       f32_4 %206 = OpFNegate %205 
					                              Uniform f32_4* %207 = OpAccessChain %24 %40 
					                                       f32_4 %208 = OpLoad %207 
					                                       f32_4 %209 = OpFAdd %206 %208 
					                                                      OpStore %203 %209 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
					                                       f32_4 %212 = OpFNegate %211 
					                              Uniform f32_4* %213 = OpAccessChain %24 %50 
					                                       f32_4 %214 = OpLoad %213 
					                                       f32_4 %215 = OpFAdd %212 %214 
					                                                      OpStore %9 %215 
					                                       f32_4 %217 = OpLoad %65 
					                                       f32_4 %218 = OpVectorShuffle %217 %217 1 1 1 1 
					                                       f32_4 %219 = OpLoad %203 
					                                       f32_4 %220 = OpFMul %218 %219 
					                                                      OpStore %216 %220 
					                                       f32_4 %221 = OpLoad %203 
					                                       f32_4 %222 = OpLoad %203 
					                                       f32_4 %223 = OpFMul %221 %222 
					                                                      OpStore %203 %223 
					                                       f32_4 %224 = OpLoad %48 
					                                       f32_4 %225 = OpLoad %48 
					                                       f32_4 %226 = OpFMul %224 %225 
					                                       f32_4 %227 = OpLoad %203 
					                                       f32_4 %228 = OpFAdd %226 %227 
					                                                      OpStore %203 %228 
					                                       f32_4 %229 = OpLoad %48 
					                                       f32_4 %230 = OpLoad %65 
					                                       f32_4 %231 = OpVectorShuffle %230 %230 0 0 0 0 
					                                       f32_4 %232 = OpFMul %229 %231 
					                                       f32_4 %233 = OpLoad %216 
					                                       f32_4 %234 = OpFAdd %232 %233 
					                                                      OpStore %48 %234 
					                                       f32_4 %235 = OpLoad %9 
					                                       f32_4 %236 = OpLoad %65 
					                                       f32_4 %237 = OpVectorShuffle %236 %236 2 2 2 2 
					                                       f32_4 %238 = OpFMul %235 %237 
					                                       f32_4 %239 = OpLoad %48 
					                                       f32_4 %240 = OpFAdd %238 %239 
					                                                      OpStore %48 %240 
					                                       f32_4 %241 = OpLoad %9 
					                                       f32_4 %242 = OpLoad %9 
					                                       f32_4 %243 = OpFMul %241 %242 
					                                       f32_4 %244 = OpLoad %203 
					                                       f32_4 %245 = OpFAdd %243 %244 
					                                                      OpStore %9 %245 
					                                       f32_4 %246 = OpLoad %9 
					                                       f32_4 %249 = OpExtInst %1 40 %246 %248 
					                                                      OpStore %9 %249 
					                                       f32_4 %250 = OpLoad %9 
					                                       f32_4 %251 = OpExtInst %1 32 %250 
					                                                      OpStore %203 %251 
					                                       f32_4 %252 = OpLoad %9 
					                              Uniform f32_4* %254 = OpAccessChain %24 %253 
					                                       f32_4 %255 = OpLoad %254 
					                                       f32_4 %256 = OpFMul %252 %255 
					                                       f32_4 %259 = OpFAdd %256 %258 
					                                                      OpStore %9 %259 
					                                       f32_4 %260 = OpLoad %9 
					                                       f32_4 %261 = OpFDiv %258 %260 
					                                                      OpStore %9 %261 
					                                       f32_4 %262 = OpLoad %48 
					                                       f32_4 %263 = OpLoad %203 
					                                       f32_4 %264 = OpFMul %262 %263 
					                                                      OpStore %48 %264 
					                                       f32_4 %265 = OpLoad %48 
					                                       f32_4 %267 = OpExtInst %1 40 %265 %266 
					                                                      OpStore %48 %267 
					                                       f32_4 %268 = OpLoad %9 
					                                       f32_4 %269 = OpLoad %48 
					                                       f32_4 %270 = OpFMul %268 %269 
					                                                      OpStore %9 %270 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 1 1 1 
					                              Uniform f32_4* %274 = OpAccessChain %24 %273 %27 
					                                       f32_4 %275 = OpLoad %274 
					                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
					                                       f32_3 %277 = OpFMul %272 %276 
					                                       f32_4 %278 = OpLoad %48 
					                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
					                                                      OpStore %48 %279 
					                              Uniform f32_4* %280 = OpAccessChain %24 %273 %32 
					                                       f32_4 %281 = OpLoad %280 
					                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
					                                       f32_4 %283 = OpLoad %9 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
					                                       f32_3 %285 = OpFMul %282 %284 
					                                       f32_4 %286 = OpLoad %48 
					                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
					                                       f32_3 %288 = OpFAdd %285 %287 
					                                       f32_4 %289 = OpLoad %48 
					                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
					                                                      OpStore %48 %290 
					                              Uniform f32_4* %291 = OpAccessChain %24 %273 %40 
					                                       f32_4 %292 = OpLoad %291 
					                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
					                                       f32_4 %294 = OpLoad %9 
					                                       f32_3 %295 = OpVectorShuffle %294 %294 2 2 2 
					                                       f32_3 %296 = OpFMul %293 %295 
					                                       f32_4 %297 = OpLoad %48 
					                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
					                                       f32_3 %299 = OpFAdd %296 %298 
					                                       f32_4 %300 = OpLoad %9 
					                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
					                                                      OpStore %9 %301 
					                              Uniform f32_4* %302 = OpAccessChain %24 %273 %50 
					                                       f32_4 %303 = OpLoad %302 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 3 3 3 
					                                       f32_3 %307 = OpFMul %304 %306 
					                                       f32_4 %308 = OpLoad %9 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFAdd %307 %309 
					                                       f32_4 %311 = OpLoad %9 
					                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
					                                                      OpStore %9 %312 
					                                       f32_4 %313 = OpLoad %9 
					                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
					                                       f32_3 %317 = OpFMul %314 %316 
					                                       f32_3 %320 = OpFAdd %317 %319 
					                                       f32_4 %321 = OpLoad %48 
					                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
					                                                      OpStore %48 %322 
					                                       f32_4 %323 = OpLoad %9 
					                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
					                                       f32_4 %325 = OpLoad %48 
					                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
					                                       f32_3 %327 = OpFMul %324 %326 
					                                       f32_3 %330 = OpFAdd %327 %329 
					                                       f32_4 %331 = OpLoad %48 
					                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
					                                                      OpStore %48 %332 
					                                Private f32* %335 = OpAccessChain %65 %86 
					                                         f32 %336 = OpLoad %335 
					                                Private f32* %337 = OpAccessChain %65 %86 
					                                         f32 %338 = OpLoad %337 
					                                         f32 %339 = OpFMul %336 %338 
					                                Private f32* %340 = OpAccessChain %334 %135 
					                                                      OpStore %340 %339 
					                                Private f32* %341 = OpAccessChain %65 %135 
					                                         f32 %342 = OpLoad %341 
					                                Private f32* %343 = OpAccessChain %65 %135 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                Private f32* %346 = OpAccessChain %334 %135 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpFNegate %347 
					                                         f32 %349 = OpFAdd %345 %348 
					                                Private f32* %350 = OpAccessChain %334 %135 
					                                                      OpStore %350 %349 
					                                       f32_4 %352 = OpLoad %65 
					                                       f32_4 %353 = OpVectorShuffle %352 %352 1 2 2 0 
					                                       f32_4 %354 = OpLoad %65 
					                                       f32_4 %355 = OpVectorShuffle %354 %354 0 1 2 2 
					                                       f32_4 %356 = OpFMul %353 %355 
					                                                      OpStore %351 %356 
					                              Uniform f32_4* %359 = OpAccessChain %24 %358 
					                                       f32_4 %360 = OpLoad %359 
					                                       f32_4 %361 = OpLoad %351 
					                                         f32 %362 = OpDot %360 %361 
					                                Private f32* %363 = OpAccessChain %357 %135 
					                                                      OpStore %363 %362 
					                              Uniform f32_4* %365 = OpAccessChain %24 %364 
					                                       f32_4 %366 = OpLoad %365 
					                                       f32_4 %367 = OpLoad %351 
					                                         f32 %368 = OpDot %366 %367 
					                                Private f32* %369 = OpAccessChain %357 %86 
					                                                      OpStore %369 %368 
					                              Uniform f32_4* %371 = OpAccessChain %24 %370 
					                                       f32_4 %372 = OpLoad %371 
					                                       f32_4 %373 = OpLoad %351 
					                                         f32 %374 = OpDot %372 %373 
					                                Private f32* %375 = OpAccessChain %357 %149 
					                                                      OpStore %375 %374 
					                              Uniform f32_4* %377 = OpAccessChain %24 %376 
					                                       f32_4 %378 = OpLoad %377 
					                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
					                                       f32_3 %380 = OpLoad %334 
					                                       f32_3 %381 = OpVectorShuffle %380 %380 0 0 0 
					                                       f32_3 %382 = OpFMul %379 %381 
					                                       f32_3 %383 = OpLoad %357 
					                                       f32_3 %384 = OpFAdd %382 %383 
					                                                      OpStore %334 %384 
					                                       f32_4 %386 = OpLoad %9 
					                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
					                                       f32_4 %388 = OpLoad %48 
					                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
					                                       f32_3 %390 = OpFMul %387 %389 
					                                       f32_3 %391 = OpLoad %334 
					                                       f32_3 %392 = OpFAdd %390 %391 
					                                                      OpStore %385 %392 
					                                                      OpStore %393 %266 
					                                 Output f32* %395 = OpAccessChain %90 %32 %86 
					                                         f32 %396 = OpLoad %395 
					                                         f32 %397 = OpFNegate %396 
					                                 Output f32* %398 = OpAccessChain %90 %32 %86 
					                                                      OpStore %398 %397 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 445
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %57 %135 %384 %420 %432 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 RelaxedPrecision 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpMemberDecorate %20 9 RelaxedPrecision 
					                                                      OpMemberDecorate %20 9 Offset 20 
					                                                      OpMemberDecorate %20 10 RelaxedPrecision 
					                                                      OpMemberDecorate %20 10 Offset 20 
					                                                      OpMemberDecorate %20 11 RelaxedPrecision 
					                                                      OpMemberDecorate %20 11 Offset 20 
					                                                      OpMemberDecorate %20 12 RelaxedPrecision 
					                                                      OpMemberDecorate %20 12 Offset 20 
					                                                      OpMemberDecorate %20 13 RelaxedPrecision 
					                                                      OpMemberDecorate %20 13 Offset 20 
					                                                      OpMemberDecorate %20 14 Offset 20 
					                                                      OpMemberDecorate %20 15 Offset 20 
					                                                      OpMemberDecorate %20 16 Offset 20 
					                                                      OpMemberDecorate %20 17 Offset 20 
					                                                      OpMemberDecorate %20 18 RelaxedPrecision 
					                                                      OpMemberDecorate %20 18 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpDecorate %36 RelaxedPrecision 
					                                                      OpDecorate %44 RelaxedPrecision 
					                                                      OpDecorate %45 RelaxedPrecision 
					                                                      OpDecorate %57 Location 57 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %91 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %119 RelaxedPrecision 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %132 DescriptorSet 132 
					                                                      OpDecorate %132 Binding 132 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %135 Location 135 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %156 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %259 DescriptorSet 259 
					                                                      OpDecorate %259 Binding 259 
					                                                      OpDecorate %260 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %267 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %287 RelaxedPrecision 
					                                                      OpDecorate %288 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %294 RelaxedPrecision 
					                                                      OpDecorate %295 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %299 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %311 RelaxedPrecision 
					                                                      OpDecorate %319 RelaxedPrecision 
					                                                      OpDecorate %320 RelaxedPrecision 
					                                                      OpDecorate %321 RelaxedPrecision 
					                                                      OpDecorate %322 RelaxedPrecision 
					                                                      OpDecorate %323 RelaxedPrecision 
					                                                      OpDecorate %324 RelaxedPrecision 
					                                                      OpDecorate %336 RelaxedPrecision 
					                                                      OpDecorate %337 RelaxedPrecision 
					                                                      OpDecorate %339 RelaxedPrecision 
					                                                      OpDecorate %340 RelaxedPrecision 
					                                                      OpDecorate %345 RelaxedPrecision 
					                                                      OpDecorate %351 RelaxedPrecision 
					                                                      OpDecorate %352 RelaxedPrecision 
					                                                      OpDecorate %354 RelaxedPrecision 
					                                                      OpDecorate %355 RelaxedPrecision 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %357 RelaxedPrecision 
					                                                      OpDecorate %358 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate %384 Location 384 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate %387 RelaxedPrecision 
					                                                      OpDecorate %389 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %391 RelaxedPrecision 
					                                                      OpDecorate %392 RelaxedPrecision 
					                                                      OpDecorate %393 RelaxedPrecision 
					                                                      OpDecorate %396 RelaxedPrecision 
					                                                      OpDecorate %397 RelaxedPrecision 
					                                                      OpDecorate %398 RelaxedPrecision 
					                                                      OpDecorate %399 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %406 RelaxedPrecision 
					                                                      OpDecorate %407 RelaxedPrecision 
					                                                      OpDecorate %410 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %418 DescriptorSet 418 
					                                                      OpDecorate %418 Binding 418 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate %421 RelaxedPrecision 
					                                                      OpDecorate %423 RelaxedPrecision 
					                                                      OpDecorate %424 RelaxedPrecision 
					                                                      OpDecorate %425 RelaxedPrecision 
					                                                      OpDecorate %428 RelaxedPrecision 
					                                                      OpDecorate %429 RelaxedPrecision 
					                                                      OpDecorate %430 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate %432 Location 432 
					                                                      OpDecorate %433 RelaxedPrecision 
					                                                      OpDecorate %437 RelaxedPrecision 
					                                                      OpDecorate %444 RelaxedPrecision 
					                                                      OpDecorate %444 DescriptorSet 444 
					                                                      OpDecorate %444 Binding 444 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 16 
					                                              %17 = OpTypeArray %14 %16 
					                                          u32 %18 = OpConstant 4 
					                                              %19 = OpTypeArray %14 %18 
					                                              %20 = OpTypeStruct %7 %14 %14 %14 %14 %17 %14 %14 %19 %14 %14 %14 %14 %6 %6 %6 %6 %6 %14 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                              %25 = OpTypePointer Uniform %7 
					                                              %29 = OpTypePointer Private %6 
					                                 Private f32* %30 = OpVariable Private 
					                               Private f32_3* %36 = OpVariable Private 
					                                          i32 %41 = OpConstant 1 
					                                              %42 = OpTypePointer Uniform %14 
					                                              %47 = OpTypePointer Private %14 
					                               Private f32_4* %48 = OpVariable Private 
					                                 Input f32_3* %57 = OpVariable Input 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                          f32 %62 = OpConstant 3.674022E-40 
					                                 Private f32* %64 = OpVariable Private 
					                                 Private f32* %68 = OpVariable Private 
					                                              %72 = OpTypeVector %6 2 
					                                          i32 %74 = OpConstant 16 
					                                              %75 = OpTypePointer Uniform %6 
					                                          i32 %78 = OpConstant 14 
					                                         u32 %102 = OpConstant 0 
					                                         i32 %111 = OpConstant 13 
					                                         f32 %114 = OpConstant 3.674022E-40 
					                                Private f32* %128 = OpVariable Private 
					                                             %129 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %130 = OpTypeSampledImage %129 
					                                             %131 = OpTypePointer UniformConstant %130 
					 UniformConstant read_only Texture2DSampled* %132 = OpVariable UniformConstant 
					                                             %134 = OpTypePointer Input %72 
					                                Input f32_2* %135 = OpVariable Input 
					                                         u32 %138 = OpConstant 3 
					                                Private f32* %145 = OpVariable Private 
					                                         i32 %148 = OpConstant 15 
					                                         i32 %152 = OpConstant 10 
					                              Private f32_3* %159 = OpVariable Private 
					                                         i32 %160 = OpConstant 8 
					                                         u32 %161 = OpConstant 2 
					                                         u32 %167 = OpConstant 1 
					                                         i32 %169 = OpConstant 2 
					                                         i32 %178 = OpConstant 7 
					                                Private f32* %184 = OpVariable Private 
					                                         i32 %205 = OpConstant 6 
					                                         i32 %219 = OpConstant 5 
					                                         i32 %241 = OpConstant 3 
					                                             %246 = OpTypePointer Function %7 
					                                Private f32* %255 = OpVariable Private 
					                                             %256 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
					                                             %257 = OpTypeSampledImage %256 
					                                             %258 = OpTypePointer UniformConstant %257 
					 UniformConstant read_only Texture2DSampled* %259 = OpVariable UniformConstant 
					                                         i32 %289 = OpConstant 9 
					                              Private f32_3* %294 = OpVariable Private 
					                                         i32 %306 = OpConstant 18 
					                                         i32 %312 = OpConstant 17 
					                                         i32 %334 = OpConstant 11 
					                              Private f32_4* %362 = OpVariable Private 
					                                         i32 %377 = OpConstant 4 
					                                Input f32_3* %384 = OpVariable Input 
					                                       f32_3 %388 = OpConstantComposite %61 %61 %61 
					                              Private f32_3* %390 = OpVariable Private 
					                                         f32 %394 = OpConstant 3.674022E-40 
					                                       f32_3 %395 = OpConstantComposite %394 %394 %394 
					                                         f32 %400 = OpConstant 3.674022E-40 
					                                       f32_3 %401 = OpConstantComposite %400 %400 %400 
					                                         f32 %403 = OpConstant 3.674022E-40 
					                                       f32_3 %404 = OpConstantComposite %403 %403 %403 
					                              Private f32_3* %414 = OpVariable Private 
					                                             %415 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %416 = OpTypeSampledImage %415 
					                                             %417 = OpTypePointer UniformConstant %416 
					UniformConstant read_only TextureCubeSampled* %418 = OpVariable UniformConstant 
					                                Input f32_3* %420 = OpVariable Input 
					                              Private f32_3* %424 = OpVariable Private 
					                                         i32 %426 = OpConstant 12 
					                                             %431 = OpTypePointer Output %14 
					                               Output f32_4* %432 = OpVariable Output 
					                                             %441 = OpTypePointer Output %6 
					 UniformConstant read_only Texture2DSampled* %444 = OpVariable UniformConstant 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %247 = OpVariable Function 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %26 = OpAccessChain %22 %24 
					                                        f32_3 %27 = OpLoad %26 
					                                        f32_3 %28 = OpFAdd %13 %27 
					                                                      OpStore %9 %28 
					                                        f32_3 %31 = OpLoad %9 
					                                        f32_3 %32 = OpLoad %9 
					                                          f32 %33 = OpDot %31 %32 
					                                                      OpStore %30 %33 
					                                          f32 %34 = OpLoad %30 
					                                          f32 %35 = OpExtInst %1 32 %34 
					                                                      OpStore %30 %35 
					                                        f32_3 %37 = OpLoad %9 
					                                          f32 %38 = OpLoad %30 
					                                        f32_3 %39 = OpCompositeConstruct %38 %38 %38 
					                                        f32_3 %40 = OpFMul %37 %39 
					                               Uniform f32_4* %43 = OpAccessChain %22 %41 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %46 = OpFAdd %40 %45 
					                                                      OpStore %36 %46 
					                                          f32 %49 = OpLoad %30 
					                                        f32_3 %50 = OpCompositeConstruct %49 %49 %49 
					                                        f32_3 %51 = OpLoad %9 
					                                        f32_3 %52 = OpFMul %50 %51 
					                                        f32_4 %53 = OpLoad %48 
					                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
					                                                      OpStore %48 %54 
					                                        f32_4 %55 = OpLoad %48 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_3 %58 = OpLoad %57 
					                                          f32 %59 = OpDot %56 %58 
					                                                      OpStore %30 %59 
					                                          f32 %60 = OpLoad %30 
					                                          f32 %63 = OpExtInst %1 43 %60 %61 %62 
					                                                      OpStore %30 %63 
					                                          f32 %65 = OpLoad %30 
					                                          f32 %66 = OpFNegate %65 
					                                          f32 %67 = OpFAdd %66 %62 
					                                                      OpStore %64 %67 
					                                          f32 %69 = OpLoad %64 
					                                          f32 %70 = OpExtInst %1 30 %69 
					                                                      OpStore %68 %70 
					                                          f32 %71 = OpLoad %68 
					                                        f32_2 %73 = OpCompositeConstruct %71 %71 
					                                 Uniform f32* %76 = OpAccessChain %22 %74 
					                                          f32 %77 = OpLoad %76 
					                                 Uniform f32* %79 = OpAccessChain %22 %78 
					                                          f32 %80 = OpLoad %79 
					                                        f32_2 %81 = OpCompositeConstruct %77 %80 
					                                        f32_2 %82 = OpFMul %73 %81 
					                                        f32_4 %83 = OpLoad %48 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 2 3 
					                                                      OpStore %48 %84 
					                                        f32_4 %85 = OpLoad %48 
					                                        f32_2 %86 = OpVectorShuffle %85 %85 0 1 
					                                        f32_2 %87 = OpExtInst %1 29 %86 
					                                        f32_4 %88 = OpLoad %48 
					                                        f32_4 %89 = OpVectorShuffle %88 %87 4 5 2 3 
					                                                      OpStore %48 %89 
					                                        f32_3 %90 = OpLoad %36 
					                                        f32_3 %91 = OpLoad %36 
					                                          f32 %92 = OpDot %90 %91 
					                                                      OpStore %64 %92 
					                                          f32 %93 = OpLoad %64 
					                                          f32 %94 = OpExtInst %1 32 %93 
					                                                      OpStore %64 %94 
					                                          f32 %95 = OpLoad %64 
					                                        f32_3 %96 = OpCompositeConstruct %95 %95 %95 
					                                        f32_3 %97 = OpLoad %36 
					                                        f32_3 %98 = OpFMul %96 %97 
					                                                      OpStore %36 %98 
					                                        f32_3 %99 = OpLoad %57 
					                                       f32_3 %100 = OpLoad %36 
					                                         f32 %101 = OpDot %99 %100 
					                                Private f32* %103 = OpAccessChain %36 %102 
					                                                      OpStore %103 %101 
					                                Private f32* %104 = OpAccessChain %36 %102 
					                                         f32 %105 = OpLoad %104 
					                                         f32 %106 = OpExtInst %1 40 %105 %61 
					                                Private f32* %107 = OpAccessChain %36 %102 
					                                                      OpStore %107 %106 
					                                Private f32* %108 = OpAccessChain %36 %102 
					                                         f32 %109 = OpLoad %108 
					                                         f32 %110 = OpExtInst %1 30 %109 
					                                                      OpStore %68 %110 
					                                Uniform f32* %112 = OpAccessChain %22 %111 
					                                         f32 %113 = OpLoad %112 
					                                         f32 %115 = OpFMul %113 %114 
					                                Private f32* %116 = OpAccessChain %36 %102 
					                                                      OpStore %116 %115 
					                                         f32 %117 = OpLoad %68 
					                                Private f32* %118 = OpAccessChain %36 %102 
					                                         f32 %119 = OpLoad %118 
					                                         f32 %120 = OpFMul %117 %119 
					                                                      OpStore %68 %120 
					                                         f32 %121 = OpLoad %68 
					                                         f32 %122 = OpExtInst %1 29 %121 
					                                                      OpStore %68 %122 
					                                Private f32* %123 = OpAccessChain %48 %102 
					                                         f32 %124 = OpLoad %123 
					                                         f32 %125 = OpFNegate %124 
					                                         f32 %126 = OpFAdd %125 %62 
					                                Private f32* %127 = OpAccessChain %36 %102 
					                                                      OpStore %127 %126 
					                  read_only Texture2DSampled %133 = OpLoad %132 
					                                       f32_2 %136 = OpLoad %135 
					                                       f32_4 %137 = OpImageSampleImplicitLod %133 %136 
					                                         f32 %139 = OpCompositeExtract %137 3 
					                                                      OpStore %128 %139 
					                                Private f32* %140 = OpAccessChain %36 %102 
					                                         f32 %141 = OpLoad %140 
					                                         f32 %142 = OpLoad %128 
					                                         f32 %143 = OpFMul %141 %142 
					                                Private f32* %144 = OpAccessChain %36 %102 
					                                                      OpStore %144 %143 
					                                Private f32* %146 = OpAccessChain %36 %102 
					                                         f32 %147 = OpLoad %146 
					                                Uniform f32* %149 = OpAccessChain %22 %148 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpFMul %147 %150 
					                                Uniform f32* %153 = OpAccessChain %22 %152 %138 
					                                         f32 %154 = OpLoad %153 
					                                         f32 %155 = OpFAdd %151 %154 
					                                                      OpStore %145 %155 
					                                         f32 %156 = OpLoad %68 
					                                         f32 %157 = OpLoad %145 
					                                         f32 %158 = OpFMul %156 %157 
					                                                      OpStore %30 %158 
					                                Uniform f32* %162 = OpAccessChain %22 %160 %24 %161 
					                                         f32 %163 = OpLoad %162 
					                                Private f32* %164 = OpAccessChain %159 %102 
					                                                      OpStore %164 %163 
					                                Uniform f32* %165 = OpAccessChain %22 %160 %41 %161 
					                                         f32 %166 = OpLoad %165 
					                                Private f32* %168 = OpAccessChain %159 %167 
					                                                      OpStore %168 %166 
					                                Uniform f32* %170 = OpAccessChain %22 %160 %169 %161 
					                                         f32 %171 = OpLoad %170 
					                                Private f32* %172 = OpAccessChain %159 %161 
					                                                      OpStore %172 %171 
					                                       f32_3 %173 = OpLoad %9 
					                                       f32_3 %174 = OpLoad %159 
					                                         f32 %175 = OpDot %173 %174 
					                                Private f32* %176 = OpAccessChain %9 %102 
					                                                      OpStore %176 %175 
					                                       f32_3 %177 = OpLoad %11 
					                              Uniform f32_4* %179 = OpAccessChain %22 %178 
					                                       f32_4 %180 = OpLoad %179 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFAdd %177 %182 
					                                                      OpStore %159 %183 
					                                       f32_3 %185 = OpLoad %159 
					                                       f32_3 %186 = OpLoad %159 
					                                         f32 %187 = OpDot %185 %186 
					                                                      OpStore %184 %187 
					                                         f32 %188 = OpLoad %184 
					                                         f32 %189 = OpExtInst %1 31 %188 
					                                                      OpStore %184 %189 
					                                Private f32* %190 = OpAccessChain %9 %102 
					                                         f32 %191 = OpLoad %190 
					                                         f32 %192 = OpFNegate %191 
					                                         f32 %193 = OpLoad %184 
					                                         f32 %194 = OpFAdd %192 %193 
					                                                      OpStore %184 %194 
					                                Uniform f32* %195 = OpAccessChain %22 %178 %138 
					                                         f32 %196 = OpLoad %195 
					                                         f32 %197 = OpLoad %184 
					                                         f32 %198 = OpFMul %196 %197 
					                                Private f32* %199 = OpAccessChain %9 %102 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpFAdd %198 %200 
					                                Private f32* %202 = OpAccessChain %9 %102 
					                                                      OpStore %202 %201 
					                                Private f32* %203 = OpAccessChain %9 %102 
					                                         f32 %204 = OpLoad %203 
					                                Uniform f32* %206 = OpAccessChain %22 %205 %161 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFMul %204 %207 
					                                Uniform f32* %209 = OpAccessChain %22 %205 %138 
					                                         f32 %210 = OpLoad %209 
					                                         f32 %211 = OpFAdd %208 %210 
					                                Private f32* %212 = OpAccessChain %9 %102 
					                                                      OpStore %212 %211 
					                                Private f32* %213 = OpAccessChain %9 %102 
					                                         f32 %214 = OpLoad %213 
					                                         f32 %215 = OpExtInst %1 43 %214 %61 %62 
					                                Private f32* %216 = OpAccessChain %9 %102 
					                                                      OpStore %216 %215 
					                                       f32_3 %217 = OpLoad %11 
					                                       f32_3 %218 = OpVectorShuffle %217 %217 1 1 1 
					                              Uniform f32_4* %220 = OpAccessChain %22 %219 %41 
					                                       f32_4 %221 = OpLoad %220 
					                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
					                                       f32_3 %223 = OpFMul %218 %222 
					                                                      OpStore %159 %223 
					                              Uniform f32_4* %224 = OpAccessChain %22 %219 %24 
					                                       f32_4 %225 = OpLoad %224 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpLoad %11 
					                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
					                                       f32_3 %229 = OpFMul %226 %228 
					                                       f32_3 %230 = OpLoad %159 
					                                       f32_3 %231 = OpFAdd %229 %230 
					                                                      OpStore %159 %231 
					                              Uniform f32_4* %232 = OpAccessChain %22 %219 %169 
					                                       f32_4 %233 = OpLoad %232 
					                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
					                                       f32_3 %235 = OpLoad %11 
					                                       f32_3 %236 = OpVectorShuffle %235 %235 2 2 2 
					                                       f32_3 %237 = OpFMul %234 %236 
					                                       f32_3 %238 = OpLoad %159 
					                                       f32_3 %239 = OpFAdd %237 %238 
					                                                      OpStore %159 %239 
					                                       f32_3 %240 = OpLoad %159 
					                              Uniform f32_4* %242 = OpAccessChain %22 %219 %241 
					                                       f32_4 %243 = OpLoad %242 
					                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
					                                       f32_3 %245 = OpFAdd %240 %244 
					                                                      OpStore %159 %245 
					                                       f32_3 %248 = OpLoad %159 
					                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
					                                Private f32* %250 = OpAccessChain %159 %161 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpCompositeExtract %249 0 
					                                         f32 %253 = OpCompositeExtract %249 1 
					                                       f32_3 %254 = OpCompositeConstruct %252 %253 %251 
					                                                      OpStore %247 %254 
					                  read_only Texture2DSampled %260 = OpLoad %259 
					                                       f32_3 %261 = OpLoad %247 
					                                         f32 %262 = OpCompositeExtract %261 2 
					                                         f32 %263 = OpImageSampleDrefExplicitLod %260 %261 %262 Lod %6 
					                                                      OpStore %255 %263 
					                                Uniform f32* %264 = OpAccessChain %22 %205 %102 
					                                         f32 %265 = OpLoad %264 
					                                         f32 %266 = OpFNegate %265 
					                                         f32 %267 = OpFAdd %266 %62 
					                                Private f32* %268 = OpAccessChain %36 %102 
					                                                      OpStore %268 %267 
					                                         f32 %269 = OpLoad %255 
					                                Private f32* %270 = OpAccessChain %36 %102 
					                                         f32 %271 = OpLoad %270 
					                                         f32 %272 = OpFMul %269 %271 
					                                Uniform f32* %273 = OpAccessChain %22 %205 %102 
					                                         f32 %274 = OpLoad %273 
					                                         f32 %275 = OpFAdd %272 %274 
					                                Private f32* %276 = OpAccessChain %36 %102 
					                                                      OpStore %276 %275 
					                                Private f32* %277 = OpAccessChain %9 %102 
					                                         f32 %278 = OpLoad %277 
					                                Private f32* %279 = OpAccessChain %36 %102 
					                                         f32 %280 = OpLoad %279 
					                                         f32 %281 = OpFAdd %278 %280 
					                                Private f32* %282 = OpAccessChain %36 %102 
					                                                      OpStore %282 %281 
					                                Private f32* %283 = OpAccessChain %36 %102 
					                                         f32 %284 = OpLoad %283 
					                                         f32 %285 = OpExtInst %1 43 %284 %61 %62 
					                                Private f32* %286 = OpAccessChain %36 %102 
					                                                      OpStore %286 %285 
					                                       f32_3 %287 = OpLoad %36 
					                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
					                              Uniform f32_4* %290 = OpAccessChain %22 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_3 %293 = OpFMul %288 %292 
					                                                      OpStore %36 %293 
					                                       f32_3 %295 = OpLoad %36 
					                              Uniform f32_4* %296 = OpAccessChain %22 %152 
					                                       f32_4 %297 = OpLoad %296 
					                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
					                                       f32_3 %299 = OpFMul %295 %298 
					                                                      OpStore %294 %299 
					                                         f32 %300 = OpLoad %30 
					                                       f32_3 %301 = OpCompositeConstruct %300 %300 %300 
					                                       f32_3 %302 = OpLoad %294 
					                                       f32_3 %303 = OpFMul %301 %302 
					                                                      OpStore %9 %303 
					                                       f32_4 %304 = OpLoad %48 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 0 0 
					                              Uniform f32_4* %307 = OpAccessChain %22 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %305 %309 
					                                                      OpStore %294 %310 
					                                       f32_3 %311 = OpLoad %294 
					                                Uniform f32* %313 = OpAccessChain %22 %312 
					                                         f32 %314 = OpLoad %313 
					                                Uniform f32* %315 = OpAccessChain %22 %312 
					                                         f32 %316 = OpLoad %315 
					                                Uniform f32* %317 = OpAccessChain %22 %312 
					                                         f32 %318 = OpLoad %317 
					                                       f32_3 %319 = OpCompositeConstruct %314 %316 %318 
					                                         f32 %320 = OpCompositeExtract %319 0 
					                                         f32 %321 = OpCompositeExtract %319 1 
					                                         f32 %322 = OpCompositeExtract %319 2 
					                                       f32_3 %323 = OpCompositeConstruct %320 %321 %322 
					                                       f32_3 %324 = OpFMul %311 %323 
					                                                      OpStore %159 %324 
					                                Private f32* %325 = OpAccessChain %48 %102 
					                                         f32 %326 = OpLoad %325 
					                                         f32 %327 = OpFNegate %326 
					                                Uniform f32* %328 = OpAccessChain %22 %312 
					                                         f32 %329 = OpLoad %328 
					                                         f32 %330 = OpFMul %327 %329 
					                                         f32 %331 = OpFAdd %330 %62 
					                                                      OpStore %30 %331 
					                                         f32 %332 = OpLoad %30 
					                                         f32 %333 = OpExtInst %1 43 %332 %61 %62 
					                                                      OpStore %30 %333 
					                              Uniform f32_4* %335 = OpAccessChain %22 %334 
					                                       f32_4 %336 = OpLoad %335 
					                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
					                                         f32 %338 = OpLoad %30 
					                                       f32_3 %339 = OpCompositeConstruct %338 %338 %338 
					                                       f32_3 %340 = OpFMul %337 %339 
					                                       f32_3 %341 = OpLoad %159 
					                                       f32_3 %342 = OpFAdd %340 %341 
					                                       f32_4 %343 = OpLoad %48 
					                                       f32_4 %344 = OpVectorShuffle %343 %342 4 1 5 6 
					                                                      OpStore %48 %344 
					                                       f32_3 %345 = OpLoad %36 
					                                       f32_4 %346 = OpLoad %48 
					                                       f32_3 %347 = OpVectorShuffle %346 %346 0 2 3 
					                                       f32_3 %348 = OpFMul %345 %347 
					                                                      OpStore %36 %348 
					                                       f32_3 %349 = OpLoad %57 
					                              Uniform f32_4* %350 = OpAccessChain %22 %41 
					                                       f32_4 %351 = OpLoad %350 
					                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
					                                         f32 %353 = OpDot %349 %352 
					                                                      OpStore %64 %353 
					                                         f32 %354 = OpLoad %64 
					                                         f32 %355 = OpExtInst %1 40 %354 %61 
					                                                      OpStore %64 %355 
					                                       f32_3 %356 = OpLoad %36 
					                                         f32 %357 = OpLoad %64 
					                                       f32_3 %358 = OpCompositeConstruct %357 %357 %357 
					                                       f32_3 %359 = OpFMul %356 %358 
					                                       f32_3 %360 = OpLoad %9 
					                                       f32_3 %361 = OpFAdd %359 %360 
					                                                      OpStore %9 %361 
					                                       f32_3 %363 = OpLoad %57 
					                                       f32_4 %364 = OpLoad %362 
					                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
					                                                      OpStore %362 %365 
					                                Private f32* %366 = OpAccessChain %362 %138 
					                                                      OpStore %366 %62 
					                              Uniform f32_4* %367 = OpAccessChain %22 %169 
					                                       f32_4 %368 = OpLoad %367 
					                                       f32_4 %369 = OpLoad %362 
					                                         f32 %370 = OpDot %368 %369 
					                                Private f32* %371 = OpAccessChain %294 %102 
					                                                      OpStore %371 %370 
					                              Uniform f32_4* %372 = OpAccessChain %22 %241 
					                                       f32_4 %373 = OpLoad %372 
					                                       f32_4 %374 = OpLoad %362 
					                                         f32 %375 = OpDot %373 %374 
					                                Private f32* %376 = OpAccessChain %294 %167 
					                                                      OpStore %376 %375 
					                              Uniform f32_4* %378 = OpAccessChain %22 %377 
					                                       f32_4 %379 = OpLoad %378 
					                                       f32_4 %380 = OpLoad %362 
					                                         f32 %381 = OpDot %379 %380 
					                                Private f32* %382 = OpAccessChain %294 %161 
					                                                      OpStore %382 %381 
					                                       f32_3 %383 = OpLoad %294 
					                                       f32_3 %385 = OpLoad %384 
					                                       f32_3 %386 = OpFAdd %383 %385 
					                                                      OpStore %294 %386 
					                                       f32_3 %387 = OpLoad %294 
					                                       f32_3 %389 = OpExtInst %1 40 %387 %388 
					                                                      OpStore %294 %389 
					                                       f32_3 %391 = OpLoad %294 
					                                       f32_3 %392 = OpExtInst %1 30 %391 
					                                                      OpStore %390 %392 
					                                       f32_3 %393 = OpLoad %390 
					                                       f32_3 %396 = OpFMul %393 %395 
					                                                      OpStore %390 %396 
					                                       f32_3 %397 = OpLoad %390 
					                                       f32_3 %398 = OpExtInst %1 29 %397 
					                                                      OpStore %390 %398 
					                                       f32_3 %399 = OpLoad %390 
					                                       f32_3 %402 = OpFMul %399 %401 
					                                       f32_3 %405 = OpFAdd %402 %404 
					                                                      OpStore %390 %405 
					                                       f32_3 %406 = OpLoad %390 
					                                       f32_3 %407 = OpExtInst %1 40 %406 %388 
					                                                      OpStore %390 %407 
					                                       f32_4 %408 = OpLoad %48 
					                                       f32_3 %409 = OpVectorShuffle %408 %408 0 2 3 
					                                       f32_3 %410 = OpLoad %390 
					                                       f32_3 %411 = OpFMul %409 %410 
					                                       f32_3 %412 = OpLoad %9 
					                                       f32_3 %413 = OpFAdd %411 %412 
					                                                      OpStore %294 %413 
					                read_only TextureCubeSampled %419 = OpLoad %418 
					                                       f32_3 %421 = OpLoad %420 
					                                       f32_4 %422 = OpImageSampleImplicitLod %419 %421 
					                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
					                                                      OpStore %414 %423 
					                                       f32_3 %425 = OpLoad %414 
					                              Uniform f32_4* %427 = OpAccessChain %22 %426 
					                                       f32_4 %428 = OpLoad %427 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFMul %425 %429 
					                                                      OpStore %424 %430 
					                                       f32_3 %433 = OpLoad %424 
					                                       f32_4 %434 = OpLoad %48 
					                                       f32_3 %435 = OpVectorShuffle %434 %434 1 1 1 
					                                       f32_3 %436 = OpFMul %433 %435 
					                                       f32_3 %437 = OpLoad %294 
					                                       f32_3 %438 = OpFAdd %436 %437 
					                                       f32_4 %439 = OpLoad %432 
					                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
					                                                      OpStore %432 %440 
					                                 Output f32* %442 = OpAccessChain %432 %138 
					                                                      OpStore %442 %62 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 400
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %115 %128 %188 %191 %194 %385 %393 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 RelaxedPrecision 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 RelaxedPrecision 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 RelaxedPrecision 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 RelaxedPrecision 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %88 0 BuiltIn 88 
					                                                      OpMemberDecorate %88 1 BuiltIn 88 
					                                                      OpMemberDecorate %88 2 BuiltIn 88 
					                                                      OpDecorate %88 Block 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %103 Location 103 
					                                                      OpDecorate %115 Location 115 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %188 Location 188 
					                                                      OpDecorate %191 Location 191 
					                                                      OpDecorate %194 Location 194 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %276 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %334 RelaxedPrecision 
					                                                      OpDecorate %347 RelaxedPrecision 
					                                                      OpDecorate %348 RelaxedPrecision 
					                                                      OpDecorate %351 RelaxedPrecision 
					                                                      OpDecorate %357 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %361 RelaxedPrecision 
					                                                      OpDecorate %362 RelaxedPrecision 
					                                                      OpDecorate %366 RelaxedPrecision 
					                                                      OpDecorate %367 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %372 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %374 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %385 Location 385 
					                                                      OpDecorate %391 RelaxedPrecision 
					                                                      OpDecorate %393 Location 393 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 8 
					                                              %17 = OpTypeArray %7 %16 
					                                          u32 %18 = OpConstant 4 
					                                              %19 = OpTypeArray %7 %18 
					                                              %20 = OpTypeArray %7 %18 
					                                              %21 = OpTypeArray %7 %18 
					                                              %22 = OpTypeStruct %14 %7 %7 %7 %7 %17 %7 %7 %7 %7 %19 %20 %21 %7 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 10 
					                                          i32 %27 = OpConstant 1 
					                                              %28 = OpTypePointer Uniform %7 
					                                          i32 %32 = OpConstant 0 
					                                          i32 %40 = OpConstant 2 
					                               Private f32_4* %48 = OpVariable Private 
					                                          i32 %50 = OpConstant 3 
					                               Private f32_4* %65 = OpVariable Private 
					                                          i32 %68 = OpConstant 12 
					                                          u32 %86 = OpConstant 1 
					                                              %87 = OpTypeArray %6 %86 
					                                              %88 = OpTypeStruct %7 %6 %87 
					                                              %89 = OpTypePointer Output %88 
					         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
					                                              %98 = OpTypePointer Output %7 
					                                             %100 = OpTypeVector %6 2 
					                                             %101 = OpTypePointer Output %100 
					                               Output f32_2* %102 = OpVariable Output 
					                                Input f32_4* %103 = OpVariable Input 
					                                         i32 %106 = OpConstant 13 
					                               Output f32_2* %115 = OpVariable Output 
					                                         f32 %116 = OpConstant 3.674022E-40 
					                                       f32_2 %117 = OpConstantComposite %116 %116 
					                                             %121 = OpTypePointer Uniform %14 
					                                             %127 = OpTypePointer Input %14 
					                                Input f32_3* %128 = OpVariable Input 
					                                         i32 %130 = OpConstant 11 
					                                         u32 %135 = OpConstant 0 
					                                             %136 = OpTypePointer Private %6 
					                                         u32 %149 = OpConstant 2 
					                                Private f32* %151 = OpVariable Private 
					                                             %187 = OpTypePointer Output %14 
					                               Output f32_3* %188 = OpVariable Output 
					                               Output f32_3* %191 = OpVariable Output 
					                               Output f32_3* %194 = OpVariable Output 
					                              Private f32_4* %203 = OpVariable Private 
					                              Private f32_4* %216 = OpVariable Private 
					                                         f32 %247 = OpConstant 3.674022E-40 
					                                       f32_4 %248 = OpConstantComposite %247 %247 %247 %247 
					                                         i32 %253 = OpConstant 4 
					                                         f32 %257 = OpConstant 3.674022E-40 
					                                       f32_4 %258 = OpConstantComposite %257 %257 %257 %257 
					                                       f32_4 %266 = OpConstantComposite %116 %116 %116 %116 
					                                         i32 %273 = OpConstant 5 
					                                         f32 %315 = OpConstant 3.674022E-40 
					                                       f32_3 %316 = OpConstantComposite %315 %315 %315 
					                                         f32 %318 = OpConstant 3.674022E-40 
					                                       f32_3 %319 = OpConstantComposite %318 %318 %318 
					                                         f32 %328 = OpConstant 3.674022E-40 
					                                       f32_3 %329 = OpConstantComposite %328 %328 %328 
					                                             %333 = OpTypePointer Private %14 
					                              Private f32_3* %334 = OpVariable Private 
					                              Private f32_4* %351 = OpVariable Private 
					                              Private f32_3* %357 = OpVariable Private 
					                                         i32 %358 = OpConstant 6 
					                                         i32 %364 = OpConstant 7 
					                                         i32 %370 = OpConstant 8 
					                                         i32 %376 = OpConstant 9 
					                               Output f32_3* %385 = OpVariable Output 
					                               Output f32_4* %393 = OpVariable Output 
					                                             %394 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %29 = OpAccessChain %24 %26 %27 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpFMul %13 %30 
					                                                      OpStore %9 %31 
					                               Uniform f32_4* %33 = OpAccessChain %24 %26 %32 
					                                        f32_4 %34 = OpLoad %33 
					                                        f32_4 %35 = OpLoad %11 
					                                        f32_4 %36 = OpVectorShuffle %35 %35 0 0 0 0 
					                                        f32_4 %37 = OpFMul %34 %36 
					                                        f32_4 %38 = OpLoad %9 
					                                        f32_4 %39 = OpFAdd %37 %38 
					                                                      OpStore %9 %39 
					                               Uniform f32_4* %41 = OpAccessChain %24 %26 %40 
					                                        f32_4 %42 = OpLoad %41 
					                                        f32_4 %43 = OpLoad %11 
					                                        f32_4 %44 = OpVectorShuffle %43 %43 2 2 2 2 
					                                        f32_4 %45 = OpFMul %42 %44 
					                                        f32_4 %46 = OpLoad %9 
					                                        f32_4 %47 = OpFAdd %45 %46 
					                                                      OpStore %9 %47 
					                                        f32_4 %49 = OpLoad %9 
					                               Uniform f32_4* %51 = OpAccessChain %24 %26 %50 
					                                        f32_4 %52 = OpLoad %51 
					                                        f32_4 %53 = OpFAdd %49 %52 
					                                                      OpStore %48 %53 
					                               Uniform f32_4* %54 = OpAccessChain %24 %26 %50 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_4 %57 = OpLoad %11 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
					                                        f32_3 %59 = OpFMul %56 %58 
					                                        f32_4 %60 = OpLoad %9 
					                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
					                                        f32_3 %62 = OpFAdd %59 %61 
					                                        f32_4 %63 = OpLoad %9 
					                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
					                                                      OpStore %9 %64 
					                                        f32_4 %66 = OpLoad %48 
					                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
					                               Uniform f32_4* %69 = OpAccessChain %24 %68 %27 
					                                        f32_4 %70 = OpLoad %69 
					                                        f32_4 %71 = OpFMul %67 %70 
					                                                      OpStore %65 %71 
					                               Uniform f32_4* %72 = OpAccessChain %24 %68 %32 
					                                        f32_4 %73 = OpLoad %72 
					                                        f32_4 %74 = OpLoad %48 
					                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
					                                        f32_4 %76 = OpFMul %73 %75 
					                                        f32_4 %77 = OpLoad %65 
					                                        f32_4 %78 = OpFAdd %76 %77 
					                                                      OpStore %65 %78 
					                               Uniform f32_4* %79 = OpAccessChain %24 %68 %40 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_4 %81 = OpLoad %48 
					                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
					                                        f32_4 %83 = OpFMul %80 %82 
					                                        f32_4 %84 = OpLoad %65 
					                                        f32_4 %85 = OpFAdd %83 %84 
					                                                      OpStore %65 %85 
					                               Uniform f32_4* %91 = OpAccessChain %24 %68 %50 
					                                        f32_4 %92 = OpLoad %91 
					                                        f32_4 %93 = OpLoad %48 
					                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
					                                        f32_4 %95 = OpFMul %92 %94 
					                                        f32_4 %96 = OpLoad %65 
					                                        f32_4 %97 = OpFAdd %95 %96 
					                                Output f32_4* %99 = OpAccessChain %90 %32 
					                                                      OpStore %99 %97 
					                                       f32_4 %104 = OpLoad %103 
					                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
					                              Uniform f32_4* %107 = OpAccessChain %24 %106 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
					                                       f32_2 %110 = OpFMul %105 %109 
					                              Uniform f32_4* %111 = OpAccessChain %24 %106 
					                                       f32_4 %112 = OpLoad %111 
					                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
					                                       f32_2 %114 = OpFAdd %110 %113 
					                                                      OpStore %102 %114 
					                                                      OpStore %115 %117 
					                                       f32_4 %118 = OpLoad %9 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_3 %120 = OpFNegate %119 
					                              Uniform f32_3* %122 = OpAccessChain %24 %32 
					                                       f32_3 %123 = OpLoad %122 
					                                       f32_3 %124 = OpFAdd %120 %123 
					                                       f32_4 %125 = OpLoad %48 
					                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
					                                                      OpStore %48 %126 
					                                       f32_3 %129 = OpLoad %128 
					                              Uniform f32_4* %131 = OpAccessChain %24 %130 %32 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %129 %133 
					                                Private f32* %137 = OpAccessChain %65 %135 
					                                                      OpStore %137 %134 
					                                       f32_3 %138 = OpLoad %128 
					                              Uniform f32_4* %139 = OpAccessChain %24 %130 %27 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %65 %86 
					                                                      OpStore %143 %142 
					                                       f32_3 %144 = OpLoad %128 
					                              Uniform f32_4* %145 = OpAccessChain %24 %130 %40 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %144 %147 
					                                Private f32* %150 = OpAccessChain %65 %149 
					                                                      OpStore %150 %148 
					                                       f32_4 %152 = OpLoad %65 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %65 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                                      OpStore %151 %156 
					                                         f32 %157 = OpLoad %151 
					                                         f32 %158 = OpExtInst %1 32 %157 
					                                                      OpStore %151 %158 
					                                         f32 %159 = OpLoad %151 
					                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
					                                       f32_4 %161 = OpLoad %65 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %65 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %65 %165 
					                                       f32_4 %166 = OpLoad %48 
					                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
					                                       f32_3 %168 = OpFNegate %167 
					                                       f32_4 %169 = OpLoad %65 
					                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
					                                         f32 %171 = OpDot %168 %170 
					                                                      OpStore %151 %171 
					                                         f32 %172 = OpLoad %151 
					                                         f32 %173 = OpLoad %151 
					                                         f32 %174 = OpFAdd %172 %173 
					                                                      OpStore %151 %174 
					                                       f32_4 %175 = OpLoad %65 
					                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
					                                         f32 %177 = OpLoad %151 
					                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
					                                       f32_3 %179 = OpFNegate %178 
					                                       f32_3 %180 = OpFMul %176 %179 
					                                       f32_4 %181 = OpLoad %48 
					                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
					                                       f32_3 %183 = OpFNegate %182 
					                                       f32_3 %184 = OpFAdd %180 %183 
					                                       f32_4 %185 = OpLoad %48 
					                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
					                                                      OpStore %48 %186 
					                                       f32_4 %189 = OpLoad %48 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                                      OpStore %188 %190 
					                                       f32_4 %192 = OpLoad %65 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                                      OpStore %191 %193 
					                                       f32_4 %195 = OpLoad %9 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                                      OpStore %194 %196 
					                                       f32_4 %197 = OpLoad %9 
					                                       f32_4 %198 = OpVectorShuffle %197 %197 0 0 0 0 
					                                       f32_4 %199 = OpFNegate %198 
					                              Uniform f32_4* %200 = OpAccessChain %24 %27 
					                                       f32_4 %201 = OpLoad %200 
					                                       f32_4 %202 = OpFAdd %199 %201 
					                                                      OpStore %48 %202 
					                                       f32_4 %204 = OpLoad %9 
					                                       f32_4 %205 = OpVectorShuffle %204 %204 1 1 1 1 
					                                       f32_4 %206 = OpFNegate %205 
					                              Uniform f32_4* %207 = OpAccessChain %24 %40 
					                                       f32_4 %208 = OpLoad %207 
					                                       f32_4 %209 = OpFAdd %206 %208 
					                                                      OpStore %203 %209 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %211 = OpVectorShuffle %210 %210 2 2 2 2 
					                                       f32_4 %212 = OpFNegate %211 
					                              Uniform f32_4* %213 = OpAccessChain %24 %50 
					                                       f32_4 %214 = OpLoad %213 
					                                       f32_4 %215 = OpFAdd %212 %214 
					                                                      OpStore %9 %215 
					                                       f32_4 %217 = OpLoad %65 
					                                       f32_4 %218 = OpVectorShuffle %217 %217 1 1 1 1 
					                                       f32_4 %219 = OpLoad %203 
					                                       f32_4 %220 = OpFMul %218 %219 
					                                                      OpStore %216 %220 
					                                       f32_4 %221 = OpLoad %203 
					                                       f32_4 %222 = OpLoad %203 
					                                       f32_4 %223 = OpFMul %221 %222 
					                                                      OpStore %203 %223 
					                                       f32_4 %224 = OpLoad %48 
					                                       f32_4 %225 = OpLoad %48 
					                                       f32_4 %226 = OpFMul %224 %225 
					                                       f32_4 %227 = OpLoad %203 
					                                       f32_4 %228 = OpFAdd %226 %227 
					                                                      OpStore %203 %228 
					                                       f32_4 %229 = OpLoad %48 
					                                       f32_4 %230 = OpLoad %65 
					                                       f32_4 %231 = OpVectorShuffle %230 %230 0 0 0 0 
					                                       f32_4 %232 = OpFMul %229 %231 
					                                       f32_4 %233 = OpLoad %216 
					                                       f32_4 %234 = OpFAdd %232 %233 
					                                                      OpStore %48 %234 
					                                       f32_4 %235 = OpLoad %9 
					                                       f32_4 %236 = OpLoad %65 
					                                       f32_4 %237 = OpVectorShuffle %236 %236 2 2 2 2 
					                                       f32_4 %238 = OpFMul %235 %237 
					                                       f32_4 %239 = OpLoad %48 
					                                       f32_4 %240 = OpFAdd %238 %239 
					                                                      OpStore %48 %240 
					                                       f32_4 %241 = OpLoad %9 
					                                       f32_4 %242 = OpLoad %9 
					                                       f32_4 %243 = OpFMul %241 %242 
					                                       f32_4 %244 = OpLoad %203 
					                                       f32_4 %245 = OpFAdd %243 %244 
					                                                      OpStore %9 %245 
					                                       f32_4 %246 = OpLoad %9 
					                                       f32_4 %249 = OpExtInst %1 40 %246 %248 
					                                                      OpStore %9 %249 
					                                       f32_4 %250 = OpLoad %9 
					                                       f32_4 %251 = OpExtInst %1 32 %250 
					                                                      OpStore %203 %251 
					                                       f32_4 %252 = OpLoad %9 
					                              Uniform f32_4* %254 = OpAccessChain %24 %253 
					                                       f32_4 %255 = OpLoad %254 
					                                       f32_4 %256 = OpFMul %252 %255 
					                                       f32_4 %259 = OpFAdd %256 %258 
					                                                      OpStore %9 %259 
					                                       f32_4 %260 = OpLoad %9 
					                                       f32_4 %261 = OpFDiv %258 %260 
					                                                      OpStore %9 %261 
					                                       f32_4 %262 = OpLoad %48 
					                                       f32_4 %263 = OpLoad %203 
					                                       f32_4 %264 = OpFMul %262 %263 
					                                                      OpStore %48 %264 
					                                       f32_4 %265 = OpLoad %48 
					                                       f32_4 %267 = OpExtInst %1 40 %265 %266 
					                                                      OpStore %48 %267 
					                                       f32_4 %268 = OpLoad %9 
					                                       f32_4 %269 = OpLoad %48 
					                                       f32_4 %270 = OpFMul %268 %269 
					                                                      OpStore %9 %270 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 1 1 1 
					                              Uniform f32_4* %274 = OpAccessChain %24 %273 %27 
					                                       f32_4 %275 = OpLoad %274 
					                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
					                                       f32_3 %277 = OpFMul %272 %276 
					                                       f32_4 %278 = OpLoad %48 
					                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
					                                                      OpStore %48 %279 
					                              Uniform f32_4* %280 = OpAccessChain %24 %273 %32 
					                                       f32_4 %281 = OpLoad %280 
					                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
					                                       f32_4 %283 = OpLoad %9 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
					                                       f32_3 %285 = OpFMul %282 %284 
					                                       f32_4 %286 = OpLoad %48 
					                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
					                                       f32_3 %288 = OpFAdd %285 %287 
					                                       f32_4 %289 = OpLoad %48 
					                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
					                                                      OpStore %48 %290 
					                              Uniform f32_4* %291 = OpAccessChain %24 %273 %40 
					                                       f32_4 %292 = OpLoad %291 
					                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
					                                       f32_4 %294 = OpLoad %9 
					                                       f32_3 %295 = OpVectorShuffle %294 %294 2 2 2 
					                                       f32_3 %296 = OpFMul %293 %295 
					                                       f32_4 %297 = OpLoad %48 
					                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
					                                       f32_3 %299 = OpFAdd %296 %298 
					                                       f32_4 %300 = OpLoad %9 
					                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
					                                                      OpStore %9 %301 
					                              Uniform f32_4* %302 = OpAccessChain %24 %273 %50 
					                                       f32_4 %303 = OpLoad %302 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 3 3 3 
					                                       f32_3 %307 = OpFMul %304 %306 
					                                       f32_4 %308 = OpLoad %9 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFAdd %307 %309 
					                                       f32_4 %311 = OpLoad %9 
					                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
					                                                      OpStore %9 %312 
					                                       f32_4 %313 = OpLoad %9 
					                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
					                                       f32_3 %317 = OpFMul %314 %316 
					                                       f32_3 %320 = OpFAdd %317 %319 
					                                       f32_4 %321 = OpLoad %48 
					                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
					                                                      OpStore %48 %322 
					                                       f32_4 %323 = OpLoad %9 
					                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
					                                       f32_4 %325 = OpLoad %48 
					                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
					                                       f32_3 %327 = OpFMul %324 %326 
					                                       f32_3 %330 = OpFAdd %327 %329 
					                                       f32_4 %331 = OpLoad %48 
					                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
					                                                      OpStore %48 %332 
					                                Private f32* %335 = OpAccessChain %65 %86 
					                                         f32 %336 = OpLoad %335 
					                                Private f32* %337 = OpAccessChain %65 %86 
					                                         f32 %338 = OpLoad %337 
					                                         f32 %339 = OpFMul %336 %338 
					                                Private f32* %340 = OpAccessChain %334 %135 
					                                                      OpStore %340 %339 
					                                Private f32* %341 = OpAccessChain %65 %135 
					                                         f32 %342 = OpLoad %341 
					                                Private f32* %343 = OpAccessChain %65 %135 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                Private f32* %346 = OpAccessChain %334 %135 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpFNegate %347 
					                                         f32 %349 = OpFAdd %345 %348 
					                                Private f32* %350 = OpAccessChain %334 %135 
					                                                      OpStore %350 %349 
					                                       f32_4 %352 = OpLoad %65 
					                                       f32_4 %353 = OpVectorShuffle %352 %352 1 2 2 0 
					                                       f32_4 %354 = OpLoad %65 
					                                       f32_4 %355 = OpVectorShuffle %354 %354 0 1 2 2 
					                                       f32_4 %356 = OpFMul %353 %355 
					                                                      OpStore %351 %356 
					                              Uniform f32_4* %359 = OpAccessChain %24 %358 
					                                       f32_4 %360 = OpLoad %359 
					                                       f32_4 %361 = OpLoad %351 
					                                         f32 %362 = OpDot %360 %361 
					                                Private f32* %363 = OpAccessChain %357 %135 
					                                                      OpStore %363 %362 
					                              Uniform f32_4* %365 = OpAccessChain %24 %364 
					                                       f32_4 %366 = OpLoad %365 
					                                       f32_4 %367 = OpLoad %351 
					                                         f32 %368 = OpDot %366 %367 
					                                Private f32* %369 = OpAccessChain %357 %86 
					                                                      OpStore %369 %368 
					                              Uniform f32_4* %371 = OpAccessChain %24 %370 
					                                       f32_4 %372 = OpLoad %371 
					                                       f32_4 %373 = OpLoad %351 
					                                         f32 %374 = OpDot %372 %373 
					                                Private f32* %375 = OpAccessChain %357 %149 
					                                                      OpStore %375 %374 
					                              Uniform f32_4* %377 = OpAccessChain %24 %376 
					                                       f32_4 %378 = OpLoad %377 
					                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
					                                       f32_3 %380 = OpLoad %334 
					                                       f32_3 %381 = OpVectorShuffle %380 %380 0 0 0 
					                                       f32_3 %382 = OpFMul %379 %381 
					                                       f32_3 %383 = OpLoad %357 
					                                       f32_3 %384 = OpFAdd %382 %383 
					                                                      OpStore %334 %384 
					                                       f32_4 %386 = OpLoad %9 
					                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
					                                       f32_4 %388 = OpLoad %48 
					                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
					                                       f32_3 %390 = OpFMul %387 %389 
					                                       f32_3 %391 = OpLoad %334 
					                                       f32_3 %392 = OpFAdd %390 %391 
					                                                      OpStore %385 %392 
					                                                      OpStore %393 %266 
					                                 Output f32* %395 = OpAccessChain %90 %32 %86 
					                                         f32 %396 = OpLoad %395 
					                                         f32 %397 = OpFNegate %396 
					                                 Output f32* %398 = OpAccessChain %90 %32 %86 
					                                                      OpStore %398 %397 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 445
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %57 %135 %384 %420 %432 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 RelaxedPrecision 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpMemberDecorate %20 9 RelaxedPrecision 
					                                                      OpMemberDecorate %20 9 Offset 20 
					                                                      OpMemberDecorate %20 10 RelaxedPrecision 
					                                                      OpMemberDecorate %20 10 Offset 20 
					                                                      OpMemberDecorate %20 11 RelaxedPrecision 
					                                                      OpMemberDecorate %20 11 Offset 20 
					                                                      OpMemberDecorate %20 12 RelaxedPrecision 
					                                                      OpMemberDecorate %20 12 Offset 20 
					                                                      OpMemberDecorate %20 13 RelaxedPrecision 
					                                                      OpMemberDecorate %20 13 Offset 20 
					                                                      OpMemberDecorate %20 14 Offset 20 
					                                                      OpMemberDecorate %20 15 Offset 20 
					                                                      OpMemberDecorate %20 16 Offset 20 
					                                                      OpMemberDecorate %20 17 Offset 20 
					                                                      OpMemberDecorate %20 18 RelaxedPrecision 
					                                                      OpMemberDecorate %20 18 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpDecorate %36 RelaxedPrecision 
					                                                      OpDecorate %44 RelaxedPrecision 
					                                                      OpDecorate %45 RelaxedPrecision 
					                                                      OpDecorate %57 Location 57 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %91 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %119 RelaxedPrecision 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %132 DescriptorSet 132 
					                                                      OpDecorate %132 Binding 132 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %135 Location 135 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %156 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %259 DescriptorSet 259 
					                                                      OpDecorate %259 Binding 259 
					                                                      OpDecorate %260 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %267 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %287 RelaxedPrecision 
					                                                      OpDecorate %288 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %294 RelaxedPrecision 
					                                                      OpDecorate %295 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %299 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %311 RelaxedPrecision 
					                                                      OpDecorate %319 RelaxedPrecision 
					                                                      OpDecorate %320 RelaxedPrecision 
					                                                      OpDecorate %321 RelaxedPrecision 
					                                                      OpDecorate %322 RelaxedPrecision 
					                                                      OpDecorate %323 RelaxedPrecision 
					                                                      OpDecorate %324 RelaxedPrecision 
					                                                      OpDecorate %336 RelaxedPrecision 
					                                                      OpDecorate %337 RelaxedPrecision 
					                                                      OpDecorate %339 RelaxedPrecision 
					                                                      OpDecorate %340 RelaxedPrecision 
					                                                      OpDecorate %345 RelaxedPrecision 
					                                                      OpDecorate %351 RelaxedPrecision 
					                                                      OpDecorate %352 RelaxedPrecision 
					                                                      OpDecorate %354 RelaxedPrecision 
					                                                      OpDecorate %355 RelaxedPrecision 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %357 RelaxedPrecision 
					                                                      OpDecorate %358 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate %384 Location 384 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate %387 RelaxedPrecision 
					                                                      OpDecorate %389 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %391 RelaxedPrecision 
					                                                      OpDecorate %392 RelaxedPrecision 
					                                                      OpDecorate %393 RelaxedPrecision 
					                                                      OpDecorate %396 RelaxedPrecision 
					                                                      OpDecorate %397 RelaxedPrecision 
					                                                      OpDecorate %398 RelaxedPrecision 
					                                                      OpDecorate %399 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %406 RelaxedPrecision 
					                                                      OpDecorate %407 RelaxedPrecision 
					                                                      OpDecorate %410 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %418 DescriptorSet 418 
					                                                      OpDecorate %418 Binding 418 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate %421 RelaxedPrecision 
					                                                      OpDecorate %423 RelaxedPrecision 
					                                                      OpDecorate %424 RelaxedPrecision 
					                                                      OpDecorate %425 RelaxedPrecision 
					                                                      OpDecorate %428 RelaxedPrecision 
					                                                      OpDecorate %429 RelaxedPrecision 
					                                                      OpDecorate %430 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate %432 Location 432 
					                                                      OpDecorate %433 RelaxedPrecision 
					                                                      OpDecorate %437 RelaxedPrecision 
					                                                      OpDecorate %444 RelaxedPrecision 
					                                                      OpDecorate %444 DescriptorSet 444 
					                                                      OpDecorate %444 Binding 444 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 16 
					                                              %17 = OpTypeArray %14 %16 
					                                          u32 %18 = OpConstant 4 
					                                              %19 = OpTypeArray %14 %18 
					                                              %20 = OpTypeStruct %7 %14 %14 %14 %14 %17 %14 %14 %19 %14 %14 %14 %14 %6 %6 %6 %6 %6 %14 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[16]; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 0 
					                                              %25 = OpTypePointer Uniform %7 
					                                              %29 = OpTypePointer Private %6 
					                                 Private f32* %30 = OpVariable Private 
					                               Private f32_3* %36 = OpVariable Private 
					                                          i32 %41 = OpConstant 1 
					                                              %42 = OpTypePointer Uniform %14 
					                                              %47 = OpTypePointer Private %14 
					                               Private f32_4* %48 = OpVariable Private 
					                                 Input f32_3* %57 = OpVariable Input 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                          f32 %62 = OpConstant 3.674022E-40 
					                                 Private f32* %64 = OpVariable Private 
					                                 Private f32* %68 = OpVariable Private 
					                                              %72 = OpTypeVector %6 2 
					                                          i32 %74 = OpConstant 16 
					                                              %75 = OpTypePointer Uniform %6 
					                                          i32 %78 = OpConstant 14 
					                                         u32 %102 = OpConstant 0 
					                                         i32 %111 = OpConstant 13 
					                                         f32 %114 = OpConstant 3.674022E-40 
					                                Private f32* %128 = OpVariable Private 
					                                             %129 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %130 = OpTypeSampledImage %129 
					                                             %131 = OpTypePointer UniformConstant %130 
					 UniformConstant read_only Texture2DSampled* %132 = OpVariable UniformConstant 
					                                             %134 = OpTypePointer Input %72 
					                                Input f32_2* %135 = OpVariable Input 
					                                         u32 %138 = OpConstant 3 
					                                Private f32* %145 = OpVariable Private 
					                                         i32 %148 = OpConstant 15 
					                                         i32 %152 = OpConstant 10 
					                              Private f32_3* %159 = OpVariable Private 
					                                         i32 %160 = OpConstant 8 
					                                         u32 %161 = OpConstant 2 
					                                         u32 %167 = OpConstant 1 
					                                         i32 %169 = OpConstant 2 
					                                         i32 %178 = OpConstant 7 
					                                Private f32* %184 = OpVariable Private 
					                                         i32 %205 = OpConstant 6 
					                                         i32 %219 = OpConstant 5 
					                                         i32 %241 = OpConstant 3 
					                                             %246 = OpTypePointer Function %7 
					                                Private f32* %255 = OpVariable Private 
					                                             %256 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
					                                             %257 = OpTypeSampledImage %256 
					                                             %258 = OpTypePointer UniformConstant %257 
					 UniformConstant read_only Texture2DSampled* %259 = OpVariable UniformConstant 
					                                         i32 %289 = OpConstant 9 
					                              Private f32_3* %294 = OpVariable Private 
					                                         i32 %306 = OpConstant 18 
					                                         i32 %312 = OpConstant 17 
					                                         i32 %334 = OpConstant 11 
					                              Private f32_4* %362 = OpVariable Private 
					                                         i32 %377 = OpConstant 4 
					                                Input f32_3* %384 = OpVariable Input 
					                                       f32_3 %388 = OpConstantComposite %61 %61 %61 
					                              Private f32_3* %390 = OpVariable Private 
					                                         f32 %394 = OpConstant 3.674022E-40 
					                                       f32_3 %395 = OpConstantComposite %394 %394 %394 
					                                         f32 %400 = OpConstant 3.674022E-40 
					                                       f32_3 %401 = OpConstantComposite %400 %400 %400 
					                                         f32 %403 = OpConstant 3.674022E-40 
					                                       f32_3 %404 = OpConstantComposite %403 %403 %403 
					                              Private f32_3* %414 = OpVariable Private 
					                                             %415 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %416 = OpTypeSampledImage %415 
					                                             %417 = OpTypePointer UniformConstant %416 
					UniformConstant read_only TextureCubeSampled* %418 = OpVariable UniformConstant 
					                                Input f32_3* %420 = OpVariable Input 
					                              Private f32_3* %424 = OpVariable Private 
					                                         i32 %426 = OpConstant 12 
					                                             %431 = OpTypePointer Output %14 
					                               Output f32_4* %432 = OpVariable Output 
					                                             %441 = OpTypePointer Output %6 
					 UniformConstant read_only Texture2DSampled* %444 = OpVariable UniformConstant 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %247 = OpVariable Function 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %26 = OpAccessChain %22 %24 
					                                        f32_3 %27 = OpLoad %26 
					                                        f32_3 %28 = OpFAdd %13 %27 
					                                                      OpStore %9 %28 
					                                        f32_3 %31 = OpLoad %9 
					                                        f32_3 %32 = OpLoad %9 
					                                          f32 %33 = OpDot %31 %32 
					                                                      OpStore %30 %33 
					                                          f32 %34 = OpLoad %30 
					                                          f32 %35 = OpExtInst %1 32 %34 
					                                                      OpStore %30 %35 
					                                        f32_3 %37 = OpLoad %9 
					                                          f32 %38 = OpLoad %30 
					                                        f32_3 %39 = OpCompositeConstruct %38 %38 %38 
					                                        f32_3 %40 = OpFMul %37 %39 
					                               Uniform f32_4* %43 = OpAccessChain %22 %41 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %46 = OpFAdd %40 %45 
					                                                      OpStore %36 %46 
					                                          f32 %49 = OpLoad %30 
					                                        f32_3 %50 = OpCompositeConstruct %49 %49 %49 
					                                        f32_3 %51 = OpLoad %9 
					                                        f32_3 %52 = OpFMul %50 %51 
					                                        f32_4 %53 = OpLoad %48 
					                                        f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
					                                                      OpStore %48 %54 
					                                        f32_4 %55 = OpLoad %48 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
					                                        f32_3 %58 = OpLoad %57 
					                                          f32 %59 = OpDot %56 %58 
					                                                      OpStore %30 %59 
					                                          f32 %60 = OpLoad %30 
					                                          f32 %63 = OpExtInst %1 43 %60 %61 %62 
					                                                      OpStore %30 %63 
					                                          f32 %65 = OpLoad %30 
					                                          f32 %66 = OpFNegate %65 
					                                          f32 %67 = OpFAdd %66 %62 
					                                                      OpStore %64 %67 
					                                          f32 %69 = OpLoad %64 
					                                          f32 %70 = OpExtInst %1 30 %69 
					                                                      OpStore %68 %70 
					                                          f32 %71 = OpLoad %68 
					                                        f32_2 %73 = OpCompositeConstruct %71 %71 
					                                 Uniform f32* %76 = OpAccessChain %22 %74 
					                                          f32 %77 = OpLoad %76 
					                                 Uniform f32* %79 = OpAccessChain %22 %78 
					                                          f32 %80 = OpLoad %79 
					                                        f32_2 %81 = OpCompositeConstruct %77 %80 
					                                        f32_2 %82 = OpFMul %73 %81 
					                                        f32_4 %83 = OpLoad %48 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 2 3 
					                                                      OpStore %48 %84 
					                                        f32_4 %85 = OpLoad %48 
					                                        f32_2 %86 = OpVectorShuffle %85 %85 0 1 
					                                        f32_2 %87 = OpExtInst %1 29 %86 
					                                        f32_4 %88 = OpLoad %48 
					                                        f32_4 %89 = OpVectorShuffle %88 %87 4 5 2 3 
					                                                      OpStore %48 %89 
					                                        f32_3 %90 = OpLoad %36 
					                                        f32_3 %91 = OpLoad %36 
					                                          f32 %92 = OpDot %90 %91 
					                                                      OpStore %64 %92 
					                                          f32 %93 = OpLoad %64 
					                                          f32 %94 = OpExtInst %1 32 %93 
					                                                      OpStore %64 %94 
					                                          f32 %95 = OpLoad %64 
					                                        f32_3 %96 = OpCompositeConstruct %95 %95 %95 
					                                        f32_3 %97 = OpLoad %36 
					                                        f32_3 %98 = OpFMul %96 %97 
					                                                      OpStore %36 %98 
					                                        f32_3 %99 = OpLoad %57 
					                                       f32_3 %100 = OpLoad %36 
					                                         f32 %101 = OpDot %99 %100 
					                                Private f32* %103 = OpAccessChain %36 %102 
					                                                      OpStore %103 %101 
					                                Private f32* %104 = OpAccessChain %36 %102 
					                                         f32 %105 = OpLoad %104 
					                                         f32 %106 = OpExtInst %1 40 %105 %61 
					                                Private f32* %107 = OpAccessChain %36 %102 
					                                                      OpStore %107 %106 
					                                Private f32* %108 = OpAccessChain %36 %102 
					                                         f32 %109 = OpLoad %108 
					                                         f32 %110 = OpExtInst %1 30 %109 
					                                                      OpStore %68 %110 
					                                Uniform f32* %112 = OpAccessChain %22 %111 
					                                         f32 %113 = OpLoad %112 
					                                         f32 %115 = OpFMul %113 %114 
					                                Private f32* %116 = OpAccessChain %36 %102 
					                                                      OpStore %116 %115 
					                                         f32 %117 = OpLoad %68 
					                                Private f32* %118 = OpAccessChain %36 %102 
					                                         f32 %119 = OpLoad %118 
					                                         f32 %120 = OpFMul %117 %119 
					                                                      OpStore %68 %120 
					                                         f32 %121 = OpLoad %68 
					                                         f32 %122 = OpExtInst %1 29 %121 
					                                                      OpStore %68 %122 
					                                Private f32* %123 = OpAccessChain %48 %102 
					                                         f32 %124 = OpLoad %123 
					                                         f32 %125 = OpFNegate %124 
					                                         f32 %126 = OpFAdd %125 %62 
					                                Private f32* %127 = OpAccessChain %36 %102 
					                                                      OpStore %127 %126 
					                  read_only Texture2DSampled %133 = OpLoad %132 
					                                       f32_2 %136 = OpLoad %135 
					                                       f32_4 %137 = OpImageSampleImplicitLod %133 %136 
					                                         f32 %139 = OpCompositeExtract %137 3 
					                                                      OpStore %128 %139 
					                                Private f32* %140 = OpAccessChain %36 %102 
					                                         f32 %141 = OpLoad %140 
					                                         f32 %142 = OpLoad %128 
					                                         f32 %143 = OpFMul %141 %142 
					                                Private f32* %144 = OpAccessChain %36 %102 
					                                                      OpStore %144 %143 
					                                Private f32* %146 = OpAccessChain %36 %102 
					                                         f32 %147 = OpLoad %146 
					                                Uniform f32* %149 = OpAccessChain %22 %148 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpFMul %147 %150 
					                                Uniform f32* %153 = OpAccessChain %22 %152 %138 
					                                         f32 %154 = OpLoad %153 
					                                         f32 %155 = OpFAdd %151 %154 
					                                                      OpStore %145 %155 
					                                         f32 %156 = OpLoad %68 
					                                         f32 %157 = OpLoad %145 
					                                         f32 %158 = OpFMul %156 %157 
					                                                      OpStore %30 %158 
					                                Uniform f32* %162 = OpAccessChain %22 %160 %24 %161 
					                                         f32 %163 = OpLoad %162 
					                                Private f32* %164 = OpAccessChain %159 %102 
					                                                      OpStore %164 %163 
					                                Uniform f32* %165 = OpAccessChain %22 %160 %41 %161 
					                                         f32 %166 = OpLoad %165 
					                                Private f32* %168 = OpAccessChain %159 %167 
					                                                      OpStore %168 %166 
					                                Uniform f32* %170 = OpAccessChain %22 %160 %169 %161 
					                                         f32 %171 = OpLoad %170 
					                                Private f32* %172 = OpAccessChain %159 %161 
					                                                      OpStore %172 %171 
					                                       f32_3 %173 = OpLoad %9 
					                                       f32_3 %174 = OpLoad %159 
					                                         f32 %175 = OpDot %173 %174 
					                                Private f32* %176 = OpAccessChain %9 %102 
					                                                      OpStore %176 %175 
					                                       f32_3 %177 = OpLoad %11 
					                              Uniform f32_4* %179 = OpAccessChain %22 %178 
					                                       f32_4 %180 = OpLoad %179 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFAdd %177 %182 
					                                                      OpStore %159 %183 
					                                       f32_3 %185 = OpLoad %159 
					                                       f32_3 %186 = OpLoad %159 
					                                         f32 %187 = OpDot %185 %186 
					                                                      OpStore %184 %187 
					                                         f32 %188 = OpLoad %184 
					                                         f32 %189 = OpExtInst %1 31 %188 
					                                                      OpStore %184 %189 
					                                Private f32* %190 = OpAccessChain %9 %102 
					                                         f32 %191 = OpLoad %190 
					                                         f32 %192 = OpFNegate %191 
					                                         f32 %193 = OpLoad %184 
					                                         f32 %194 = OpFAdd %192 %193 
					                                                      OpStore %184 %194 
					                                Uniform f32* %195 = OpAccessChain %22 %178 %138 
					                                         f32 %196 = OpLoad %195 
					                                         f32 %197 = OpLoad %184 
					                                         f32 %198 = OpFMul %196 %197 
					                                Private f32* %199 = OpAccessChain %9 %102 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpFAdd %198 %200 
					                                Private f32* %202 = OpAccessChain %9 %102 
					                                                      OpStore %202 %201 
					                                Private f32* %203 = OpAccessChain %9 %102 
					                                         f32 %204 = OpLoad %203 
					                                Uniform f32* %206 = OpAccessChain %22 %205 %161 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFMul %204 %207 
					                                Uniform f32* %209 = OpAccessChain %22 %205 %138 
					                                         f32 %210 = OpLoad %209 
					                                         f32 %211 = OpFAdd %208 %210 
					                                Private f32* %212 = OpAccessChain %9 %102 
					                                                      OpStore %212 %211 
					                                Private f32* %213 = OpAccessChain %9 %102 
					                                         f32 %214 = OpLoad %213 
					                                         f32 %215 = OpExtInst %1 43 %214 %61 %62 
					                                Private f32* %216 = OpAccessChain %9 %102 
					                                                      OpStore %216 %215 
					                                       f32_3 %217 = OpLoad %11 
					                                       f32_3 %218 = OpVectorShuffle %217 %217 1 1 1 
					                              Uniform f32_4* %220 = OpAccessChain %22 %219 %41 
					                                       f32_4 %221 = OpLoad %220 
					                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
					                                       f32_3 %223 = OpFMul %218 %222 
					                                                      OpStore %159 %223 
					                              Uniform f32_4* %224 = OpAccessChain %22 %219 %24 
					                                       f32_4 %225 = OpLoad %224 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpLoad %11 
					                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
					                                       f32_3 %229 = OpFMul %226 %228 
					                                       f32_3 %230 = OpLoad %159 
					                                       f32_3 %231 = OpFAdd %229 %230 
					                                                      OpStore %159 %231 
					                              Uniform f32_4* %232 = OpAccessChain %22 %219 %169 
					                                       f32_4 %233 = OpLoad %232 
					                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
					                                       f32_3 %235 = OpLoad %11 
					                                       f32_3 %236 = OpVectorShuffle %235 %235 2 2 2 
					                                       f32_3 %237 = OpFMul %234 %236 
					                                       f32_3 %238 = OpLoad %159 
					                                       f32_3 %239 = OpFAdd %237 %238 
					                                                      OpStore %159 %239 
					                                       f32_3 %240 = OpLoad %159 
					                              Uniform f32_4* %242 = OpAccessChain %22 %219 %241 
					                                       f32_4 %243 = OpLoad %242 
					                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
					                                       f32_3 %245 = OpFAdd %240 %244 
					                                                      OpStore %159 %245 
					                                       f32_3 %248 = OpLoad %159 
					                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
					                                Private f32* %250 = OpAccessChain %159 %161 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpCompositeExtract %249 0 
					                                         f32 %253 = OpCompositeExtract %249 1 
					                                       f32_3 %254 = OpCompositeConstruct %252 %253 %251 
					                                                      OpStore %247 %254 
					                  read_only Texture2DSampled %260 = OpLoad %259 
					                                       f32_3 %261 = OpLoad %247 
					                                         f32 %262 = OpCompositeExtract %261 2 
					                                         f32 %263 = OpImageSampleDrefExplicitLod %260 %261 %262 Lod %6 
					                                                      OpStore %255 %263 
					                                Uniform f32* %264 = OpAccessChain %22 %205 %102 
					                                         f32 %265 = OpLoad %264 
					                                         f32 %266 = OpFNegate %265 
					                                         f32 %267 = OpFAdd %266 %62 
					                                Private f32* %268 = OpAccessChain %36 %102 
					                                                      OpStore %268 %267 
					                                         f32 %269 = OpLoad %255 
					                                Private f32* %270 = OpAccessChain %36 %102 
					                                         f32 %271 = OpLoad %270 
					                                         f32 %272 = OpFMul %269 %271 
					                                Uniform f32* %273 = OpAccessChain %22 %205 %102 
					                                         f32 %274 = OpLoad %273 
					                                         f32 %275 = OpFAdd %272 %274 
					                                Private f32* %276 = OpAccessChain %36 %102 
					                                                      OpStore %276 %275 
					                                Private f32* %277 = OpAccessChain %9 %102 
					                                         f32 %278 = OpLoad %277 
					                                Private f32* %279 = OpAccessChain %36 %102 
					                                         f32 %280 = OpLoad %279 
					                                         f32 %281 = OpFAdd %278 %280 
					                                Private f32* %282 = OpAccessChain %36 %102 
					                                                      OpStore %282 %281 
					                                Private f32* %283 = OpAccessChain %36 %102 
					                                         f32 %284 = OpLoad %283 
					                                         f32 %285 = OpExtInst %1 43 %284 %61 %62 
					                                Private f32* %286 = OpAccessChain %36 %102 
					                                                      OpStore %286 %285 
					                                       f32_3 %287 = OpLoad %36 
					                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
					                              Uniform f32_4* %290 = OpAccessChain %22 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_3 %293 = OpFMul %288 %292 
					                                                      OpStore %36 %293 
					                                       f32_3 %295 = OpLoad %36 
					                              Uniform f32_4* %296 = OpAccessChain %22 %152 
					                                       f32_4 %297 = OpLoad %296 
					                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
					                                       f32_3 %299 = OpFMul %295 %298 
					                                                      OpStore %294 %299 
					                                         f32 %300 = OpLoad %30 
					                                       f32_3 %301 = OpCompositeConstruct %300 %300 %300 
					                                       f32_3 %302 = OpLoad %294 
					                                       f32_3 %303 = OpFMul %301 %302 
					                                                      OpStore %9 %303 
					                                       f32_4 %304 = OpLoad %48 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 0 0 
					                              Uniform f32_4* %307 = OpAccessChain %22 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %305 %309 
					                                                      OpStore %294 %310 
					                                       f32_3 %311 = OpLoad %294 
					                                Uniform f32* %313 = OpAccessChain %22 %312 
					                                         f32 %314 = OpLoad %313 
					                                Uniform f32* %315 = OpAccessChain %22 %312 
					                                         f32 %316 = OpLoad %315 
					                                Uniform f32* %317 = OpAccessChain %22 %312 
					                                         f32 %318 = OpLoad %317 
					                                       f32_3 %319 = OpCompositeConstruct %314 %316 %318 
					                                         f32 %320 = OpCompositeExtract %319 0 
					                                         f32 %321 = OpCompositeExtract %319 1 
					                                         f32 %322 = OpCompositeExtract %319 2 
					                                       f32_3 %323 = OpCompositeConstruct %320 %321 %322 
					                                       f32_3 %324 = OpFMul %311 %323 
					                                                      OpStore %159 %324 
					                                Private f32* %325 = OpAccessChain %48 %102 
					                                         f32 %326 = OpLoad %325 
					                                         f32 %327 = OpFNegate %326 
					                                Uniform f32* %328 = OpAccessChain %22 %312 
					                                         f32 %329 = OpLoad %328 
					                                         f32 %330 = OpFMul %327 %329 
					                                         f32 %331 = OpFAdd %330 %62 
					                                                      OpStore %30 %331 
					                                         f32 %332 = OpLoad %30 
					                                         f32 %333 = OpExtInst %1 43 %332 %61 %62 
					                                                      OpStore %30 %333 
					                              Uniform f32_4* %335 = OpAccessChain %22 %334 
					                                       f32_4 %336 = OpLoad %335 
					                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
					                                         f32 %338 = OpLoad %30 
					                                       f32_3 %339 = OpCompositeConstruct %338 %338 %338 
					                                       f32_3 %340 = OpFMul %337 %339 
					                                       f32_3 %341 = OpLoad %159 
					                                       f32_3 %342 = OpFAdd %340 %341 
					                                       f32_4 %343 = OpLoad %48 
					                                       f32_4 %344 = OpVectorShuffle %343 %342 4 1 5 6 
					                                                      OpStore %48 %344 
					                                       f32_3 %345 = OpLoad %36 
					                                       f32_4 %346 = OpLoad %48 
					                                       f32_3 %347 = OpVectorShuffle %346 %346 0 2 3 
					                                       f32_3 %348 = OpFMul %345 %347 
					                                                      OpStore %36 %348 
					                                       f32_3 %349 = OpLoad %57 
					                              Uniform f32_4* %350 = OpAccessChain %22 %41 
					                                       f32_4 %351 = OpLoad %350 
					                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
					                                         f32 %353 = OpDot %349 %352 
					                                                      OpStore %64 %353 
					                                         f32 %354 = OpLoad %64 
					                                         f32 %355 = OpExtInst %1 40 %354 %61 
					                                                      OpStore %64 %355 
					                                       f32_3 %356 = OpLoad %36 
					                                         f32 %357 = OpLoad %64 
					                                       f32_3 %358 = OpCompositeConstruct %357 %357 %357 
					                                       f32_3 %359 = OpFMul %356 %358 
					                                       f32_3 %360 = OpLoad %9 
					                                       f32_3 %361 = OpFAdd %359 %360 
					                                                      OpStore %9 %361 
					                                       f32_3 %363 = OpLoad %57 
					                                       f32_4 %364 = OpLoad %362 
					                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
					                                                      OpStore %362 %365 
					                                Private f32* %366 = OpAccessChain %362 %138 
					                                                      OpStore %366 %62 
					                              Uniform f32_4* %367 = OpAccessChain %22 %169 
					                                       f32_4 %368 = OpLoad %367 
					                                       f32_4 %369 = OpLoad %362 
					                                         f32 %370 = OpDot %368 %369 
					                                Private f32* %371 = OpAccessChain %294 %102 
					                                                      OpStore %371 %370 
					                              Uniform f32_4* %372 = OpAccessChain %22 %241 
					                                       f32_4 %373 = OpLoad %372 
					                                       f32_4 %374 = OpLoad %362 
					                                         f32 %375 = OpDot %373 %374 
					                                Private f32* %376 = OpAccessChain %294 %167 
					                                                      OpStore %376 %375 
					                              Uniform f32_4* %378 = OpAccessChain %22 %377 
					                                       f32_4 %379 = OpLoad %378 
					                                       f32_4 %380 = OpLoad %362 
					                                         f32 %381 = OpDot %379 %380 
					                                Private f32* %382 = OpAccessChain %294 %161 
					                                                      OpStore %382 %381 
					                                       f32_3 %383 = OpLoad %294 
					                                       f32_3 %385 = OpLoad %384 
					                                       f32_3 %386 = OpFAdd %383 %385 
					                                                      OpStore %294 %386 
					                                       f32_3 %387 = OpLoad %294 
					                                       f32_3 %389 = OpExtInst %1 40 %387 %388 
					                                                      OpStore %294 %389 
					                                       f32_3 %391 = OpLoad %294 
					                                       f32_3 %392 = OpExtInst %1 30 %391 
					                                                      OpStore %390 %392 
					                                       f32_3 %393 = OpLoad %390 
					                                       f32_3 %396 = OpFMul %393 %395 
					                                                      OpStore %390 %396 
					                                       f32_3 %397 = OpLoad %390 
					                                       f32_3 %398 = OpExtInst %1 29 %397 
					                                                      OpStore %390 %398 
					                                       f32_3 %399 = OpLoad %390 
					                                       f32_3 %402 = OpFMul %399 %401 
					                                       f32_3 %405 = OpFAdd %402 %404 
					                                                      OpStore %390 %405 
					                                       f32_3 %406 = OpLoad %390 
					                                       f32_3 %407 = OpExtInst %1 40 %406 %388 
					                                                      OpStore %390 %407 
					                                       f32_4 %408 = OpLoad %48 
					                                       f32_3 %409 = OpVectorShuffle %408 %408 0 2 3 
					                                       f32_3 %410 = OpLoad %390 
					                                       f32_3 %411 = OpFMul %409 %410 
					                                       f32_3 %412 = OpLoad %9 
					                                       f32_3 %413 = OpFAdd %411 %412 
					                                                      OpStore %294 %413 
					                read_only TextureCubeSampled %419 = OpLoad %418 
					                                       f32_3 %421 = OpLoad %420 
					                                       f32_4 %422 = OpImageSampleImplicitLod %419 %421 
					                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
					                                                      OpStore %414 %423 
					                                       f32_3 %425 = OpLoad %414 
					                              Uniform f32_4* %427 = OpAccessChain %22 %426 
					                                       f32_4 %428 = OpLoad %427 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFMul %425 %429 
					                                                      OpStore %424 %430 
					                                       f32_3 %433 = OpLoad %424 
					                                       f32_4 %434 = OpLoad %48 
					                                       f32_3 %435 = OpVectorShuffle %434 %434 1 1 1 
					                                       f32_3 %436 = OpFMul %433 %435 
					                                       f32_3 %437 = OpLoad %294 
					                                       f32_3 %438 = OpFAdd %436 %437 
					                                       f32_4 %439 = OpLoad %432 
					                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
					                                                      OpStore %432 %440 
					                                 Output f32* %442 = OpAccessChain %432 %138 
					                                                      OpStore %442 %62 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"spirv"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"spirv"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 400
			Tags { "LIGHTMODE" = "FORWARDADD" "RenderType" = "Opaque" }
			Blend One One, One One
			ZClip Off
			ZWrite Off
			GpuProgramID 124788
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  highp vec3 lightCoord_4;
					  lowp vec3 tmpvar_5;
					  lowp vec3 viewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec3 tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_8.x = 1.0;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_7 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_6 = tmpvar_11;
					  tmpvar_9 = viewDir_6;
					  tmpvar_5 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_9), tmpvar_5), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_12 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_12 = (tmpvar_12 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = xlv_TEXCOORD2;
					  lightCoord_4 = (unity_WorldToLight * tmpvar_22).xyz;
					  highp float tmpvar_23;
					  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
					  lowp float tmpvar_24;
					  tmpvar_24 = texture2D (_LightTexture0, vec2(tmpvar_23)).w;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_7;
					  tmpvar_1 = (tmpvar_1 * tmpvar_24);
					  mediump vec3 viewDir_25;
					  viewDir_25 = tmpvar_11;
					  lowp vec4 c_26;
					  lowp vec4 c_27;
					  highp float nh_28;
					  lowp float diff_29;
					  mediump float tmpvar_30;
					  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
					  diff_29 = tmpvar_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = max (0.0, dot (tmpvar_5, normalize(
					    (tmpvar_2 + viewDir_25)
					  )));
					  nh_28 = tmpvar_31;
					  mediump float y_32;
					  y_32 = (_Shininess * 128.0);
					  highp float tmpvar_33;
					  tmpvar_33 = (pow (nh_28, y_32) * tmpvar_13);
					  c_27.xyz = (((tmpvar_12 * tmpvar_1) * diff_29) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_33));
					  c_27.w = (textureCube (_Cube, tmpvar_8).w * _ReflectColor.w);
					  c_26.w = c_27.w;
					  c_26.xyz = c_27.xyz;
					  c_3.xyz = c_26.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  highp vec3 lightCoord_4;
					  lowp vec3 tmpvar_5;
					  lowp vec3 viewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec3 tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_8.x = 1.0;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_7 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_6 = tmpvar_11;
					  tmpvar_9 = viewDir_6;
					  tmpvar_5 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_9), tmpvar_5), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_12 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_12 = (tmpvar_12 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = xlv_TEXCOORD2;
					  lightCoord_4 = (unity_WorldToLight * tmpvar_22).xyz;
					  highp float tmpvar_23;
					  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
					  lowp float tmpvar_24;
					  tmpvar_24 = texture2D (_LightTexture0, vec2(tmpvar_23)).w;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_7;
					  tmpvar_1 = (tmpvar_1 * tmpvar_24);
					  mediump vec3 viewDir_25;
					  viewDir_25 = tmpvar_11;
					  lowp vec4 c_26;
					  lowp vec4 c_27;
					  highp float nh_28;
					  lowp float diff_29;
					  mediump float tmpvar_30;
					  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
					  diff_29 = tmpvar_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = max (0.0, dot (tmpvar_5, normalize(
					    (tmpvar_2 + viewDir_25)
					  )));
					  nh_28 = tmpvar_31;
					  mediump float y_32;
					  y_32 = (_Shininess * 128.0);
					  highp float tmpvar_33;
					  tmpvar_33 = (pow (nh_28, y_32) * tmpvar_13);
					  c_27.xyz = (((tmpvar_12 * tmpvar_1) * diff_29) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_33));
					  c_27.w = (textureCube (_Cube, tmpvar_8).w * _ReflectColor.w);
					  c_26.w = c_27.w;
					  c_26.xyz = c_27.xyz;
					  c_3.xyz = c_26.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  highp vec3 lightCoord_4;
					  lowp vec3 tmpvar_5;
					  lowp vec3 viewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec3 tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_8.x = 1.0;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_7 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_6 = tmpvar_11;
					  tmpvar_9 = viewDir_6;
					  tmpvar_5 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_9), tmpvar_5), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_12 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_12 = (tmpvar_12 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = xlv_TEXCOORD2;
					  lightCoord_4 = (unity_WorldToLight * tmpvar_22).xyz;
					  highp float tmpvar_23;
					  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
					  lowp float tmpvar_24;
					  tmpvar_24 = texture2D (_LightTexture0, vec2(tmpvar_23)).w;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_7;
					  tmpvar_1 = (tmpvar_1 * tmpvar_24);
					  mediump vec3 viewDir_25;
					  viewDir_25 = tmpvar_11;
					  lowp vec4 c_26;
					  lowp vec4 c_27;
					  highp float nh_28;
					  lowp float diff_29;
					  mediump float tmpvar_30;
					  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
					  diff_29 = tmpvar_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = max (0.0, dot (tmpvar_5, normalize(
					    (tmpvar_2 + viewDir_25)
					  )));
					  nh_28 = tmpvar_31;
					  mediump float y_32;
					  y_32 = (_Shininess * 128.0);
					  highp float tmpvar_33;
					  tmpvar_33 = (pow (nh_28, y_32) * tmpvar_13);
					  c_27.xyz = (((tmpvar_12 * tmpvar_1) * diff_29) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_33));
					  c_27.w = (textureCube (_Cube, tmpvar_8).w * _ReflectColor.w);
					  c_26.w = c_27.w;
					  c_26.xyz = c_27.xyz;
					  c_3.xyz = c_26.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					float u_xlat8;
					lowp float u_xlat10_8;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_14);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
					    u_xlat16_4 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_2.x;
					    u_xlat16_4 = exp2(u_xlat16_4);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_8 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat10_8;
					    u_xlat8 = u_xlat16_2.x * _FlakeAmt + _SpecColor.w;
					    u_xlat4.x = u_xlat8 * u_xlat16_4;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10_8 = texture(_LightTexture0, vec2(u_xlat8)).w;
					    u_xlat16_2.xyz = vec3(u_xlat10_8) * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat1.xyz = _Color.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					float u_xlat8;
					lowp float u_xlat10_8;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_14);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
					    u_xlat16_4 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_2.x;
					    u_xlat16_4 = exp2(u_xlat16_4);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_8 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat10_8;
					    u_xlat8 = u_xlat16_2.x * _FlakeAmt + _SpecColor.w;
					    u_xlat4.x = u_xlat8 * u_xlat16_4;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10_8 = texture(_LightTexture0, vec2(u_xlat8)).w;
					    u_xlat16_2.xyz = vec3(u_xlat10_8) * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat1.xyz = _Color.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					float u_xlat8;
					lowp float u_xlat10_8;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_14);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
					    u_xlat16_4 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_2.x;
					    u_xlat16_4 = exp2(u_xlat16_4);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_8 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat10_8;
					    u_xlat8 = u_xlat16_2.x * _FlakeAmt + _SpecColor.w;
					    u_xlat4.x = u_xlat8 * u_xlat16_4;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10_8 = texture(_LightTexture0, vec2(u_xlat8)).w;
					    u_xlat16_2.xyz = vec3(u_xlat10_8) * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat1.xyz = _Color.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "POINT" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 304
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %63 %161 %297 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 RelaxedPrecision 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 RelaxedPrecision 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 RelaxedPrecision 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 RelaxedPrecision 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpMemberDecorate %18 8 Offset 18 
					                                                      OpMemberDecorate %18 9 Offset 18 
					                                                      OpMemberDecorate %18 10 RelaxedPrecision 
					                                                      OpMemberDecorate %18 10 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %63 Location 63 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %82 RelaxedPrecision 
					                                                      OpDecorate %103 RelaxedPrecision 
					                                                      OpDecorate %104 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %107 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %111 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %114 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %116 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %158 DescriptorSet 158 
					                                                      OpDecorate %158 Binding 158 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %164 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %179 RelaxedPrecision 
					                                                      OpDecorate %182 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %217 DescriptorSet 217 
					                                                      OpDecorate %217 Binding 217 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %246 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %268 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %273 RelaxedPrecision 
					                                                      OpDecorate %276 RelaxedPrecision 
					                                                      OpDecorate %277 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %289 RelaxedPrecision 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %297 Location 297 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %14 %16 
					                                              %18 = OpTypeStruct %7 %14 %14 %14 %17 %14 %6 %6 %6 %6 %14 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 0 
					                                              %23 = OpTypePointer Uniform %7 
					                                              %27 = OpTypePointer Private %6 
					                                 Private f32* %28 = OpVariable Private 
					                               Private f32_3* %38 = OpVariable Private 
					                                          i32 %41 = OpConstant 1 
					                                              %42 = OpTypePointer Uniform %14 
					                                              %52 = OpTypePointer Private %14 
					                               Private f32_4* %53 = OpVariable Private 
					                                 Input f32_3* %63 = OpVariable Input 
					                                          u32 %66 = OpConstant 0 
					                                          f32 %70 = OpConstant 3.674022E-40 
					                                          f32 %71 = OpConstant 3.674022E-40 
					                                 Private f32* %74 = OpVariable Private 
					                                 Private f32* %79 = OpVariable Private 
					                                          i32 %83 = OpConstant 8 
					                                              %84 = OpTypePointer Uniform %6 
					                               Private f32_3* %93 = OpVariable Private 
					                                         u32 %101 = OpConstant 3 
					                              Private f32_3* %103 = OpVariable Private 
					                                             %126 = OpTypeVector %6 2 
					                                       f32_2 %129 = OpConstantComposite %70 %70 
					                                Private f32* %133 = OpVariable Private 
					                                         i32 %137 = OpConstant 6 
					                                         f32 %140 = OpConstant 3.674022E-40 
					                                Private f32* %154 = OpVariable Private 
					                                             %155 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %156 = OpTypeSampledImage %155 
					                                             %157 = OpTypePointer UniformConstant %156 
					 UniformConstant read_only Texture2DSampled* %158 = OpVariable UniformConstant 
					                                             %160 = OpTypePointer Input %126 
					                                Input f32_2* %161 = OpVariable Input 
					                                Private f32* %170 = OpVariable Private 
					                                         i32 %173 = OpConstant 7 
					                                         i32 %177 = OpConstant 3 
					                                         i32 %187 = OpConstant 4 
					                                         i32 %200 = OpConstant 2 
					 UniformConstant read_only Texture2DSampled* %217 = OpVariable UniformConstant 
					                                         i32 %243 = OpConstant 10 
					                                         i32 %251 = OpConstant 9 
					                                         i32 %274 = OpConstant 5 
					                                             %296 = OpTypePointer Output %14 
					                               Output f32_4* %297 = OpVariable Output 
					                                             %301 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %24 = OpAccessChain %20 %22 
					                                        f32_3 %25 = OpLoad %24 
					                                        f32_3 %26 = OpFAdd %13 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %29 = OpLoad %9 
					                                        f32_3 %30 = OpLoad %9 
					                                          f32 %31 = OpDot %29 %30 
					                                                      OpStore %28 %31 
					                                          f32 %32 = OpLoad %28 
					                                          f32 %33 = OpExtInst %1 32 %32 
					                                                      OpStore %28 %33 
					                                          f32 %34 = OpLoad %28 
					                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
					                                        f32_3 %36 = OpLoad %9 
					                                        f32_3 %37 = OpFMul %35 %36 
					                                                      OpStore %9 %37 
					                                        f32_3 %39 = OpLoad %11 
					                                        f32_3 %40 = OpFNegate %39 
					                               Uniform f32_4* %43 = OpAccessChain %20 %41 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %46 = OpFAdd %40 %45 
					                                                      OpStore %38 %46 
					                                        f32_3 %47 = OpLoad %38 
					                                        f32_3 %48 = OpLoad %38 
					                                          f32 %49 = OpDot %47 %48 
					                                                      OpStore %28 %49 
					                                          f32 %50 = OpLoad %28 
					                                          f32 %51 = OpExtInst %1 32 %50 
					                                                      OpStore %28 %51 
					                                        f32_3 %54 = OpLoad %38 
					                                          f32 %55 = OpLoad %28 
					                                        f32_3 %56 = OpCompositeConstruct %55 %55 %55 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_3 %58 = OpLoad %9 
					                                        f32_3 %59 = OpFAdd %57 %58 
					                                        f32_4 %60 = OpLoad %53 
					                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
					                                                      OpStore %53 %61 
					                                        f32_3 %62 = OpLoad %9 
					                                        f32_3 %64 = OpLoad %63 
					                                          f32 %65 = OpDot %62 %64 
					                                 Private f32* %67 = OpAccessChain %9 %66 
					                                                      OpStore %67 %65 
					                                 Private f32* %68 = OpAccessChain %9 %66 
					                                          f32 %69 = OpLoad %68 
					                                          f32 %72 = OpExtInst %1 43 %69 %70 %71 
					                                 Private f32* %73 = OpAccessChain %9 %66 
					                                                      OpStore %73 %72 
					                                 Private f32* %75 = OpAccessChain %9 %66 
					                                          f32 %76 = OpLoad %75 
					                                          f32 %77 = OpFNegate %76 
					                                          f32 %78 = OpFAdd %77 %71 
					                                                      OpStore %74 %78 
					                                          f32 %80 = OpLoad %74 
					                                          f32 %81 = OpExtInst %1 30 %80 
					                                                      OpStore %79 %81 
					                                          f32 %82 = OpLoad %79 
					                                 Uniform f32* %85 = OpAccessChain %20 %83 
					                                          f32 %86 = OpLoad %85 
					                                          f32 %87 = OpFMul %82 %86 
					                                 Private f32* %88 = OpAccessChain %9 %66 
					                                                      OpStore %88 %87 
					                                 Private f32* %89 = OpAccessChain %9 %66 
					                                          f32 %90 = OpLoad %89 
					                                          f32 %91 = OpExtInst %1 29 %90 
					                                 Private f32* %92 = OpAccessChain %9 %66 
					                                                      OpStore %92 %91 
					                                          f32 %94 = OpLoad %28 
					                                        f32_3 %95 = OpCompositeConstruct %94 %94 %94 
					                                        f32_3 %96 = OpLoad %38 
					                                        f32_3 %97 = OpFMul %95 %96 
					                                                      OpStore %93 %97 
					                                        f32_3 %98 = OpLoad %63 
					                                        f32_3 %99 = OpLoad %93 
					                                         f32 %100 = OpDot %98 %99 
					                                Private f32* %102 = OpAccessChain %53 %101 
					                                                      OpStore %102 %100 
					                                       f32_4 %104 = OpLoad %53 
					                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
					                                       f32_4 %106 = OpLoad %53 
					                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
					                                         f32 %108 = OpDot %105 %107 
					                                Private f32* %109 = OpAccessChain %103 %66 
					                                                      OpStore %109 %108 
					                                Private f32* %110 = OpAccessChain %103 %66 
					                                         f32 %111 = OpLoad %110 
					                                         f32 %112 = OpExtInst %1 32 %111 
					                                Private f32* %113 = OpAccessChain %103 %66 
					                                                      OpStore %113 %112 
					                                       f32_4 %114 = OpLoad %53 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                       f32_3 %116 = OpLoad %103 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 0 0 
					                                       f32_3 %118 = OpFMul %115 %117 
					                                       f32_4 %119 = OpLoad %53 
					                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
					                                                      OpStore %53 %120 
					                                       f32_3 %121 = OpLoad %63 
					                                       f32_4 %122 = OpLoad %53 
					                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
					                                         f32 %124 = OpDot %121 %123 
					                                Private f32* %125 = OpAccessChain %53 %66 
					                                                      OpStore %125 %124 
					                                       f32_4 %127 = OpLoad %53 
					                                       f32_2 %128 = OpVectorShuffle %127 %127 0 3 
					                                       f32_2 %130 = OpExtInst %1 40 %128 %129 
					                                       f32_4 %131 = OpLoad %53 
					                                       f32_4 %132 = OpVectorShuffle %131 %130 4 1 2 5 
					                                                      OpStore %53 %132 
					                                Private f32* %134 = OpAccessChain %53 %66 
					                                         f32 %135 = OpLoad %134 
					                                         f32 %136 = OpExtInst %1 30 %135 
					                                                      OpStore %133 %136 
					                                Uniform f32* %138 = OpAccessChain %20 %137 
					                                         f32 %139 = OpLoad %138 
					                                         f32 %141 = OpFMul %139 %140 
					                                Private f32* %142 = OpAccessChain %53 %66 
					                                                      OpStore %142 %141 
					                                         f32 %143 = OpLoad %133 
					                                Private f32* %144 = OpAccessChain %53 %66 
					                                         f32 %145 = OpLoad %144 
					                                         f32 %146 = OpFMul %143 %145 
					                                                      OpStore %133 %146 
					                                         f32 %147 = OpLoad %133 
					                                         f32 %148 = OpExtInst %1 29 %147 
					                                                      OpStore %133 %148 
					                                Private f32* %149 = OpAccessChain %9 %66 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpFNegate %150 
					                                         f32 %152 = OpFAdd %151 %71 
					                                Private f32* %153 = OpAccessChain %53 %66 
					                                                      OpStore %153 %152 
					                  read_only Texture2DSampled %159 = OpLoad %158 
					                                       f32_2 %162 = OpLoad %161 
					                                       f32_4 %163 = OpImageSampleImplicitLod %159 %162 
					                                         f32 %164 = OpCompositeExtract %163 3 
					                                                      OpStore %154 %164 
					                                Private f32* %165 = OpAccessChain %53 %66 
					                                         f32 %166 = OpLoad %165 
					                                         f32 %167 = OpLoad %154 
					                                         f32 %168 = OpFMul %166 %167 
					                                Private f32* %169 = OpAccessChain %53 %66 
					                                                      OpStore %169 %168 
					                                Private f32* %171 = OpAccessChain %53 %66 
					                                         f32 %172 = OpLoad %171 
					                                Uniform f32* %174 = OpAccessChain %20 %173 
					                                         f32 %175 = OpLoad %174 
					                                         f32 %176 = OpFMul %172 %175 
					                                Uniform f32* %178 = OpAccessChain %20 %177 %101 
					                                         f32 %179 = OpLoad %178 
					                                         f32 %180 = OpFAdd %176 %179 
					                                                      OpStore %170 %180 
					                                         f32 %181 = OpLoad %170 
					                                         f32 %182 = OpLoad %133 
					                                         f32 %183 = OpFMul %181 %182 
					                                Private f32* %184 = OpAccessChain %93 %66 
					                                                      OpStore %184 %183 
					                                       f32_3 %185 = OpLoad %11 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 1 1 1 
					                              Uniform f32_4* %188 = OpAccessChain %20 %187 %41 
					                                       f32_4 %189 = OpLoad %188 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %186 %190 
					                                                      OpStore %38 %191 
					                              Uniform f32_4* %192 = OpAccessChain %20 %187 %22 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                       f32_3 %195 = OpLoad %11 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
					                                       f32_3 %197 = OpFMul %194 %196 
					                                       f32_3 %198 = OpLoad %38 
					                                       f32_3 %199 = OpFAdd %197 %198 
					                                                      OpStore %38 %199 
					                              Uniform f32_4* %201 = OpAccessChain %20 %187 %200 
					                                       f32_4 %202 = OpLoad %201 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
					                                       f32_3 %204 = OpLoad %11 
					                                       f32_3 %205 = OpVectorShuffle %204 %204 2 2 2 
					                                       f32_3 %206 = OpFMul %203 %205 
					                                       f32_3 %207 = OpLoad %38 
					                                       f32_3 %208 = OpFAdd %206 %207 
					                                                      OpStore %38 %208 
					                                       f32_3 %209 = OpLoad %38 
					                              Uniform f32_4* %210 = OpAccessChain %20 %187 %177 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                       f32_3 %213 = OpFAdd %209 %212 
					                                                      OpStore %38 %213 
					                                       f32_3 %214 = OpLoad %38 
					                                       f32_3 %215 = OpLoad %38 
					                                         f32 %216 = OpDot %214 %215 
					                                                      OpStore %170 %216 
					                  read_only Texture2DSampled %218 = OpLoad %217 
					                                         f32 %219 = OpLoad %170 
					                                       f32_2 %220 = OpCompositeConstruct %219 %219 
					                                       f32_4 %221 = OpImageSampleImplicitLod %218 %220 
					                                         f32 %222 = OpCompositeExtract %221 3 
					                                                      OpStore %154 %222 
					                                         f32 %223 = OpLoad %154 
					                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
					                              Uniform f32_4* %225 = OpAccessChain %20 %200 
					                                       f32_4 %226 = OpLoad %225 
					                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
					                                       f32_3 %228 = OpFMul %224 %227 
					                                       f32_4 %229 = OpLoad %53 
					                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
					                                                      OpStore %53 %230 
					                                       f32_4 %231 = OpLoad %53 
					                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
					                              Uniform f32_4* %233 = OpAccessChain %20 %177 
					                                       f32_4 %234 = OpLoad %233 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
					                                       f32_3 %236 = OpFMul %232 %235 
					                                                      OpStore %103 %236 
					                                       f32_3 %237 = OpLoad %93 
					                                       f32_3 %238 = OpVectorShuffle %237 %237 0 0 0 
					                                       f32_3 %239 = OpLoad %103 
					                                       f32_3 %240 = OpFMul %238 %239 
					                                                      OpStore %93 %240 
					                                       f32_3 %241 = OpLoad %9 
					                                       f32_3 %242 = OpVectorShuffle %241 %241 0 0 0 
					                              Uniform f32_4* %244 = OpAccessChain %20 %243 
					                                       f32_4 %245 = OpLoad %244 
					                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
					                                       f32_3 %247 = OpFMul %242 %246 
					                                                      OpStore %103 %247 
					                                Private f32* %248 = OpAccessChain %9 %66 
					                                         f32 %249 = OpLoad %248 
					                                         f32 %250 = OpFNegate %249 
					                                Uniform f32* %252 = OpAccessChain %20 %251 
					                                         f32 %253 = OpLoad %252 
					                                         f32 %254 = OpFMul %250 %253 
					                                         f32 %255 = OpFAdd %254 %71 
					                                Private f32* %256 = OpAccessChain %9 %66 
					                                                      OpStore %256 %255 
					                                Private f32* %257 = OpAccessChain %9 %66 
					                                         f32 %258 = OpLoad %257 
					                                         f32 %259 = OpExtInst %1 43 %258 %70 %71 
					                                Private f32* %260 = OpAccessChain %9 %66 
					                                                      OpStore %260 %259 
					                                       f32_3 %261 = OpLoad %103 
					                                Uniform f32* %262 = OpAccessChain %20 %251 
					                                         f32 %263 = OpLoad %262 
					                                Uniform f32* %264 = OpAccessChain %20 %251 
					                                         f32 %265 = OpLoad %264 
					                                Uniform f32* %266 = OpAccessChain %20 %251 
					                                         f32 %267 = OpLoad %266 
					                                       f32_3 %268 = OpCompositeConstruct %263 %265 %267 
					                                         f32 %269 = OpCompositeExtract %268 0 
					                                         f32 %270 = OpCompositeExtract %268 1 
					                                         f32 %271 = OpCompositeExtract %268 2 
					                                       f32_3 %272 = OpCompositeConstruct %269 %270 %271 
					                                       f32_3 %273 = OpFMul %261 %272 
					                                                      OpStore %38 %273 
					                              Uniform f32_4* %275 = OpAccessChain %20 %274 
					                                       f32_4 %276 = OpLoad %275 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
					                                       f32_3 %278 = OpLoad %9 
					                                       f32_3 %279 = OpVectorShuffle %278 %278 0 0 0 
					                                       f32_3 %280 = OpFMul %277 %279 
					                                       f32_3 %281 = OpLoad %38 
					                                       f32_3 %282 = OpFAdd %280 %281 
					                                                      OpStore %38 %282 
					                                       f32_4 %283 = OpLoad %53 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
					                                       f32_3 %285 = OpLoad %38 
					                                       f32_3 %286 = OpFMul %284 %285 
					                                       f32_4 %287 = OpLoad %53 
					                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
					                                                      OpStore %53 %288 
					                                       f32_4 %289 = OpLoad %53 
					                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
					                                       f32_4 %291 = OpLoad %53 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 3 3 3 
					                                       f32_3 %293 = OpFMul %290 %292 
					                                       f32_3 %294 = OpLoad %93 
					                                       f32_3 %295 = OpFAdd %293 %294 
					                                                      OpStore %9 %295 
					                                       f32_3 %298 = OpLoad %9 
					                                       f32_4 %299 = OpLoad %297 
					                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
					                                                      OpStore %297 %300 
					                                 Output f32* %302 = OpAccessChain %297 %101 
					                                                      OpStore %302 %71 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "POINT" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 304
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %63 %161 %297 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 RelaxedPrecision 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 RelaxedPrecision 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 RelaxedPrecision 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 RelaxedPrecision 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpMemberDecorate %18 8 Offset 18 
					                                                      OpMemberDecorate %18 9 Offset 18 
					                                                      OpMemberDecorate %18 10 RelaxedPrecision 
					                                                      OpMemberDecorate %18 10 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %63 Location 63 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %82 RelaxedPrecision 
					                                                      OpDecorate %103 RelaxedPrecision 
					                                                      OpDecorate %104 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %107 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %111 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %114 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %116 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %158 DescriptorSet 158 
					                                                      OpDecorate %158 Binding 158 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %164 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %179 RelaxedPrecision 
					                                                      OpDecorate %182 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %217 DescriptorSet 217 
					                                                      OpDecorate %217 Binding 217 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %246 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %268 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %273 RelaxedPrecision 
					                                                      OpDecorate %276 RelaxedPrecision 
					                                                      OpDecorate %277 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %289 RelaxedPrecision 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %297 Location 297 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %14 %16 
					                                              %18 = OpTypeStruct %7 %14 %14 %14 %17 %14 %6 %6 %6 %6 %14 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 0 
					                                              %23 = OpTypePointer Uniform %7 
					                                              %27 = OpTypePointer Private %6 
					                                 Private f32* %28 = OpVariable Private 
					                               Private f32_3* %38 = OpVariable Private 
					                                          i32 %41 = OpConstant 1 
					                                              %42 = OpTypePointer Uniform %14 
					                                              %52 = OpTypePointer Private %14 
					                               Private f32_4* %53 = OpVariable Private 
					                                 Input f32_3* %63 = OpVariable Input 
					                                          u32 %66 = OpConstant 0 
					                                          f32 %70 = OpConstant 3.674022E-40 
					                                          f32 %71 = OpConstant 3.674022E-40 
					                                 Private f32* %74 = OpVariable Private 
					                                 Private f32* %79 = OpVariable Private 
					                                          i32 %83 = OpConstant 8 
					                                              %84 = OpTypePointer Uniform %6 
					                               Private f32_3* %93 = OpVariable Private 
					                                         u32 %101 = OpConstant 3 
					                              Private f32_3* %103 = OpVariable Private 
					                                             %126 = OpTypeVector %6 2 
					                                       f32_2 %129 = OpConstantComposite %70 %70 
					                                Private f32* %133 = OpVariable Private 
					                                         i32 %137 = OpConstant 6 
					                                         f32 %140 = OpConstant 3.674022E-40 
					                                Private f32* %154 = OpVariable Private 
					                                             %155 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %156 = OpTypeSampledImage %155 
					                                             %157 = OpTypePointer UniformConstant %156 
					 UniformConstant read_only Texture2DSampled* %158 = OpVariable UniformConstant 
					                                             %160 = OpTypePointer Input %126 
					                                Input f32_2* %161 = OpVariable Input 
					                                Private f32* %170 = OpVariable Private 
					                                         i32 %173 = OpConstant 7 
					                                         i32 %177 = OpConstant 3 
					                                         i32 %187 = OpConstant 4 
					                                         i32 %200 = OpConstant 2 
					 UniformConstant read_only Texture2DSampled* %217 = OpVariable UniformConstant 
					                                         i32 %243 = OpConstant 10 
					                                         i32 %251 = OpConstant 9 
					                                         i32 %274 = OpConstant 5 
					                                             %296 = OpTypePointer Output %14 
					                               Output f32_4* %297 = OpVariable Output 
					                                             %301 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %24 = OpAccessChain %20 %22 
					                                        f32_3 %25 = OpLoad %24 
					                                        f32_3 %26 = OpFAdd %13 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %29 = OpLoad %9 
					                                        f32_3 %30 = OpLoad %9 
					                                          f32 %31 = OpDot %29 %30 
					                                                      OpStore %28 %31 
					                                          f32 %32 = OpLoad %28 
					                                          f32 %33 = OpExtInst %1 32 %32 
					                                                      OpStore %28 %33 
					                                          f32 %34 = OpLoad %28 
					                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
					                                        f32_3 %36 = OpLoad %9 
					                                        f32_3 %37 = OpFMul %35 %36 
					                                                      OpStore %9 %37 
					                                        f32_3 %39 = OpLoad %11 
					                                        f32_3 %40 = OpFNegate %39 
					                               Uniform f32_4* %43 = OpAccessChain %20 %41 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %46 = OpFAdd %40 %45 
					                                                      OpStore %38 %46 
					                                        f32_3 %47 = OpLoad %38 
					                                        f32_3 %48 = OpLoad %38 
					                                          f32 %49 = OpDot %47 %48 
					                                                      OpStore %28 %49 
					                                          f32 %50 = OpLoad %28 
					                                          f32 %51 = OpExtInst %1 32 %50 
					                                                      OpStore %28 %51 
					                                        f32_3 %54 = OpLoad %38 
					                                          f32 %55 = OpLoad %28 
					                                        f32_3 %56 = OpCompositeConstruct %55 %55 %55 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_3 %58 = OpLoad %9 
					                                        f32_3 %59 = OpFAdd %57 %58 
					                                        f32_4 %60 = OpLoad %53 
					                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
					                                                      OpStore %53 %61 
					                                        f32_3 %62 = OpLoad %9 
					                                        f32_3 %64 = OpLoad %63 
					                                          f32 %65 = OpDot %62 %64 
					                                 Private f32* %67 = OpAccessChain %9 %66 
					                                                      OpStore %67 %65 
					                                 Private f32* %68 = OpAccessChain %9 %66 
					                                          f32 %69 = OpLoad %68 
					                                          f32 %72 = OpExtInst %1 43 %69 %70 %71 
					                                 Private f32* %73 = OpAccessChain %9 %66 
					                                                      OpStore %73 %72 
					                                 Private f32* %75 = OpAccessChain %9 %66 
					                                          f32 %76 = OpLoad %75 
					                                          f32 %77 = OpFNegate %76 
					                                          f32 %78 = OpFAdd %77 %71 
					                                                      OpStore %74 %78 
					                                          f32 %80 = OpLoad %74 
					                                          f32 %81 = OpExtInst %1 30 %80 
					                                                      OpStore %79 %81 
					                                          f32 %82 = OpLoad %79 
					                                 Uniform f32* %85 = OpAccessChain %20 %83 
					                                          f32 %86 = OpLoad %85 
					                                          f32 %87 = OpFMul %82 %86 
					                                 Private f32* %88 = OpAccessChain %9 %66 
					                                                      OpStore %88 %87 
					                                 Private f32* %89 = OpAccessChain %9 %66 
					                                          f32 %90 = OpLoad %89 
					                                          f32 %91 = OpExtInst %1 29 %90 
					                                 Private f32* %92 = OpAccessChain %9 %66 
					                                                      OpStore %92 %91 
					                                          f32 %94 = OpLoad %28 
					                                        f32_3 %95 = OpCompositeConstruct %94 %94 %94 
					                                        f32_3 %96 = OpLoad %38 
					                                        f32_3 %97 = OpFMul %95 %96 
					                                                      OpStore %93 %97 
					                                        f32_3 %98 = OpLoad %63 
					                                        f32_3 %99 = OpLoad %93 
					                                         f32 %100 = OpDot %98 %99 
					                                Private f32* %102 = OpAccessChain %53 %101 
					                                                      OpStore %102 %100 
					                                       f32_4 %104 = OpLoad %53 
					                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
					                                       f32_4 %106 = OpLoad %53 
					                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
					                                         f32 %108 = OpDot %105 %107 
					                                Private f32* %109 = OpAccessChain %103 %66 
					                                                      OpStore %109 %108 
					                                Private f32* %110 = OpAccessChain %103 %66 
					                                         f32 %111 = OpLoad %110 
					                                         f32 %112 = OpExtInst %1 32 %111 
					                                Private f32* %113 = OpAccessChain %103 %66 
					                                                      OpStore %113 %112 
					                                       f32_4 %114 = OpLoad %53 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                       f32_3 %116 = OpLoad %103 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 0 0 
					                                       f32_3 %118 = OpFMul %115 %117 
					                                       f32_4 %119 = OpLoad %53 
					                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
					                                                      OpStore %53 %120 
					                                       f32_3 %121 = OpLoad %63 
					                                       f32_4 %122 = OpLoad %53 
					                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
					                                         f32 %124 = OpDot %121 %123 
					                                Private f32* %125 = OpAccessChain %53 %66 
					                                                      OpStore %125 %124 
					                                       f32_4 %127 = OpLoad %53 
					                                       f32_2 %128 = OpVectorShuffle %127 %127 0 3 
					                                       f32_2 %130 = OpExtInst %1 40 %128 %129 
					                                       f32_4 %131 = OpLoad %53 
					                                       f32_4 %132 = OpVectorShuffle %131 %130 4 1 2 5 
					                                                      OpStore %53 %132 
					                                Private f32* %134 = OpAccessChain %53 %66 
					                                         f32 %135 = OpLoad %134 
					                                         f32 %136 = OpExtInst %1 30 %135 
					                                                      OpStore %133 %136 
					                                Uniform f32* %138 = OpAccessChain %20 %137 
					                                         f32 %139 = OpLoad %138 
					                                         f32 %141 = OpFMul %139 %140 
					                                Private f32* %142 = OpAccessChain %53 %66 
					                                                      OpStore %142 %141 
					                                         f32 %143 = OpLoad %133 
					                                Private f32* %144 = OpAccessChain %53 %66 
					                                         f32 %145 = OpLoad %144 
					                                         f32 %146 = OpFMul %143 %145 
					                                                      OpStore %133 %146 
					                                         f32 %147 = OpLoad %133 
					                                         f32 %148 = OpExtInst %1 29 %147 
					                                                      OpStore %133 %148 
					                                Private f32* %149 = OpAccessChain %9 %66 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpFNegate %150 
					                                         f32 %152 = OpFAdd %151 %71 
					                                Private f32* %153 = OpAccessChain %53 %66 
					                                                      OpStore %153 %152 
					                  read_only Texture2DSampled %159 = OpLoad %158 
					                                       f32_2 %162 = OpLoad %161 
					                                       f32_4 %163 = OpImageSampleImplicitLod %159 %162 
					                                         f32 %164 = OpCompositeExtract %163 3 
					                                                      OpStore %154 %164 
					                                Private f32* %165 = OpAccessChain %53 %66 
					                                         f32 %166 = OpLoad %165 
					                                         f32 %167 = OpLoad %154 
					                                         f32 %168 = OpFMul %166 %167 
					                                Private f32* %169 = OpAccessChain %53 %66 
					                                                      OpStore %169 %168 
					                                Private f32* %171 = OpAccessChain %53 %66 
					                                         f32 %172 = OpLoad %171 
					                                Uniform f32* %174 = OpAccessChain %20 %173 
					                                         f32 %175 = OpLoad %174 
					                                         f32 %176 = OpFMul %172 %175 
					                                Uniform f32* %178 = OpAccessChain %20 %177 %101 
					                                         f32 %179 = OpLoad %178 
					                                         f32 %180 = OpFAdd %176 %179 
					                                                      OpStore %170 %180 
					                                         f32 %181 = OpLoad %170 
					                                         f32 %182 = OpLoad %133 
					                                         f32 %183 = OpFMul %181 %182 
					                                Private f32* %184 = OpAccessChain %93 %66 
					                                                      OpStore %184 %183 
					                                       f32_3 %185 = OpLoad %11 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 1 1 1 
					                              Uniform f32_4* %188 = OpAccessChain %20 %187 %41 
					                                       f32_4 %189 = OpLoad %188 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %186 %190 
					                                                      OpStore %38 %191 
					                              Uniform f32_4* %192 = OpAccessChain %20 %187 %22 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                       f32_3 %195 = OpLoad %11 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
					                                       f32_3 %197 = OpFMul %194 %196 
					                                       f32_3 %198 = OpLoad %38 
					                                       f32_3 %199 = OpFAdd %197 %198 
					                                                      OpStore %38 %199 
					                              Uniform f32_4* %201 = OpAccessChain %20 %187 %200 
					                                       f32_4 %202 = OpLoad %201 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
					                                       f32_3 %204 = OpLoad %11 
					                                       f32_3 %205 = OpVectorShuffle %204 %204 2 2 2 
					                                       f32_3 %206 = OpFMul %203 %205 
					                                       f32_3 %207 = OpLoad %38 
					                                       f32_3 %208 = OpFAdd %206 %207 
					                                                      OpStore %38 %208 
					                                       f32_3 %209 = OpLoad %38 
					                              Uniform f32_4* %210 = OpAccessChain %20 %187 %177 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                       f32_3 %213 = OpFAdd %209 %212 
					                                                      OpStore %38 %213 
					                                       f32_3 %214 = OpLoad %38 
					                                       f32_3 %215 = OpLoad %38 
					                                         f32 %216 = OpDot %214 %215 
					                                                      OpStore %170 %216 
					                  read_only Texture2DSampled %218 = OpLoad %217 
					                                         f32 %219 = OpLoad %170 
					                                       f32_2 %220 = OpCompositeConstruct %219 %219 
					                                       f32_4 %221 = OpImageSampleImplicitLod %218 %220 
					                                         f32 %222 = OpCompositeExtract %221 3 
					                                                      OpStore %154 %222 
					                                         f32 %223 = OpLoad %154 
					                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
					                              Uniform f32_4* %225 = OpAccessChain %20 %200 
					                                       f32_4 %226 = OpLoad %225 
					                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
					                                       f32_3 %228 = OpFMul %224 %227 
					                                       f32_4 %229 = OpLoad %53 
					                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
					                                                      OpStore %53 %230 
					                                       f32_4 %231 = OpLoad %53 
					                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
					                              Uniform f32_4* %233 = OpAccessChain %20 %177 
					                                       f32_4 %234 = OpLoad %233 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
					                                       f32_3 %236 = OpFMul %232 %235 
					                                                      OpStore %103 %236 
					                                       f32_3 %237 = OpLoad %93 
					                                       f32_3 %238 = OpVectorShuffle %237 %237 0 0 0 
					                                       f32_3 %239 = OpLoad %103 
					                                       f32_3 %240 = OpFMul %238 %239 
					                                                      OpStore %93 %240 
					                                       f32_3 %241 = OpLoad %9 
					                                       f32_3 %242 = OpVectorShuffle %241 %241 0 0 0 
					                              Uniform f32_4* %244 = OpAccessChain %20 %243 
					                                       f32_4 %245 = OpLoad %244 
					                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
					                                       f32_3 %247 = OpFMul %242 %246 
					                                                      OpStore %103 %247 
					                                Private f32* %248 = OpAccessChain %9 %66 
					                                         f32 %249 = OpLoad %248 
					                                         f32 %250 = OpFNegate %249 
					                                Uniform f32* %252 = OpAccessChain %20 %251 
					                                         f32 %253 = OpLoad %252 
					                                         f32 %254 = OpFMul %250 %253 
					                                         f32 %255 = OpFAdd %254 %71 
					                                Private f32* %256 = OpAccessChain %9 %66 
					                                                      OpStore %256 %255 
					                                Private f32* %257 = OpAccessChain %9 %66 
					                                         f32 %258 = OpLoad %257 
					                                         f32 %259 = OpExtInst %1 43 %258 %70 %71 
					                                Private f32* %260 = OpAccessChain %9 %66 
					                                                      OpStore %260 %259 
					                                       f32_3 %261 = OpLoad %103 
					                                Uniform f32* %262 = OpAccessChain %20 %251 
					                                         f32 %263 = OpLoad %262 
					                                Uniform f32* %264 = OpAccessChain %20 %251 
					                                         f32 %265 = OpLoad %264 
					                                Uniform f32* %266 = OpAccessChain %20 %251 
					                                         f32 %267 = OpLoad %266 
					                                       f32_3 %268 = OpCompositeConstruct %263 %265 %267 
					                                         f32 %269 = OpCompositeExtract %268 0 
					                                         f32 %270 = OpCompositeExtract %268 1 
					                                         f32 %271 = OpCompositeExtract %268 2 
					                                       f32_3 %272 = OpCompositeConstruct %269 %270 %271 
					                                       f32_3 %273 = OpFMul %261 %272 
					                                                      OpStore %38 %273 
					                              Uniform f32_4* %275 = OpAccessChain %20 %274 
					                                       f32_4 %276 = OpLoad %275 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
					                                       f32_3 %278 = OpLoad %9 
					                                       f32_3 %279 = OpVectorShuffle %278 %278 0 0 0 
					                                       f32_3 %280 = OpFMul %277 %279 
					                                       f32_3 %281 = OpLoad %38 
					                                       f32_3 %282 = OpFAdd %280 %281 
					                                                      OpStore %38 %282 
					                                       f32_4 %283 = OpLoad %53 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
					                                       f32_3 %285 = OpLoad %38 
					                                       f32_3 %286 = OpFMul %284 %285 
					                                       f32_4 %287 = OpLoad %53 
					                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
					                                                      OpStore %53 %288 
					                                       f32_4 %289 = OpLoad %53 
					                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
					                                       f32_4 %291 = OpLoad %53 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 3 3 3 
					                                       f32_3 %293 = OpFMul %290 %292 
					                                       f32_3 %294 = OpLoad %93 
					                                       f32_3 %295 = OpFAdd %293 %294 
					                                                      OpStore %9 %295 
					                                       f32_3 %298 = OpLoad %9 
					                                       f32_4 %299 = OpLoad %297 
					                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
					                                                      OpStore %297 %300 
					                                 Output f32* %302 = OpAccessChain %297 %101 
					                                                      OpStore %302 %71 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "POINT" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 304
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %63 %161 %297 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 RelaxedPrecision 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 RelaxedPrecision 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 RelaxedPrecision 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 RelaxedPrecision 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpMemberDecorate %18 8 Offset 18 
					                                                      OpMemberDecorate %18 9 Offset 18 
					                                                      OpMemberDecorate %18 10 RelaxedPrecision 
					                                                      OpMemberDecorate %18 10 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %63 Location 63 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %82 RelaxedPrecision 
					                                                      OpDecorate %103 RelaxedPrecision 
					                                                      OpDecorate %104 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %107 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %111 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %114 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %116 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %158 DescriptorSet 158 
					                                                      OpDecorate %158 Binding 158 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %164 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %179 RelaxedPrecision 
					                                                      OpDecorate %182 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %217 DescriptorSet 217 
					                                                      OpDecorate %217 Binding 217 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %246 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %268 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %273 RelaxedPrecision 
					                                                      OpDecorate %276 RelaxedPrecision 
					                                                      OpDecorate %277 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %289 RelaxedPrecision 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %292 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %297 Location 297 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %14 %16 
					                                              %18 = OpTypeStruct %7 %14 %14 %14 %17 %14 %6 %6 %6 %6 %14 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 0 
					                                              %23 = OpTypePointer Uniform %7 
					                                              %27 = OpTypePointer Private %6 
					                                 Private f32* %28 = OpVariable Private 
					                               Private f32_3* %38 = OpVariable Private 
					                                          i32 %41 = OpConstant 1 
					                                              %42 = OpTypePointer Uniform %14 
					                                              %52 = OpTypePointer Private %14 
					                               Private f32_4* %53 = OpVariable Private 
					                                 Input f32_3* %63 = OpVariable Input 
					                                          u32 %66 = OpConstant 0 
					                                          f32 %70 = OpConstant 3.674022E-40 
					                                          f32 %71 = OpConstant 3.674022E-40 
					                                 Private f32* %74 = OpVariable Private 
					                                 Private f32* %79 = OpVariable Private 
					                                          i32 %83 = OpConstant 8 
					                                              %84 = OpTypePointer Uniform %6 
					                               Private f32_3* %93 = OpVariable Private 
					                                         u32 %101 = OpConstant 3 
					                              Private f32_3* %103 = OpVariable Private 
					                                             %126 = OpTypeVector %6 2 
					                                       f32_2 %129 = OpConstantComposite %70 %70 
					                                Private f32* %133 = OpVariable Private 
					                                         i32 %137 = OpConstant 6 
					                                         f32 %140 = OpConstant 3.674022E-40 
					                                Private f32* %154 = OpVariable Private 
					                                             %155 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %156 = OpTypeSampledImage %155 
					                                             %157 = OpTypePointer UniformConstant %156 
					 UniformConstant read_only Texture2DSampled* %158 = OpVariable UniformConstant 
					                                             %160 = OpTypePointer Input %126 
					                                Input f32_2* %161 = OpVariable Input 
					                                Private f32* %170 = OpVariable Private 
					                                         i32 %173 = OpConstant 7 
					                                         i32 %177 = OpConstant 3 
					                                         i32 %187 = OpConstant 4 
					                                         i32 %200 = OpConstant 2 
					 UniformConstant read_only Texture2DSampled* %217 = OpVariable UniformConstant 
					                                         i32 %243 = OpConstant 10 
					                                         i32 %251 = OpConstant 9 
					                                         i32 %274 = OpConstant 5 
					                                             %296 = OpTypePointer Output %14 
					                               Output f32_4* %297 = OpVariable Output 
					                                             %301 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %24 = OpAccessChain %20 %22 
					                                        f32_3 %25 = OpLoad %24 
					                                        f32_3 %26 = OpFAdd %13 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %29 = OpLoad %9 
					                                        f32_3 %30 = OpLoad %9 
					                                          f32 %31 = OpDot %29 %30 
					                                                      OpStore %28 %31 
					                                          f32 %32 = OpLoad %28 
					                                          f32 %33 = OpExtInst %1 32 %32 
					                                                      OpStore %28 %33 
					                                          f32 %34 = OpLoad %28 
					                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
					                                        f32_3 %36 = OpLoad %9 
					                                        f32_3 %37 = OpFMul %35 %36 
					                                                      OpStore %9 %37 
					                                        f32_3 %39 = OpLoad %11 
					                                        f32_3 %40 = OpFNegate %39 
					                               Uniform f32_4* %43 = OpAccessChain %20 %41 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %46 = OpFAdd %40 %45 
					                                                      OpStore %38 %46 
					                                        f32_3 %47 = OpLoad %38 
					                                        f32_3 %48 = OpLoad %38 
					                                          f32 %49 = OpDot %47 %48 
					                                                      OpStore %28 %49 
					                                          f32 %50 = OpLoad %28 
					                                          f32 %51 = OpExtInst %1 32 %50 
					                                                      OpStore %28 %51 
					                                        f32_3 %54 = OpLoad %38 
					                                          f32 %55 = OpLoad %28 
					                                        f32_3 %56 = OpCompositeConstruct %55 %55 %55 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_3 %58 = OpLoad %9 
					                                        f32_3 %59 = OpFAdd %57 %58 
					                                        f32_4 %60 = OpLoad %53 
					                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
					                                                      OpStore %53 %61 
					                                        f32_3 %62 = OpLoad %9 
					                                        f32_3 %64 = OpLoad %63 
					                                          f32 %65 = OpDot %62 %64 
					                                 Private f32* %67 = OpAccessChain %9 %66 
					                                                      OpStore %67 %65 
					                                 Private f32* %68 = OpAccessChain %9 %66 
					                                          f32 %69 = OpLoad %68 
					                                          f32 %72 = OpExtInst %1 43 %69 %70 %71 
					                                 Private f32* %73 = OpAccessChain %9 %66 
					                                                      OpStore %73 %72 
					                                 Private f32* %75 = OpAccessChain %9 %66 
					                                          f32 %76 = OpLoad %75 
					                                          f32 %77 = OpFNegate %76 
					                                          f32 %78 = OpFAdd %77 %71 
					                                                      OpStore %74 %78 
					                                          f32 %80 = OpLoad %74 
					                                          f32 %81 = OpExtInst %1 30 %80 
					                                                      OpStore %79 %81 
					                                          f32 %82 = OpLoad %79 
					                                 Uniform f32* %85 = OpAccessChain %20 %83 
					                                          f32 %86 = OpLoad %85 
					                                          f32 %87 = OpFMul %82 %86 
					                                 Private f32* %88 = OpAccessChain %9 %66 
					                                                      OpStore %88 %87 
					                                 Private f32* %89 = OpAccessChain %9 %66 
					                                          f32 %90 = OpLoad %89 
					                                          f32 %91 = OpExtInst %1 29 %90 
					                                 Private f32* %92 = OpAccessChain %9 %66 
					                                                      OpStore %92 %91 
					                                          f32 %94 = OpLoad %28 
					                                        f32_3 %95 = OpCompositeConstruct %94 %94 %94 
					                                        f32_3 %96 = OpLoad %38 
					                                        f32_3 %97 = OpFMul %95 %96 
					                                                      OpStore %93 %97 
					                                        f32_3 %98 = OpLoad %63 
					                                        f32_3 %99 = OpLoad %93 
					                                         f32 %100 = OpDot %98 %99 
					                                Private f32* %102 = OpAccessChain %53 %101 
					                                                      OpStore %102 %100 
					                                       f32_4 %104 = OpLoad %53 
					                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
					                                       f32_4 %106 = OpLoad %53 
					                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
					                                         f32 %108 = OpDot %105 %107 
					                                Private f32* %109 = OpAccessChain %103 %66 
					                                                      OpStore %109 %108 
					                                Private f32* %110 = OpAccessChain %103 %66 
					                                         f32 %111 = OpLoad %110 
					                                         f32 %112 = OpExtInst %1 32 %111 
					                                Private f32* %113 = OpAccessChain %103 %66 
					                                                      OpStore %113 %112 
					                                       f32_4 %114 = OpLoad %53 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                       f32_3 %116 = OpLoad %103 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 0 0 
					                                       f32_3 %118 = OpFMul %115 %117 
					                                       f32_4 %119 = OpLoad %53 
					                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
					                                                      OpStore %53 %120 
					                                       f32_3 %121 = OpLoad %63 
					                                       f32_4 %122 = OpLoad %53 
					                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
					                                         f32 %124 = OpDot %121 %123 
					                                Private f32* %125 = OpAccessChain %53 %66 
					                                                      OpStore %125 %124 
					                                       f32_4 %127 = OpLoad %53 
					                                       f32_2 %128 = OpVectorShuffle %127 %127 0 3 
					                                       f32_2 %130 = OpExtInst %1 40 %128 %129 
					                                       f32_4 %131 = OpLoad %53 
					                                       f32_4 %132 = OpVectorShuffle %131 %130 4 1 2 5 
					                                                      OpStore %53 %132 
					                                Private f32* %134 = OpAccessChain %53 %66 
					                                         f32 %135 = OpLoad %134 
					                                         f32 %136 = OpExtInst %1 30 %135 
					                                                      OpStore %133 %136 
					                                Uniform f32* %138 = OpAccessChain %20 %137 
					                                         f32 %139 = OpLoad %138 
					                                         f32 %141 = OpFMul %139 %140 
					                                Private f32* %142 = OpAccessChain %53 %66 
					                                                      OpStore %142 %141 
					                                         f32 %143 = OpLoad %133 
					                                Private f32* %144 = OpAccessChain %53 %66 
					                                         f32 %145 = OpLoad %144 
					                                         f32 %146 = OpFMul %143 %145 
					                                                      OpStore %133 %146 
					                                         f32 %147 = OpLoad %133 
					                                         f32 %148 = OpExtInst %1 29 %147 
					                                                      OpStore %133 %148 
					                                Private f32* %149 = OpAccessChain %9 %66 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpFNegate %150 
					                                         f32 %152 = OpFAdd %151 %71 
					                                Private f32* %153 = OpAccessChain %53 %66 
					                                                      OpStore %153 %152 
					                  read_only Texture2DSampled %159 = OpLoad %158 
					                                       f32_2 %162 = OpLoad %161 
					                                       f32_4 %163 = OpImageSampleImplicitLod %159 %162 
					                                         f32 %164 = OpCompositeExtract %163 3 
					                                                      OpStore %154 %164 
					                                Private f32* %165 = OpAccessChain %53 %66 
					                                         f32 %166 = OpLoad %165 
					                                         f32 %167 = OpLoad %154 
					                                         f32 %168 = OpFMul %166 %167 
					                                Private f32* %169 = OpAccessChain %53 %66 
					                                                      OpStore %169 %168 
					                                Private f32* %171 = OpAccessChain %53 %66 
					                                         f32 %172 = OpLoad %171 
					                                Uniform f32* %174 = OpAccessChain %20 %173 
					                                         f32 %175 = OpLoad %174 
					                                         f32 %176 = OpFMul %172 %175 
					                                Uniform f32* %178 = OpAccessChain %20 %177 %101 
					                                         f32 %179 = OpLoad %178 
					                                         f32 %180 = OpFAdd %176 %179 
					                                                      OpStore %170 %180 
					                                         f32 %181 = OpLoad %170 
					                                         f32 %182 = OpLoad %133 
					                                         f32 %183 = OpFMul %181 %182 
					                                Private f32* %184 = OpAccessChain %93 %66 
					                                                      OpStore %184 %183 
					                                       f32_3 %185 = OpLoad %11 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 1 1 1 
					                              Uniform f32_4* %188 = OpAccessChain %20 %187 %41 
					                                       f32_4 %189 = OpLoad %188 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %186 %190 
					                                                      OpStore %38 %191 
					                              Uniform f32_4* %192 = OpAccessChain %20 %187 %22 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                       f32_3 %195 = OpLoad %11 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
					                                       f32_3 %197 = OpFMul %194 %196 
					                                       f32_3 %198 = OpLoad %38 
					                                       f32_3 %199 = OpFAdd %197 %198 
					                                                      OpStore %38 %199 
					                              Uniform f32_4* %201 = OpAccessChain %20 %187 %200 
					                                       f32_4 %202 = OpLoad %201 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
					                                       f32_3 %204 = OpLoad %11 
					                                       f32_3 %205 = OpVectorShuffle %204 %204 2 2 2 
					                                       f32_3 %206 = OpFMul %203 %205 
					                                       f32_3 %207 = OpLoad %38 
					                                       f32_3 %208 = OpFAdd %206 %207 
					                                                      OpStore %38 %208 
					                                       f32_3 %209 = OpLoad %38 
					                              Uniform f32_4* %210 = OpAccessChain %20 %187 %177 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                       f32_3 %213 = OpFAdd %209 %212 
					                                                      OpStore %38 %213 
					                                       f32_3 %214 = OpLoad %38 
					                                       f32_3 %215 = OpLoad %38 
					                                         f32 %216 = OpDot %214 %215 
					                                                      OpStore %170 %216 
					                  read_only Texture2DSampled %218 = OpLoad %217 
					                                         f32 %219 = OpLoad %170 
					                                       f32_2 %220 = OpCompositeConstruct %219 %219 
					                                       f32_4 %221 = OpImageSampleImplicitLod %218 %220 
					                                         f32 %222 = OpCompositeExtract %221 3 
					                                                      OpStore %154 %222 
					                                         f32 %223 = OpLoad %154 
					                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
					                              Uniform f32_4* %225 = OpAccessChain %20 %200 
					                                       f32_4 %226 = OpLoad %225 
					                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
					                                       f32_3 %228 = OpFMul %224 %227 
					                                       f32_4 %229 = OpLoad %53 
					                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
					                                                      OpStore %53 %230 
					                                       f32_4 %231 = OpLoad %53 
					                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
					                              Uniform f32_4* %233 = OpAccessChain %20 %177 
					                                       f32_4 %234 = OpLoad %233 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
					                                       f32_3 %236 = OpFMul %232 %235 
					                                                      OpStore %103 %236 
					                                       f32_3 %237 = OpLoad %93 
					                                       f32_3 %238 = OpVectorShuffle %237 %237 0 0 0 
					                                       f32_3 %239 = OpLoad %103 
					                                       f32_3 %240 = OpFMul %238 %239 
					                                                      OpStore %93 %240 
					                                       f32_3 %241 = OpLoad %9 
					                                       f32_3 %242 = OpVectorShuffle %241 %241 0 0 0 
					                              Uniform f32_4* %244 = OpAccessChain %20 %243 
					                                       f32_4 %245 = OpLoad %244 
					                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
					                                       f32_3 %247 = OpFMul %242 %246 
					                                                      OpStore %103 %247 
					                                Private f32* %248 = OpAccessChain %9 %66 
					                                         f32 %249 = OpLoad %248 
					                                         f32 %250 = OpFNegate %249 
					                                Uniform f32* %252 = OpAccessChain %20 %251 
					                                         f32 %253 = OpLoad %252 
					                                         f32 %254 = OpFMul %250 %253 
					                                         f32 %255 = OpFAdd %254 %71 
					                                Private f32* %256 = OpAccessChain %9 %66 
					                                                      OpStore %256 %255 
					                                Private f32* %257 = OpAccessChain %9 %66 
					                                         f32 %258 = OpLoad %257 
					                                         f32 %259 = OpExtInst %1 43 %258 %70 %71 
					                                Private f32* %260 = OpAccessChain %9 %66 
					                                                      OpStore %260 %259 
					                                       f32_3 %261 = OpLoad %103 
					                                Uniform f32* %262 = OpAccessChain %20 %251 
					                                         f32 %263 = OpLoad %262 
					                                Uniform f32* %264 = OpAccessChain %20 %251 
					                                         f32 %265 = OpLoad %264 
					                                Uniform f32* %266 = OpAccessChain %20 %251 
					                                         f32 %267 = OpLoad %266 
					                                       f32_3 %268 = OpCompositeConstruct %263 %265 %267 
					                                         f32 %269 = OpCompositeExtract %268 0 
					                                         f32 %270 = OpCompositeExtract %268 1 
					                                         f32 %271 = OpCompositeExtract %268 2 
					                                       f32_3 %272 = OpCompositeConstruct %269 %270 %271 
					                                       f32_3 %273 = OpFMul %261 %272 
					                                                      OpStore %38 %273 
					                              Uniform f32_4* %275 = OpAccessChain %20 %274 
					                                       f32_4 %276 = OpLoad %275 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
					                                       f32_3 %278 = OpLoad %9 
					                                       f32_3 %279 = OpVectorShuffle %278 %278 0 0 0 
					                                       f32_3 %280 = OpFMul %277 %279 
					                                       f32_3 %281 = OpLoad %38 
					                                       f32_3 %282 = OpFAdd %280 %281 
					                                                      OpStore %38 %282 
					                                       f32_4 %283 = OpLoad %53 
					                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
					                                       f32_3 %285 = OpLoad %38 
					                                       f32_3 %286 = OpFMul %284 %285 
					                                       f32_4 %287 = OpLoad %53 
					                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
					                                                      OpStore %53 %288 
					                                       f32_4 %289 = OpLoad %53 
					                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
					                                       f32_4 %291 = OpLoad %53 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 3 3 3 
					                                       f32_3 %293 = OpFMul %290 %292 
					                                       f32_3 %294 = OpLoad %93 
					                                       f32_3 %295 = OpFAdd %293 %294 
					                                                      OpStore %9 %295 
					                                       f32_3 %298 = OpLoad %9 
					                                       f32_4 %299 = OpLoad %297 
					                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
					                                                      OpStore %297 %300 
					                                 Output f32* %302 = OpAccessChain %297 %101 
					                                                      OpStore %302 %71 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  lowp vec3 lightDir_6;
					  highp vec3 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_7.x = 1.0;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_5 = tmpvar_10;
					  tmpvar_8 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  mediump float fres_13;
					  mediump float rim_14;
					  mediump float tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = clamp (dot (normalize(tmpvar_8), tmpvar_4), 0.0, 1.0);
					  tmpvar_15 = tmpvar_16;
					  rim_14 = (1.0 - tmpvar_15);
					  fres_13 = rim_14;
					  highp float tmpvar_17;
					  tmpvar_17 = pow (rim_14, _RimAmt);
					  rim_14 = tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (fres_13, _FresAmt);
					  fres_13 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = clamp ((1.0 - (rim_14 * _RimPwr)), 0.0, 1.0);
					  tmpvar_11 = (_Color.xyz * tmpvar_19);
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((rim_14 * _RimColor) * _RimPwr).xyz;
					  tmpvar_11 = (tmpvar_11 + tmpvar_20);
					  tmpvar_12 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_14)
					  ) * _FlakeAmt));
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  mediump vec3 viewDir_21;
					  viewDir_21 = tmpvar_10;
					  lowp vec4 c_22;
					  lowp vec4 c_23;
					  highp float nh_24;
					  lowp float diff_25;
					  mediump float tmpvar_26;
					  tmpvar_26 = max (0.0, dot (tmpvar_4, tmpvar_2));
					  diff_25 = tmpvar_26;
					  mediump float tmpvar_27;
					  tmpvar_27 = max (0.0, dot (tmpvar_4, normalize(
					    (tmpvar_2 + viewDir_21)
					  )));
					  nh_24 = tmpvar_27;
					  mediump float y_28;
					  y_28 = (_Shininess * 128.0);
					  highp float tmpvar_29;
					  tmpvar_29 = (pow (nh_24, y_28) * tmpvar_12);
					  c_23.xyz = (((tmpvar_11 * tmpvar_1) * diff_25) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_29));
					  c_23.w = (textureCube (_Cube, tmpvar_7).w * _ReflectColor.w);
					  c_22.w = c_23.w;
					  c_22.xyz = c_23.xyz;
					  c_3.xyz = c_22.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  lowp vec3 lightDir_6;
					  highp vec3 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_7.x = 1.0;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_5 = tmpvar_10;
					  tmpvar_8 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  mediump float fres_13;
					  mediump float rim_14;
					  mediump float tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = clamp (dot (normalize(tmpvar_8), tmpvar_4), 0.0, 1.0);
					  tmpvar_15 = tmpvar_16;
					  rim_14 = (1.0 - tmpvar_15);
					  fres_13 = rim_14;
					  highp float tmpvar_17;
					  tmpvar_17 = pow (rim_14, _RimAmt);
					  rim_14 = tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (fres_13, _FresAmt);
					  fres_13 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = clamp ((1.0 - (rim_14 * _RimPwr)), 0.0, 1.0);
					  tmpvar_11 = (_Color.xyz * tmpvar_19);
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((rim_14 * _RimColor) * _RimPwr).xyz;
					  tmpvar_11 = (tmpvar_11 + tmpvar_20);
					  tmpvar_12 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_14)
					  ) * _FlakeAmt));
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  mediump vec3 viewDir_21;
					  viewDir_21 = tmpvar_10;
					  lowp vec4 c_22;
					  lowp vec4 c_23;
					  highp float nh_24;
					  lowp float diff_25;
					  mediump float tmpvar_26;
					  tmpvar_26 = max (0.0, dot (tmpvar_4, tmpvar_2));
					  diff_25 = tmpvar_26;
					  mediump float tmpvar_27;
					  tmpvar_27 = max (0.0, dot (tmpvar_4, normalize(
					    (tmpvar_2 + viewDir_21)
					  )));
					  nh_24 = tmpvar_27;
					  mediump float y_28;
					  y_28 = (_Shininess * 128.0);
					  highp float tmpvar_29;
					  tmpvar_29 = (pow (nh_24, y_28) * tmpvar_12);
					  c_23.xyz = (((tmpvar_11 * tmpvar_1) * diff_25) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_29));
					  c_23.w = (textureCube (_Cube, tmpvar_7).w * _ReflectColor.w);
					  c_22.w = c_23.w;
					  c_22.xyz = c_23.xyz;
					  c_3.xyz = c_22.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  lowp vec3 lightDir_6;
					  highp vec3 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_7.x = 1.0;
					  mediump vec3 tmpvar_9;
					  tmpvar_9 = _WorldSpaceLightPos0.xyz;
					  lightDir_6 = tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_5 = tmpvar_10;
					  tmpvar_8 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_11;
					  lowp float tmpvar_12;
					  mediump float fres_13;
					  mediump float rim_14;
					  mediump float tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = clamp (dot (normalize(tmpvar_8), tmpvar_4), 0.0, 1.0);
					  tmpvar_15 = tmpvar_16;
					  rim_14 = (1.0 - tmpvar_15);
					  fres_13 = rim_14;
					  highp float tmpvar_17;
					  tmpvar_17 = pow (rim_14, _RimAmt);
					  rim_14 = tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (fres_13, _FresAmt);
					  fres_13 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = clamp ((1.0 - (rim_14 * _RimPwr)), 0.0, 1.0);
					  tmpvar_11 = (_Color.xyz * tmpvar_19);
					  highp vec3 tmpvar_20;
					  tmpvar_20 = ((rim_14 * _RimColor) * _RimPwr).xyz;
					  tmpvar_11 = (tmpvar_11 + tmpvar_20);
					  tmpvar_12 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_14)
					  ) * _FlakeAmt));
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_6;
					  mediump vec3 viewDir_21;
					  viewDir_21 = tmpvar_10;
					  lowp vec4 c_22;
					  lowp vec4 c_23;
					  highp float nh_24;
					  lowp float diff_25;
					  mediump float tmpvar_26;
					  tmpvar_26 = max (0.0, dot (tmpvar_4, tmpvar_2));
					  diff_25 = tmpvar_26;
					  mediump float tmpvar_27;
					  tmpvar_27 = max (0.0, dot (tmpvar_4, normalize(
					    (tmpvar_2 + viewDir_21)
					  )));
					  nh_24 = tmpvar_27;
					  mediump float y_28;
					  y_28 = (_Shininess * 128.0);
					  highp float tmpvar_29;
					  tmpvar_29 = (pow (nh_24, y_28) * tmpvar_12);
					  c_23.xyz = (((tmpvar_11 * tmpvar_1) * diff_25) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_29));
					  c_23.w = (textureCube (_Cube, tmpvar_7).w * _ReflectColor.w);
					  c_22.w = c_23.w;
					  c_22.xyz = c_23.xyz;
					  c_3.xyz = c_22.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					float u_xlat6;
					lowp float u_xlat10_6;
					float u_xlat9;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_10);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat16_10 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_10 = inversesqrt(u_xlat16_10);
					    u_xlat16_1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_3 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_1.x;
					    u_xlat16_3 = exp2(u_xlat16_3);
					    u_xlat16_1.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_6 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_6;
					    u_xlat6 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat3.x = u_xlat6 * u_xlat16_3;
					    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat2.xyz = _Color.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat16_1.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_10) + u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					float u_xlat6;
					lowp float u_xlat10_6;
					float u_xlat9;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_10);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat16_10 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_10 = inversesqrt(u_xlat16_10);
					    u_xlat16_1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_3 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_1.x;
					    u_xlat16_3 = exp2(u_xlat16_3);
					    u_xlat16_1.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_6 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_6;
					    u_xlat6 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat3.x = u_xlat6 * u_xlat16_3;
					    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat2.xyz = _Color.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat16_1.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_10) + u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					float u_xlat6;
					lowp float u_xlat10_6;
					float u_xlat9;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_10);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat16_10 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_10 = inversesqrt(u_xlat16_10);
					    u_xlat16_1.xyz = vec3(u_xlat16_10) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_3 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_3 = u_xlat16_3 * u_xlat16_1.x;
					    u_xlat16_3 = exp2(u_xlat16_3);
					    u_xlat16_1.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_6 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_6;
					    u_xlat6 = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat3.x = u_xlat6 * u_xlat16_3;
					    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat2.xyz = _Color.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat16_1.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_10) + u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 231
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %47 %124 %224 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpMemberDecorate %15 0 Offset 15 
					                                                      OpMemberDecorate %15 1 RelaxedPrecision 
					                                                      OpMemberDecorate %15 1 Offset 15 
					                                                      OpMemberDecorate %15 2 RelaxedPrecision 
					                                                      OpMemberDecorate %15 2 Offset 15 
					                                                      OpMemberDecorate %15 3 RelaxedPrecision 
					                                                      OpMemberDecorate %15 3 Offset 15 
					                                                      OpMemberDecorate %15 4 RelaxedPrecision 
					                                                      OpMemberDecorate %15 4 Offset 15 
					                                                      OpMemberDecorate %15 5 RelaxedPrecision 
					                                                      OpMemberDecorate %15 5 Offset 15 
					                                                      OpMemberDecorate %15 6 Offset 15 
					                                                      OpMemberDecorate %15 7 Offset 15 
					                                                      OpMemberDecorate %15 8 Offset 15 
					                                                      OpMemberDecorate %15 9 RelaxedPrecision 
					                                                      OpMemberDecorate %15 9 Offset 15 
					                                                      OpDecorate %15 Block 
					                                                      OpDecorate %17 DescriptorSet 17 
					                                                      OpDecorate %17 Binding 17 
					                                                      OpDecorate %31 RelaxedPrecision 
					                                                      OpDecorate %39 RelaxedPrecision 
					                                                      OpDecorate %40 RelaxedPrecision 
					                                                      OpDecorate %47 Location 47 
					                                                      OpDecorate %59 RelaxedPrecision 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %78 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %82 RelaxedPrecision 
					                                                      OpDecorate %83 RelaxedPrecision 
					                                                      OpDecorate %84 RelaxedPrecision 
					                                                      OpDecorate %85 RelaxedPrecision 
					                                                      OpDecorate %86 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %103 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %107 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %116 RelaxedPrecision 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %120 DescriptorSet 120 
					                                                      OpDecorate %120 Binding 120 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %124 Location 124 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %152 RelaxedPrecision 
					                                                      OpDecorate %153 RelaxedPrecision 
					                                                      OpDecorate %155 RelaxedPrecision 
					                                                      OpDecorate %156 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %183 RelaxedPrecision 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %191 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %208 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %224 Location 224 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeStruct %7 %14 %14 %14 %14 %6 %6 %6 %6 %14 
					                                              %16 = OpTypePointer Uniform %15 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32_4;}* %17 = OpVariable Uniform 
					                                              %18 = OpTypeInt 32 1 
					                                          i32 %19 = OpConstant 0 
					                                              %20 = OpTypePointer Uniform %7 
					                                              %24 = OpTypePointer Private %6 
					                                 Private f32* %25 = OpVariable Private 
					                               Private f32_3* %31 = OpVariable Private 
					                                          i32 %36 = OpConstant 1 
					                                              %37 = OpTypePointer Uniform %14 
					                                 Input f32_3* %47 = OpVariable Input 
					                                              %50 = OpTypeInt 32 0 
					                                          u32 %51 = OpConstant 0 
					                                          f32 %55 = OpConstant 3.674022E-40 
					                                          f32 %56 = OpConstant 3.674022E-40 
					                                 Private f32* %59 = OpVariable Private 
					                                 Private f32* %64 = OpVariable Private 
					                                          i32 %68 = OpConstant 7 
					                                              %69 = OpTypePointer Uniform %6 
					                                 Private f32* %95 = OpVariable Private 
					                                          i32 %99 = OpConstant 5 
					                                         f32 %102 = OpConstant 3.674022E-40 
					                                Private f32* %116 = OpVariable Private 
					                                             %117 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %118 = OpTypeSampledImage %117 
					                                             %119 = OpTypePointer UniformConstant %118 
					 UniformConstant read_only Texture2DSampled* %120 = OpVariable UniformConstant 
					                                             %122 = OpTypeVector %6 2 
					                                             %123 = OpTypePointer Input %122 
					                                Input f32_2* %124 = OpVariable Input 
					                                         u32 %127 = OpConstant 3 
					                                Private f32* %134 = OpVariable Private 
					                                         i32 %137 = OpConstant 6 
					                                         i32 %141 = OpConstant 3 
					                              Private f32_3* %145 = OpVariable Private 
					                                         i32 %150 = OpConstant 2 
					                                         i32 %164 = OpConstant 9 
					                                         i32 %172 = OpConstant 8 
					                              Private f32_3* %182 = OpVariable Private 
					                                         i32 %196 = OpConstant 4 
					                                             %223 = OpTypePointer Output %14 
					                               Output f32_4* %224 = OpVariable Output 
					                                             %228 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %21 = OpAccessChain %17 %19 
					                                        f32_3 %22 = OpLoad %21 
					                                        f32_3 %23 = OpFAdd %13 %22 
					                                                      OpStore %9 %23 
					                                        f32_3 %26 = OpLoad %9 
					                                        f32_3 %27 = OpLoad %9 
					                                          f32 %28 = OpDot %26 %27 
					                                                      OpStore %25 %28 
					                                          f32 %29 = OpLoad %25 
					                                          f32 %30 = OpExtInst %1 32 %29 
					                                                      OpStore %25 %30 
					                                        f32_3 %32 = OpLoad %9 
					                                          f32 %33 = OpLoad %25 
					                                        f32_3 %34 = OpCompositeConstruct %33 %33 %33 
					                                        f32_3 %35 = OpFMul %32 %34 
					                               Uniform f32_4* %38 = OpAccessChain %17 %36 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
					                                        f32_3 %41 = OpFAdd %35 %40 
					                                                      OpStore %31 %41 
					                                          f32 %42 = OpLoad %25 
					                                        f32_3 %43 = OpCompositeConstruct %42 %42 %42 
					                                        f32_3 %44 = OpLoad %9 
					                                        f32_3 %45 = OpFMul %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_3 %46 = OpLoad %9 
					                                        f32_3 %48 = OpLoad %47 
					                                          f32 %49 = OpDot %46 %48 
					                                 Private f32* %52 = OpAccessChain %9 %51 
					                                                      OpStore %52 %49 
					                                 Private f32* %53 = OpAccessChain %9 %51 
					                                          f32 %54 = OpLoad %53 
					                                          f32 %57 = OpExtInst %1 43 %54 %55 %56 
					                                 Private f32* %58 = OpAccessChain %9 %51 
					                                                      OpStore %58 %57 
					                                 Private f32* %60 = OpAccessChain %9 %51 
					                                          f32 %61 = OpLoad %60 
					                                          f32 %62 = OpFNegate %61 
					                                          f32 %63 = OpFAdd %62 %56 
					                                                      OpStore %59 %63 
					                                          f32 %65 = OpLoad %59 
					                                          f32 %66 = OpExtInst %1 30 %65 
					                                                      OpStore %64 %66 
					                                          f32 %67 = OpLoad %64 
					                                 Uniform f32* %70 = OpAccessChain %17 %68 
					                                          f32 %71 = OpLoad %70 
					                                          f32 %72 = OpFMul %67 %71 
					                                 Private f32* %73 = OpAccessChain %9 %51 
					                                                      OpStore %73 %72 
					                                 Private f32* %74 = OpAccessChain %9 %51 
					                                          f32 %75 = OpLoad %74 
					                                          f32 %76 = OpExtInst %1 29 %75 
					                                 Private f32* %77 = OpAccessChain %9 %51 
					                                                      OpStore %77 %76 
					                                        f32_3 %78 = OpLoad %31 
					                                        f32_3 %79 = OpLoad %31 
					                                          f32 %80 = OpDot %78 %79 
					                                                      OpStore %59 %80 
					                                          f32 %81 = OpLoad %59 
					                                          f32 %82 = OpExtInst %1 32 %81 
					                                                      OpStore %59 %82 
					                                          f32 %83 = OpLoad %59 
					                                        f32_3 %84 = OpCompositeConstruct %83 %83 %83 
					                                        f32_3 %85 = OpLoad %31 
					                                        f32_3 %86 = OpFMul %84 %85 
					                                                      OpStore %31 %86 
					                                        f32_3 %87 = OpLoad %47 
					                                        f32_3 %88 = OpLoad %31 
					                                          f32 %89 = OpDot %87 %88 
					                                 Private f32* %90 = OpAccessChain %31 %51 
					                                                      OpStore %90 %89 
					                                 Private f32* %91 = OpAccessChain %31 %51 
					                                          f32 %92 = OpLoad %91 
					                                          f32 %93 = OpExtInst %1 40 %92 %55 
					                                 Private f32* %94 = OpAccessChain %31 %51 
					                                                      OpStore %94 %93 
					                                 Private f32* %96 = OpAccessChain %31 %51 
					                                          f32 %97 = OpLoad %96 
					                                          f32 %98 = OpExtInst %1 30 %97 
					                                                      OpStore %95 %98 
					                                Uniform f32* %100 = OpAccessChain %17 %99 
					                                         f32 %101 = OpLoad %100 
					                                         f32 %103 = OpFMul %101 %102 
					                                Private f32* %104 = OpAccessChain %31 %51 
					                                                      OpStore %104 %103 
					                                         f32 %105 = OpLoad %95 
					                                Private f32* %106 = OpAccessChain %31 %51 
					                                         f32 %107 = OpLoad %106 
					                                         f32 %108 = OpFMul %105 %107 
					                                                      OpStore %95 %108 
					                                         f32 %109 = OpLoad %95 
					                                         f32 %110 = OpExtInst %1 29 %109 
					                                                      OpStore %95 %110 
					                                Private f32* %111 = OpAccessChain %9 %51 
					                                         f32 %112 = OpLoad %111 
					                                         f32 %113 = OpFNegate %112 
					                                         f32 %114 = OpFAdd %113 %56 
					                                Private f32* %115 = OpAccessChain %31 %51 
					                                                      OpStore %115 %114 
					                  read_only Texture2DSampled %121 = OpLoad %120 
					                                       f32_2 %125 = OpLoad %124 
					                                       f32_4 %126 = OpImageSampleImplicitLod %121 %125 
					                                         f32 %128 = OpCompositeExtract %126 3 
					                                                      OpStore %116 %128 
					                                Private f32* %129 = OpAccessChain %31 %51 
					                                         f32 %130 = OpLoad %129 
					                                         f32 %131 = OpLoad %116 
					                                         f32 %132 = OpFMul %130 %131 
					                                Private f32* %133 = OpAccessChain %31 %51 
					                                                      OpStore %133 %132 
					                                Private f32* %135 = OpAccessChain %31 %51 
					                                         f32 %136 = OpLoad %135 
					                                Uniform f32* %138 = OpAccessChain %17 %137 
					                                         f32 %139 = OpLoad %138 
					                                         f32 %140 = OpFMul %136 %139 
					                                Uniform f32* %142 = OpAccessChain %17 %141 %127 
					                                         f32 %143 = OpLoad %142 
					                                         f32 %144 = OpFAdd %140 %143 
					                                                      OpStore %134 %144 
					                                         f32 %146 = OpLoad %134 
					                                         f32 %147 = OpLoad %95 
					                                         f32 %148 = OpFMul %146 %147 
					                                Private f32* %149 = OpAccessChain %145 %51 
					                                                      OpStore %149 %148 
					                              Uniform f32_4* %151 = OpAccessChain %17 %150 
					                                       f32_4 %152 = OpLoad %151 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                              Uniform f32_4* %154 = OpAccessChain %17 %141 
					                                       f32_4 %155 = OpLoad %154 
					                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
					                                       f32_3 %157 = OpFMul %153 %156 
					                                                      OpStore %31 %157 
					                                       f32_3 %158 = OpLoad %145 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
					                                       f32_3 %160 = OpLoad %31 
					                                       f32_3 %161 = OpFMul %159 %160 
					                                                      OpStore %145 %161 
					                                       f32_3 %162 = OpLoad %9 
					                                       f32_3 %163 = OpVectorShuffle %162 %162 0 0 0 
					                              Uniform f32_4* %165 = OpAccessChain %17 %164 
					                                       f32_4 %166 = OpLoad %165 
					                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
					                                       f32_3 %168 = OpFMul %163 %167 
					                                                      OpStore %31 %168 
					                                Private f32* %169 = OpAccessChain %9 %51 
					                                         f32 %170 = OpLoad %169 
					                                         f32 %171 = OpFNegate %170 
					                                Uniform f32* %173 = OpAccessChain %17 %172 
					                                         f32 %174 = OpLoad %173 
					                                         f32 %175 = OpFMul %171 %174 
					                                         f32 %176 = OpFAdd %175 %56 
					                                Private f32* %177 = OpAccessChain %9 %51 
					                                                      OpStore %177 %176 
					                                Private f32* %178 = OpAccessChain %9 %51 
					                                         f32 %179 = OpLoad %178 
					                                         f32 %180 = OpExtInst %1 43 %179 %55 %56 
					                                Private f32* %181 = OpAccessChain %9 %51 
					                                                      OpStore %181 %180 
					                                       f32_3 %183 = OpLoad %31 
					                                Uniform f32* %184 = OpAccessChain %17 %172 
					                                         f32 %185 = OpLoad %184 
					                                Uniform f32* %186 = OpAccessChain %17 %172 
					                                         f32 %187 = OpLoad %186 
					                                Uniform f32* %188 = OpAccessChain %17 %172 
					                                         f32 %189 = OpLoad %188 
					                                       f32_3 %190 = OpCompositeConstruct %185 %187 %189 
					                                         f32 %191 = OpCompositeExtract %190 0 
					                                         f32 %192 = OpCompositeExtract %190 1 
					                                         f32 %193 = OpCompositeExtract %190 2 
					                                       f32_3 %194 = OpCompositeConstruct %191 %192 %193 
					                                       f32_3 %195 = OpFMul %183 %194 
					                                                      OpStore %182 %195 
					                              Uniform f32_4* %197 = OpAccessChain %17 %196 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                       f32_3 %200 = OpLoad %9 
					                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
					                                       f32_3 %202 = OpFMul %199 %201 
					                                       f32_3 %203 = OpLoad %182 
					                                       f32_3 %204 = OpFAdd %202 %203 
					                                                      OpStore %182 %204 
					                                       f32_3 %205 = OpLoad %182 
					                              Uniform f32_4* %206 = OpAccessChain %17 %150 
					                                       f32_4 %207 = OpLoad %206 
					                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
					                                       f32_3 %209 = OpFMul %205 %208 
					                                                      OpStore %31 %209 
					                                       f32_3 %210 = OpLoad %47 
					                              Uniform f32_4* %211 = OpAccessChain %17 %36 
					                                       f32_4 %212 = OpLoad %211 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                                         f32 %214 = OpDot %210 %213 
					                                                      OpStore %59 %214 
					                                         f32 %215 = OpLoad %59 
					                                         f32 %216 = OpExtInst %1 40 %215 %55 
					                                                      OpStore %59 %216 
					                                       f32_3 %217 = OpLoad %31 
					                                         f32 %218 = OpLoad %59 
					                                       f32_3 %219 = OpCompositeConstruct %218 %218 %218 
					                                       f32_3 %220 = OpFMul %217 %219 
					                                       f32_3 %221 = OpLoad %145 
					                                       f32_3 %222 = OpFAdd %220 %221 
					                                                      OpStore %9 %222 
					                                       f32_3 %225 = OpLoad %9 
					                                       f32_4 %226 = OpLoad %224 
					                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
					                                                      OpStore %224 %227 
					                                 Output f32* %229 = OpAccessChain %224 %127 
					                                                      OpStore %229 %56 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 231
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %47 %124 %224 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpMemberDecorate %15 0 Offset 15 
					                                                      OpMemberDecorate %15 1 RelaxedPrecision 
					                                                      OpMemberDecorate %15 1 Offset 15 
					                                                      OpMemberDecorate %15 2 RelaxedPrecision 
					                                                      OpMemberDecorate %15 2 Offset 15 
					                                                      OpMemberDecorate %15 3 RelaxedPrecision 
					                                                      OpMemberDecorate %15 3 Offset 15 
					                                                      OpMemberDecorate %15 4 RelaxedPrecision 
					                                                      OpMemberDecorate %15 4 Offset 15 
					                                                      OpMemberDecorate %15 5 RelaxedPrecision 
					                                                      OpMemberDecorate %15 5 Offset 15 
					                                                      OpMemberDecorate %15 6 Offset 15 
					                                                      OpMemberDecorate %15 7 Offset 15 
					                                                      OpMemberDecorate %15 8 Offset 15 
					                                                      OpMemberDecorate %15 9 RelaxedPrecision 
					                                                      OpMemberDecorate %15 9 Offset 15 
					                                                      OpDecorate %15 Block 
					                                                      OpDecorate %17 DescriptorSet 17 
					                                                      OpDecorate %17 Binding 17 
					                                                      OpDecorate %31 RelaxedPrecision 
					                                                      OpDecorate %39 RelaxedPrecision 
					                                                      OpDecorate %40 RelaxedPrecision 
					                                                      OpDecorate %47 Location 47 
					                                                      OpDecorate %59 RelaxedPrecision 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %78 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %82 RelaxedPrecision 
					                                                      OpDecorate %83 RelaxedPrecision 
					                                                      OpDecorate %84 RelaxedPrecision 
					                                                      OpDecorate %85 RelaxedPrecision 
					                                                      OpDecorate %86 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %103 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %107 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %116 RelaxedPrecision 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %120 DescriptorSet 120 
					                                                      OpDecorate %120 Binding 120 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %124 Location 124 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %152 RelaxedPrecision 
					                                                      OpDecorate %153 RelaxedPrecision 
					                                                      OpDecorate %155 RelaxedPrecision 
					                                                      OpDecorate %156 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %183 RelaxedPrecision 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %191 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %208 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %224 Location 224 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeStruct %7 %14 %14 %14 %14 %6 %6 %6 %6 %14 
					                                              %16 = OpTypePointer Uniform %15 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32_4;}* %17 = OpVariable Uniform 
					                                              %18 = OpTypeInt 32 1 
					                                          i32 %19 = OpConstant 0 
					                                              %20 = OpTypePointer Uniform %7 
					                                              %24 = OpTypePointer Private %6 
					                                 Private f32* %25 = OpVariable Private 
					                               Private f32_3* %31 = OpVariable Private 
					                                          i32 %36 = OpConstant 1 
					                                              %37 = OpTypePointer Uniform %14 
					                                 Input f32_3* %47 = OpVariable Input 
					                                              %50 = OpTypeInt 32 0 
					                                          u32 %51 = OpConstant 0 
					                                          f32 %55 = OpConstant 3.674022E-40 
					                                          f32 %56 = OpConstant 3.674022E-40 
					                                 Private f32* %59 = OpVariable Private 
					                                 Private f32* %64 = OpVariable Private 
					                                          i32 %68 = OpConstant 7 
					                                              %69 = OpTypePointer Uniform %6 
					                                 Private f32* %95 = OpVariable Private 
					                                          i32 %99 = OpConstant 5 
					                                         f32 %102 = OpConstant 3.674022E-40 
					                                Private f32* %116 = OpVariable Private 
					                                             %117 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %118 = OpTypeSampledImage %117 
					                                             %119 = OpTypePointer UniformConstant %118 
					 UniformConstant read_only Texture2DSampled* %120 = OpVariable UniformConstant 
					                                             %122 = OpTypeVector %6 2 
					                                             %123 = OpTypePointer Input %122 
					                                Input f32_2* %124 = OpVariable Input 
					                                         u32 %127 = OpConstant 3 
					                                Private f32* %134 = OpVariable Private 
					                                         i32 %137 = OpConstant 6 
					                                         i32 %141 = OpConstant 3 
					                              Private f32_3* %145 = OpVariable Private 
					                                         i32 %150 = OpConstant 2 
					                                         i32 %164 = OpConstant 9 
					                                         i32 %172 = OpConstant 8 
					                              Private f32_3* %182 = OpVariable Private 
					                                         i32 %196 = OpConstant 4 
					                                             %223 = OpTypePointer Output %14 
					                               Output f32_4* %224 = OpVariable Output 
					                                             %228 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %21 = OpAccessChain %17 %19 
					                                        f32_3 %22 = OpLoad %21 
					                                        f32_3 %23 = OpFAdd %13 %22 
					                                                      OpStore %9 %23 
					                                        f32_3 %26 = OpLoad %9 
					                                        f32_3 %27 = OpLoad %9 
					                                          f32 %28 = OpDot %26 %27 
					                                                      OpStore %25 %28 
					                                          f32 %29 = OpLoad %25 
					                                          f32 %30 = OpExtInst %1 32 %29 
					                                                      OpStore %25 %30 
					                                        f32_3 %32 = OpLoad %9 
					                                          f32 %33 = OpLoad %25 
					                                        f32_3 %34 = OpCompositeConstruct %33 %33 %33 
					                                        f32_3 %35 = OpFMul %32 %34 
					                               Uniform f32_4* %38 = OpAccessChain %17 %36 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
					                                        f32_3 %41 = OpFAdd %35 %40 
					                                                      OpStore %31 %41 
					                                          f32 %42 = OpLoad %25 
					                                        f32_3 %43 = OpCompositeConstruct %42 %42 %42 
					                                        f32_3 %44 = OpLoad %9 
					                                        f32_3 %45 = OpFMul %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_3 %46 = OpLoad %9 
					                                        f32_3 %48 = OpLoad %47 
					                                          f32 %49 = OpDot %46 %48 
					                                 Private f32* %52 = OpAccessChain %9 %51 
					                                                      OpStore %52 %49 
					                                 Private f32* %53 = OpAccessChain %9 %51 
					                                          f32 %54 = OpLoad %53 
					                                          f32 %57 = OpExtInst %1 43 %54 %55 %56 
					                                 Private f32* %58 = OpAccessChain %9 %51 
					                                                      OpStore %58 %57 
					                                 Private f32* %60 = OpAccessChain %9 %51 
					                                          f32 %61 = OpLoad %60 
					                                          f32 %62 = OpFNegate %61 
					                                          f32 %63 = OpFAdd %62 %56 
					                                                      OpStore %59 %63 
					                                          f32 %65 = OpLoad %59 
					                                          f32 %66 = OpExtInst %1 30 %65 
					                                                      OpStore %64 %66 
					                                          f32 %67 = OpLoad %64 
					                                 Uniform f32* %70 = OpAccessChain %17 %68 
					                                          f32 %71 = OpLoad %70 
					                                          f32 %72 = OpFMul %67 %71 
					                                 Private f32* %73 = OpAccessChain %9 %51 
					                                                      OpStore %73 %72 
					                                 Private f32* %74 = OpAccessChain %9 %51 
					                                          f32 %75 = OpLoad %74 
					                                          f32 %76 = OpExtInst %1 29 %75 
					                                 Private f32* %77 = OpAccessChain %9 %51 
					                                                      OpStore %77 %76 
					                                        f32_3 %78 = OpLoad %31 
					                                        f32_3 %79 = OpLoad %31 
					                                          f32 %80 = OpDot %78 %79 
					                                                      OpStore %59 %80 
					                                          f32 %81 = OpLoad %59 
					                                          f32 %82 = OpExtInst %1 32 %81 
					                                                      OpStore %59 %82 
					                                          f32 %83 = OpLoad %59 
					                                        f32_3 %84 = OpCompositeConstruct %83 %83 %83 
					                                        f32_3 %85 = OpLoad %31 
					                                        f32_3 %86 = OpFMul %84 %85 
					                                                      OpStore %31 %86 
					                                        f32_3 %87 = OpLoad %47 
					                                        f32_3 %88 = OpLoad %31 
					                                          f32 %89 = OpDot %87 %88 
					                                 Private f32* %90 = OpAccessChain %31 %51 
					                                                      OpStore %90 %89 
					                                 Private f32* %91 = OpAccessChain %31 %51 
					                                          f32 %92 = OpLoad %91 
					                                          f32 %93 = OpExtInst %1 40 %92 %55 
					                                 Private f32* %94 = OpAccessChain %31 %51 
					                                                      OpStore %94 %93 
					                                 Private f32* %96 = OpAccessChain %31 %51 
					                                          f32 %97 = OpLoad %96 
					                                          f32 %98 = OpExtInst %1 30 %97 
					                                                      OpStore %95 %98 
					                                Uniform f32* %100 = OpAccessChain %17 %99 
					                                         f32 %101 = OpLoad %100 
					                                         f32 %103 = OpFMul %101 %102 
					                                Private f32* %104 = OpAccessChain %31 %51 
					                                                      OpStore %104 %103 
					                                         f32 %105 = OpLoad %95 
					                                Private f32* %106 = OpAccessChain %31 %51 
					                                         f32 %107 = OpLoad %106 
					                                         f32 %108 = OpFMul %105 %107 
					                                                      OpStore %95 %108 
					                                         f32 %109 = OpLoad %95 
					                                         f32 %110 = OpExtInst %1 29 %109 
					                                                      OpStore %95 %110 
					                                Private f32* %111 = OpAccessChain %9 %51 
					                                         f32 %112 = OpLoad %111 
					                                         f32 %113 = OpFNegate %112 
					                                         f32 %114 = OpFAdd %113 %56 
					                                Private f32* %115 = OpAccessChain %31 %51 
					                                                      OpStore %115 %114 
					                  read_only Texture2DSampled %121 = OpLoad %120 
					                                       f32_2 %125 = OpLoad %124 
					                                       f32_4 %126 = OpImageSampleImplicitLod %121 %125 
					                                         f32 %128 = OpCompositeExtract %126 3 
					                                                      OpStore %116 %128 
					                                Private f32* %129 = OpAccessChain %31 %51 
					                                         f32 %130 = OpLoad %129 
					                                         f32 %131 = OpLoad %116 
					                                         f32 %132 = OpFMul %130 %131 
					                                Private f32* %133 = OpAccessChain %31 %51 
					                                                      OpStore %133 %132 
					                                Private f32* %135 = OpAccessChain %31 %51 
					                                         f32 %136 = OpLoad %135 
					                                Uniform f32* %138 = OpAccessChain %17 %137 
					                                         f32 %139 = OpLoad %138 
					                                         f32 %140 = OpFMul %136 %139 
					                                Uniform f32* %142 = OpAccessChain %17 %141 %127 
					                                         f32 %143 = OpLoad %142 
					                                         f32 %144 = OpFAdd %140 %143 
					                                                      OpStore %134 %144 
					                                         f32 %146 = OpLoad %134 
					                                         f32 %147 = OpLoad %95 
					                                         f32 %148 = OpFMul %146 %147 
					                                Private f32* %149 = OpAccessChain %145 %51 
					                                                      OpStore %149 %148 
					                              Uniform f32_4* %151 = OpAccessChain %17 %150 
					                                       f32_4 %152 = OpLoad %151 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                              Uniform f32_4* %154 = OpAccessChain %17 %141 
					                                       f32_4 %155 = OpLoad %154 
					                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
					                                       f32_3 %157 = OpFMul %153 %156 
					                                                      OpStore %31 %157 
					                                       f32_3 %158 = OpLoad %145 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
					                                       f32_3 %160 = OpLoad %31 
					                                       f32_3 %161 = OpFMul %159 %160 
					                                                      OpStore %145 %161 
					                                       f32_3 %162 = OpLoad %9 
					                                       f32_3 %163 = OpVectorShuffle %162 %162 0 0 0 
					                              Uniform f32_4* %165 = OpAccessChain %17 %164 
					                                       f32_4 %166 = OpLoad %165 
					                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
					                                       f32_3 %168 = OpFMul %163 %167 
					                                                      OpStore %31 %168 
					                                Private f32* %169 = OpAccessChain %9 %51 
					                                         f32 %170 = OpLoad %169 
					                                         f32 %171 = OpFNegate %170 
					                                Uniform f32* %173 = OpAccessChain %17 %172 
					                                         f32 %174 = OpLoad %173 
					                                         f32 %175 = OpFMul %171 %174 
					                                         f32 %176 = OpFAdd %175 %56 
					                                Private f32* %177 = OpAccessChain %9 %51 
					                                                      OpStore %177 %176 
					                                Private f32* %178 = OpAccessChain %9 %51 
					                                         f32 %179 = OpLoad %178 
					                                         f32 %180 = OpExtInst %1 43 %179 %55 %56 
					                                Private f32* %181 = OpAccessChain %9 %51 
					                                                      OpStore %181 %180 
					                                       f32_3 %183 = OpLoad %31 
					                                Uniform f32* %184 = OpAccessChain %17 %172 
					                                         f32 %185 = OpLoad %184 
					                                Uniform f32* %186 = OpAccessChain %17 %172 
					                                         f32 %187 = OpLoad %186 
					                                Uniform f32* %188 = OpAccessChain %17 %172 
					                                         f32 %189 = OpLoad %188 
					                                       f32_3 %190 = OpCompositeConstruct %185 %187 %189 
					                                         f32 %191 = OpCompositeExtract %190 0 
					                                         f32 %192 = OpCompositeExtract %190 1 
					                                         f32 %193 = OpCompositeExtract %190 2 
					                                       f32_3 %194 = OpCompositeConstruct %191 %192 %193 
					                                       f32_3 %195 = OpFMul %183 %194 
					                                                      OpStore %182 %195 
					                              Uniform f32_4* %197 = OpAccessChain %17 %196 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                       f32_3 %200 = OpLoad %9 
					                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
					                                       f32_3 %202 = OpFMul %199 %201 
					                                       f32_3 %203 = OpLoad %182 
					                                       f32_3 %204 = OpFAdd %202 %203 
					                                                      OpStore %182 %204 
					                                       f32_3 %205 = OpLoad %182 
					                              Uniform f32_4* %206 = OpAccessChain %17 %150 
					                                       f32_4 %207 = OpLoad %206 
					                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
					                                       f32_3 %209 = OpFMul %205 %208 
					                                                      OpStore %31 %209 
					                                       f32_3 %210 = OpLoad %47 
					                              Uniform f32_4* %211 = OpAccessChain %17 %36 
					                                       f32_4 %212 = OpLoad %211 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                                         f32 %214 = OpDot %210 %213 
					                                                      OpStore %59 %214 
					                                         f32 %215 = OpLoad %59 
					                                         f32 %216 = OpExtInst %1 40 %215 %55 
					                                                      OpStore %59 %216 
					                                       f32_3 %217 = OpLoad %31 
					                                         f32 %218 = OpLoad %59 
					                                       f32_3 %219 = OpCompositeConstruct %218 %218 %218 
					                                       f32_3 %220 = OpFMul %217 %219 
					                                       f32_3 %221 = OpLoad %145 
					                                       f32_3 %222 = OpFAdd %220 %221 
					                                                      OpStore %9 %222 
					                                       f32_3 %225 = OpLoad %9 
					                                       f32_4 %226 = OpLoad %224 
					                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
					                                                      OpStore %224 %227 
					                                 Output f32* %229 = OpAccessChain %224 %127 
					                                                      OpStore %229 %56 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 231
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %47 %124 %224 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpMemberDecorate %15 0 Offset 15 
					                                                      OpMemberDecorate %15 1 RelaxedPrecision 
					                                                      OpMemberDecorate %15 1 Offset 15 
					                                                      OpMemberDecorate %15 2 RelaxedPrecision 
					                                                      OpMemberDecorate %15 2 Offset 15 
					                                                      OpMemberDecorate %15 3 RelaxedPrecision 
					                                                      OpMemberDecorate %15 3 Offset 15 
					                                                      OpMemberDecorate %15 4 RelaxedPrecision 
					                                                      OpMemberDecorate %15 4 Offset 15 
					                                                      OpMemberDecorate %15 5 RelaxedPrecision 
					                                                      OpMemberDecorate %15 5 Offset 15 
					                                                      OpMemberDecorate %15 6 Offset 15 
					                                                      OpMemberDecorate %15 7 Offset 15 
					                                                      OpMemberDecorate %15 8 Offset 15 
					                                                      OpMemberDecorate %15 9 RelaxedPrecision 
					                                                      OpMemberDecorate %15 9 Offset 15 
					                                                      OpDecorate %15 Block 
					                                                      OpDecorate %17 DescriptorSet 17 
					                                                      OpDecorate %17 Binding 17 
					                                                      OpDecorate %31 RelaxedPrecision 
					                                                      OpDecorate %39 RelaxedPrecision 
					                                                      OpDecorate %40 RelaxedPrecision 
					                                                      OpDecorate %47 Location 47 
					                                                      OpDecorate %59 RelaxedPrecision 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %78 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %82 RelaxedPrecision 
					                                                      OpDecorate %83 RelaxedPrecision 
					                                                      OpDecorate %84 RelaxedPrecision 
					                                                      OpDecorate %85 RelaxedPrecision 
					                                                      OpDecorate %86 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %103 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %107 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %116 RelaxedPrecision 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %120 DescriptorSet 120 
					                                                      OpDecorate %120 Binding 120 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %124 Location 124 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %152 RelaxedPrecision 
					                                                      OpDecorate %153 RelaxedPrecision 
					                                                      OpDecorate %155 RelaxedPrecision 
					                                                      OpDecorate %156 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %183 RelaxedPrecision 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %191 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %208 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %224 Location 224 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeStruct %7 %14 %14 %14 %14 %6 %6 %6 %6 %14 
					                                              %16 = OpTypePointer Uniform %15 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32_4;}* %17 = OpVariable Uniform 
					                                              %18 = OpTypeInt 32 1 
					                                          i32 %19 = OpConstant 0 
					                                              %20 = OpTypePointer Uniform %7 
					                                              %24 = OpTypePointer Private %6 
					                                 Private f32* %25 = OpVariable Private 
					                               Private f32_3* %31 = OpVariable Private 
					                                          i32 %36 = OpConstant 1 
					                                              %37 = OpTypePointer Uniform %14 
					                                 Input f32_3* %47 = OpVariable Input 
					                                              %50 = OpTypeInt 32 0 
					                                          u32 %51 = OpConstant 0 
					                                          f32 %55 = OpConstant 3.674022E-40 
					                                          f32 %56 = OpConstant 3.674022E-40 
					                                 Private f32* %59 = OpVariable Private 
					                                 Private f32* %64 = OpVariable Private 
					                                          i32 %68 = OpConstant 7 
					                                              %69 = OpTypePointer Uniform %6 
					                                 Private f32* %95 = OpVariable Private 
					                                          i32 %99 = OpConstant 5 
					                                         f32 %102 = OpConstant 3.674022E-40 
					                                Private f32* %116 = OpVariable Private 
					                                             %117 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %118 = OpTypeSampledImage %117 
					                                             %119 = OpTypePointer UniformConstant %118 
					 UniformConstant read_only Texture2DSampled* %120 = OpVariable UniformConstant 
					                                             %122 = OpTypeVector %6 2 
					                                             %123 = OpTypePointer Input %122 
					                                Input f32_2* %124 = OpVariable Input 
					                                         u32 %127 = OpConstant 3 
					                                Private f32* %134 = OpVariable Private 
					                                         i32 %137 = OpConstant 6 
					                                         i32 %141 = OpConstant 3 
					                              Private f32_3* %145 = OpVariable Private 
					                                         i32 %150 = OpConstant 2 
					                                         i32 %164 = OpConstant 9 
					                                         i32 %172 = OpConstant 8 
					                              Private f32_3* %182 = OpVariable Private 
					                                         i32 %196 = OpConstant 4 
					                                             %223 = OpTypePointer Output %14 
					                               Output f32_4* %224 = OpVariable Output 
					                                             %228 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %21 = OpAccessChain %17 %19 
					                                        f32_3 %22 = OpLoad %21 
					                                        f32_3 %23 = OpFAdd %13 %22 
					                                                      OpStore %9 %23 
					                                        f32_3 %26 = OpLoad %9 
					                                        f32_3 %27 = OpLoad %9 
					                                          f32 %28 = OpDot %26 %27 
					                                                      OpStore %25 %28 
					                                          f32 %29 = OpLoad %25 
					                                          f32 %30 = OpExtInst %1 32 %29 
					                                                      OpStore %25 %30 
					                                        f32_3 %32 = OpLoad %9 
					                                          f32 %33 = OpLoad %25 
					                                        f32_3 %34 = OpCompositeConstruct %33 %33 %33 
					                                        f32_3 %35 = OpFMul %32 %34 
					                               Uniform f32_4* %38 = OpAccessChain %17 %36 
					                                        f32_4 %39 = OpLoad %38 
					                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
					                                        f32_3 %41 = OpFAdd %35 %40 
					                                                      OpStore %31 %41 
					                                          f32 %42 = OpLoad %25 
					                                        f32_3 %43 = OpCompositeConstruct %42 %42 %42 
					                                        f32_3 %44 = OpLoad %9 
					                                        f32_3 %45 = OpFMul %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_3 %46 = OpLoad %9 
					                                        f32_3 %48 = OpLoad %47 
					                                          f32 %49 = OpDot %46 %48 
					                                 Private f32* %52 = OpAccessChain %9 %51 
					                                                      OpStore %52 %49 
					                                 Private f32* %53 = OpAccessChain %9 %51 
					                                          f32 %54 = OpLoad %53 
					                                          f32 %57 = OpExtInst %1 43 %54 %55 %56 
					                                 Private f32* %58 = OpAccessChain %9 %51 
					                                                      OpStore %58 %57 
					                                 Private f32* %60 = OpAccessChain %9 %51 
					                                          f32 %61 = OpLoad %60 
					                                          f32 %62 = OpFNegate %61 
					                                          f32 %63 = OpFAdd %62 %56 
					                                                      OpStore %59 %63 
					                                          f32 %65 = OpLoad %59 
					                                          f32 %66 = OpExtInst %1 30 %65 
					                                                      OpStore %64 %66 
					                                          f32 %67 = OpLoad %64 
					                                 Uniform f32* %70 = OpAccessChain %17 %68 
					                                          f32 %71 = OpLoad %70 
					                                          f32 %72 = OpFMul %67 %71 
					                                 Private f32* %73 = OpAccessChain %9 %51 
					                                                      OpStore %73 %72 
					                                 Private f32* %74 = OpAccessChain %9 %51 
					                                          f32 %75 = OpLoad %74 
					                                          f32 %76 = OpExtInst %1 29 %75 
					                                 Private f32* %77 = OpAccessChain %9 %51 
					                                                      OpStore %77 %76 
					                                        f32_3 %78 = OpLoad %31 
					                                        f32_3 %79 = OpLoad %31 
					                                          f32 %80 = OpDot %78 %79 
					                                                      OpStore %59 %80 
					                                          f32 %81 = OpLoad %59 
					                                          f32 %82 = OpExtInst %1 32 %81 
					                                                      OpStore %59 %82 
					                                          f32 %83 = OpLoad %59 
					                                        f32_3 %84 = OpCompositeConstruct %83 %83 %83 
					                                        f32_3 %85 = OpLoad %31 
					                                        f32_3 %86 = OpFMul %84 %85 
					                                                      OpStore %31 %86 
					                                        f32_3 %87 = OpLoad %47 
					                                        f32_3 %88 = OpLoad %31 
					                                          f32 %89 = OpDot %87 %88 
					                                 Private f32* %90 = OpAccessChain %31 %51 
					                                                      OpStore %90 %89 
					                                 Private f32* %91 = OpAccessChain %31 %51 
					                                          f32 %92 = OpLoad %91 
					                                          f32 %93 = OpExtInst %1 40 %92 %55 
					                                 Private f32* %94 = OpAccessChain %31 %51 
					                                                      OpStore %94 %93 
					                                 Private f32* %96 = OpAccessChain %31 %51 
					                                          f32 %97 = OpLoad %96 
					                                          f32 %98 = OpExtInst %1 30 %97 
					                                                      OpStore %95 %98 
					                                Uniform f32* %100 = OpAccessChain %17 %99 
					                                         f32 %101 = OpLoad %100 
					                                         f32 %103 = OpFMul %101 %102 
					                                Private f32* %104 = OpAccessChain %31 %51 
					                                                      OpStore %104 %103 
					                                         f32 %105 = OpLoad %95 
					                                Private f32* %106 = OpAccessChain %31 %51 
					                                         f32 %107 = OpLoad %106 
					                                         f32 %108 = OpFMul %105 %107 
					                                                      OpStore %95 %108 
					                                         f32 %109 = OpLoad %95 
					                                         f32 %110 = OpExtInst %1 29 %109 
					                                                      OpStore %95 %110 
					                                Private f32* %111 = OpAccessChain %9 %51 
					                                         f32 %112 = OpLoad %111 
					                                         f32 %113 = OpFNegate %112 
					                                         f32 %114 = OpFAdd %113 %56 
					                                Private f32* %115 = OpAccessChain %31 %51 
					                                                      OpStore %115 %114 
					                  read_only Texture2DSampled %121 = OpLoad %120 
					                                       f32_2 %125 = OpLoad %124 
					                                       f32_4 %126 = OpImageSampleImplicitLod %121 %125 
					                                         f32 %128 = OpCompositeExtract %126 3 
					                                                      OpStore %116 %128 
					                                Private f32* %129 = OpAccessChain %31 %51 
					                                         f32 %130 = OpLoad %129 
					                                         f32 %131 = OpLoad %116 
					                                         f32 %132 = OpFMul %130 %131 
					                                Private f32* %133 = OpAccessChain %31 %51 
					                                                      OpStore %133 %132 
					                                Private f32* %135 = OpAccessChain %31 %51 
					                                         f32 %136 = OpLoad %135 
					                                Uniform f32* %138 = OpAccessChain %17 %137 
					                                         f32 %139 = OpLoad %138 
					                                         f32 %140 = OpFMul %136 %139 
					                                Uniform f32* %142 = OpAccessChain %17 %141 %127 
					                                         f32 %143 = OpLoad %142 
					                                         f32 %144 = OpFAdd %140 %143 
					                                                      OpStore %134 %144 
					                                         f32 %146 = OpLoad %134 
					                                         f32 %147 = OpLoad %95 
					                                         f32 %148 = OpFMul %146 %147 
					                                Private f32* %149 = OpAccessChain %145 %51 
					                                                      OpStore %149 %148 
					                              Uniform f32_4* %151 = OpAccessChain %17 %150 
					                                       f32_4 %152 = OpLoad %151 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                              Uniform f32_4* %154 = OpAccessChain %17 %141 
					                                       f32_4 %155 = OpLoad %154 
					                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
					                                       f32_3 %157 = OpFMul %153 %156 
					                                                      OpStore %31 %157 
					                                       f32_3 %158 = OpLoad %145 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
					                                       f32_3 %160 = OpLoad %31 
					                                       f32_3 %161 = OpFMul %159 %160 
					                                                      OpStore %145 %161 
					                                       f32_3 %162 = OpLoad %9 
					                                       f32_3 %163 = OpVectorShuffle %162 %162 0 0 0 
					                              Uniform f32_4* %165 = OpAccessChain %17 %164 
					                                       f32_4 %166 = OpLoad %165 
					                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
					                                       f32_3 %168 = OpFMul %163 %167 
					                                                      OpStore %31 %168 
					                                Private f32* %169 = OpAccessChain %9 %51 
					                                         f32 %170 = OpLoad %169 
					                                         f32 %171 = OpFNegate %170 
					                                Uniform f32* %173 = OpAccessChain %17 %172 
					                                         f32 %174 = OpLoad %173 
					                                         f32 %175 = OpFMul %171 %174 
					                                         f32 %176 = OpFAdd %175 %56 
					                                Private f32* %177 = OpAccessChain %9 %51 
					                                                      OpStore %177 %176 
					                                Private f32* %178 = OpAccessChain %9 %51 
					                                         f32 %179 = OpLoad %178 
					                                         f32 %180 = OpExtInst %1 43 %179 %55 %56 
					                                Private f32* %181 = OpAccessChain %9 %51 
					                                                      OpStore %181 %180 
					                                       f32_3 %183 = OpLoad %31 
					                                Uniform f32* %184 = OpAccessChain %17 %172 
					                                         f32 %185 = OpLoad %184 
					                                Uniform f32* %186 = OpAccessChain %17 %172 
					                                         f32 %187 = OpLoad %186 
					                                Uniform f32* %188 = OpAccessChain %17 %172 
					                                         f32 %189 = OpLoad %188 
					                                       f32_3 %190 = OpCompositeConstruct %185 %187 %189 
					                                         f32 %191 = OpCompositeExtract %190 0 
					                                         f32 %192 = OpCompositeExtract %190 1 
					                                         f32 %193 = OpCompositeExtract %190 2 
					                                       f32_3 %194 = OpCompositeConstruct %191 %192 %193 
					                                       f32_3 %195 = OpFMul %183 %194 
					                                                      OpStore %182 %195 
					                              Uniform f32_4* %197 = OpAccessChain %17 %196 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                       f32_3 %200 = OpLoad %9 
					                                       f32_3 %201 = OpVectorShuffle %200 %200 0 0 0 
					                                       f32_3 %202 = OpFMul %199 %201 
					                                       f32_3 %203 = OpLoad %182 
					                                       f32_3 %204 = OpFAdd %202 %203 
					                                                      OpStore %182 %204 
					                                       f32_3 %205 = OpLoad %182 
					                              Uniform f32_4* %206 = OpAccessChain %17 %150 
					                                       f32_4 %207 = OpLoad %206 
					                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
					                                       f32_3 %209 = OpFMul %205 %208 
					                                                      OpStore %31 %209 
					                                       f32_3 %210 = OpLoad %47 
					                              Uniform f32_4* %211 = OpAccessChain %17 %36 
					                                       f32_4 %212 = OpLoad %211 
					                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
					                                         f32 %214 = OpDot %210 %213 
					                                                      OpStore %59 %214 
					                                         f32 %215 = OpLoad %59 
					                                         f32 %216 = OpExtInst %1 40 %215 %55 
					                                                      OpStore %59 %216 
					                                       f32_3 %217 = OpLoad %31 
					                                         f32 %218 = OpLoad %59 
					                                       f32_3 %219 = OpCompositeConstruct %218 %218 %218 
					                                       f32_3 %220 = OpFMul %217 %219 
					                                       f32_3 %221 = OpLoad %145 
					                                       f32_3 %222 = OpFAdd %220 %221 
					                                                      OpStore %9 %222 
					                                       f32_3 %225 = OpLoad %9 
					                                       f32_4 %226 = OpLoad %224 
					                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
					                                                      OpStore %224 %227 
					                                 Output f32* %229 = OpAccessChain %224 %127 
					                                                      OpStore %229 %56 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _LightTextureB0;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  highp vec4 lightCoord_5;
					  lowp vec3 tmpvar_6;
					  lowp vec3 viewDir_7;
					  lowp vec3 lightDir_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_9.x = 1.0;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_8 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_7 = tmpvar_12;
					  tmpvar_10 = viewDir_7;
					  tmpvar_6 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  mediump float fres_15;
					  mediump float rim_16;
					  mediump float tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = clamp (dot (normalize(tmpvar_10), tmpvar_6), 0.0, 1.0);
					  tmpvar_17 = tmpvar_18;
					  rim_16 = (1.0 - tmpvar_17);
					  fres_15 = rim_16;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (rim_16, _RimAmt);
					  rim_16 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = pow (fres_15, _FresAmt);
					  fres_15 = tmpvar_20;
					  highp float tmpvar_21;
					  tmpvar_21 = clamp ((1.0 - (rim_16 * _RimPwr)), 0.0, 1.0);
					  tmpvar_13 = (_Color.xyz * tmpvar_21);
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((rim_16 * _RimColor) * _RimPwr).xyz;
					  tmpvar_13 = (tmpvar_13 + tmpvar_22);
					  tmpvar_14 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_16)
					  ) * _FlakeAmt));
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = xlv_TEXCOORD2;
					  lightCoord_5 = (unity_WorldToLight * tmpvar_23);
					  lowp vec4 tmpvar_24;
					  highp vec2 P_25;
					  P_25 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
					  tmpvar_24 = texture2D (_LightTexture0, P_25);
					  highp float tmpvar_26;
					  tmpvar_26 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
					  lowp vec4 tmpvar_27;
					  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
					  highp float tmpvar_28;
					  tmpvar_28 = ((float(
					    (lightCoord_5.z > 0.0)
					  ) * tmpvar_24.w) * tmpvar_27.w);
					  atten_4 = tmpvar_28;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_8;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  mediump vec3 viewDir_29;
					  viewDir_29 = tmpvar_12;
					  lowp vec4 c_30;
					  lowp vec4 c_31;
					  highp float nh_32;
					  lowp float diff_33;
					  mediump float tmpvar_34;
					  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_2));
					  diff_33 = tmpvar_34;
					  mediump float tmpvar_35;
					  tmpvar_35 = max (0.0, dot (tmpvar_6, normalize(
					    (tmpvar_2 + viewDir_29)
					  )));
					  nh_32 = tmpvar_35;
					  mediump float y_36;
					  y_36 = (_Shininess * 128.0);
					  highp float tmpvar_37;
					  tmpvar_37 = (pow (nh_32, y_36) * tmpvar_14);
					  c_31.xyz = (((tmpvar_13 * tmpvar_1) * diff_33) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_37));
					  c_31.w = (textureCube (_Cube, tmpvar_9).w * _ReflectColor.w);
					  c_30.w = c_31.w;
					  c_30.xyz = c_31.xyz;
					  c_3.xyz = c_30.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _LightTextureB0;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  highp vec4 lightCoord_5;
					  lowp vec3 tmpvar_6;
					  lowp vec3 viewDir_7;
					  lowp vec3 lightDir_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_9.x = 1.0;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_8 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_7 = tmpvar_12;
					  tmpvar_10 = viewDir_7;
					  tmpvar_6 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  mediump float fres_15;
					  mediump float rim_16;
					  mediump float tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = clamp (dot (normalize(tmpvar_10), tmpvar_6), 0.0, 1.0);
					  tmpvar_17 = tmpvar_18;
					  rim_16 = (1.0 - tmpvar_17);
					  fres_15 = rim_16;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (rim_16, _RimAmt);
					  rim_16 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = pow (fres_15, _FresAmt);
					  fres_15 = tmpvar_20;
					  highp float tmpvar_21;
					  tmpvar_21 = clamp ((1.0 - (rim_16 * _RimPwr)), 0.0, 1.0);
					  tmpvar_13 = (_Color.xyz * tmpvar_21);
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((rim_16 * _RimColor) * _RimPwr).xyz;
					  tmpvar_13 = (tmpvar_13 + tmpvar_22);
					  tmpvar_14 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_16)
					  ) * _FlakeAmt));
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = xlv_TEXCOORD2;
					  lightCoord_5 = (unity_WorldToLight * tmpvar_23);
					  lowp vec4 tmpvar_24;
					  highp vec2 P_25;
					  P_25 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
					  tmpvar_24 = texture2D (_LightTexture0, P_25);
					  highp float tmpvar_26;
					  tmpvar_26 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
					  lowp vec4 tmpvar_27;
					  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
					  highp float tmpvar_28;
					  tmpvar_28 = ((float(
					    (lightCoord_5.z > 0.0)
					  ) * tmpvar_24.w) * tmpvar_27.w);
					  atten_4 = tmpvar_28;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_8;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  mediump vec3 viewDir_29;
					  viewDir_29 = tmpvar_12;
					  lowp vec4 c_30;
					  lowp vec4 c_31;
					  highp float nh_32;
					  lowp float diff_33;
					  mediump float tmpvar_34;
					  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_2));
					  diff_33 = tmpvar_34;
					  mediump float tmpvar_35;
					  tmpvar_35 = max (0.0, dot (tmpvar_6, normalize(
					    (tmpvar_2 + viewDir_29)
					  )));
					  nh_32 = tmpvar_35;
					  mediump float y_36;
					  y_36 = (_Shininess * 128.0);
					  highp float tmpvar_37;
					  tmpvar_37 = (pow (nh_32, y_36) * tmpvar_14);
					  c_31.xyz = (((tmpvar_13 * tmpvar_1) * diff_33) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_37));
					  c_31.w = (textureCube (_Cube, tmpvar_9).w * _ReflectColor.w);
					  c_30.w = c_31.w;
					  c_30.xyz = c_31.xyz;
					  c_3.xyz = c_30.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _LightTextureB0;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  lowp float atten_4;
					  highp vec4 lightCoord_5;
					  lowp vec3 tmpvar_6;
					  lowp vec3 viewDir_7;
					  lowp vec3 lightDir_8;
					  highp vec3 tmpvar_9;
					  highp vec3 tmpvar_10;
					  tmpvar_9.x = 1.0;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_8 = tmpvar_11;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_7 = tmpvar_12;
					  tmpvar_10 = viewDir_7;
					  tmpvar_6 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_13;
					  lowp float tmpvar_14;
					  mediump float fres_15;
					  mediump float rim_16;
					  mediump float tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = clamp (dot (normalize(tmpvar_10), tmpvar_6), 0.0, 1.0);
					  tmpvar_17 = tmpvar_18;
					  rim_16 = (1.0 - tmpvar_17);
					  fres_15 = rim_16;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (rim_16, _RimAmt);
					  rim_16 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = pow (fres_15, _FresAmt);
					  fres_15 = tmpvar_20;
					  highp float tmpvar_21;
					  tmpvar_21 = clamp ((1.0 - (rim_16 * _RimPwr)), 0.0, 1.0);
					  tmpvar_13 = (_Color.xyz * tmpvar_21);
					  highp vec3 tmpvar_22;
					  tmpvar_22 = ((rim_16 * _RimColor) * _RimPwr).xyz;
					  tmpvar_13 = (tmpvar_13 + tmpvar_22);
					  tmpvar_14 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_16)
					  ) * _FlakeAmt));
					  highp vec4 tmpvar_23;
					  tmpvar_23.w = 1.0;
					  tmpvar_23.xyz = xlv_TEXCOORD2;
					  lightCoord_5 = (unity_WorldToLight * tmpvar_23);
					  lowp vec4 tmpvar_24;
					  highp vec2 P_25;
					  P_25 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
					  tmpvar_24 = texture2D (_LightTexture0, P_25);
					  highp float tmpvar_26;
					  tmpvar_26 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
					  lowp vec4 tmpvar_27;
					  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
					  highp float tmpvar_28;
					  tmpvar_28 = ((float(
					    (lightCoord_5.z > 0.0)
					  ) * tmpvar_24.w) * tmpvar_27.w);
					  atten_4 = tmpvar_28;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_8;
					  tmpvar_1 = (tmpvar_1 * atten_4);
					  mediump vec3 viewDir_29;
					  viewDir_29 = tmpvar_12;
					  lowp vec4 c_30;
					  lowp vec4 c_31;
					  highp float nh_32;
					  lowp float diff_33;
					  mediump float tmpvar_34;
					  tmpvar_34 = max (0.0, dot (tmpvar_6, tmpvar_2));
					  diff_33 = tmpvar_34;
					  mediump float tmpvar_35;
					  tmpvar_35 = max (0.0, dot (tmpvar_6, normalize(
					    (tmpvar_2 + viewDir_29)
					  )));
					  nh_32 = tmpvar_35;
					  mediump float y_36;
					  y_36 = (_Shininess * 128.0);
					  highp float tmpvar_37;
					  tmpvar_37 = (pow (nh_32, y_36) * tmpvar_14);
					  c_31.xyz = (((tmpvar_13 * tmpvar_1) * diff_33) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_37));
					  c_31.w = (textureCube (_Cube, tmpvar_9).w * _ReflectColor.w);
					  c_30.w = c_31.w;
					  c_30.xyz = c_31.xyz;
					  c_3.xyz = c_30.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp sampler2D _LightTexture0;
					uniform lowp sampler2D _LightTextureB0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat10;
					lowp float u_xlat10_10;
					float u_xlat15;
					lowp float u_xlat10_15;
					mediump float u_xlat16_17;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat10_15 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_0 = texture(_LightTextureB0, u_xlat0.xx).w;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat10_15 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat10_0 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_17 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_17);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat5.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_18 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_18 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_5 = log2(u_xlat16_18);
					    u_xlat16_18 = _Shininess * 128.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_18;
					    u_xlat16_5 = exp2(u_xlat16_5);
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat10_10 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_18 = u_xlat16_18 * u_xlat10_10;
					    u_xlat10 = u_xlat16_18 * _FlakeAmt + _SpecColor.w;
					    u_xlat5.x = u_xlat10 * u_xlat16_5;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat1.xyz = _Color.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp sampler2D _LightTexture0;
					uniform lowp sampler2D _LightTextureB0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat10;
					lowp float u_xlat10_10;
					float u_xlat15;
					lowp float u_xlat10_15;
					mediump float u_xlat16_17;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat10_15 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_0 = texture(_LightTextureB0, u_xlat0.xx).w;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat10_15 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat10_0 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_17 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_17);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat5.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_18 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_18 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_5 = log2(u_xlat16_18);
					    u_xlat16_18 = _Shininess * 128.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_18;
					    u_xlat16_5 = exp2(u_xlat16_5);
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat10_10 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_18 = u_xlat16_18 * u_xlat10_10;
					    u_xlat10 = u_xlat16_18 * _FlakeAmt + _SpecColor.w;
					    u_xlat5.x = u_xlat10 * u_xlat16_5;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat1.xyz = _Color.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp sampler2D _LightTexture0;
					uniform lowp sampler2D _LightTextureB0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					float u_xlat10;
					lowp float u_xlat10_10;
					float u_xlat15;
					lowp float u_xlat10_15;
					mediump float u_xlat16_17;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat10_15 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_0 = texture(_LightTextureB0, u_xlat0.xx).w;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat10_15 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat10_0 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_17 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_17);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat5.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_18 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_18 = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_5 = log2(u_xlat16_18);
					    u_xlat16_18 = _Shininess * 128.0;
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_18;
					    u_xlat16_5 = exp2(u_xlat16_5);
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat10_10 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_18 = u_xlat16_18 * u_xlat10_10;
					    u_xlat10 = u_xlat16_18 * _FlakeAmt + _SpecColor.w;
					    u_xlat5.x = u_xlat10 * u_xlat16_5;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat1.xyz = _Color.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "SPOT" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 335
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %176 %249 %327 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 RelaxedPrecision 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 RelaxedPrecision 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 RelaxedPrecision 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 RelaxedPrecision 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpMemberDecorate %18 8 Offset 18 
					                                                      OpMemberDecorate %18 9 Offset 18 
					                                                      OpMemberDecorate %18 10 RelaxedPrecision 
					                                                      OpMemberDecorate %18 10 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %71 DescriptorSet 71 
					                                                      OpDecorate %71 Binding 71 
					                                                      OpDecorate %72 RelaxedPrecision 
					                                                      OpDecorate %77 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %94 DescriptorSet 94 
					                                                      OpDecorate %94 Binding 94 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %125 RelaxedPrecision 
					                                                      OpDecorate %126 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %176 Location 176 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %191 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %211 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %246 RelaxedPrecision 
					                                                      OpDecorate %246 DescriptorSet 246 
					                                                      OpDecorate %246 Binding 246 
					                                                      OpDecorate %247 RelaxedPrecision 
					                                                      OpDecorate %249 Location 249 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %254 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %263 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %277 RelaxedPrecision 
					                                                      OpDecorate %278 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %305 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %315 RelaxedPrecision 
					                                                      OpDecorate %318 RelaxedPrecision 
					                                                      OpDecorate %319 RelaxedPrecision 
					                                                      OpDecorate %320 RelaxedPrecision 
					                                                      OpDecorate %321 RelaxedPrecision 
					                                                      OpDecorate %327 RelaxedPrecision 
					                                                      OpDecorate %327 Location 327 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeStruct %10 %7 %7 %7 %17 %7 %6 %6 %6 %6 %7 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 4 
					                                          i32 %23 = OpConstant 1 
					                                              %24 = OpTypePointer Uniform %7 
					                                          i32 %28 = OpConstant 0 
					                                          i32 %36 = OpConstant 2 
					                                          i32 %45 = OpConstant 3 
					                                              %49 = OpTypePointer Private %10 
					                               Private f32_3* %50 = OpVariable Private 
					                                              %51 = OpTypeVector %6 2 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                        f32_2 %62 = OpConstantComposite %61 %61 
					                                              %66 = OpTypePointer Private %6 
					                                 Private f32* %67 = OpVariable Private 
					                                              %68 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %69 = OpTypeSampledImage %68 
					                                              %70 = OpTypePointer UniformConstant %69 
					  UniformConstant read_only Texture2DSampled* %71 = OpVariable UniformConstant 
					                                          u32 %76 = OpConstant 3 
					                                              %78 = OpTypeBool 
					                                              %79 = OpTypePointer Private %78 
					                                Private bool* %80 = OpVariable Private 
					                                          f32 %81 = OpConstant 3.674022E-40 
					                                          u32 %82 = OpConstant 2 
					                                          u32 %91 = OpConstant 0 
					                                 Private f32* %93 = OpVariable Private 
					  UniformConstant read_only Texture2DSampled* %94 = OpVariable UniformConstant 
					                              Private f32_3* %100 = OpVariable Private 
					                                             %101 = OpTypePointer Function %6 
					                                         f32 %106 = OpConstant 3.674022E-40 
					                              Private f32_3* %126 = OpVariable Private 
					                                             %134 = OpTypePointer Uniform %10 
					                                Private f32* %140 = OpVariable Private 
					                              Private f32_3* %166 = OpVariable Private 
					                                Input f32_3* %176 = OpVariable Input 
					                                Private f32* %184 = OpVariable Private 
					                                Private f32* %189 = OpVariable Private 
					                                         i32 %193 = OpConstant 8 
					                                             %194 = OpTypePointer Uniform %6 
					                              Private f32_3* %203 = OpVariable Private 
					                                Private f32* %213 = OpVariable Private 
					                                Private f32* %228 = OpVariable Private 
					                                         i32 %231 = OpConstant 6 
					                                         f32 %234 = OpConstant 3.674022E-40 
					                                Private f32* %245 = OpVariable Private 
					 UniformConstant read_only Texture2DSampled* %246 = OpVariable UniformConstant 
					                                             %248 = OpTypePointer Input %51 
					                                Input f32_2* %249 = OpVariable Input 
					                                Private f32* %256 = OpVariable Private 
					                                         i32 %258 = OpConstant 7 
					                                         i32 %275 = OpConstant 10 
					                                         i32 %283 = OpConstant 9 
					                                         i32 %306 = OpConstant 5 
					                                             %326 = OpTypePointer Output %7 
					                               Output f32_4* %327 = OpVariable Output 
					                                             %332 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %102 = OpVariable Function 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_4 %14 = OpVectorShuffle %13 %13 1 1 1 1 
					                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                        f32_4 %26 = OpLoad %25 
					                                        f32_4 %27 = OpFMul %14 %26 
					                                                      OpStore %9 %27 
					                               Uniform f32_4* %29 = OpAccessChain %20 %22 %28 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_3 %31 = OpLoad %12 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %20 %22 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_3 %39 = OpLoad %12 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %44 = OpLoad %9 
					                               Uniform f32_4* %46 = OpAccessChain %20 %22 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_4 %48 = OpFAdd %44 %47 
					                                                      OpStore %9 %48 
					                                        f32_4 %52 = OpLoad %9 
					                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
					                                        f32_4 %54 = OpLoad %9 
					                                        f32_2 %55 = OpVectorShuffle %54 %54 3 3 
					                                        f32_2 %56 = OpFDiv %53 %55 
					                                        f32_3 %57 = OpLoad %50 
					                                        f32_3 %58 = OpVectorShuffle %57 %56 3 4 2 
					                                                      OpStore %50 %58 
					                                        f32_3 %59 = OpLoad %50 
					                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
					                                        f32_2 %63 = OpFAdd %60 %62 
					                                        f32_3 %64 = OpLoad %50 
					                                        f32_3 %65 = OpVectorShuffle %64 %63 3 4 2 
					                                                      OpStore %50 %65 
					                   read_only Texture2DSampled %72 = OpLoad %71 
					                                        f32_3 %73 = OpLoad %50 
					                                        f32_2 %74 = OpVectorShuffle %73 %73 0 1 
					                                        f32_4 %75 = OpImageSampleImplicitLod %72 %74 
					                                          f32 %77 = OpCompositeExtract %75 3 
					                                                      OpStore %67 %77 
					                                 Private f32* %83 = OpAccessChain %9 %82 
					                                          f32 %84 = OpLoad %83 
					                                         bool %85 = OpFOrdLessThan %81 %84 
					                                                      OpStore %80 %85 
					                                        f32_4 %86 = OpLoad %9 
					                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
					                                        f32_4 %88 = OpLoad %9 
					                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
					                                          f32 %90 = OpDot %87 %89 
					                                 Private f32* %92 = OpAccessChain %9 %91 
					                                                      OpStore %92 %90 
					                   read_only Texture2DSampled %95 = OpLoad %94 
					                                        f32_4 %96 = OpLoad %9 
					                                        f32_2 %97 = OpVectorShuffle %96 %96 0 0 
					                                        f32_4 %98 = OpImageSampleImplicitLod %95 %97 
					                                          f32 %99 = OpCompositeExtract %98 3 
					                                                      OpStore %93 %99 
					                                        bool %103 = OpLoad %80 
					                                                      OpSelectionMerge %105 None 
					                                                      OpBranchConditional %103 %104 %107 
					                                             %104 = OpLabel 
					                                                      OpStore %102 %106 
					                                                      OpBranch %105 
					                                             %107 = OpLabel 
					                                                      OpStore %102 %81 
					                                                      OpBranch %105 
					                                             %105 = OpLabel 
					                                         f32 %108 = OpLoad %102 
					                                Private f32* %109 = OpAccessChain %100 %91 
					                                                      OpStore %109 %108 
					                                         f32 %110 = OpLoad %67 
					                                Private f32* %111 = OpAccessChain %100 %91 
					                                         f32 %112 = OpLoad %111 
					                                         f32 %113 = OpFMul %110 %112 
					                                Private f32* %114 = OpAccessChain %100 %91 
					                                                      OpStore %114 %113 
					                                         f32 %115 = OpLoad %93 
					                                Private f32* %116 = OpAccessChain %100 %91 
					                                         f32 %117 = OpLoad %116 
					                                         f32 %118 = OpFMul %115 %117 
					                                Private f32* %119 = OpAccessChain %100 %91 
					                                                      OpStore %119 %118 
					                                       f32_3 %120 = OpLoad %100 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
					                              Uniform f32_4* %122 = OpAccessChain %20 %36 
					                                       f32_4 %123 = OpLoad %122 
					                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
					                                       f32_3 %125 = OpFMul %121 %124 
					                                                      OpStore %100 %125 
					                                       f32_3 %127 = OpLoad %100 
					                              Uniform f32_4* %128 = OpAccessChain %20 %45 
					                                       f32_4 %129 = OpLoad %128 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
					                                       f32_3 %131 = OpFMul %127 %130 
					                                                      OpStore %126 %131 
					                                       f32_3 %132 = OpLoad %12 
					                                       f32_3 %133 = OpFNegate %132 
					                              Uniform f32_3* %135 = OpAccessChain %20 %28 
					                                       f32_3 %136 = OpLoad %135 
					                                       f32_3 %137 = OpFAdd %133 %136 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
					                                                      OpStore %9 %139 
					                                       f32_4 %141 = OpLoad %9 
					                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
					                                       f32_4 %143 = OpLoad %9 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
					                                         f32 %145 = OpDot %142 %144 
					                                                      OpStore %140 %145 
					                                         f32 %146 = OpLoad %140 
					                                         f32 %147 = OpExtInst %1 32 %146 
					                                                      OpStore %140 %147 
					                                         f32 %148 = OpLoad %140 
					                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
					                                       f32_4 %150 = OpLoad %9 
					                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
					                                       f32_3 %152 = OpFMul %149 %151 
					                                       f32_4 %153 = OpLoad %9 
					                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
					                                                      OpStore %9 %154 
					                                       f32_3 %155 = OpLoad %12 
					                                       f32_3 %156 = OpFNegate %155 
					                              Uniform f32_4* %157 = OpAccessChain %20 %23 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
					                                       f32_3 %160 = OpFAdd %156 %159 
					                                                      OpStore %50 %160 
					                                       f32_3 %161 = OpLoad %50 
					                                       f32_3 %162 = OpLoad %50 
					                                         f32 %163 = OpDot %161 %162 
					                                                      OpStore %140 %163 
					                                         f32 %164 = OpLoad %140 
					                                         f32 %165 = OpExtInst %1 32 %164 
					                                                      OpStore %140 %165 
					                                       f32_3 %167 = OpLoad %50 
					                                         f32 %168 = OpLoad %140 
					                                       f32_3 %169 = OpCompositeConstruct %168 %168 %168 
					                                       f32_3 %170 = OpFMul %167 %169 
					                                       f32_4 %171 = OpLoad %9 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                       f32_3 %173 = OpFAdd %170 %172 
					                                                      OpStore %166 %173 
					                                       f32_4 %174 = OpLoad %9 
					                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
					                                       f32_3 %177 = OpLoad %176 
					                                         f32 %178 = OpDot %175 %177 
					                                Private f32* %179 = OpAccessChain %9 %91 
					                                                      OpStore %179 %178 
					                                Private f32* %180 = OpAccessChain %9 %91 
					                                         f32 %181 = OpLoad %180 
					                                         f32 %182 = OpExtInst %1 43 %181 %81 %106 
					                                Private f32* %183 = OpAccessChain %9 %91 
					                                                      OpStore %183 %182 
					                                Private f32* %185 = OpAccessChain %9 %91 
					                                         f32 %186 = OpLoad %185 
					                                         f32 %187 = OpFNegate %186 
					                                         f32 %188 = OpFAdd %187 %106 
					                                                      OpStore %184 %188 
					                                         f32 %190 = OpLoad %184 
					                                         f32 %191 = OpExtInst %1 30 %190 
					                                                      OpStore %189 %191 
					                                         f32 %192 = OpLoad %189 
					                                Uniform f32* %195 = OpAccessChain %20 %193 
					                                         f32 %196 = OpLoad %195 
					                                         f32 %197 = OpFMul %192 %196 
					                                Private f32* %198 = OpAccessChain %9 %91 
					                                                      OpStore %198 %197 
					                                Private f32* %199 = OpAccessChain %9 %91 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpExtInst %1 29 %200 
					                                Private f32* %202 = OpAccessChain %9 %91 
					                                                      OpStore %202 %201 
					                                         f32 %204 = OpLoad %140 
					                                       f32_3 %205 = OpCompositeConstruct %204 %204 %204 
					                                       f32_3 %206 = OpLoad %50 
					                                       f32_3 %207 = OpFMul %205 %206 
					                                                      OpStore %203 %207 
					                                       f32_3 %208 = OpLoad %176 
					                                       f32_3 %209 = OpLoad %203 
					                                         f32 %210 = OpDot %208 %209 
					                                                      OpStore %184 %210 
					                                         f32 %211 = OpLoad %184 
					                                         f32 %212 = OpExtInst %1 40 %211 %81 
					                                                      OpStore %184 %212 
					                                       f32_3 %214 = OpLoad %166 
					                                       f32_3 %215 = OpLoad %166 
					                                         f32 %216 = OpDot %214 %215 
					                                                      OpStore %213 %216 
					                                         f32 %217 = OpLoad %213 
					                                         f32 %218 = OpExtInst %1 32 %217 
					                                                      OpStore %213 %218 
					                                         f32 %219 = OpLoad %213 
					                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
					                                       f32_3 %221 = OpLoad %166 
					                                       f32_3 %222 = OpFMul %220 %221 
					                                                      OpStore %166 %222 
					                                       f32_3 %223 = OpLoad %176 
					                                       f32_3 %224 = OpLoad %166 
					                                         f32 %225 = OpDot %223 %224 
					                                                      OpStore %213 %225 
					                                         f32 %226 = OpLoad %213 
					                                         f32 %227 = OpExtInst %1 40 %226 %81 
					                                                      OpStore %213 %227 
					                                         f32 %229 = OpLoad %213 
					                                         f32 %230 = OpExtInst %1 30 %229 
					                                                      OpStore %228 %230 
					                                Uniform f32* %232 = OpAccessChain %20 %231 
					                                         f32 %233 = OpLoad %232 
					                                         f32 %235 = OpFMul %233 %234 
					                                                      OpStore %213 %235 
					                                         f32 %236 = OpLoad %228 
					                                         f32 %237 = OpLoad %213 
					                                         f32 %238 = OpFMul %236 %237 
					                                                      OpStore %228 %238 
					                                         f32 %239 = OpLoad %228 
					                                         f32 %240 = OpExtInst %1 29 %239 
					                                                      OpStore %228 %240 
					                                Private f32* %241 = OpAccessChain %9 %91 
					                                         f32 %242 = OpLoad %241 
					                                         f32 %243 = OpFNegate %242 
					                                         f32 %244 = OpFAdd %243 %106 
					                                                      OpStore %213 %244 
					                  read_only Texture2DSampled %247 = OpLoad %246 
					                                       f32_2 %250 = OpLoad %249 
					                                       f32_4 %251 = OpImageSampleImplicitLod %247 %250 
					                                         f32 %252 = OpCompositeExtract %251 3 
					                                                      OpStore %245 %252 
					                                         f32 %253 = OpLoad %213 
					                                         f32 %254 = OpLoad %245 
					                                         f32 %255 = OpFMul %253 %254 
					                                                      OpStore %213 %255 
					                                         f32 %257 = OpLoad %213 
					                                Uniform f32* %259 = OpAccessChain %20 %258 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpFMul %257 %260 
					                                Uniform f32* %262 = OpAccessChain %20 %45 %76 
					                                         f32 %263 = OpLoad %262 
					                                         f32 %264 = OpFAdd %261 %263 
					                                                      OpStore %256 %264 
					                                         f32 %265 = OpLoad %256 
					                                         f32 %266 = OpLoad %228 
					                                         f32 %267 = OpFMul %265 %266 
					                                Private f32* %268 = OpAccessChain %203 %91 
					                                                      OpStore %268 %267 
					                                       f32_3 %269 = OpLoad %203 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 0 0 
					                                       f32_3 %271 = OpLoad %126 
					                                       f32_3 %272 = OpFMul %270 %271 
					                                                      OpStore %203 %272 
					                                       f32_4 %273 = OpLoad %9 
					                                       f32_3 %274 = OpVectorShuffle %273 %273 0 0 0 
					                              Uniform f32_4* %276 = OpAccessChain %20 %275 
					                                       f32_4 %277 = OpLoad %276 
					                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
					                                       f32_3 %279 = OpFMul %274 %278 
					                                                      OpStore %126 %279 
					                                Private f32* %280 = OpAccessChain %9 %91 
					                                         f32 %281 = OpLoad %280 
					                                         f32 %282 = OpFNegate %281 
					                                Uniform f32* %284 = OpAccessChain %20 %283 
					                                         f32 %285 = OpLoad %284 
					                                         f32 %286 = OpFMul %282 %285 
					                                         f32 %287 = OpFAdd %286 %106 
					                                Private f32* %288 = OpAccessChain %9 %91 
					                                                      OpStore %288 %287 
					                                Private f32* %289 = OpAccessChain %9 %91 
					                                         f32 %290 = OpLoad %289 
					                                         f32 %291 = OpExtInst %1 43 %290 %81 %106 
					                                Private f32* %292 = OpAccessChain %9 %91 
					                                                      OpStore %292 %291 
					                                       f32_3 %293 = OpLoad %126 
					                                Uniform f32* %294 = OpAccessChain %20 %283 
					                                         f32 %295 = OpLoad %294 
					                                Uniform f32* %296 = OpAccessChain %20 %283 
					                                         f32 %297 = OpLoad %296 
					                                Uniform f32* %298 = OpAccessChain %20 %283 
					                                         f32 %299 = OpLoad %298 
					                                       f32_3 %300 = OpCompositeConstruct %295 %297 %299 
					                                         f32 %301 = OpCompositeExtract %300 0 
					                                         f32 %302 = OpCompositeExtract %300 1 
					                                         f32 %303 = OpCompositeExtract %300 2 
					                                       f32_3 %304 = OpCompositeConstruct %301 %302 %303 
					                                       f32_3 %305 = OpFMul %293 %304 
					                                                      OpStore %50 %305 
					                              Uniform f32_4* %307 = OpAccessChain %20 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_4 %310 = OpLoad %9 
					                                       f32_3 %311 = OpVectorShuffle %310 %310 0 0 0 
					                                       f32_3 %312 = OpFMul %309 %311 
					                                       f32_3 %313 = OpLoad %50 
					                                       f32_3 %314 = OpFAdd %312 %313 
					                                                      OpStore %50 %314 
					                                       f32_3 %315 = OpLoad %100 
					                                       f32_3 %316 = OpLoad %50 
					                                       f32_3 %317 = OpFMul %315 %316 
					                                                      OpStore %100 %317 
					                                       f32_3 %318 = OpLoad %100 
					                                         f32 %319 = OpLoad %184 
					                                       f32_3 %320 = OpCompositeConstruct %319 %319 %319 
					                                       f32_3 %321 = OpFMul %318 %320 
					                                       f32_3 %322 = OpLoad %203 
					                                       f32_3 %323 = OpFAdd %321 %322 
					                                       f32_4 %324 = OpLoad %9 
					                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
					                                                      OpStore %9 %325 
					                                       f32_4 %328 = OpLoad %9 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_4 %330 = OpLoad %327 
					                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
					                                                      OpStore %327 %331 
					                                 Output f32* %333 = OpAccessChain %327 %76 
					                                                      OpStore %333 %106 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "SPOT" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 335
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %176 %249 %327 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 RelaxedPrecision 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 RelaxedPrecision 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 RelaxedPrecision 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 RelaxedPrecision 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpMemberDecorate %18 8 Offset 18 
					                                                      OpMemberDecorate %18 9 Offset 18 
					                                                      OpMemberDecorate %18 10 RelaxedPrecision 
					                                                      OpMemberDecorate %18 10 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %71 DescriptorSet 71 
					                                                      OpDecorate %71 Binding 71 
					                                                      OpDecorate %72 RelaxedPrecision 
					                                                      OpDecorate %77 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %94 DescriptorSet 94 
					                                                      OpDecorate %94 Binding 94 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %125 RelaxedPrecision 
					                                                      OpDecorate %126 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %176 Location 176 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %191 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %211 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %246 RelaxedPrecision 
					                                                      OpDecorate %246 DescriptorSet 246 
					                                                      OpDecorate %246 Binding 246 
					                                                      OpDecorate %247 RelaxedPrecision 
					                                                      OpDecorate %249 Location 249 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %254 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %263 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %277 RelaxedPrecision 
					                                                      OpDecorate %278 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %305 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %315 RelaxedPrecision 
					                                                      OpDecorate %318 RelaxedPrecision 
					                                                      OpDecorate %319 RelaxedPrecision 
					                                                      OpDecorate %320 RelaxedPrecision 
					                                                      OpDecorate %321 RelaxedPrecision 
					                                                      OpDecorate %327 RelaxedPrecision 
					                                                      OpDecorate %327 Location 327 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeStruct %10 %7 %7 %7 %17 %7 %6 %6 %6 %6 %7 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 4 
					                                          i32 %23 = OpConstant 1 
					                                              %24 = OpTypePointer Uniform %7 
					                                          i32 %28 = OpConstant 0 
					                                          i32 %36 = OpConstant 2 
					                                          i32 %45 = OpConstant 3 
					                                              %49 = OpTypePointer Private %10 
					                               Private f32_3* %50 = OpVariable Private 
					                                              %51 = OpTypeVector %6 2 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                        f32_2 %62 = OpConstantComposite %61 %61 
					                                              %66 = OpTypePointer Private %6 
					                                 Private f32* %67 = OpVariable Private 
					                                              %68 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %69 = OpTypeSampledImage %68 
					                                              %70 = OpTypePointer UniformConstant %69 
					  UniformConstant read_only Texture2DSampled* %71 = OpVariable UniformConstant 
					                                          u32 %76 = OpConstant 3 
					                                              %78 = OpTypeBool 
					                                              %79 = OpTypePointer Private %78 
					                                Private bool* %80 = OpVariable Private 
					                                          f32 %81 = OpConstant 3.674022E-40 
					                                          u32 %82 = OpConstant 2 
					                                          u32 %91 = OpConstant 0 
					                                 Private f32* %93 = OpVariable Private 
					  UniformConstant read_only Texture2DSampled* %94 = OpVariable UniformConstant 
					                              Private f32_3* %100 = OpVariable Private 
					                                             %101 = OpTypePointer Function %6 
					                                         f32 %106 = OpConstant 3.674022E-40 
					                              Private f32_3* %126 = OpVariable Private 
					                                             %134 = OpTypePointer Uniform %10 
					                                Private f32* %140 = OpVariable Private 
					                              Private f32_3* %166 = OpVariable Private 
					                                Input f32_3* %176 = OpVariable Input 
					                                Private f32* %184 = OpVariable Private 
					                                Private f32* %189 = OpVariable Private 
					                                         i32 %193 = OpConstant 8 
					                                             %194 = OpTypePointer Uniform %6 
					                              Private f32_3* %203 = OpVariable Private 
					                                Private f32* %213 = OpVariable Private 
					                                Private f32* %228 = OpVariable Private 
					                                         i32 %231 = OpConstant 6 
					                                         f32 %234 = OpConstant 3.674022E-40 
					                                Private f32* %245 = OpVariable Private 
					 UniformConstant read_only Texture2DSampled* %246 = OpVariable UniformConstant 
					                                             %248 = OpTypePointer Input %51 
					                                Input f32_2* %249 = OpVariable Input 
					                                Private f32* %256 = OpVariable Private 
					                                         i32 %258 = OpConstant 7 
					                                         i32 %275 = OpConstant 10 
					                                         i32 %283 = OpConstant 9 
					                                         i32 %306 = OpConstant 5 
					                                             %326 = OpTypePointer Output %7 
					                               Output f32_4* %327 = OpVariable Output 
					                                             %332 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %102 = OpVariable Function 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_4 %14 = OpVectorShuffle %13 %13 1 1 1 1 
					                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                        f32_4 %26 = OpLoad %25 
					                                        f32_4 %27 = OpFMul %14 %26 
					                                                      OpStore %9 %27 
					                               Uniform f32_4* %29 = OpAccessChain %20 %22 %28 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_3 %31 = OpLoad %12 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %20 %22 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_3 %39 = OpLoad %12 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %44 = OpLoad %9 
					                               Uniform f32_4* %46 = OpAccessChain %20 %22 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_4 %48 = OpFAdd %44 %47 
					                                                      OpStore %9 %48 
					                                        f32_4 %52 = OpLoad %9 
					                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
					                                        f32_4 %54 = OpLoad %9 
					                                        f32_2 %55 = OpVectorShuffle %54 %54 3 3 
					                                        f32_2 %56 = OpFDiv %53 %55 
					                                        f32_3 %57 = OpLoad %50 
					                                        f32_3 %58 = OpVectorShuffle %57 %56 3 4 2 
					                                                      OpStore %50 %58 
					                                        f32_3 %59 = OpLoad %50 
					                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
					                                        f32_2 %63 = OpFAdd %60 %62 
					                                        f32_3 %64 = OpLoad %50 
					                                        f32_3 %65 = OpVectorShuffle %64 %63 3 4 2 
					                                                      OpStore %50 %65 
					                   read_only Texture2DSampled %72 = OpLoad %71 
					                                        f32_3 %73 = OpLoad %50 
					                                        f32_2 %74 = OpVectorShuffle %73 %73 0 1 
					                                        f32_4 %75 = OpImageSampleImplicitLod %72 %74 
					                                          f32 %77 = OpCompositeExtract %75 3 
					                                                      OpStore %67 %77 
					                                 Private f32* %83 = OpAccessChain %9 %82 
					                                          f32 %84 = OpLoad %83 
					                                         bool %85 = OpFOrdLessThan %81 %84 
					                                                      OpStore %80 %85 
					                                        f32_4 %86 = OpLoad %9 
					                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
					                                        f32_4 %88 = OpLoad %9 
					                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
					                                          f32 %90 = OpDot %87 %89 
					                                 Private f32* %92 = OpAccessChain %9 %91 
					                                                      OpStore %92 %90 
					                   read_only Texture2DSampled %95 = OpLoad %94 
					                                        f32_4 %96 = OpLoad %9 
					                                        f32_2 %97 = OpVectorShuffle %96 %96 0 0 
					                                        f32_4 %98 = OpImageSampleImplicitLod %95 %97 
					                                          f32 %99 = OpCompositeExtract %98 3 
					                                                      OpStore %93 %99 
					                                        bool %103 = OpLoad %80 
					                                                      OpSelectionMerge %105 None 
					                                                      OpBranchConditional %103 %104 %107 
					                                             %104 = OpLabel 
					                                                      OpStore %102 %106 
					                                                      OpBranch %105 
					                                             %107 = OpLabel 
					                                                      OpStore %102 %81 
					                                                      OpBranch %105 
					                                             %105 = OpLabel 
					                                         f32 %108 = OpLoad %102 
					                                Private f32* %109 = OpAccessChain %100 %91 
					                                                      OpStore %109 %108 
					                                         f32 %110 = OpLoad %67 
					                                Private f32* %111 = OpAccessChain %100 %91 
					                                         f32 %112 = OpLoad %111 
					                                         f32 %113 = OpFMul %110 %112 
					                                Private f32* %114 = OpAccessChain %100 %91 
					                                                      OpStore %114 %113 
					                                         f32 %115 = OpLoad %93 
					                                Private f32* %116 = OpAccessChain %100 %91 
					                                         f32 %117 = OpLoad %116 
					                                         f32 %118 = OpFMul %115 %117 
					                                Private f32* %119 = OpAccessChain %100 %91 
					                                                      OpStore %119 %118 
					                                       f32_3 %120 = OpLoad %100 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
					                              Uniform f32_4* %122 = OpAccessChain %20 %36 
					                                       f32_4 %123 = OpLoad %122 
					                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
					                                       f32_3 %125 = OpFMul %121 %124 
					                                                      OpStore %100 %125 
					                                       f32_3 %127 = OpLoad %100 
					                              Uniform f32_4* %128 = OpAccessChain %20 %45 
					                                       f32_4 %129 = OpLoad %128 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
					                                       f32_3 %131 = OpFMul %127 %130 
					                                                      OpStore %126 %131 
					                                       f32_3 %132 = OpLoad %12 
					                                       f32_3 %133 = OpFNegate %132 
					                              Uniform f32_3* %135 = OpAccessChain %20 %28 
					                                       f32_3 %136 = OpLoad %135 
					                                       f32_3 %137 = OpFAdd %133 %136 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
					                                                      OpStore %9 %139 
					                                       f32_4 %141 = OpLoad %9 
					                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
					                                       f32_4 %143 = OpLoad %9 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
					                                         f32 %145 = OpDot %142 %144 
					                                                      OpStore %140 %145 
					                                         f32 %146 = OpLoad %140 
					                                         f32 %147 = OpExtInst %1 32 %146 
					                                                      OpStore %140 %147 
					                                         f32 %148 = OpLoad %140 
					                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
					                                       f32_4 %150 = OpLoad %9 
					                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
					                                       f32_3 %152 = OpFMul %149 %151 
					                                       f32_4 %153 = OpLoad %9 
					                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
					                                                      OpStore %9 %154 
					                                       f32_3 %155 = OpLoad %12 
					                                       f32_3 %156 = OpFNegate %155 
					                              Uniform f32_4* %157 = OpAccessChain %20 %23 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
					                                       f32_3 %160 = OpFAdd %156 %159 
					                                                      OpStore %50 %160 
					                                       f32_3 %161 = OpLoad %50 
					                                       f32_3 %162 = OpLoad %50 
					                                         f32 %163 = OpDot %161 %162 
					                                                      OpStore %140 %163 
					                                         f32 %164 = OpLoad %140 
					                                         f32 %165 = OpExtInst %1 32 %164 
					                                                      OpStore %140 %165 
					                                       f32_3 %167 = OpLoad %50 
					                                         f32 %168 = OpLoad %140 
					                                       f32_3 %169 = OpCompositeConstruct %168 %168 %168 
					                                       f32_3 %170 = OpFMul %167 %169 
					                                       f32_4 %171 = OpLoad %9 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                       f32_3 %173 = OpFAdd %170 %172 
					                                                      OpStore %166 %173 
					                                       f32_4 %174 = OpLoad %9 
					                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
					                                       f32_3 %177 = OpLoad %176 
					                                         f32 %178 = OpDot %175 %177 
					                                Private f32* %179 = OpAccessChain %9 %91 
					                                                      OpStore %179 %178 
					                                Private f32* %180 = OpAccessChain %9 %91 
					                                         f32 %181 = OpLoad %180 
					                                         f32 %182 = OpExtInst %1 43 %181 %81 %106 
					                                Private f32* %183 = OpAccessChain %9 %91 
					                                                      OpStore %183 %182 
					                                Private f32* %185 = OpAccessChain %9 %91 
					                                         f32 %186 = OpLoad %185 
					                                         f32 %187 = OpFNegate %186 
					                                         f32 %188 = OpFAdd %187 %106 
					                                                      OpStore %184 %188 
					                                         f32 %190 = OpLoad %184 
					                                         f32 %191 = OpExtInst %1 30 %190 
					                                                      OpStore %189 %191 
					                                         f32 %192 = OpLoad %189 
					                                Uniform f32* %195 = OpAccessChain %20 %193 
					                                         f32 %196 = OpLoad %195 
					                                         f32 %197 = OpFMul %192 %196 
					                                Private f32* %198 = OpAccessChain %9 %91 
					                                                      OpStore %198 %197 
					                                Private f32* %199 = OpAccessChain %9 %91 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpExtInst %1 29 %200 
					                                Private f32* %202 = OpAccessChain %9 %91 
					                                                      OpStore %202 %201 
					                                         f32 %204 = OpLoad %140 
					                                       f32_3 %205 = OpCompositeConstruct %204 %204 %204 
					                                       f32_3 %206 = OpLoad %50 
					                                       f32_3 %207 = OpFMul %205 %206 
					                                                      OpStore %203 %207 
					                                       f32_3 %208 = OpLoad %176 
					                                       f32_3 %209 = OpLoad %203 
					                                         f32 %210 = OpDot %208 %209 
					                                                      OpStore %184 %210 
					                                         f32 %211 = OpLoad %184 
					                                         f32 %212 = OpExtInst %1 40 %211 %81 
					                                                      OpStore %184 %212 
					                                       f32_3 %214 = OpLoad %166 
					                                       f32_3 %215 = OpLoad %166 
					                                         f32 %216 = OpDot %214 %215 
					                                                      OpStore %213 %216 
					                                         f32 %217 = OpLoad %213 
					                                         f32 %218 = OpExtInst %1 32 %217 
					                                                      OpStore %213 %218 
					                                         f32 %219 = OpLoad %213 
					                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
					                                       f32_3 %221 = OpLoad %166 
					                                       f32_3 %222 = OpFMul %220 %221 
					                                                      OpStore %166 %222 
					                                       f32_3 %223 = OpLoad %176 
					                                       f32_3 %224 = OpLoad %166 
					                                         f32 %225 = OpDot %223 %224 
					                                                      OpStore %213 %225 
					                                         f32 %226 = OpLoad %213 
					                                         f32 %227 = OpExtInst %1 40 %226 %81 
					                                                      OpStore %213 %227 
					                                         f32 %229 = OpLoad %213 
					                                         f32 %230 = OpExtInst %1 30 %229 
					                                                      OpStore %228 %230 
					                                Uniform f32* %232 = OpAccessChain %20 %231 
					                                         f32 %233 = OpLoad %232 
					                                         f32 %235 = OpFMul %233 %234 
					                                                      OpStore %213 %235 
					                                         f32 %236 = OpLoad %228 
					                                         f32 %237 = OpLoad %213 
					                                         f32 %238 = OpFMul %236 %237 
					                                                      OpStore %228 %238 
					                                         f32 %239 = OpLoad %228 
					                                         f32 %240 = OpExtInst %1 29 %239 
					                                                      OpStore %228 %240 
					                                Private f32* %241 = OpAccessChain %9 %91 
					                                         f32 %242 = OpLoad %241 
					                                         f32 %243 = OpFNegate %242 
					                                         f32 %244 = OpFAdd %243 %106 
					                                                      OpStore %213 %244 
					                  read_only Texture2DSampled %247 = OpLoad %246 
					                                       f32_2 %250 = OpLoad %249 
					                                       f32_4 %251 = OpImageSampleImplicitLod %247 %250 
					                                         f32 %252 = OpCompositeExtract %251 3 
					                                                      OpStore %245 %252 
					                                         f32 %253 = OpLoad %213 
					                                         f32 %254 = OpLoad %245 
					                                         f32 %255 = OpFMul %253 %254 
					                                                      OpStore %213 %255 
					                                         f32 %257 = OpLoad %213 
					                                Uniform f32* %259 = OpAccessChain %20 %258 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpFMul %257 %260 
					                                Uniform f32* %262 = OpAccessChain %20 %45 %76 
					                                         f32 %263 = OpLoad %262 
					                                         f32 %264 = OpFAdd %261 %263 
					                                                      OpStore %256 %264 
					                                         f32 %265 = OpLoad %256 
					                                         f32 %266 = OpLoad %228 
					                                         f32 %267 = OpFMul %265 %266 
					                                Private f32* %268 = OpAccessChain %203 %91 
					                                                      OpStore %268 %267 
					                                       f32_3 %269 = OpLoad %203 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 0 0 
					                                       f32_3 %271 = OpLoad %126 
					                                       f32_3 %272 = OpFMul %270 %271 
					                                                      OpStore %203 %272 
					                                       f32_4 %273 = OpLoad %9 
					                                       f32_3 %274 = OpVectorShuffle %273 %273 0 0 0 
					                              Uniform f32_4* %276 = OpAccessChain %20 %275 
					                                       f32_4 %277 = OpLoad %276 
					                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
					                                       f32_3 %279 = OpFMul %274 %278 
					                                                      OpStore %126 %279 
					                                Private f32* %280 = OpAccessChain %9 %91 
					                                         f32 %281 = OpLoad %280 
					                                         f32 %282 = OpFNegate %281 
					                                Uniform f32* %284 = OpAccessChain %20 %283 
					                                         f32 %285 = OpLoad %284 
					                                         f32 %286 = OpFMul %282 %285 
					                                         f32 %287 = OpFAdd %286 %106 
					                                Private f32* %288 = OpAccessChain %9 %91 
					                                                      OpStore %288 %287 
					                                Private f32* %289 = OpAccessChain %9 %91 
					                                         f32 %290 = OpLoad %289 
					                                         f32 %291 = OpExtInst %1 43 %290 %81 %106 
					                                Private f32* %292 = OpAccessChain %9 %91 
					                                                      OpStore %292 %291 
					                                       f32_3 %293 = OpLoad %126 
					                                Uniform f32* %294 = OpAccessChain %20 %283 
					                                         f32 %295 = OpLoad %294 
					                                Uniform f32* %296 = OpAccessChain %20 %283 
					                                         f32 %297 = OpLoad %296 
					                                Uniform f32* %298 = OpAccessChain %20 %283 
					                                         f32 %299 = OpLoad %298 
					                                       f32_3 %300 = OpCompositeConstruct %295 %297 %299 
					                                         f32 %301 = OpCompositeExtract %300 0 
					                                         f32 %302 = OpCompositeExtract %300 1 
					                                         f32 %303 = OpCompositeExtract %300 2 
					                                       f32_3 %304 = OpCompositeConstruct %301 %302 %303 
					                                       f32_3 %305 = OpFMul %293 %304 
					                                                      OpStore %50 %305 
					                              Uniform f32_4* %307 = OpAccessChain %20 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_4 %310 = OpLoad %9 
					                                       f32_3 %311 = OpVectorShuffle %310 %310 0 0 0 
					                                       f32_3 %312 = OpFMul %309 %311 
					                                       f32_3 %313 = OpLoad %50 
					                                       f32_3 %314 = OpFAdd %312 %313 
					                                                      OpStore %50 %314 
					                                       f32_3 %315 = OpLoad %100 
					                                       f32_3 %316 = OpLoad %50 
					                                       f32_3 %317 = OpFMul %315 %316 
					                                                      OpStore %100 %317 
					                                       f32_3 %318 = OpLoad %100 
					                                         f32 %319 = OpLoad %184 
					                                       f32_3 %320 = OpCompositeConstruct %319 %319 %319 
					                                       f32_3 %321 = OpFMul %318 %320 
					                                       f32_3 %322 = OpLoad %203 
					                                       f32_3 %323 = OpFAdd %321 %322 
					                                       f32_4 %324 = OpLoad %9 
					                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
					                                                      OpStore %9 %325 
					                                       f32_4 %328 = OpLoad %9 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_4 %330 = OpLoad %327 
					                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
					                                                      OpStore %327 %331 
					                                 Output f32* %333 = OpAccessChain %327 %76 
					                                                      OpStore %333 %106 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "SPOT" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 335
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %176 %249 %327 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 RelaxedPrecision 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 RelaxedPrecision 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 RelaxedPrecision 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 RelaxedPrecision 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpMemberDecorate %18 8 Offset 18 
					                                                      OpMemberDecorate %18 9 Offset 18 
					                                                      OpMemberDecorate %18 10 RelaxedPrecision 
					                                                      OpMemberDecorate %18 10 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %71 DescriptorSet 71 
					                                                      OpDecorate %71 Binding 71 
					                                                      OpDecorate %72 RelaxedPrecision 
					                                                      OpDecorate %77 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %94 DescriptorSet 94 
					                                                      OpDecorate %94 Binding 94 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %125 RelaxedPrecision 
					                                                      OpDecorate %126 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %176 Location 176 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %191 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %211 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %246 RelaxedPrecision 
					                                                      OpDecorate %246 DescriptorSet 246 
					                                                      OpDecorate %246 Binding 246 
					                                                      OpDecorate %247 RelaxedPrecision 
					                                                      OpDecorate %249 Location 249 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %254 RelaxedPrecision 
					                                                      OpDecorate %255 RelaxedPrecision 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %263 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %277 RelaxedPrecision 
					                                                      OpDecorate %278 RelaxedPrecision 
					                                                      OpDecorate %293 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %305 RelaxedPrecision 
					                                                      OpDecorate %308 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %315 RelaxedPrecision 
					                                                      OpDecorate %318 RelaxedPrecision 
					                                                      OpDecorate %319 RelaxedPrecision 
					                                                      OpDecorate %320 RelaxedPrecision 
					                                                      OpDecorate %321 RelaxedPrecision 
					                                                      OpDecorate %327 RelaxedPrecision 
					                                                      OpDecorate %327 Location 327 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeStruct %10 %7 %7 %7 %17 %7 %6 %6 %6 %6 %7 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 4 
					                                          i32 %23 = OpConstant 1 
					                                              %24 = OpTypePointer Uniform %7 
					                                          i32 %28 = OpConstant 0 
					                                          i32 %36 = OpConstant 2 
					                                          i32 %45 = OpConstant 3 
					                                              %49 = OpTypePointer Private %10 
					                               Private f32_3* %50 = OpVariable Private 
					                                              %51 = OpTypeVector %6 2 
					                                          f32 %61 = OpConstant 3.674022E-40 
					                                        f32_2 %62 = OpConstantComposite %61 %61 
					                                              %66 = OpTypePointer Private %6 
					                                 Private f32* %67 = OpVariable Private 
					                                              %68 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %69 = OpTypeSampledImage %68 
					                                              %70 = OpTypePointer UniformConstant %69 
					  UniformConstant read_only Texture2DSampled* %71 = OpVariable UniformConstant 
					                                          u32 %76 = OpConstant 3 
					                                              %78 = OpTypeBool 
					                                              %79 = OpTypePointer Private %78 
					                                Private bool* %80 = OpVariable Private 
					                                          f32 %81 = OpConstant 3.674022E-40 
					                                          u32 %82 = OpConstant 2 
					                                          u32 %91 = OpConstant 0 
					                                 Private f32* %93 = OpVariable Private 
					  UniformConstant read_only Texture2DSampled* %94 = OpVariable UniformConstant 
					                              Private f32_3* %100 = OpVariable Private 
					                                             %101 = OpTypePointer Function %6 
					                                         f32 %106 = OpConstant 3.674022E-40 
					                              Private f32_3* %126 = OpVariable Private 
					                                             %134 = OpTypePointer Uniform %10 
					                                Private f32* %140 = OpVariable Private 
					                              Private f32_3* %166 = OpVariable Private 
					                                Input f32_3* %176 = OpVariable Input 
					                                Private f32* %184 = OpVariable Private 
					                                Private f32* %189 = OpVariable Private 
					                                         i32 %193 = OpConstant 8 
					                                             %194 = OpTypePointer Uniform %6 
					                              Private f32_3* %203 = OpVariable Private 
					                                Private f32* %213 = OpVariable Private 
					                                Private f32* %228 = OpVariable Private 
					                                         i32 %231 = OpConstant 6 
					                                         f32 %234 = OpConstant 3.674022E-40 
					                                Private f32* %245 = OpVariable Private 
					 UniformConstant read_only Texture2DSampled* %246 = OpVariable UniformConstant 
					                                             %248 = OpTypePointer Input %51 
					                                Input f32_2* %249 = OpVariable Input 
					                                Private f32* %256 = OpVariable Private 
					                                         i32 %258 = OpConstant 7 
					                                         i32 %275 = OpConstant 10 
					                                         i32 %283 = OpConstant 9 
					                                         i32 %306 = OpConstant 5 
					                                             %326 = OpTypePointer Output %7 
					                               Output f32_4* %327 = OpVariable Output 
					                                             %332 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %102 = OpVariable Function 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_4 %14 = OpVectorShuffle %13 %13 1 1 1 1 
					                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                        f32_4 %26 = OpLoad %25 
					                                        f32_4 %27 = OpFMul %14 %26 
					                                                      OpStore %9 %27 
					                               Uniform f32_4* %29 = OpAccessChain %20 %22 %28 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_3 %31 = OpLoad %12 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %20 %22 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_3 %39 = OpLoad %12 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %44 = OpLoad %9 
					                               Uniform f32_4* %46 = OpAccessChain %20 %22 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_4 %48 = OpFAdd %44 %47 
					                                                      OpStore %9 %48 
					                                        f32_4 %52 = OpLoad %9 
					                                        f32_2 %53 = OpVectorShuffle %52 %52 0 1 
					                                        f32_4 %54 = OpLoad %9 
					                                        f32_2 %55 = OpVectorShuffle %54 %54 3 3 
					                                        f32_2 %56 = OpFDiv %53 %55 
					                                        f32_3 %57 = OpLoad %50 
					                                        f32_3 %58 = OpVectorShuffle %57 %56 3 4 2 
					                                                      OpStore %50 %58 
					                                        f32_3 %59 = OpLoad %50 
					                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
					                                        f32_2 %63 = OpFAdd %60 %62 
					                                        f32_3 %64 = OpLoad %50 
					                                        f32_3 %65 = OpVectorShuffle %64 %63 3 4 2 
					                                                      OpStore %50 %65 
					                   read_only Texture2DSampled %72 = OpLoad %71 
					                                        f32_3 %73 = OpLoad %50 
					                                        f32_2 %74 = OpVectorShuffle %73 %73 0 1 
					                                        f32_4 %75 = OpImageSampleImplicitLod %72 %74 
					                                          f32 %77 = OpCompositeExtract %75 3 
					                                                      OpStore %67 %77 
					                                 Private f32* %83 = OpAccessChain %9 %82 
					                                          f32 %84 = OpLoad %83 
					                                         bool %85 = OpFOrdLessThan %81 %84 
					                                                      OpStore %80 %85 
					                                        f32_4 %86 = OpLoad %9 
					                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
					                                        f32_4 %88 = OpLoad %9 
					                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
					                                          f32 %90 = OpDot %87 %89 
					                                 Private f32* %92 = OpAccessChain %9 %91 
					                                                      OpStore %92 %90 
					                   read_only Texture2DSampled %95 = OpLoad %94 
					                                        f32_4 %96 = OpLoad %9 
					                                        f32_2 %97 = OpVectorShuffle %96 %96 0 0 
					                                        f32_4 %98 = OpImageSampleImplicitLod %95 %97 
					                                          f32 %99 = OpCompositeExtract %98 3 
					                                                      OpStore %93 %99 
					                                        bool %103 = OpLoad %80 
					                                                      OpSelectionMerge %105 None 
					                                                      OpBranchConditional %103 %104 %107 
					                                             %104 = OpLabel 
					                                                      OpStore %102 %106 
					                                                      OpBranch %105 
					                                             %107 = OpLabel 
					                                                      OpStore %102 %81 
					                                                      OpBranch %105 
					                                             %105 = OpLabel 
					                                         f32 %108 = OpLoad %102 
					                                Private f32* %109 = OpAccessChain %100 %91 
					                                                      OpStore %109 %108 
					                                         f32 %110 = OpLoad %67 
					                                Private f32* %111 = OpAccessChain %100 %91 
					                                         f32 %112 = OpLoad %111 
					                                         f32 %113 = OpFMul %110 %112 
					                                Private f32* %114 = OpAccessChain %100 %91 
					                                                      OpStore %114 %113 
					                                         f32 %115 = OpLoad %93 
					                                Private f32* %116 = OpAccessChain %100 %91 
					                                         f32 %117 = OpLoad %116 
					                                         f32 %118 = OpFMul %115 %117 
					                                Private f32* %119 = OpAccessChain %100 %91 
					                                                      OpStore %119 %118 
					                                       f32_3 %120 = OpLoad %100 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
					                              Uniform f32_4* %122 = OpAccessChain %20 %36 
					                                       f32_4 %123 = OpLoad %122 
					                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
					                                       f32_3 %125 = OpFMul %121 %124 
					                                                      OpStore %100 %125 
					                                       f32_3 %127 = OpLoad %100 
					                              Uniform f32_4* %128 = OpAccessChain %20 %45 
					                                       f32_4 %129 = OpLoad %128 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
					                                       f32_3 %131 = OpFMul %127 %130 
					                                                      OpStore %126 %131 
					                                       f32_3 %132 = OpLoad %12 
					                                       f32_3 %133 = OpFNegate %132 
					                              Uniform f32_3* %135 = OpAccessChain %20 %28 
					                                       f32_3 %136 = OpLoad %135 
					                                       f32_3 %137 = OpFAdd %133 %136 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
					                                                      OpStore %9 %139 
					                                       f32_4 %141 = OpLoad %9 
					                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
					                                       f32_4 %143 = OpLoad %9 
					                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
					                                         f32 %145 = OpDot %142 %144 
					                                                      OpStore %140 %145 
					                                         f32 %146 = OpLoad %140 
					                                         f32 %147 = OpExtInst %1 32 %146 
					                                                      OpStore %140 %147 
					                                         f32 %148 = OpLoad %140 
					                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
					                                       f32_4 %150 = OpLoad %9 
					                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
					                                       f32_3 %152 = OpFMul %149 %151 
					                                       f32_4 %153 = OpLoad %9 
					                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
					                                                      OpStore %9 %154 
					                                       f32_3 %155 = OpLoad %12 
					                                       f32_3 %156 = OpFNegate %155 
					                              Uniform f32_4* %157 = OpAccessChain %20 %23 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
					                                       f32_3 %160 = OpFAdd %156 %159 
					                                                      OpStore %50 %160 
					                                       f32_3 %161 = OpLoad %50 
					                                       f32_3 %162 = OpLoad %50 
					                                         f32 %163 = OpDot %161 %162 
					                                                      OpStore %140 %163 
					                                         f32 %164 = OpLoad %140 
					                                         f32 %165 = OpExtInst %1 32 %164 
					                                                      OpStore %140 %165 
					                                       f32_3 %167 = OpLoad %50 
					                                         f32 %168 = OpLoad %140 
					                                       f32_3 %169 = OpCompositeConstruct %168 %168 %168 
					                                       f32_3 %170 = OpFMul %167 %169 
					                                       f32_4 %171 = OpLoad %9 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                       f32_3 %173 = OpFAdd %170 %172 
					                                                      OpStore %166 %173 
					                                       f32_4 %174 = OpLoad %9 
					                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
					                                       f32_3 %177 = OpLoad %176 
					                                         f32 %178 = OpDot %175 %177 
					                                Private f32* %179 = OpAccessChain %9 %91 
					                                                      OpStore %179 %178 
					                                Private f32* %180 = OpAccessChain %9 %91 
					                                         f32 %181 = OpLoad %180 
					                                         f32 %182 = OpExtInst %1 43 %181 %81 %106 
					                                Private f32* %183 = OpAccessChain %9 %91 
					                                                      OpStore %183 %182 
					                                Private f32* %185 = OpAccessChain %9 %91 
					                                         f32 %186 = OpLoad %185 
					                                         f32 %187 = OpFNegate %186 
					                                         f32 %188 = OpFAdd %187 %106 
					                                                      OpStore %184 %188 
					                                         f32 %190 = OpLoad %184 
					                                         f32 %191 = OpExtInst %1 30 %190 
					                                                      OpStore %189 %191 
					                                         f32 %192 = OpLoad %189 
					                                Uniform f32* %195 = OpAccessChain %20 %193 
					                                         f32 %196 = OpLoad %195 
					                                         f32 %197 = OpFMul %192 %196 
					                                Private f32* %198 = OpAccessChain %9 %91 
					                                                      OpStore %198 %197 
					                                Private f32* %199 = OpAccessChain %9 %91 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpExtInst %1 29 %200 
					                                Private f32* %202 = OpAccessChain %9 %91 
					                                                      OpStore %202 %201 
					                                         f32 %204 = OpLoad %140 
					                                       f32_3 %205 = OpCompositeConstruct %204 %204 %204 
					                                       f32_3 %206 = OpLoad %50 
					                                       f32_3 %207 = OpFMul %205 %206 
					                                                      OpStore %203 %207 
					                                       f32_3 %208 = OpLoad %176 
					                                       f32_3 %209 = OpLoad %203 
					                                         f32 %210 = OpDot %208 %209 
					                                                      OpStore %184 %210 
					                                         f32 %211 = OpLoad %184 
					                                         f32 %212 = OpExtInst %1 40 %211 %81 
					                                                      OpStore %184 %212 
					                                       f32_3 %214 = OpLoad %166 
					                                       f32_3 %215 = OpLoad %166 
					                                         f32 %216 = OpDot %214 %215 
					                                                      OpStore %213 %216 
					                                         f32 %217 = OpLoad %213 
					                                         f32 %218 = OpExtInst %1 32 %217 
					                                                      OpStore %213 %218 
					                                         f32 %219 = OpLoad %213 
					                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
					                                       f32_3 %221 = OpLoad %166 
					                                       f32_3 %222 = OpFMul %220 %221 
					                                                      OpStore %166 %222 
					                                       f32_3 %223 = OpLoad %176 
					                                       f32_3 %224 = OpLoad %166 
					                                         f32 %225 = OpDot %223 %224 
					                                                      OpStore %213 %225 
					                                         f32 %226 = OpLoad %213 
					                                         f32 %227 = OpExtInst %1 40 %226 %81 
					                                                      OpStore %213 %227 
					                                         f32 %229 = OpLoad %213 
					                                         f32 %230 = OpExtInst %1 30 %229 
					                                                      OpStore %228 %230 
					                                Uniform f32* %232 = OpAccessChain %20 %231 
					                                         f32 %233 = OpLoad %232 
					                                         f32 %235 = OpFMul %233 %234 
					                                                      OpStore %213 %235 
					                                         f32 %236 = OpLoad %228 
					                                         f32 %237 = OpLoad %213 
					                                         f32 %238 = OpFMul %236 %237 
					                                                      OpStore %228 %238 
					                                         f32 %239 = OpLoad %228 
					                                         f32 %240 = OpExtInst %1 29 %239 
					                                                      OpStore %228 %240 
					                                Private f32* %241 = OpAccessChain %9 %91 
					                                         f32 %242 = OpLoad %241 
					                                         f32 %243 = OpFNegate %242 
					                                         f32 %244 = OpFAdd %243 %106 
					                                                      OpStore %213 %244 
					                  read_only Texture2DSampled %247 = OpLoad %246 
					                                       f32_2 %250 = OpLoad %249 
					                                       f32_4 %251 = OpImageSampleImplicitLod %247 %250 
					                                         f32 %252 = OpCompositeExtract %251 3 
					                                                      OpStore %245 %252 
					                                         f32 %253 = OpLoad %213 
					                                         f32 %254 = OpLoad %245 
					                                         f32 %255 = OpFMul %253 %254 
					                                                      OpStore %213 %255 
					                                         f32 %257 = OpLoad %213 
					                                Uniform f32* %259 = OpAccessChain %20 %258 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpFMul %257 %260 
					                                Uniform f32* %262 = OpAccessChain %20 %45 %76 
					                                         f32 %263 = OpLoad %262 
					                                         f32 %264 = OpFAdd %261 %263 
					                                                      OpStore %256 %264 
					                                         f32 %265 = OpLoad %256 
					                                         f32 %266 = OpLoad %228 
					                                         f32 %267 = OpFMul %265 %266 
					                                Private f32* %268 = OpAccessChain %203 %91 
					                                                      OpStore %268 %267 
					                                       f32_3 %269 = OpLoad %203 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 0 0 
					                                       f32_3 %271 = OpLoad %126 
					                                       f32_3 %272 = OpFMul %270 %271 
					                                                      OpStore %203 %272 
					                                       f32_4 %273 = OpLoad %9 
					                                       f32_3 %274 = OpVectorShuffle %273 %273 0 0 0 
					                              Uniform f32_4* %276 = OpAccessChain %20 %275 
					                                       f32_4 %277 = OpLoad %276 
					                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
					                                       f32_3 %279 = OpFMul %274 %278 
					                                                      OpStore %126 %279 
					                                Private f32* %280 = OpAccessChain %9 %91 
					                                         f32 %281 = OpLoad %280 
					                                         f32 %282 = OpFNegate %281 
					                                Uniform f32* %284 = OpAccessChain %20 %283 
					                                         f32 %285 = OpLoad %284 
					                                         f32 %286 = OpFMul %282 %285 
					                                         f32 %287 = OpFAdd %286 %106 
					                                Private f32* %288 = OpAccessChain %9 %91 
					                                                      OpStore %288 %287 
					                                Private f32* %289 = OpAccessChain %9 %91 
					                                         f32 %290 = OpLoad %289 
					                                         f32 %291 = OpExtInst %1 43 %290 %81 %106 
					                                Private f32* %292 = OpAccessChain %9 %91 
					                                                      OpStore %292 %291 
					                                       f32_3 %293 = OpLoad %126 
					                                Uniform f32* %294 = OpAccessChain %20 %283 
					                                         f32 %295 = OpLoad %294 
					                                Uniform f32* %296 = OpAccessChain %20 %283 
					                                         f32 %297 = OpLoad %296 
					                                Uniform f32* %298 = OpAccessChain %20 %283 
					                                         f32 %299 = OpLoad %298 
					                                       f32_3 %300 = OpCompositeConstruct %295 %297 %299 
					                                         f32 %301 = OpCompositeExtract %300 0 
					                                         f32 %302 = OpCompositeExtract %300 1 
					                                         f32 %303 = OpCompositeExtract %300 2 
					                                       f32_3 %304 = OpCompositeConstruct %301 %302 %303 
					                                       f32_3 %305 = OpFMul %293 %304 
					                                                      OpStore %50 %305 
					                              Uniform f32_4* %307 = OpAccessChain %20 %306 
					                                       f32_4 %308 = OpLoad %307 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_4 %310 = OpLoad %9 
					                                       f32_3 %311 = OpVectorShuffle %310 %310 0 0 0 
					                                       f32_3 %312 = OpFMul %309 %311 
					                                       f32_3 %313 = OpLoad %50 
					                                       f32_3 %314 = OpFAdd %312 %313 
					                                                      OpStore %50 %314 
					                                       f32_3 %315 = OpLoad %100 
					                                       f32_3 %316 = OpLoad %50 
					                                       f32_3 %317 = OpFMul %315 %316 
					                                                      OpStore %100 %317 
					                                       f32_3 %318 = OpLoad %100 
					                                         f32 %319 = OpLoad %184 
					                                       f32_3 %320 = OpCompositeConstruct %319 %319 %319 
					                                       f32_3 %321 = OpFMul %318 %320 
					                                       f32_3 %322 = OpLoad %203 
					                                       f32_3 %323 = OpFAdd %321 %322 
					                                       f32_4 %324 = OpLoad %9 
					                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
					                                                      OpStore %9 %325 
					                                       f32_4 %328 = OpLoad %9 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_4 %330 = OpLoad %327 
					                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
					                                                      OpStore %327 %331 
					                                 Output f32* %333 = OpAccessChain %327 %76 
					                                                      OpStore %333 %106 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform lowp samplerCube _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _LightTextureB0;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  highp vec3 lightCoord_4;
					  lowp vec3 tmpvar_5;
					  lowp vec3 viewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec3 tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_8.x = 1.0;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_7 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_6 = tmpvar_11;
					  tmpvar_9 = viewDir_6;
					  tmpvar_5 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_9), tmpvar_5), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_12 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_12 = (tmpvar_12 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = xlv_TEXCOORD2;
					  lightCoord_4 = (unity_WorldToLight * tmpvar_22).xyz;
					  highp float tmpvar_23;
					  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
					  lowp float tmpvar_24;
					  tmpvar_24 = (texture2D (_LightTextureB0, vec2(tmpvar_23)).w * textureCube (_LightTexture0, lightCoord_4).w);
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_7;
					  tmpvar_1 = (tmpvar_1 * tmpvar_24);
					  mediump vec3 viewDir_25;
					  viewDir_25 = tmpvar_11;
					  lowp vec4 c_26;
					  lowp vec4 c_27;
					  highp float nh_28;
					  lowp float diff_29;
					  mediump float tmpvar_30;
					  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
					  diff_29 = tmpvar_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = max (0.0, dot (tmpvar_5, normalize(
					    (tmpvar_2 + viewDir_25)
					  )));
					  nh_28 = tmpvar_31;
					  mediump float y_32;
					  y_32 = (_Shininess * 128.0);
					  highp float tmpvar_33;
					  tmpvar_33 = (pow (nh_28, y_32) * tmpvar_13);
					  c_27.xyz = (((tmpvar_12 * tmpvar_1) * diff_29) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_33));
					  c_27.w = (textureCube (_Cube, tmpvar_8).w * _ReflectColor.w);
					  c_26.w = c_27.w;
					  c_26.xyz = c_27.xyz;
					  c_3.xyz = c_26.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform lowp samplerCube _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _LightTextureB0;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  highp vec3 lightCoord_4;
					  lowp vec3 tmpvar_5;
					  lowp vec3 viewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec3 tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_8.x = 1.0;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_7 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_6 = tmpvar_11;
					  tmpvar_9 = viewDir_6;
					  tmpvar_5 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_9), tmpvar_5), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_12 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_12 = (tmpvar_12 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = xlv_TEXCOORD2;
					  lightCoord_4 = (unity_WorldToLight * tmpvar_22).xyz;
					  highp float tmpvar_23;
					  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
					  lowp float tmpvar_24;
					  tmpvar_24 = (texture2D (_LightTextureB0, vec2(tmpvar_23)).w * textureCube (_LightTexture0, lightCoord_4).w);
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_7;
					  tmpvar_1 = (tmpvar_1 * tmpvar_24);
					  mediump vec3 viewDir_25;
					  viewDir_25 = tmpvar_11;
					  lowp vec4 c_26;
					  lowp vec4 c_27;
					  highp float nh_28;
					  lowp float diff_29;
					  mediump float tmpvar_30;
					  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
					  diff_29 = tmpvar_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = max (0.0, dot (tmpvar_5, normalize(
					    (tmpvar_2 + viewDir_25)
					  )));
					  nh_28 = tmpvar_31;
					  mediump float y_32;
					  y_32 = (_Shininess * 128.0);
					  highp float tmpvar_33;
					  tmpvar_33 = (pow (nh_28, y_32) * tmpvar_13);
					  c_27.xyz = (((tmpvar_12 * tmpvar_1) * diff_29) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_33));
					  c_27.w = (textureCube (_Cube, tmpvar_8).w * _ReflectColor.w);
					  c_26.w = c_27.w;
					  c_26.xyz = c_27.xyz;
					  c_3.xyz = c_26.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform lowp samplerCube _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _LightTextureB0;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  highp vec3 lightCoord_4;
					  lowp vec3 tmpvar_5;
					  lowp vec3 viewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec3 tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_8.x = 1.0;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
					  lightDir_7 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_6 = tmpvar_11;
					  tmpvar_9 = viewDir_6;
					  tmpvar_5 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_9), tmpvar_5), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_12 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_12 = (tmpvar_12 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = xlv_TEXCOORD2;
					  lightCoord_4 = (unity_WorldToLight * tmpvar_22).xyz;
					  highp float tmpvar_23;
					  tmpvar_23 = dot (lightCoord_4, lightCoord_4);
					  lowp float tmpvar_24;
					  tmpvar_24 = (texture2D (_LightTextureB0, vec2(tmpvar_23)).w * textureCube (_LightTexture0, lightCoord_4).w);
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_7;
					  tmpvar_1 = (tmpvar_1 * tmpvar_24);
					  mediump vec3 viewDir_25;
					  viewDir_25 = tmpvar_11;
					  lowp vec4 c_26;
					  lowp vec4 c_27;
					  highp float nh_28;
					  lowp float diff_29;
					  mediump float tmpvar_30;
					  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_2));
					  diff_29 = tmpvar_30;
					  mediump float tmpvar_31;
					  tmpvar_31 = max (0.0, dot (tmpvar_5, normalize(
					    (tmpvar_2 + viewDir_25)
					  )));
					  nh_28 = tmpvar_31;
					  mediump float y_32;
					  y_32 = (_Shininess * 128.0);
					  highp float tmpvar_33;
					  tmpvar_33 = (pow (nh_28, y_32) * tmpvar_13);
					  c_27.xyz = (((tmpvar_12 * tmpvar_1) * diff_29) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_33));
					  c_27.w = (textureCube (_Cube, tmpvar_8).w * _ReflectColor.w);
					  c_26.w = c_27.w;
					  c_26.xyz = c_27.xyz;
					  c_3.xyz = c_26.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp sampler2D _LightTextureB0;
					uniform lowp samplerCube _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					float u_xlat8;
					mediump float u_xlat16_8;
					lowp float u_xlat10_8;
					float u_xlat12;
					lowp float u_xlat10_12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_14);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
					    u_xlat16_4 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_2.x;
					    u_xlat16_4 = exp2(u_xlat16_4);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_8 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat10_8;
					    u_xlat8 = u_xlat16_2.x * _FlakeAmt + _SpecColor.w;
					    u_xlat4.x = u_xlat8 * u_xlat16_4;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10_12 = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat10_8 = texture(_LightTextureB0, vec2(u_xlat8)).w;
					    u_xlat16_8 = u_xlat10_12 * u_xlat10_8;
					    u_xlat16_2.xyz = vec3(u_xlat16_8) * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat1.xyz = _Color.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp sampler2D _LightTextureB0;
					uniform lowp samplerCube _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					float u_xlat8;
					mediump float u_xlat16_8;
					lowp float u_xlat10_8;
					float u_xlat12;
					lowp float u_xlat10_12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_14);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
					    u_xlat16_4 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_2.x;
					    u_xlat16_4 = exp2(u_xlat16_4);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_8 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat10_8;
					    u_xlat8 = u_xlat16_2.x * _FlakeAmt + _SpecColor.w;
					    u_xlat4.x = u_xlat8 * u_xlat16_4;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10_12 = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat10_8 = texture(_LightTextureB0, vec2(u_xlat8)).w;
					    u_xlat16_8 = u_xlat10_12 * u_xlat10_8;
					    u_xlat16_2.xyz = vec3(u_xlat16_8) * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat1.xyz = _Color.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp sampler2D _LightTextureB0;
					uniform lowp samplerCube _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					float u_xlat8;
					mediump float u_xlat16_8;
					lowp float u_xlat10_8;
					float u_xlat12;
					lowp float u_xlat10_12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_14);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.w = dot(vs_TEXCOORD1.xyz, u_xlat4.xyz);
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.xw = max(u_xlat16_2.xw, vec2(0.0, 0.0));
					    u_xlat16_4 = log2(u_xlat16_2.x);
					    u_xlat16_2.x = _Shininess * 128.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_2.x;
					    u_xlat16_4 = exp2(u_xlat16_4);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_8 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat10_8;
					    u_xlat8 = u_xlat16_2.x * _FlakeAmt + _SpecColor.w;
					    u_xlat4.x = u_xlat8 * u_xlat16_4;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10_12 = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat10_8 = texture(_LightTextureB0, vec2(u_xlat8)).w;
					    u_xlat16_8 = u_xlat10_12 * u_xlat10_8;
					    u_xlat16_2.xyz = vec3(u_xlat16_8) * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat1.xyz = _Color.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_2.www + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 317
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %63 %161 %310 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 RelaxedPrecision 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 RelaxedPrecision 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 RelaxedPrecision 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 RelaxedPrecision 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpMemberDecorate %18 8 Offset 18 
					                                                      OpMemberDecorate %18 9 Offset 18 
					                                                      OpMemberDecorate %18 10 RelaxedPrecision 
					                                                      OpMemberDecorate %18 10 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %63 Location 63 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %82 RelaxedPrecision 
					                                                      OpDecorate %103 RelaxedPrecision 
					                                                      OpDecorate %104 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %107 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %111 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %114 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %116 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %158 DescriptorSet 158 
					                                                      OpDecorate %158 Binding 158 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %164 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %179 RelaxedPrecision 
					                                                      OpDecorate %182 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %221 DescriptorSet 221 
					                                                      OpDecorate %221 Binding 221 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %226 DescriptorSet 226 
					                                                      OpDecorate %226 Binding 226 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %247 RelaxedPrecision 
					                                                      OpDecorate %248 RelaxedPrecision 
					                                                      OpDecorate %249 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %286 RelaxedPrecision 
					                                                      OpDecorate %289 RelaxedPrecision 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %296 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %305 RelaxedPrecision 
					                                                      OpDecorate %306 RelaxedPrecision 
					                                                      OpDecorate %310 RelaxedPrecision 
					                                                      OpDecorate %310 Location 310 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %14 %16 
					                                              %18 = OpTypeStruct %7 %14 %14 %14 %17 %14 %6 %6 %6 %6 %14 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 0 
					                                              %23 = OpTypePointer Uniform %7 
					                                              %27 = OpTypePointer Private %6 
					                                 Private f32* %28 = OpVariable Private 
					                               Private f32_3* %38 = OpVariable Private 
					                                          i32 %41 = OpConstant 1 
					                                              %42 = OpTypePointer Uniform %14 
					                                              %52 = OpTypePointer Private %14 
					                               Private f32_4* %53 = OpVariable Private 
					                                 Input f32_3* %63 = OpVariable Input 
					                                          u32 %66 = OpConstant 0 
					                                          f32 %70 = OpConstant 3.674022E-40 
					                                          f32 %71 = OpConstant 3.674022E-40 
					                                 Private f32* %74 = OpVariable Private 
					                                 Private f32* %79 = OpVariable Private 
					                                          i32 %83 = OpConstant 8 
					                                              %84 = OpTypePointer Uniform %6 
					                               Private f32_3* %93 = OpVariable Private 
					                                         u32 %101 = OpConstant 3 
					                              Private f32_3* %103 = OpVariable Private 
					                                             %126 = OpTypeVector %6 2 
					                                       f32_2 %129 = OpConstantComposite %70 %70 
					                                Private f32* %133 = OpVariable Private 
					                                         i32 %137 = OpConstant 6 
					                                         f32 %140 = OpConstant 3.674022E-40 
					                                Private f32* %154 = OpVariable Private 
					                                             %155 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %156 = OpTypeSampledImage %155 
					                                             %157 = OpTypePointer UniformConstant %156 
					 UniformConstant read_only Texture2DSampled* %158 = OpVariable UniformConstant 
					                                             %160 = OpTypePointer Input %126 
					                                Input f32_2* %161 = OpVariable Input 
					                                Private f32* %170 = OpVariable Private 
					                                         i32 %173 = OpConstant 7 
					                                         i32 %177 = OpConstant 3 
					                                         i32 %187 = OpConstant 4 
					                                         i32 %200 = OpConstant 2 
					                                Private f32* %217 = OpVariable Private 
					                                             %218 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %219 = OpTypeSampledImage %218 
					                                             %220 = OpTypePointer UniformConstant %219 
					UniformConstant read_only TextureCubeSampled* %221 = OpVariable UniformConstant 
					 UniformConstant read_only Texture2DSampled* %226 = OpVariable UniformConstant 
					                                Private f32* %232 = OpVariable Private 
					                                         i32 %256 = OpConstant 10 
					                                         i32 %264 = OpConstant 9 
					                                         i32 %287 = OpConstant 5 
					                                             %309 = OpTypePointer Output %14 
					                               Output f32_4* %310 = OpVariable Output 
					                                             %314 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %24 = OpAccessChain %20 %22 
					                                        f32_3 %25 = OpLoad %24 
					                                        f32_3 %26 = OpFAdd %13 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %29 = OpLoad %9 
					                                        f32_3 %30 = OpLoad %9 
					                                          f32 %31 = OpDot %29 %30 
					                                                      OpStore %28 %31 
					                                          f32 %32 = OpLoad %28 
					                                          f32 %33 = OpExtInst %1 32 %32 
					                                                      OpStore %28 %33 
					                                          f32 %34 = OpLoad %28 
					                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
					                                        f32_3 %36 = OpLoad %9 
					                                        f32_3 %37 = OpFMul %35 %36 
					                                                      OpStore %9 %37 
					                                        f32_3 %39 = OpLoad %11 
					                                        f32_3 %40 = OpFNegate %39 
					                               Uniform f32_4* %43 = OpAccessChain %20 %41 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %46 = OpFAdd %40 %45 
					                                                      OpStore %38 %46 
					                                        f32_3 %47 = OpLoad %38 
					                                        f32_3 %48 = OpLoad %38 
					                                          f32 %49 = OpDot %47 %48 
					                                                      OpStore %28 %49 
					                                          f32 %50 = OpLoad %28 
					                                          f32 %51 = OpExtInst %1 32 %50 
					                                                      OpStore %28 %51 
					                                        f32_3 %54 = OpLoad %38 
					                                          f32 %55 = OpLoad %28 
					                                        f32_3 %56 = OpCompositeConstruct %55 %55 %55 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_3 %58 = OpLoad %9 
					                                        f32_3 %59 = OpFAdd %57 %58 
					                                        f32_4 %60 = OpLoad %53 
					                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
					                                                      OpStore %53 %61 
					                                        f32_3 %62 = OpLoad %9 
					                                        f32_3 %64 = OpLoad %63 
					                                          f32 %65 = OpDot %62 %64 
					                                 Private f32* %67 = OpAccessChain %9 %66 
					                                                      OpStore %67 %65 
					                                 Private f32* %68 = OpAccessChain %9 %66 
					                                          f32 %69 = OpLoad %68 
					                                          f32 %72 = OpExtInst %1 43 %69 %70 %71 
					                                 Private f32* %73 = OpAccessChain %9 %66 
					                                                      OpStore %73 %72 
					                                 Private f32* %75 = OpAccessChain %9 %66 
					                                          f32 %76 = OpLoad %75 
					                                          f32 %77 = OpFNegate %76 
					                                          f32 %78 = OpFAdd %77 %71 
					                                                      OpStore %74 %78 
					                                          f32 %80 = OpLoad %74 
					                                          f32 %81 = OpExtInst %1 30 %80 
					                                                      OpStore %79 %81 
					                                          f32 %82 = OpLoad %79 
					                                 Uniform f32* %85 = OpAccessChain %20 %83 
					                                          f32 %86 = OpLoad %85 
					                                          f32 %87 = OpFMul %82 %86 
					                                 Private f32* %88 = OpAccessChain %9 %66 
					                                                      OpStore %88 %87 
					                                 Private f32* %89 = OpAccessChain %9 %66 
					                                          f32 %90 = OpLoad %89 
					                                          f32 %91 = OpExtInst %1 29 %90 
					                                 Private f32* %92 = OpAccessChain %9 %66 
					                                                      OpStore %92 %91 
					                                          f32 %94 = OpLoad %28 
					                                        f32_3 %95 = OpCompositeConstruct %94 %94 %94 
					                                        f32_3 %96 = OpLoad %38 
					                                        f32_3 %97 = OpFMul %95 %96 
					                                                      OpStore %93 %97 
					                                        f32_3 %98 = OpLoad %63 
					                                        f32_3 %99 = OpLoad %93 
					                                         f32 %100 = OpDot %98 %99 
					                                Private f32* %102 = OpAccessChain %53 %101 
					                                                      OpStore %102 %100 
					                                       f32_4 %104 = OpLoad %53 
					                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
					                                       f32_4 %106 = OpLoad %53 
					                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
					                                         f32 %108 = OpDot %105 %107 
					                                Private f32* %109 = OpAccessChain %103 %66 
					                                                      OpStore %109 %108 
					                                Private f32* %110 = OpAccessChain %103 %66 
					                                         f32 %111 = OpLoad %110 
					                                         f32 %112 = OpExtInst %1 32 %111 
					                                Private f32* %113 = OpAccessChain %103 %66 
					                                                      OpStore %113 %112 
					                                       f32_4 %114 = OpLoad %53 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                       f32_3 %116 = OpLoad %103 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 0 0 
					                                       f32_3 %118 = OpFMul %115 %117 
					                                       f32_4 %119 = OpLoad %53 
					                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
					                                                      OpStore %53 %120 
					                                       f32_3 %121 = OpLoad %63 
					                                       f32_4 %122 = OpLoad %53 
					                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
					                                         f32 %124 = OpDot %121 %123 
					                                Private f32* %125 = OpAccessChain %53 %66 
					                                                      OpStore %125 %124 
					                                       f32_4 %127 = OpLoad %53 
					                                       f32_2 %128 = OpVectorShuffle %127 %127 0 3 
					                                       f32_2 %130 = OpExtInst %1 40 %128 %129 
					                                       f32_4 %131 = OpLoad %53 
					                                       f32_4 %132 = OpVectorShuffle %131 %130 4 1 2 5 
					                                                      OpStore %53 %132 
					                                Private f32* %134 = OpAccessChain %53 %66 
					                                         f32 %135 = OpLoad %134 
					                                         f32 %136 = OpExtInst %1 30 %135 
					                                                      OpStore %133 %136 
					                                Uniform f32* %138 = OpAccessChain %20 %137 
					                                         f32 %139 = OpLoad %138 
					                                         f32 %141 = OpFMul %139 %140 
					                                Private f32* %142 = OpAccessChain %53 %66 
					                                                      OpStore %142 %141 
					                                         f32 %143 = OpLoad %133 
					                                Private f32* %144 = OpAccessChain %53 %66 
					                                         f32 %145 = OpLoad %144 
					                                         f32 %146 = OpFMul %143 %145 
					                                                      OpStore %133 %146 
					                                         f32 %147 = OpLoad %133 
					                                         f32 %148 = OpExtInst %1 29 %147 
					                                                      OpStore %133 %148 
					                                Private f32* %149 = OpAccessChain %9 %66 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpFNegate %150 
					                                         f32 %152 = OpFAdd %151 %71 
					                                Private f32* %153 = OpAccessChain %53 %66 
					                                                      OpStore %153 %152 
					                  read_only Texture2DSampled %159 = OpLoad %158 
					                                       f32_2 %162 = OpLoad %161 
					                                       f32_4 %163 = OpImageSampleImplicitLod %159 %162 
					                                         f32 %164 = OpCompositeExtract %163 3 
					                                                      OpStore %154 %164 
					                                Private f32* %165 = OpAccessChain %53 %66 
					                                         f32 %166 = OpLoad %165 
					                                         f32 %167 = OpLoad %154 
					                                         f32 %168 = OpFMul %166 %167 
					                                Private f32* %169 = OpAccessChain %53 %66 
					                                                      OpStore %169 %168 
					                                Private f32* %171 = OpAccessChain %53 %66 
					                                         f32 %172 = OpLoad %171 
					                                Uniform f32* %174 = OpAccessChain %20 %173 
					                                         f32 %175 = OpLoad %174 
					                                         f32 %176 = OpFMul %172 %175 
					                                Uniform f32* %178 = OpAccessChain %20 %177 %101 
					                                         f32 %179 = OpLoad %178 
					                                         f32 %180 = OpFAdd %176 %179 
					                                                      OpStore %170 %180 
					                                         f32 %181 = OpLoad %170 
					                                         f32 %182 = OpLoad %133 
					                                         f32 %183 = OpFMul %181 %182 
					                                Private f32* %184 = OpAccessChain %93 %66 
					                                                      OpStore %184 %183 
					                                       f32_3 %185 = OpLoad %11 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 1 1 1 
					                              Uniform f32_4* %188 = OpAccessChain %20 %187 %41 
					                                       f32_4 %189 = OpLoad %188 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %186 %190 
					                                                      OpStore %38 %191 
					                              Uniform f32_4* %192 = OpAccessChain %20 %187 %22 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                       f32_3 %195 = OpLoad %11 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
					                                       f32_3 %197 = OpFMul %194 %196 
					                                       f32_3 %198 = OpLoad %38 
					                                       f32_3 %199 = OpFAdd %197 %198 
					                                                      OpStore %38 %199 
					                              Uniform f32_4* %201 = OpAccessChain %20 %187 %200 
					                                       f32_4 %202 = OpLoad %201 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
					                                       f32_3 %204 = OpLoad %11 
					                                       f32_3 %205 = OpVectorShuffle %204 %204 2 2 2 
					                                       f32_3 %206 = OpFMul %203 %205 
					                                       f32_3 %207 = OpLoad %38 
					                                       f32_3 %208 = OpFAdd %206 %207 
					                                                      OpStore %38 %208 
					                                       f32_3 %209 = OpLoad %38 
					                              Uniform f32_4* %210 = OpAccessChain %20 %187 %177 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                       f32_3 %213 = OpFAdd %209 %212 
					                                                      OpStore %38 %213 
					                                       f32_3 %214 = OpLoad %38 
					                                       f32_3 %215 = OpLoad %38 
					                                         f32 %216 = OpDot %214 %215 
					                                                      OpStore %170 %216 
					                read_only TextureCubeSampled %222 = OpLoad %221 
					                                       f32_3 %223 = OpLoad %38 
					                                       f32_4 %224 = OpImageSampleImplicitLod %222 %223 
					                                         f32 %225 = OpCompositeExtract %224 3 
					                                                      OpStore %217 %225 
					                  read_only Texture2DSampled %227 = OpLoad %226 
					                                         f32 %228 = OpLoad %170 
					                                       f32_2 %229 = OpCompositeConstruct %228 %228 
					                                       f32_4 %230 = OpImageSampleImplicitLod %227 %229 
					                                         f32 %231 = OpCompositeExtract %230 3 
					                                                      OpStore %154 %231 
					                                         f32 %233 = OpLoad %217 
					                                         f32 %234 = OpLoad %154 
					                                         f32 %235 = OpFMul %233 %234 
					                                                      OpStore %232 %235 
					                                         f32 %236 = OpLoad %232 
					                                       f32_3 %237 = OpCompositeConstruct %236 %236 %236 
					                              Uniform f32_4* %238 = OpAccessChain %20 %200 
					                                       f32_4 %239 = OpLoad %238 
					                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
					                                       f32_3 %241 = OpFMul %237 %240 
					                                       f32_4 %242 = OpLoad %53 
					                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
					                                                      OpStore %53 %243 
					                                       f32_4 %244 = OpLoad %53 
					                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
					                              Uniform f32_4* %246 = OpAccessChain %20 %177 
					                                       f32_4 %247 = OpLoad %246 
					                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
					                                       f32_3 %249 = OpFMul %245 %248 
					                                                      OpStore %103 %249 
					                                       f32_3 %250 = OpLoad %93 
					                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
					                                       f32_3 %252 = OpLoad %103 
					                                       f32_3 %253 = OpFMul %251 %252 
					                                                      OpStore %93 %253 
					                                       f32_3 %254 = OpLoad %9 
					                                       f32_3 %255 = OpVectorShuffle %254 %254 0 0 0 
					                              Uniform f32_4* %257 = OpAccessChain %20 %256 
					                                       f32_4 %258 = OpLoad %257 
					                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
					                                       f32_3 %260 = OpFMul %255 %259 
					                                                      OpStore %103 %260 
					                                Private f32* %261 = OpAccessChain %9 %66 
					                                         f32 %262 = OpLoad %261 
					                                         f32 %263 = OpFNegate %262 
					                                Uniform f32* %265 = OpAccessChain %20 %264 
					                                         f32 %266 = OpLoad %265 
					                                         f32 %267 = OpFMul %263 %266 
					                                         f32 %268 = OpFAdd %267 %71 
					                                Private f32* %269 = OpAccessChain %9 %66 
					                                                      OpStore %269 %268 
					                                Private f32* %270 = OpAccessChain %9 %66 
					                                         f32 %271 = OpLoad %270 
					                                         f32 %272 = OpExtInst %1 43 %271 %70 %71 
					                                Private f32* %273 = OpAccessChain %9 %66 
					                                                      OpStore %273 %272 
					                                       f32_3 %274 = OpLoad %103 
					                                Uniform f32* %275 = OpAccessChain %20 %264 
					                                         f32 %276 = OpLoad %275 
					                                Uniform f32* %277 = OpAccessChain %20 %264 
					                                         f32 %278 = OpLoad %277 
					                                Uniform f32* %279 = OpAccessChain %20 %264 
					                                         f32 %280 = OpLoad %279 
					                                       f32_3 %281 = OpCompositeConstruct %276 %278 %280 
					                                         f32 %282 = OpCompositeExtract %281 0 
					                                         f32 %283 = OpCompositeExtract %281 1 
					                                         f32 %284 = OpCompositeExtract %281 2 
					                                       f32_3 %285 = OpCompositeConstruct %282 %283 %284 
					                                       f32_3 %286 = OpFMul %274 %285 
					                                                      OpStore %38 %286 
					                              Uniform f32_4* %288 = OpAccessChain %20 %287 
					                                       f32_4 %289 = OpLoad %288 
					                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
					                                       f32_3 %291 = OpLoad %9 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 0 0 
					                                       f32_3 %293 = OpFMul %290 %292 
					                                       f32_3 %294 = OpLoad %38 
					                                       f32_3 %295 = OpFAdd %293 %294 
					                                                      OpStore %38 %295 
					                                       f32_4 %296 = OpLoad %53 
					                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
					                                       f32_3 %298 = OpLoad %38 
					                                       f32_3 %299 = OpFMul %297 %298 
					                                       f32_4 %300 = OpLoad %53 
					                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
					                                                      OpStore %53 %301 
					                                       f32_4 %302 = OpLoad %53 
					                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
					                                       f32_4 %304 = OpLoad %53 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 3 3 3 
					                                       f32_3 %306 = OpFMul %303 %305 
					                                       f32_3 %307 = OpLoad %93 
					                                       f32_3 %308 = OpFAdd %306 %307 
					                                                      OpStore %9 %308 
					                                       f32_3 %311 = OpLoad %9 
					                                       f32_4 %312 = OpLoad %310 
					                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
					                                                      OpStore %310 %313 
					                                 Output f32* %315 = OpAccessChain %310 %101 
					                                                      OpStore %315 %71 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 317
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %63 %161 %310 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 RelaxedPrecision 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 RelaxedPrecision 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 RelaxedPrecision 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 RelaxedPrecision 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpMemberDecorate %18 8 Offset 18 
					                                                      OpMemberDecorate %18 9 Offset 18 
					                                                      OpMemberDecorate %18 10 RelaxedPrecision 
					                                                      OpMemberDecorate %18 10 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %63 Location 63 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %82 RelaxedPrecision 
					                                                      OpDecorate %103 RelaxedPrecision 
					                                                      OpDecorate %104 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %107 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %111 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %114 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %116 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %158 DescriptorSet 158 
					                                                      OpDecorate %158 Binding 158 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %164 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %179 RelaxedPrecision 
					                                                      OpDecorate %182 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %221 DescriptorSet 221 
					                                                      OpDecorate %221 Binding 221 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %226 DescriptorSet 226 
					                                                      OpDecorate %226 Binding 226 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %247 RelaxedPrecision 
					                                                      OpDecorate %248 RelaxedPrecision 
					                                                      OpDecorate %249 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %286 RelaxedPrecision 
					                                                      OpDecorate %289 RelaxedPrecision 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %296 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %305 RelaxedPrecision 
					                                                      OpDecorate %306 RelaxedPrecision 
					                                                      OpDecorate %310 RelaxedPrecision 
					                                                      OpDecorate %310 Location 310 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %14 %16 
					                                              %18 = OpTypeStruct %7 %14 %14 %14 %17 %14 %6 %6 %6 %6 %14 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 0 
					                                              %23 = OpTypePointer Uniform %7 
					                                              %27 = OpTypePointer Private %6 
					                                 Private f32* %28 = OpVariable Private 
					                               Private f32_3* %38 = OpVariable Private 
					                                          i32 %41 = OpConstant 1 
					                                              %42 = OpTypePointer Uniform %14 
					                                              %52 = OpTypePointer Private %14 
					                               Private f32_4* %53 = OpVariable Private 
					                                 Input f32_3* %63 = OpVariable Input 
					                                          u32 %66 = OpConstant 0 
					                                          f32 %70 = OpConstant 3.674022E-40 
					                                          f32 %71 = OpConstant 3.674022E-40 
					                                 Private f32* %74 = OpVariable Private 
					                                 Private f32* %79 = OpVariable Private 
					                                          i32 %83 = OpConstant 8 
					                                              %84 = OpTypePointer Uniform %6 
					                               Private f32_3* %93 = OpVariable Private 
					                                         u32 %101 = OpConstant 3 
					                              Private f32_3* %103 = OpVariable Private 
					                                             %126 = OpTypeVector %6 2 
					                                       f32_2 %129 = OpConstantComposite %70 %70 
					                                Private f32* %133 = OpVariable Private 
					                                         i32 %137 = OpConstant 6 
					                                         f32 %140 = OpConstant 3.674022E-40 
					                                Private f32* %154 = OpVariable Private 
					                                             %155 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %156 = OpTypeSampledImage %155 
					                                             %157 = OpTypePointer UniformConstant %156 
					 UniformConstant read_only Texture2DSampled* %158 = OpVariable UniformConstant 
					                                             %160 = OpTypePointer Input %126 
					                                Input f32_2* %161 = OpVariable Input 
					                                Private f32* %170 = OpVariable Private 
					                                         i32 %173 = OpConstant 7 
					                                         i32 %177 = OpConstant 3 
					                                         i32 %187 = OpConstant 4 
					                                         i32 %200 = OpConstant 2 
					                                Private f32* %217 = OpVariable Private 
					                                             %218 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %219 = OpTypeSampledImage %218 
					                                             %220 = OpTypePointer UniformConstant %219 
					UniformConstant read_only TextureCubeSampled* %221 = OpVariable UniformConstant 
					 UniformConstant read_only Texture2DSampled* %226 = OpVariable UniformConstant 
					                                Private f32* %232 = OpVariable Private 
					                                         i32 %256 = OpConstant 10 
					                                         i32 %264 = OpConstant 9 
					                                         i32 %287 = OpConstant 5 
					                                             %309 = OpTypePointer Output %14 
					                               Output f32_4* %310 = OpVariable Output 
					                                             %314 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %24 = OpAccessChain %20 %22 
					                                        f32_3 %25 = OpLoad %24 
					                                        f32_3 %26 = OpFAdd %13 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %29 = OpLoad %9 
					                                        f32_3 %30 = OpLoad %9 
					                                          f32 %31 = OpDot %29 %30 
					                                                      OpStore %28 %31 
					                                          f32 %32 = OpLoad %28 
					                                          f32 %33 = OpExtInst %1 32 %32 
					                                                      OpStore %28 %33 
					                                          f32 %34 = OpLoad %28 
					                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
					                                        f32_3 %36 = OpLoad %9 
					                                        f32_3 %37 = OpFMul %35 %36 
					                                                      OpStore %9 %37 
					                                        f32_3 %39 = OpLoad %11 
					                                        f32_3 %40 = OpFNegate %39 
					                               Uniform f32_4* %43 = OpAccessChain %20 %41 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %46 = OpFAdd %40 %45 
					                                                      OpStore %38 %46 
					                                        f32_3 %47 = OpLoad %38 
					                                        f32_3 %48 = OpLoad %38 
					                                          f32 %49 = OpDot %47 %48 
					                                                      OpStore %28 %49 
					                                          f32 %50 = OpLoad %28 
					                                          f32 %51 = OpExtInst %1 32 %50 
					                                                      OpStore %28 %51 
					                                        f32_3 %54 = OpLoad %38 
					                                          f32 %55 = OpLoad %28 
					                                        f32_3 %56 = OpCompositeConstruct %55 %55 %55 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_3 %58 = OpLoad %9 
					                                        f32_3 %59 = OpFAdd %57 %58 
					                                        f32_4 %60 = OpLoad %53 
					                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
					                                                      OpStore %53 %61 
					                                        f32_3 %62 = OpLoad %9 
					                                        f32_3 %64 = OpLoad %63 
					                                          f32 %65 = OpDot %62 %64 
					                                 Private f32* %67 = OpAccessChain %9 %66 
					                                                      OpStore %67 %65 
					                                 Private f32* %68 = OpAccessChain %9 %66 
					                                          f32 %69 = OpLoad %68 
					                                          f32 %72 = OpExtInst %1 43 %69 %70 %71 
					                                 Private f32* %73 = OpAccessChain %9 %66 
					                                                      OpStore %73 %72 
					                                 Private f32* %75 = OpAccessChain %9 %66 
					                                          f32 %76 = OpLoad %75 
					                                          f32 %77 = OpFNegate %76 
					                                          f32 %78 = OpFAdd %77 %71 
					                                                      OpStore %74 %78 
					                                          f32 %80 = OpLoad %74 
					                                          f32 %81 = OpExtInst %1 30 %80 
					                                                      OpStore %79 %81 
					                                          f32 %82 = OpLoad %79 
					                                 Uniform f32* %85 = OpAccessChain %20 %83 
					                                          f32 %86 = OpLoad %85 
					                                          f32 %87 = OpFMul %82 %86 
					                                 Private f32* %88 = OpAccessChain %9 %66 
					                                                      OpStore %88 %87 
					                                 Private f32* %89 = OpAccessChain %9 %66 
					                                          f32 %90 = OpLoad %89 
					                                          f32 %91 = OpExtInst %1 29 %90 
					                                 Private f32* %92 = OpAccessChain %9 %66 
					                                                      OpStore %92 %91 
					                                          f32 %94 = OpLoad %28 
					                                        f32_3 %95 = OpCompositeConstruct %94 %94 %94 
					                                        f32_3 %96 = OpLoad %38 
					                                        f32_3 %97 = OpFMul %95 %96 
					                                                      OpStore %93 %97 
					                                        f32_3 %98 = OpLoad %63 
					                                        f32_3 %99 = OpLoad %93 
					                                         f32 %100 = OpDot %98 %99 
					                                Private f32* %102 = OpAccessChain %53 %101 
					                                                      OpStore %102 %100 
					                                       f32_4 %104 = OpLoad %53 
					                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
					                                       f32_4 %106 = OpLoad %53 
					                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
					                                         f32 %108 = OpDot %105 %107 
					                                Private f32* %109 = OpAccessChain %103 %66 
					                                                      OpStore %109 %108 
					                                Private f32* %110 = OpAccessChain %103 %66 
					                                         f32 %111 = OpLoad %110 
					                                         f32 %112 = OpExtInst %1 32 %111 
					                                Private f32* %113 = OpAccessChain %103 %66 
					                                                      OpStore %113 %112 
					                                       f32_4 %114 = OpLoad %53 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                       f32_3 %116 = OpLoad %103 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 0 0 
					                                       f32_3 %118 = OpFMul %115 %117 
					                                       f32_4 %119 = OpLoad %53 
					                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
					                                                      OpStore %53 %120 
					                                       f32_3 %121 = OpLoad %63 
					                                       f32_4 %122 = OpLoad %53 
					                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
					                                         f32 %124 = OpDot %121 %123 
					                                Private f32* %125 = OpAccessChain %53 %66 
					                                                      OpStore %125 %124 
					                                       f32_4 %127 = OpLoad %53 
					                                       f32_2 %128 = OpVectorShuffle %127 %127 0 3 
					                                       f32_2 %130 = OpExtInst %1 40 %128 %129 
					                                       f32_4 %131 = OpLoad %53 
					                                       f32_4 %132 = OpVectorShuffle %131 %130 4 1 2 5 
					                                                      OpStore %53 %132 
					                                Private f32* %134 = OpAccessChain %53 %66 
					                                         f32 %135 = OpLoad %134 
					                                         f32 %136 = OpExtInst %1 30 %135 
					                                                      OpStore %133 %136 
					                                Uniform f32* %138 = OpAccessChain %20 %137 
					                                         f32 %139 = OpLoad %138 
					                                         f32 %141 = OpFMul %139 %140 
					                                Private f32* %142 = OpAccessChain %53 %66 
					                                                      OpStore %142 %141 
					                                         f32 %143 = OpLoad %133 
					                                Private f32* %144 = OpAccessChain %53 %66 
					                                         f32 %145 = OpLoad %144 
					                                         f32 %146 = OpFMul %143 %145 
					                                                      OpStore %133 %146 
					                                         f32 %147 = OpLoad %133 
					                                         f32 %148 = OpExtInst %1 29 %147 
					                                                      OpStore %133 %148 
					                                Private f32* %149 = OpAccessChain %9 %66 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpFNegate %150 
					                                         f32 %152 = OpFAdd %151 %71 
					                                Private f32* %153 = OpAccessChain %53 %66 
					                                                      OpStore %153 %152 
					                  read_only Texture2DSampled %159 = OpLoad %158 
					                                       f32_2 %162 = OpLoad %161 
					                                       f32_4 %163 = OpImageSampleImplicitLod %159 %162 
					                                         f32 %164 = OpCompositeExtract %163 3 
					                                                      OpStore %154 %164 
					                                Private f32* %165 = OpAccessChain %53 %66 
					                                         f32 %166 = OpLoad %165 
					                                         f32 %167 = OpLoad %154 
					                                         f32 %168 = OpFMul %166 %167 
					                                Private f32* %169 = OpAccessChain %53 %66 
					                                                      OpStore %169 %168 
					                                Private f32* %171 = OpAccessChain %53 %66 
					                                         f32 %172 = OpLoad %171 
					                                Uniform f32* %174 = OpAccessChain %20 %173 
					                                         f32 %175 = OpLoad %174 
					                                         f32 %176 = OpFMul %172 %175 
					                                Uniform f32* %178 = OpAccessChain %20 %177 %101 
					                                         f32 %179 = OpLoad %178 
					                                         f32 %180 = OpFAdd %176 %179 
					                                                      OpStore %170 %180 
					                                         f32 %181 = OpLoad %170 
					                                         f32 %182 = OpLoad %133 
					                                         f32 %183 = OpFMul %181 %182 
					                                Private f32* %184 = OpAccessChain %93 %66 
					                                                      OpStore %184 %183 
					                                       f32_3 %185 = OpLoad %11 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 1 1 1 
					                              Uniform f32_4* %188 = OpAccessChain %20 %187 %41 
					                                       f32_4 %189 = OpLoad %188 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %186 %190 
					                                                      OpStore %38 %191 
					                              Uniform f32_4* %192 = OpAccessChain %20 %187 %22 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                       f32_3 %195 = OpLoad %11 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
					                                       f32_3 %197 = OpFMul %194 %196 
					                                       f32_3 %198 = OpLoad %38 
					                                       f32_3 %199 = OpFAdd %197 %198 
					                                                      OpStore %38 %199 
					                              Uniform f32_4* %201 = OpAccessChain %20 %187 %200 
					                                       f32_4 %202 = OpLoad %201 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
					                                       f32_3 %204 = OpLoad %11 
					                                       f32_3 %205 = OpVectorShuffle %204 %204 2 2 2 
					                                       f32_3 %206 = OpFMul %203 %205 
					                                       f32_3 %207 = OpLoad %38 
					                                       f32_3 %208 = OpFAdd %206 %207 
					                                                      OpStore %38 %208 
					                                       f32_3 %209 = OpLoad %38 
					                              Uniform f32_4* %210 = OpAccessChain %20 %187 %177 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                       f32_3 %213 = OpFAdd %209 %212 
					                                                      OpStore %38 %213 
					                                       f32_3 %214 = OpLoad %38 
					                                       f32_3 %215 = OpLoad %38 
					                                         f32 %216 = OpDot %214 %215 
					                                                      OpStore %170 %216 
					                read_only TextureCubeSampled %222 = OpLoad %221 
					                                       f32_3 %223 = OpLoad %38 
					                                       f32_4 %224 = OpImageSampleImplicitLod %222 %223 
					                                         f32 %225 = OpCompositeExtract %224 3 
					                                                      OpStore %217 %225 
					                  read_only Texture2DSampled %227 = OpLoad %226 
					                                         f32 %228 = OpLoad %170 
					                                       f32_2 %229 = OpCompositeConstruct %228 %228 
					                                       f32_4 %230 = OpImageSampleImplicitLod %227 %229 
					                                         f32 %231 = OpCompositeExtract %230 3 
					                                                      OpStore %154 %231 
					                                         f32 %233 = OpLoad %217 
					                                         f32 %234 = OpLoad %154 
					                                         f32 %235 = OpFMul %233 %234 
					                                                      OpStore %232 %235 
					                                         f32 %236 = OpLoad %232 
					                                       f32_3 %237 = OpCompositeConstruct %236 %236 %236 
					                              Uniform f32_4* %238 = OpAccessChain %20 %200 
					                                       f32_4 %239 = OpLoad %238 
					                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
					                                       f32_3 %241 = OpFMul %237 %240 
					                                       f32_4 %242 = OpLoad %53 
					                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
					                                                      OpStore %53 %243 
					                                       f32_4 %244 = OpLoad %53 
					                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
					                              Uniform f32_4* %246 = OpAccessChain %20 %177 
					                                       f32_4 %247 = OpLoad %246 
					                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
					                                       f32_3 %249 = OpFMul %245 %248 
					                                                      OpStore %103 %249 
					                                       f32_3 %250 = OpLoad %93 
					                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
					                                       f32_3 %252 = OpLoad %103 
					                                       f32_3 %253 = OpFMul %251 %252 
					                                                      OpStore %93 %253 
					                                       f32_3 %254 = OpLoad %9 
					                                       f32_3 %255 = OpVectorShuffle %254 %254 0 0 0 
					                              Uniform f32_4* %257 = OpAccessChain %20 %256 
					                                       f32_4 %258 = OpLoad %257 
					                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
					                                       f32_3 %260 = OpFMul %255 %259 
					                                                      OpStore %103 %260 
					                                Private f32* %261 = OpAccessChain %9 %66 
					                                         f32 %262 = OpLoad %261 
					                                         f32 %263 = OpFNegate %262 
					                                Uniform f32* %265 = OpAccessChain %20 %264 
					                                         f32 %266 = OpLoad %265 
					                                         f32 %267 = OpFMul %263 %266 
					                                         f32 %268 = OpFAdd %267 %71 
					                                Private f32* %269 = OpAccessChain %9 %66 
					                                                      OpStore %269 %268 
					                                Private f32* %270 = OpAccessChain %9 %66 
					                                         f32 %271 = OpLoad %270 
					                                         f32 %272 = OpExtInst %1 43 %271 %70 %71 
					                                Private f32* %273 = OpAccessChain %9 %66 
					                                                      OpStore %273 %272 
					                                       f32_3 %274 = OpLoad %103 
					                                Uniform f32* %275 = OpAccessChain %20 %264 
					                                         f32 %276 = OpLoad %275 
					                                Uniform f32* %277 = OpAccessChain %20 %264 
					                                         f32 %278 = OpLoad %277 
					                                Uniform f32* %279 = OpAccessChain %20 %264 
					                                         f32 %280 = OpLoad %279 
					                                       f32_3 %281 = OpCompositeConstruct %276 %278 %280 
					                                         f32 %282 = OpCompositeExtract %281 0 
					                                         f32 %283 = OpCompositeExtract %281 1 
					                                         f32 %284 = OpCompositeExtract %281 2 
					                                       f32_3 %285 = OpCompositeConstruct %282 %283 %284 
					                                       f32_3 %286 = OpFMul %274 %285 
					                                                      OpStore %38 %286 
					                              Uniform f32_4* %288 = OpAccessChain %20 %287 
					                                       f32_4 %289 = OpLoad %288 
					                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
					                                       f32_3 %291 = OpLoad %9 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 0 0 
					                                       f32_3 %293 = OpFMul %290 %292 
					                                       f32_3 %294 = OpLoad %38 
					                                       f32_3 %295 = OpFAdd %293 %294 
					                                                      OpStore %38 %295 
					                                       f32_4 %296 = OpLoad %53 
					                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
					                                       f32_3 %298 = OpLoad %38 
					                                       f32_3 %299 = OpFMul %297 %298 
					                                       f32_4 %300 = OpLoad %53 
					                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
					                                                      OpStore %53 %301 
					                                       f32_4 %302 = OpLoad %53 
					                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
					                                       f32_4 %304 = OpLoad %53 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 3 3 3 
					                                       f32_3 %306 = OpFMul %303 %305 
					                                       f32_3 %307 = OpLoad %93 
					                                       f32_3 %308 = OpFAdd %306 %307 
					                                                      OpStore %9 %308 
					                                       f32_3 %311 = OpLoad %9 
					                                       f32_4 %312 = OpLoad %310 
					                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
					                                                      OpStore %310 %313 
					                                 Output f32* %315 = OpAccessChain %310 %101 
					                                                      OpStore %315 %71 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 317
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %63 %161 %310 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 RelaxedPrecision 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 RelaxedPrecision 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 RelaxedPrecision 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 RelaxedPrecision 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpMemberDecorate %18 8 Offset 18 
					                                                      OpMemberDecorate %18 9 Offset 18 
					                                                      OpMemberDecorate %18 10 RelaxedPrecision 
					                                                      OpMemberDecorate %18 10 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %63 Location 63 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %82 RelaxedPrecision 
					                                                      OpDecorate %103 RelaxedPrecision 
					                                                      OpDecorate %104 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %107 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %111 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %114 RelaxedPrecision 
					                                                      OpDecorate %115 RelaxedPrecision 
					                                                      OpDecorate %116 RelaxedPrecision 
					                                                      OpDecorate %117 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %143 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %158 DescriptorSet 158 
					                                                      OpDecorate %158 Binding 158 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %164 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %179 RelaxedPrecision 
					                                                      OpDecorate %182 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %221 DescriptorSet 221 
					                                                      OpDecorate %221 Binding 221 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %226 DescriptorSet 226 
					                                                      OpDecorate %226 Binding 226 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %247 RelaxedPrecision 
					                                                      OpDecorate %248 RelaxedPrecision 
					                                                      OpDecorate %249 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                                      OpDecorate %282 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %284 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %286 RelaxedPrecision 
					                                                      OpDecorate %289 RelaxedPrecision 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %296 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %303 RelaxedPrecision 
					                                                      OpDecorate %304 RelaxedPrecision 
					                                                      OpDecorate %305 RelaxedPrecision 
					                                                      OpDecorate %306 RelaxedPrecision 
					                                                      OpDecorate %310 RelaxedPrecision 
					                                                      OpDecorate %310 Location 310 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %14 %16 
					                                              %18 = OpTypeStruct %7 %14 %14 %14 %17 %14 %6 %6 %6 %6 %14 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 0 
					                                              %23 = OpTypePointer Uniform %7 
					                                              %27 = OpTypePointer Private %6 
					                                 Private f32* %28 = OpVariable Private 
					                               Private f32_3* %38 = OpVariable Private 
					                                          i32 %41 = OpConstant 1 
					                                              %42 = OpTypePointer Uniform %14 
					                                              %52 = OpTypePointer Private %14 
					                               Private f32_4* %53 = OpVariable Private 
					                                 Input f32_3* %63 = OpVariable Input 
					                                          u32 %66 = OpConstant 0 
					                                          f32 %70 = OpConstant 3.674022E-40 
					                                          f32 %71 = OpConstant 3.674022E-40 
					                                 Private f32* %74 = OpVariable Private 
					                                 Private f32* %79 = OpVariable Private 
					                                          i32 %83 = OpConstant 8 
					                                              %84 = OpTypePointer Uniform %6 
					                               Private f32_3* %93 = OpVariable Private 
					                                         u32 %101 = OpConstant 3 
					                              Private f32_3* %103 = OpVariable Private 
					                                             %126 = OpTypeVector %6 2 
					                                       f32_2 %129 = OpConstantComposite %70 %70 
					                                Private f32* %133 = OpVariable Private 
					                                         i32 %137 = OpConstant 6 
					                                         f32 %140 = OpConstant 3.674022E-40 
					                                Private f32* %154 = OpVariable Private 
					                                             %155 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %156 = OpTypeSampledImage %155 
					                                             %157 = OpTypePointer UniformConstant %156 
					 UniformConstant read_only Texture2DSampled* %158 = OpVariable UniformConstant 
					                                             %160 = OpTypePointer Input %126 
					                                Input f32_2* %161 = OpVariable Input 
					                                Private f32* %170 = OpVariable Private 
					                                         i32 %173 = OpConstant 7 
					                                         i32 %177 = OpConstant 3 
					                                         i32 %187 = OpConstant 4 
					                                         i32 %200 = OpConstant 2 
					                                Private f32* %217 = OpVariable Private 
					                                             %218 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %219 = OpTypeSampledImage %218 
					                                             %220 = OpTypePointer UniformConstant %219 
					UniformConstant read_only TextureCubeSampled* %221 = OpVariable UniformConstant 
					 UniformConstant read_only Texture2DSampled* %226 = OpVariable UniformConstant 
					                                Private f32* %232 = OpVariable Private 
					                                         i32 %256 = OpConstant 10 
					                                         i32 %264 = OpConstant 9 
					                                         i32 %287 = OpConstant 5 
					                                             %309 = OpTypePointer Output %14 
					                               Output f32_4* %310 = OpVariable Output 
					                                             %314 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %24 = OpAccessChain %20 %22 
					                                        f32_3 %25 = OpLoad %24 
					                                        f32_3 %26 = OpFAdd %13 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %29 = OpLoad %9 
					                                        f32_3 %30 = OpLoad %9 
					                                          f32 %31 = OpDot %29 %30 
					                                                      OpStore %28 %31 
					                                          f32 %32 = OpLoad %28 
					                                          f32 %33 = OpExtInst %1 32 %32 
					                                                      OpStore %28 %33 
					                                          f32 %34 = OpLoad %28 
					                                        f32_3 %35 = OpCompositeConstruct %34 %34 %34 
					                                        f32_3 %36 = OpLoad %9 
					                                        f32_3 %37 = OpFMul %35 %36 
					                                                      OpStore %9 %37 
					                                        f32_3 %39 = OpLoad %11 
					                                        f32_3 %40 = OpFNegate %39 
					                               Uniform f32_4* %43 = OpAccessChain %20 %41 
					                                        f32_4 %44 = OpLoad %43 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %46 = OpFAdd %40 %45 
					                                                      OpStore %38 %46 
					                                        f32_3 %47 = OpLoad %38 
					                                        f32_3 %48 = OpLoad %38 
					                                          f32 %49 = OpDot %47 %48 
					                                                      OpStore %28 %49 
					                                          f32 %50 = OpLoad %28 
					                                          f32 %51 = OpExtInst %1 32 %50 
					                                                      OpStore %28 %51 
					                                        f32_3 %54 = OpLoad %38 
					                                          f32 %55 = OpLoad %28 
					                                        f32_3 %56 = OpCompositeConstruct %55 %55 %55 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_3 %58 = OpLoad %9 
					                                        f32_3 %59 = OpFAdd %57 %58 
					                                        f32_4 %60 = OpLoad %53 
					                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
					                                                      OpStore %53 %61 
					                                        f32_3 %62 = OpLoad %9 
					                                        f32_3 %64 = OpLoad %63 
					                                          f32 %65 = OpDot %62 %64 
					                                 Private f32* %67 = OpAccessChain %9 %66 
					                                                      OpStore %67 %65 
					                                 Private f32* %68 = OpAccessChain %9 %66 
					                                          f32 %69 = OpLoad %68 
					                                          f32 %72 = OpExtInst %1 43 %69 %70 %71 
					                                 Private f32* %73 = OpAccessChain %9 %66 
					                                                      OpStore %73 %72 
					                                 Private f32* %75 = OpAccessChain %9 %66 
					                                          f32 %76 = OpLoad %75 
					                                          f32 %77 = OpFNegate %76 
					                                          f32 %78 = OpFAdd %77 %71 
					                                                      OpStore %74 %78 
					                                          f32 %80 = OpLoad %74 
					                                          f32 %81 = OpExtInst %1 30 %80 
					                                                      OpStore %79 %81 
					                                          f32 %82 = OpLoad %79 
					                                 Uniform f32* %85 = OpAccessChain %20 %83 
					                                          f32 %86 = OpLoad %85 
					                                          f32 %87 = OpFMul %82 %86 
					                                 Private f32* %88 = OpAccessChain %9 %66 
					                                                      OpStore %88 %87 
					                                 Private f32* %89 = OpAccessChain %9 %66 
					                                          f32 %90 = OpLoad %89 
					                                          f32 %91 = OpExtInst %1 29 %90 
					                                 Private f32* %92 = OpAccessChain %9 %66 
					                                                      OpStore %92 %91 
					                                          f32 %94 = OpLoad %28 
					                                        f32_3 %95 = OpCompositeConstruct %94 %94 %94 
					                                        f32_3 %96 = OpLoad %38 
					                                        f32_3 %97 = OpFMul %95 %96 
					                                                      OpStore %93 %97 
					                                        f32_3 %98 = OpLoad %63 
					                                        f32_3 %99 = OpLoad %93 
					                                         f32 %100 = OpDot %98 %99 
					                                Private f32* %102 = OpAccessChain %53 %101 
					                                                      OpStore %102 %100 
					                                       f32_4 %104 = OpLoad %53 
					                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
					                                       f32_4 %106 = OpLoad %53 
					                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
					                                         f32 %108 = OpDot %105 %107 
					                                Private f32* %109 = OpAccessChain %103 %66 
					                                                      OpStore %109 %108 
					                                Private f32* %110 = OpAccessChain %103 %66 
					                                         f32 %111 = OpLoad %110 
					                                         f32 %112 = OpExtInst %1 32 %111 
					                                Private f32* %113 = OpAccessChain %103 %66 
					                                                      OpStore %113 %112 
					                                       f32_4 %114 = OpLoad %53 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                       f32_3 %116 = OpLoad %103 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 0 0 
					                                       f32_3 %118 = OpFMul %115 %117 
					                                       f32_4 %119 = OpLoad %53 
					                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
					                                                      OpStore %53 %120 
					                                       f32_3 %121 = OpLoad %63 
					                                       f32_4 %122 = OpLoad %53 
					                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
					                                         f32 %124 = OpDot %121 %123 
					                                Private f32* %125 = OpAccessChain %53 %66 
					                                                      OpStore %125 %124 
					                                       f32_4 %127 = OpLoad %53 
					                                       f32_2 %128 = OpVectorShuffle %127 %127 0 3 
					                                       f32_2 %130 = OpExtInst %1 40 %128 %129 
					                                       f32_4 %131 = OpLoad %53 
					                                       f32_4 %132 = OpVectorShuffle %131 %130 4 1 2 5 
					                                                      OpStore %53 %132 
					                                Private f32* %134 = OpAccessChain %53 %66 
					                                         f32 %135 = OpLoad %134 
					                                         f32 %136 = OpExtInst %1 30 %135 
					                                                      OpStore %133 %136 
					                                Uniform f32* %138 = OpAccessChain %20 %137 
					                                         f32 %139 = OpLoad %138 
					                                         f32 %141 = OpFMul %139 %140 
					                                Private f32* %142 = OpAccessChain %53 %66 
					                                                      OpStore %142 %141 
					                                         f32 %143 = OpLoad %133 
					                                Private f32* %144 = OpAccessChain %53 %66 
					                                         f32 %145 = OpLoad %144 
					                                         f32 %146 = OpFMul %143 %145 
					                                                      OpStore %133 %146 
					                                         f32 %147 = OpLoad %133 
					                                         f32 %148 = OpExtInst %1 29 %147 
					                                                      OpStore %133 %148 
					                                Private f32* %149 = OpAccessChain %9 %66 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpFNegate %150 
					                                         f32 %152 = OpFAdd %151 %71 
					                                Private f32* %153 = OpAccessChain %53 %66 
					                                                      OpStore %153 %152 
					                  read_only Texture2DSampled %159 = OpLoad %158 
					                                       f32_2 %162 = OpLoad %161 
					                                       f32_4 %163 = OpImageSampleImplicitLod %159 %162 
					                                         f32 %164 = OpCompositeExtract %163 3 
					                                                      OpStore %154 %164 
					                                Private f32* %165 = OpAccessChain %53 %66 
					                                         f32 %166 = OpLoad %165 
					                                         f32 %167 = OpLoad %154 
					                                         f32 %168 = OpFMul %166 %167 
					                                Private f32* %169 = OpAccessChain %53 %66 
					                                                      OpStore %169 %168 
					                                Private f32* %171 = OpAccessChain %53 %66 
					                                         f32 %172 = OpLoad %171 
					                                Uniform f32* %174 = OpAccessChain %20 %173 
					                                         f32 %175 = OpLoad %174 
					                                         f32 %176 = OpFMul %172 %175 
					                                Uniform f32* %178 = OpAccessChain %20 %177 %101 
					                                         f32 %179 = OpLoad %178 
					                                         f32 %180 = OpFAdd %176 %179 
					                                                      OpStore %170 %180 
					                                         f32 %181 = OpLoad %170 
					                                         f32 %182 = OpLoad %133 
					                                         f32 %183 = OpFMul %181 %182 
					                                Private f32* %184 = OpAccessChain %93 %66 
					                                                      OpStore %184 %183 
					                                       f32_3 %185 = OpLoad %11 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 1 1 1 
					                              Uniform f32_4* %188 = OpAccessChain %20 %187 %41 
					                                       f32_4 %189 = OpLoad %188 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %186 %190 
					                                                      OpStore %38 %191 
					                              Uniform f32_4* %192 = OpAccessChain %20 %187 %22 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                       f32_3 %195 = OpLoad %11 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
					                                       f32_3 %197 = OpFMul %194 %196 
					                                       f32_3 %198 = OpLoad %38 
					                                       f32_3 %199 = OpFAdd %197 %198 
					                                                      OpStore %38 %199 
					                              Uniform f32_4* %201 = OpAccessChain %20 %187 %200 
					                                       f32_4 %202 = OpLoad %201 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
					                                       f32_3 %204 = OpLoad %11 
					                                       f32_3 %205 = OpVectorShuffle %204 %204 2 2 2 
					                                       f32_3 %206 = OpFMul %203 %205 
					                                       f32_3 %207 = OpLoad %38 
					                                       f32_3 %208 = OpFAdd %206 %207 
					                                                      OpStore %38 %208 
					                                       f32_3 %209 = OpLoad %38 
					                              Uniform f32_4* %210 = OpAccessChain %20 %187 %177 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                       f32_3 %213 = OpFAdd %209 %212 
					                                                      OpStore %38 %213 
					                                       f32_3 %214 = OpLoad %38 
					                                       f32_3 %215 = OpLoad %38 
					                                         f32 %216 = OpDot %214 %215 
					                                                      OpStore %170 %216 
					                read_only TextureCubeSampled %222 = OpLoad %221 
					                                       f32_3 %223 = OpLoad %38 
					                                       f32_4 %224 = OpImageSampleImplicitLod %222 %223 
					                                         f32 %225 = OpCompositeExtract %224 3 
					                                                      OpStore %217 %225 
					                  read_only Texture2DSampled %227 = OpLoad %226 
					                                         f32 %228 = OpLoad %170 
					                                       f32_2 %229 = OpCompositeConstruct %228 %228 
					                                       f32_4 %230 = OpImageSampleImplicitLod %227 %229 
					                                         f32 %231 = OpCompositeExtract %230 3 
					                                                      OpStore %154 %231 
					                                         f32 %233 = OpLoad %217 
					                                         f32 %234 = OpLoad %154 
					                                         f32 %235 = OpFMul %233 %234 
					                                                      OpStore %232 %235 
					                                         f32 %236 = OpLoad %232 
					                                       f32_3 %237 = OpCompositeConstruct %236 %236 %236 
					                              Uniform f32_4* %238 = OpAccessChain %20 %200 
					                                       f32_4 %239 = OpLoad %238 
					                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
					                                       f32_3 %241 = OpFMul %237 %240 
					                                       f32_4 %242 = OpLoad %53 
					                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
					                                                      OpStore %53 %243 
					                                       f32_4 %244 = OpLoad %53 
					                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
					                              Uniform f32_4* %246 = OpAccessChain %20 %177 
					                                       f32_4 %247 = OpLoad %246 
					                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
					                                       f32_3 %249 = OpFMul %245 %248 
					                                                      OpStore %103 %249 
					                                       f32_3 %250 = OpLoad %93 
					                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
					                                       f32_3 %252 = OpLoad %103 
					                                       f32_3 %253 = OpFMul %251 %252 
					                                                      OpStore %93 %253 
					                                       f32_3 %254 = OpLoad %9 
					                                       f32_3 %255 = OpVectorShuffle %254 %254 0 0 0 
					                              Uniform f32_4* %257 = OpAccessChain %20 %256 
					                                       f32_4 %258 = OpLoad %257 
					                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
					                                       f32_3 %260 = OpFMul %255 %259 
					                                                      OpStore %103 %260 
					                                Private f32* %261 = OpAccessChain %9 %66 
					                                         f32 %262 = OpLoad %261 
					                                         f32 %263 = OpFNegate %262 
					                                Uniform f32* %265 = OpAccessChain %20 %264 
					                                         f32 %266 = OpLoad %265 
					                                         f32 %267 = OpFMul %263 %266 
					                                         f32 %268 = OpFAdd %267 %71 
					                                Private f32* %269 = OpAccessChain %9 %66 
					                                                      OpStore %269 %268 
					                                Private f32* %270 = OpAccessChain %9 %66 
					                                         f32 %271 = OpLoad %270 
					                                         f32 %272 = OpExtInst %1 43 %271 %70 %71 
					                                Private f32* %273 = OpAccessChain %9 %66 
					                                                      OpStore %273 %272 
					                                       f32_3 %274 = OpLoad %103 
					                                Uniform f32* %275 = OpAccessChain %20 %264 
					                                         f32 %276 = OpLoad %275 
					                                Uniform f32* %277 = OpAccessChain %20 %264 
					                                         f32 %278 = OpLoad %277 
					                                Uniform f32* %279 = OpAccessChain %20 %264 
					                                         f32 %280 = OpLoad %279 
					                                       f32_3 %281 = OpCompositeConstruct %276 %278 %280 
					                                         f32 %282 = OpCompositeExtract %281 0 
					                                         f32 %283 = OpCompositeExtract %281 1 
					                                         f32 %284 = OpCompositeExtract %281 2 
					                                       f32_3 %285 = OpCompositeConstruct %282 %283 %284 
					                                       f32_3 %286 = OpFMul %274 %285 
					                                                      OpStore %38 %286 
					                              Uniform f32_4* %288 = OpAccessChain %20 %287 
					                                       f32_4 %289 = OpLoad %288 
					                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
					                                       f32_3 %291 = OpLoad %9 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 0 0 
					                                       f32_3 %293 = OpFMul %290 %292 
					                                       f32_3 %294 = OpLoad %38 
					                                       f32_3 %295 = OpFAdd %293 %294 
					                                                      OpStore %38 %295 
					                                       f32_4 %296 = OpLoad %53 
					                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
					                                       f32_3 %298 = OpLoad %38 
					                                       f32_3 %299 = OpFMul %297 %298 
					                                       f32_4 %300 = OpLoad %53 
					                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
					                                                      OpStore %53 %301 
					                                       f32_4 %302 = OpLoad %53 
					                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
					                                       f32_4 %304 = OpLoad %53 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 3 3 3 
					                                       f32_3 %306 = OpFMul %303 %305 
					                                       f32_3 %307 = OpLoad %93 
					                                       f32_3 %308 = OpFAdd %306 %307 
					                                                      OpStore %9 %308 
					                                       f32_3 %311 = OpLoad %9 
					                                       f32_4 %312 = OpLoad %310 
					                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
					                                                      OpStore %310 %313 
					                                 Output f32* %315 = OpAccessChain %310 %101 
					                                                      OpStore %315 %71 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  highp vec2 lightCoord_4;
					  lowp vec3 tmpvar_5;
					  lowp vec3 viewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec3 tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_8.x = 1.0;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_6 = tmpvar_11;
					  tmpvar_9 = viewDir_6;
					  tmpvar_5 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_9), tmpvar_5), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_12 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_12 = (tmpvar_12 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = xlv_TEXCOORD2;
					  lightCoord_4 = (unity_WorldToLight * tmpvar_22).xy;
					  lowp float tmpvar_23;
					  tmpvar_23 = texture2D (_LightTexture0, lightCoord_4).w;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_7;
					  tmpvar_1 = (tmpvar_1 * tmpvar_23);
					  mediump vec3 viewDir_24;
					  viewDir_24 = tmpvar_11;
					  lowp vec4 c_25;
					  lowp vec4 c_26;
					  highp float nh_27;
					  lowp float diff_28;
					  mediump float tmpvar_29;
					  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
					  diff_28 = tmpvar_29;
					  mediump float tmpvar_30;
					  tmpvar_30 = max (0.0, dot (tmpvar_5, normalize(
					    (tmpvar_2 + viewDir_24)
					  )));
					  nh_27 = tmpvar_30;
					  mediump float y_31;
					  y_31 = (_Shininess * 128.0);
					  highp float tmpvar_32;
					  tmpvar_32 = (pow (nh_27, y_31) * tmpvar_13);
					  c_26.xyz = (((tmpvar_12 * tmpvar_1) * diff_28) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_32));
					  c_26.w = (textureCube (_Cube, tmpvar_8).w * _ReflectColor.w);
					  c_25.w = c_26.w;
					  c_25.xyz = c_26.xyz;
					  c_3.xyz = c_25.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  highp vec2 lightCoord_4;
					  lowp vec3 tmpvar_5;
					  lowp vec3 viewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec3 tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_8.x = 1.0;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_6 = tmpvar_11;
					  tmpvar_9 = viewDir_6;
					  tmpvar_5 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_9), tmpvar_5), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_12 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_12 = (tmpvar_12 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = xlv_TEXCOORD2;
					  lightCoord_4 = (unity_WorldToLight * tmpvar_22).xy;
					  lowp float tmpvar_23;
					  tmpvar_23 = texture2D (_LightTexture0, lightCoord_4).w;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_7;
					  tmpvar_1 = (tmpvar_1 * tmpvar_23);
					  mediump vec3 viewDir_24;
					  viewDir_24 = tmpvar_11;
					  lowp vec4 c_25;
					  lowp vec4 c_26;
					  highp float nh_27;
					  lowp float diff_28;
					  mediump float tmpvar_29;
					  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
					  diff_28 = tmpvar_29;
					  mediump float tmpvar_30;
					  tmpvar_30 = max (0.0, dot (tmpvar_5, normalize(
					    (tmpvar_2 + viewDir_24)
					  )));
					  nh_27 = tmpvar_30;
					  mediump float y_31;
					  y_31 = (_Shininess * 128.0);
					  highp float tmpvar_32;
					  tmpvar_32 = (pow (nh_27, y_31) * tmpvar_13);
					  c_26.xyz = (((tmpvar_12 * tmpvar_1) * diff_28) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_32));
					  c_26.w = (textureCube (_Cube, tmpvar_8).w * _ReflectColor.w);
					  c_25.w = c_26.w;
					  c_25.xyz = c_26.xyz;
					  c_3.xyz = c_25.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec2 xlv_TEXCOORD3;
					void main ()
					{
					  highp vec2 tmpvar_1;
					  highp vec4 tmpvar_2;
					  tmpvar_2.w = 1.0;
					  tmpvar_2.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_3;
					  tmpvar_3[0] = unity_WorldToObject[0].xyz;
					  tmpvar_3[1] = unity_WorldToObject[1].xyz;
					  tmpvar_3[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_2));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = normalize((_glesNormal * tmpvar_3));
					  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
					  xlv_TEXCOORD3 = tmpvar_1;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 _WorldSpaceLightPos0;
					uniform lowp vec4 _LightColor0;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _LightTexture0;
					uniform highp mat4 unity_WorldToLight;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  lowp vec4 c_3;
					  highp vec2 lightCoord_4;
					  lowp vec3 tmpvar_5;
					  lowp vec3 viewDir_6;
					  lowp vec3 lightDir_7;
					  highp vec3 tmpvar_8;
					  highp vec3 tmpvar_9;
					  tmpvar_8.x = 1.0;
					  mediump vec3 tmpvar_10;
					  tmpvar_10 = _WorldSpaceLightPos0.xyz;
					  lightDir_7 = tmpvar_10;
					  highp vec3 tmpvar_11;
					  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_6 = tmpvar_11;
					  tmpvar_9 = viewDir_6;
					  tmpvar_5 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_12;
					  lowp float tmpvar_13;
					  mediump float fres_14;
					  mediump float rim_15;
					  mediump float tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp (dot (normalize(tmpvar_9), tmpvar_5), 0.0, 1.0);
					  tmpvar_16 = tmpvar_17;
					  rim_15 = (1.0 - tmpvar_16);
					  fres_14 = rim_15;
					  highp float tmpvar_18;
					  tmpvar_18 = pow (rim_15, _RimAmt);
					  rim_15 = tmpvar_18;
					  highp float tmpvar_19;
					  tmpvar_19 = pow (fres_14, _FresAmt);
					  fres_14 = tmpvar_19;
					  highp float tmpvar_20;
					  tmpvar_20 = clamp ((1.0 - (rim_15 * _RimPwr)), 0.0, 1.0);
					  tmpvar_12 = (_Color.xyz * tmpvar_20);
					  highp vec3 tmpvar_21;
					  tmpvar_21 = ((rim_15 * _RimColor) * _RimPwr).xyz;
					  tmpvar_12 = (tmpvar_12 + tmpvar_21);
					  tmpvar_13 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_15)
					  ) * _FlakeAmt));
					  highp vec4 tmpvar_22;
					  tmpvar_22.w = 1.0;
					  tmpvar_22.xyz = xlv_TEXCOORD2;
					  lightCoord_4 = (unity_WorldToLight * tmpvar_22).xy;
					  lowp float tmpvar_23;
					  tmpvar_23 = texture2D (_LightTexture0, lightCoord_4).w;
					  tmpvar_1 = _LightColor0.xyz;
					  tmpvar_2 = lightDir_7;
					  tmpvar_1 = (tmpvar_1 * tmpvar_23);
					  mediump vec3 viewDir_24;
					  viewDir_24 = tmpvar_11;
					  lowp vec4 c_25;
					  lowp vec4 c_26;
					  highp float nh_27;
					  lowp float diff_28;
					  mediump float tmpvar_29;
					  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_2));
					  diff_28 = tmpvar_29;
					  mediump float tmpvar_30;
					  tmpvar_30 = max (0.0, dot (tmpvar_5, normalize(
					    (tmpvar_2 + viewDir_24)
					  )));
					  nh_27 = tmpvar_30;
					  mediump float y_31;
					  y_31 = (_Shininess * 128.0);
					  highp float tmpvar_32;
					  tmpvar_32 = (pow (nh_27, y_31) * tmpvar_13);
					  c_26.xyz = (((tmpvar_12 * tmpvar_1) * diff_28) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_32));
					  c_26.w = (textureCube (_Cube, tmpvar_8).w * _ReflectColor.w);
					  c_25.w = c_26.w;
					  c_25.xyz = c_26.xyz;
					  c_3.xyz = c_25.xyz;
					  c_3.w = 1.0;
					  gl_FragData[0] = c_3;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					vec2 u_xlat8;
					lowp float u_xlat10_8;
					float u_xlat12;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_13 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_13);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_13 = inversesqrt(u_xlat16_13);
					    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_4 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_1.x;
					    u_xlat16_4 = exp2(u_xlat16_4);
					    u_xlat16_1.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_8 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_8;
					    u_xlat8.x = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat4.x = u_xlat8.x * u_xlat16_4;
					    u_xlat8.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat8.xy;
					    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat8.xy;
					    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat10_8 = texture(_LightTexture0, u_xlat8.xy).w;
					    u_xlat16_1.xyz = vec3(u_xlat10_8) * _LightColor0.xyz;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat3.xyz = _Color.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat3.xyz;
					    u_xlat16_13 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_13 = max(u_xlat16_13, 0.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_13) + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					vec2 u_xlat8;
					lowp float u_xlat10_8;
					float u_xlat12;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_13 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_13);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_13 = inversesqrt(u_xlat16_13);
					    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_4 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_1.x;
					    u_xlat16_4 = exp2(u_xlat16_4);
					    u_xlat16_1.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_8 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_8;
					    u_xlat8.x = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat4.x = u_xlat8.x * u_xlat16_4;
					    u_xlat8.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat8.xy;
					    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat8.xy;
					    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat10_8 = texture(_LightTexture0, u_xlat8.xy).w;
					    u_xlat16_1.xyz = vec3(u_xlat10_8) * _LightColor0.xyz;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat3.xyz = _Color.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat3.xyz;
					    u_xlat16_13 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_13 = max(u_xlat16_13, 0.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_13) + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Shininess;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump float u_xlat16_4;
					vec2 u_xlat8;
					lowp float u_xlat10_8;
					float u_xlat12;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_13 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = log2(u_xlat16_13);
					    u_xlat0.x = u_xlat16_0 * _RimAmt;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_13 = inversesqrt(u_xlat16_13);
					    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_4 = log2(u_xlat16_1.x);
					    u_xlat16_1.x = _Shininess * 128.0;
					    u_xlat16_4 = u_xlat16_4 * u_xlat16_1.x;
					    u_xlat16_4 = exp2(u_xlat16_4);
					    u_xlat16_1.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_8 = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat10_8;
					    u_xlat8.x = u_xlat16_1.x * _FlakeAmt + _SpecColor.w;
					    u_xlat4.x = u_xlat8.x * u_xlat16_4;
					    u_xlat8.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat8.xy;
					    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat8.xy;
					    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat10_8 = texture(_LightTexture0, u_xlat8.xy).w;
					    u_xlat16_1.xyz = vec3(u_xlat10_8) * _LightColor0.xyz;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat3.xyz = _Color.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat3.xyz;
					    u_xlat16_13 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_13 = max(u_xlat16_13, 0.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * vec3(u_xlat16_13) + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 272
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %50 %126 %265 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 RelaxedPrecision 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 RelaxedPrecision 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 RelaxedPrecision 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 RelaxedPrecision 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 RelaxedPrecision 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpMemberDecorate %18 8 Offset 18 
					                                                      OpMemberDecorate %18 9 Offset 18 
					                                                      OpMemberDecorate %18 10 RelaxedPrecision 
					                                                      OpMemberDecorate %18 10 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpDecorate %34 RelaxedPrecision 
					                                                      OpDecorate %42 RelaxedPrecision 
					                                                      OpDecorate %43 RelaxedPrecision 
					                                                      OpDecorate %50 Location 50 
					                                                      OpDecorate %61 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %82 RelaxedPrecision 
					                                                      OpDecorate %83 RelaxedPrecision 
					                                                      OpDecorate %84 RelaxedPrecision 
					                                                      OpDecorate %85 RelaxedPrecision 
					                                                      OpDecorate %86 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %103 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %107 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %111 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %122 DescriptorSet 122 
					                                                      OpDecorate %122 Binding 122 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %126 Location 126 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %134 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %152 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 DescriptorSet 184 
					                                                      OpDecorate %184 Binding 184 
					                                                      OpDecorate %185 RelaxedPrecision 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %196 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %200 RelaxedPrecision 
					                                                      OpDecorate %203 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %248 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %254 RelaxedPrecision 
					                                                      OpDecorate %256 RelaxedPrecision 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %260 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %265 Location 265 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %14 %16 
					                                              %18 = OpTypeStruct %7 %14 %14 %14 %17 %14 %6 %6 %6 %6 %14 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 0 
					                                              %23 = OpTypePointer Uniform %7 
					                                              %27 = OpTypePointer Private %6 
					                                 Private f32* %28 = OpVariable Private 
					                               Private f32_3* %34 = OpVariable Private 
					                                          i32 %39 = OpConstant 1 
					                                              %40 = OpTypePointer Uniform %14 
					                                 Input f32_3* %50 = OpVariable Input 
					                                          u32 %53 = OpConstant 0 
					                                          f32 %57 = OpConstant 3.674022E-40 
					                                          f32 %58 = OpConstant 3.674022E-40 
					                                 Private f32* %61 = OpVariable Private 
					                                 Private f32* %66 = OpVariable Private 
					                                          i32 %70 = OpConstant 8 
					                                              %71 = OpTypePointer Uniform %6 
					                                 Private f32* %97 = OpVariable Private 
					                                         i32 %101 = OpConstant 6 
					                                         f32 %104 = OpConstant 3.674022E-40 
					                                Private f32* %118 = OpVariable Private 
					                                             %119 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %120 = OpTypeSampledImage %119 
					                                             %121 = OpTypePointer UniformConstant %120 
					 UniformConstant read_only Texture2DSampled* %122 = OpVariable UniformConstant 
					                                             %124 = OpTypeVector %6 2 
					                                             %125 = OpTypePointer Input %124 
					                                Input f32_2* %126 = OpVariable Input 
					                                         u32 %129 = OpConstant 3 
					                                             %136 = OpTypePointer Private %124 
					                              Private f32_2* %137 = OpVariable Private 
					                                         i32 %140 = OpConstant 7 
					                                         i32 %144 = OpConstant 3 
					                              Private f32_3* %149 = OpVariable Private 
					                                         i32 %157 = OpConstant 4 
					                                         i32 %170 = OpConstant 2 
					 UniformConstant read_only Texture2DSampled* %184 = OpVariable UniformConstant 
					                              Private f32_3* %195 = OpVariable Private 
					                                         i32 %207 = OpConstant 10 
					                                         i32 %215 = OpConstant 9 
					                              Private f32_3* %225 = OpVariable Private 
					                                         i32 %239 = OpConstant 5 
					                                             %264 = OpTypePointer Output %14 
					                               Output f32_4* %265 = OpVariable Output 
					                                             %269 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %24 = OpAccessChain %20 %22 
					                                        f32_3 %25 = OpLoad %24 
					                                        f32_3 %26 = OpFAdd %13 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %29 = OpLoad %9 
					                                        f32_3 %30 = OpLoad %9 
					                                          f32 %31 = OpDot %29 %30 
					                                                      OpStore %28 %31 
					                                          f32 %32 = OpLoad %28 
					                                          f32 %33 = OpExtInst %1 32 %32 
					                                                      OpStore %28 %33 
					                                        f32_3 %35 = OpLoad %9 
					                                          f32 %36 = OpLoad %28 
					                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
					                                        f32_3 %38 = OpFMul %35 %37 
					                               Uniform f32_4* %41 = OpAccessChain %20 %39 
					                                        f32_4 %42 = OpLoad %41 
					                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
					                                        f32_3 %44 = OpFAdd %38 %43 
					                                                      OpStore %34 %44 
					                                          f32 %45 = OpLoad %28 
					                                        f32_3 %46 = OpCompositeConstruct %45 %45 %45 
					                                        f32_3 %47 = OpLoad %9 
					                                        f32_3 %48 = OpFMul %46 %47 
					                                                      OpStore %9 %48 
					                                        f32_3 %49 = OpLoad %9 
					                                        f32_3 %51 = OpLoad %50 
					                                          f32 %52 = OpDot %49 %51 
					                                 Private f32* %54 = OpAccessChain %9 %53 
					                                                      OpStore %54 %52 
					                                 Private f32* %55 = OpAccessChain %9 %53 
					                                          f32 %56 = OpLoad %55 
					                                          f32 %59 = OpExtInst %1 43 %56 %57 %58 
					                                 Private f32* %60 = OpAccessChain %9 %53 
					                                                      OpStore %60 %59 
					                                 Private f32* %62 = OpAccessChain %9 %53 
					                                          f32 %63 = OpLoad %62 
					                                          f32 %64 = OpFNegate %63 
					                                          f32 %65 = OpFAdd %64 %58 
					                                                      OpStore %61 %65 
					                                          f32 %67 = OpLoad %61 
					                                          f32 %68 = OpExtInst %1 30 %67 
					                                                      OpStore %66 %68 
					                                          f32 %69 = OpLoad %66 
					                                 Uniform f32* %72 = OpAccessChain %20 %70 
					                                          f32 %73 = OpLoad %72 
					                                          f32 %74 = OpFMul %69 %73 
					                                 Private f32* %75 = OpAccessChain %9 %53 
					                                                      OpStore %75 %74 
					                                 Private f32* %76 = OpAccessChain %9 %53 
					                                          f32 %77 = OpLoad %76 
					                                          f32 %78 = OpExtInst %1 29 %77 
					                                 Private f32* %79 = OpAccessChain %9 %53 
					                                                      OpStore %79 %78 
					                                        f32_3 %80 = OpLoad %34 
					                                        f32_3 %81 = OpLoad %34 
					                                          f32 %82 = OpDot %80 %81 
					                                                      OpStore %61 %82 
					                                          f32 %83 = OpLoad %61 
					                                          f32 %84 = OpExtInst %1 32 %83 
					                                                      OpStore %61 %84 
					                                          f32 %85 = OpLoad %61 
					                                        f32_3 %86 = OpCompositeConstruct %85 %85 %85 
					                                        f32_3 %87 = OpLoad %34 
					                                        f32_3 %88 = OpFMul %86 %87 
					                                                      OpStore %34 %88 
					                                        f32_3 %89 = OpLoad %50 
					                                        f32_3 %90 = OpLoad %34 
					                                          f32 %91 = OpDot %89 %90 
					                                 Private f32* %92 = OpAccessChain %34 %53 
					                                                      OpStore %92 %91 
					                                 Private f32* %93 = OpAccessChain %34 %53 
					                                          f32 %94 = OpLoad %93 
					                                          f32 %95 = OpExtInst %1 40 %94 %57 
					                                 Private f32* %96 = OpAccessChain %34 %53 
					                                                      OpStore %96 %95 
					                                 Private f32* %98 = OpAccessChain %34 %53 
					                                          f32 %99 = OpLoad %98 
					                                         f32 %100 = OpExtInst %1 30 %99 
					                                                      OpStore %97 %100 
					                                Uniform f32* %102 = OpAccessChain %20 %101 
					                                         f32 %103 = OpLoad %102 
					                                         f32 %105 = OpFMul %103 %104 
					                                Private f32* %106 = OpAccessChain %34 %53 
					                                                      OpStore %106 %105 
					                                         f32 %107 = OpLoad %97 
					                                Private f32* %108 = OpAccessChain %34 %53 
					                                         f32 %109 = OpLoad %108 
					                                         f32 %110 = OpFMul %107 %109 
					                                                      OpStore %97 %110 
					                                         f32 %111 = OpLoad %97 
					                                         f32 %112 = OpExtInst %1 29 %111 
					                                                      OpStore %97 %112 
					                                Private f32* %113 = OpAccessChain %9 %53 
					                                         f32 %114 = OpLoad %113 
					                                         f32 %115 = OpFNegate %114 
					                                         f32 %116 = OpFAdd %115 %58 
					                                Private f32* %117 = OpAccessChain %34 %53 
					                                                      OpStore %117 %116 
					                  read_only Texture2DSampled %123 = OpLoad %122 
					                                       f32_2 %127 = OpLoad %126 
					                                       f32_4 %128 = OpImageSampleImplicitLod %123 %127 
					                                         f32 %130 = OpCompositeExtract %128 3 
					                                                      OpStore %118 %130 
					                                Private f32* %131 = OpAccessChain %34 %53 
					                                         f32 %132 = OpLoad %131 
					                                         f32 %133 = OpLoad %118 
					                                         f32 %134 = OpFMul %132 %133 
					                                Private f32* %135 = OpAccessChain %34 %53 
					                                                      OpStore %135 %134 
					                                Private f32* %138 = OpAccessChain %34 %53 
					                                         f32 %139 = OpLoad %138 
					                                Uniform f32* %141 = OpAccessChain %20 %140 
					                                         f32 %142 = OpLoad %141 
					                                         f32 %143 = OpFMul %139 %142 
					                                Uniform f32* %145 = OpAccessChain %20 %144 %129 
					                                         f32 %146 = OpLoad %145 
					                                         f32 %147 = OpFAdd %143 %146 
					                                Private f32* %148 = OpAccessChain %137 %53 
					                                                      OpStore %148 %147 
					                                Private f32* %150 = OpAccessChain %137 %53 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpLoad %97 
					                                         f32 %153 = OpFMul %151 %152 
					                                Private f32* %154 = OpAccessChain %149 %53 
					                                                      OpStore %154 %153 
					                                       f32_3 %155 = OpLoad %11 
					                                       f32_2 %156 = OpVectorShuffle %155 %155 1 1 
					                              Uniform f32_4* %158 = OpAccessChain %20 %157 %39 
					                                       f32_4 %159 = OpLoad %158 
					                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
					                                       f32_2 %161 = OpFMul %156 %160 
					                                                      OpStore %137 %161 
					                              Uniform f32_4* %162 = OpAccessChain %20 %157 %22 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
					                                       f32_3 %165 = OpLoad %11 
					                                       f32_2 %166 = OpVectorShuffle %165 %165 0 0 
					                                       f32_2 %167 = OpFMul %164 %166 
					                                       f32_2 %168 = OpLoad %137 
					                                       f32_2 %169 = OpFAdd %167 %168 
					                                                      OpStore %137 %169 
					                              Uniform f32_4* %171 = OpAccessChain %20 %157 %170 
					                                       f32_4 %172 = OpLoad %171 
					                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
					                                       f32_3 %174 = OpLoad %11 
					                                       f32_2 %175 = OpVectorShuffle %174 %174 2 2 
					                                       f32_2 %176 = OpFMul %173 %175 
					                                       f32_2 %177 = OpLoad %137 
					                                       f32_2 %178 = OpFAdd %176 %177 
					                                                      OpStore %137 %178 
					                                       f32_2 %179 = OpLoad %137 
					                              Uniform f32_4* %180 = OpAccessChain %20 %157 %144 
					                                       f32_4 %181 = OpLoad %180 
					                                       f32_2 %182 = OpVectorShuffle %181 %181 0 1 
					                                       f32_2 %183 = OpFAdd %179 %182 
					                                                      OpStore %137 %183 
					                  read_only Texture2DSampled %185 = OpLoad %184 
					                                       f32_2 %186 = OpLoad %137 
					                                       f32_4 %187 = OpImageSampleImplicitLod %185 %186 
					                                         f32 %188 = OpCompositeExtract %187 3 
					                                                      OpStore %118 %188 
					                                         f32 %189 = OpLoad %118 
					                                       f32_3 %190 = OpCompositeConstruct %189 %189 %189 
					                              Uniform f32_4* %191 = OpAccessChain %20 %170 
					                                       f32_4 %192 = OpLoad %191 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                       f32_3 %194 = OpFMul %190 %193 
					                                                      OpStore %34 %194 
					                                       f32_3 %196 = OpLoad %34 
					                              Uniform f32_4* %197 = OpAccessChain %20 %144 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                       f32_3 %200 = OpFMul %196 %199 
					                                                      OpStore %195 %200 
					                                       f32_3 %201 = OpLoad %149 
					                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
					                                       f32_3 %203 = OpLoad %195 
					                                       f32_3 %204 = OpFMul %202 %203 
					                                                      OpStore %149 %204 
					                                       f32_3 %205 = OpLoad %9 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 0 0 
					                              Uniform f32_4* %208 = OpAccessChain %20 %207 
					                                       f32_4 %209 = OpLoad %208 
					                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
					                                       f32_3 %211 = OpFMul %206 %210 
					                                                      OpStore %195 %211 
					                                Private f32* %212 = OpAccessChain %9 %53 
					                                         f32 %213 = OpLoad %212 
					                                         f32 %214 = OpFNegate %213 
					                                Uniform f32* %216 = OpAccessChain %20 %215 
					                                         f32 %217 = OpLoad %216 
					                                         f32 %218 = OpFMul %214 %217 
					                                         f32 %219 = OpFAdd %218 %58 
					                                Private f32* %220 = OpAccessChain %9 %53 
					                                                      OpStore %220 %219 
					                                Private f32* %221 = OpAccessChain %9 %53 
					                                         f32 %222 = OpLoad %221 
					                                         f32 %223 = OpExtInst %1 43 %222 %57 %58 
					                                Private f32* %224 = OpAccessChain %9 %53 
					                                                      OpStore %224 %223 
					                                       f32_3 %226 = OpLoad %195 
					                                Uniform f32* %227 = OpAccessChain %20 %215 
					                                         f32 %228 = OpLoad %227 
					                                Uniform f32* %229 = OpAccessChain %20 %215 
					                                         f32 %230 = OpLoad %229 
					                                Uniform f32* %231 = OpAccessChain %20 %215 
					                                         f32 %232 = OpLoad %231 
					                                       f32_3 %233 = OpCompositeConstruct %228 %230 %232 
					                                         f32 %234 = OpCompositeExtract %233 0 
					                                         f32 %235 = OpCompositeExtract %233 1 
					                                         f32 %236 = OpCompositeExtract %233 2 
					                                       f32_3 %237 = OpCompositeConstruct %234 %235 %236 
					                                       f32_3 %238 = OpFMul %226 %237 
					                                                      OpStore %225 %238 
					                              Uniform f32_4* %240 = OpAccessChain %20 %239 
					                                       f32_4 %241 = OpLoad %240 
					                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
					                                       f32_3 %243 = OpLoad %9 
					                                       f32_3 %244 = OpVectorShuffle %243 %243 0 0 0 
					                                       f32_3 %245 = OpFMul %242 %244 
					                                       f32_3 %246 = OpLoad %225 
					                                       f32_3 %247 = OpFAdd %245 %246 
					                                                      OpStore %225 %247 
					                                       f32_3 %248 = OpLoad %34 
					                                       f32_3 %249 = OpLoad %225 
					                                       f32_3 %250 = OpFMul %248 %249 
					                                                      OpStore %34 %250 
					                                       f32_3 %251 = OpLoad %50 
					                              Uniform f32_4* %252 = OpAccessChain %20 %39 
					                                       f32_4 %253 = OpLoad %252 
					                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
					                                         f32 %255 = OpDot %251 %254 
					                                                      OpStore %61 %255 
					                                         f32 %256 = OpLoad %61 
					                                         f32 %257 = OpExtInst %1 40 %256 %57 
					                                                      OpStore %61 %257 
					                                       f32_3 %258 = OpLoad %34 
					                                         f32 %259 = OpLoad %61 
					                                       f32_3 %260 = OpCompositeConstruct %259 %259 %259 
					                                       f32_3 %261 = OpFMul %258 %260 
					                                       f32_3 %262 = OpLoad %149 
					                                       f32_3 %263 = OpFAdd %261 %262 
					                                                      OpStore %9 %263 
					                                       f32_3 %266 = OpLoad %9 
					                                       f32_4 %267 = OpLoad %265 
					                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
					                                                      OpStore %265 %268 
					                                 Output f32* %270 = OpAccessChain %265 %129 
					                                                      OpStore %270 %58 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 272
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %50 %126 %265 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 RelaxedPrecision 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 RelaxedPrecision 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 RelaxedPrecision 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 RelaxedPrecision 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 RelaxedPrecision 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpMemberDecorate %18 8 Offset 18 
					                                                      OpMemberDecorate %18 9 Offset 18 
					                                                      OpMemberDecorate %18 10 RelaxedPrecision 
					                                                      OpMemberDecorate %18 10 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpDecorate %34 RelaxedPrecision 
					                                                      OpDecorate %42 RelaxedPrecision 
					                                                      OpDecorate %43 RelaxedPrecision 
					                                                      OpDecorate %50 Location 50 
					                                                      OpDecorate %61 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %82 RelaxedPrecision 
					                                                      OpDecorate %83 RelaxedPrecision 
					                                                      OpDecorate %84 RelaxedPrecision 
					                                                      OpDecorate %85 RelaxedPrecision 
					                                                      OpDecorate %86 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %103 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %107 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %111 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %122 DescriptorSet 122 
					                                                      OpDecorate %122 Binding 122 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %126 Location 126 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %134 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %152 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 DescriptorSet 184 
					                                                      OpDecorate %184 Binding 184 
					                                                      OpDecorate %185 RelaxedPrecision 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %196 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %200 RelaxedPrecision 
					                                                      OpDecorate %203 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %248 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %254 RelaxedPrecision 
					                                                      OpDecorate %256 RelaxedPrecision 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %260 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %265 Location 265 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %14 %16 
					                                              %18 = OpTypeStruct %7 %14 %14 %14 %17 %14 %6 %6 %6 %6 %14 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 0 
					                                              %23 = OpTypePointer Uniform %7 
					                                              %27 = OpTypePointer Private %6 
					                                 Private f32* %28 = OpVariable Private 
					                               Private f32_3* %34 = OpVariable Private 
					                                          i32 %39 = OpConstant 1 
					                                              %40 = OpTypePointer Uniform %14 
					                                 Input f32_3* %50 = OpVariable Input 
					                                          u32 %53 = OpConstant 0 
					                                          f32 %57 = OpConstant 3.674022E-40 
					                                          f32 %58 = OpConstant 3.674022E-40 
					                                 Private f32* %61 = OpVariable Private 
					                                 Private f32* %66 = OpVariable Private 
					                                          i32 %70 = OpConstant 8 
					                                              %71 = OpTypePointer Uniform %6 
					                                 Private f32* %97 = OpVariable Private 
					                                         i32 %101 = OpConstant 6 
					                                         f32 %104 = OpConstant 3.674022E-40 
					                                Private f32* %118 = OpVariable Private 
					                                             %119 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %120 = OpTypeSampledImage %119 
					                                             %121 = OpTypePointer UniformConstant %120 
					 UniformConstant read_only Texture2DSampled* %122 = OpVariable UniformConstant 
					                                             %124 = OpTypeVector %6 2 
					                                             %125 = OpTypePointer Input %124 
					                                Input f32_2* %126 = OpVariable Input 
					                                         u32 %129 = OpConstant 3 
					                                             %136 = OpTypePointer Private %124 
					                              Private f32_2* %137 = OpVariable Private 
					                                         i32 %140 = OpConstant 7 
					                                         i32 %144 = OpConstant 3 
					                              Private f32_3* %149 = OpVariable Private 
					                                         i32 %157 = OpConstant 4 
					                                         i32 %170 = OpConstant 2 
					 UniformConstant read_only Texture2DSampled* %184 = OpVariable UniformConstant 
					                              Private f32_3* %195 = OpVariable Private 
					                                         i32 %207 = OpConstant 10 
					                                         i32 %215 = OpConstant 9 
					                              Private f32_3* %225 = OpVariable Private 
					                                         i32 %239 = OpConstant 5 
					                                             %264 = OpTypePointer Output %14 
					                               Output f32_4* %265 = OpVariable Output 
					                                             %269 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %24 = OpAccessChain %20 %22 
					                                        f32_3 %25 = OpLoad %24 
					                                        f32_3 %26 = OpFAdd %13 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %29 = OpLoad %9 
					                                        f32_3 %30 = OpLoad %9 
					                                          f32 %31 = OpDot %29 %30 
					                                                      OpStore %28 %31 
					                                          f32 %32 = OpLoad %28 
					                                          f32 %33 = OpExtInst %1 32 %32 
					                                                      OpStore %28 %33 
					                                        f32_3 %35 = OpLoad %9 
					                                          f32 %36 = OpLoad %28 
					                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
					                                        f32_3 %38 = OpFMul %35 %37 
					                               Uniform f32_4* %41 = OpAccessChain %20 %39 
					                                        f32_4 %42 = OpLoad %41 
					                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
					                                        f32_3 %44 = OpFAdd %38 %43 
					                                                      OpStore %34 %44 
					                                          f32 %45 = OpLoad %28 
					                                        f32_3 %46 = OpCompositeConstruct %45 %45 %45 
					                                        f32_3 %47 = OpLoad %9 
					                                        f32_3 %48 = OpFMul %46 %47 
					                                                      OpStore %9 %48 
					                                        f32_3 %49 = OpLoad %9 
					                                        f32_3 %51 = OpLoad %50 
					                                          f32 %52 = OpDot %49 %51 
					                                 Private f32* %54 = OpAccessChain %9 %53 
					                                                      OpStore %54 %52 
					                                 Private f32* %55 = OpAccessChain %9 %53 
					                                          f32 %56 = OpLoad %55 
					                                          f32 %59 = OpExtInst %1 43 %56 %57 %58 
					                                 Private f32* %60 = OpAccessChain %9 %53 
					                                                      OpStore %60 %59 
					                                 Private f32* %62 = OpAccessChain %9 %53 
					                                          f32 %63 = OpLoad %62 
					                                          f32 %64 = OpFNegate %63 
					                                          f32 %65 = OpFAdd %64 %58 
					                                                      OpStore %61 %65 
					                                          f32 %67 = OpLoad %61 
					                                          f32 %68 = OpExtInst %1 30 %67 
					                                                      OpStore %66 %68 
					                                          f32 %69 = OpLoad %66 
					                                 Uniform f32* %72 = OpAccessChain %20 %70 
					                                          f32 %73 = OpLoad %72 
					                                          f32 %74 = OpFMul %69 %73 
					                                 Private f32* %75 = OpAccessChain %9 %53 
					                                                      OpStore %75 %74 
					                                 Private f32* %76 = OpAccessChain %9 %53 
					                                          f32 %77 = OpLoad %76 
					                                          f32 %78 = OpExtInst %1 29 %77 
					                                 Private f32* %79 = OpAccessChain %9 %53 
					                                                      OpStore %79 %78 
					                                        f32_3 %80 = OpLoad %34 
					                                        f32_3 %81 = OpLoad %34 
					                                          f32 %82 = OpDot %80 %81 
					                                                      OpStore %61 %82 
					                                          f32 %83 = OpLoad %61 
					                                          f32 %84 = OpExtInst %1 32 %83 
					                                                      OpStore %61 %84 
					                                          f32 %85 = OpLoad %61 
					                                        f32_3 %86 = OpCompositeConstruct %85 %85 %85 
					                                        f32_3 %87 = OpLoad %34 
					                                        f32_3 %88 = OpFMul %86 %87 
					                                                      OpStore %34 %88 
					                                        f32_3 %89 = OpLoad %50 
					                                        f32_3 %90 = OpLoad %34 
					                                          f32 %91 = OpDot %89 %90 
					                                 Private f32* %92 = OpAccessChain %34 %53 
					                                                      OpStore %92 %91 
					                                 Private f32* %93 = OpAccessChain %34 %53 
					                                          f32 %94 = OpLoad %93 
					                                          f32 %95 = OpExtInst %1 40 %94 %57 
					                                 Private f32* %96 = OpAccessChain %34 %53 
					                                                      OpStore %96 %95 
					                                 Private f32* %98 = OpAccessChain %34 %53 
					                                          f32 %99 = OpLoad %98 
					                                         f32 %100 = OpExtInst %1 30 %99 
					                                                      OpStore %97 %100 
					                                Uniform f32* %102 = OpAccessChain %20 %101 
					                                         f32 %103 = OpLoad %102 
					                                         f32 %105 = OpFMul %103 %104 
					                                Private f32* %106 = OpAccessChain %34 %53 
					                                                      OpStore %106 %105 
					                                         f32 %107 = OpLoad %97 
					                                Private f32* %108 = OpAccessChain %34 %53 
					                                         f32 %109 = OpLoad %108 
					                                         f32 %110 = OpFMul %107 %109 
					                                                      OpStore %97 %110 
					                                         f32 %111 = OpLoad %97 
					                                         f32 %112 = OpExtInst %1 29 %111 
					                                                      OpStore %97 %112 
					                                Private f32* %113 = OpAccessChain %9 %53 
					                                         f32 %114 = OpLoad %113 
					                                         f32 %115 = OpFNegate %114 
					                                         f32 %116 = OpFAdd %115 %58 
					                                Private f32* %117 = OpAccessChain %34 %53 
					                                                      OpStore %117 %116 
					                  read_only Texture2DSampled %123 = OpLoad %122 
					                                       f32_2 %127 = OpLoad %126 
					                                       f32_4 %128 = OpImageSampleImplicitLod %123 %127 
					                                         f32 %130 = OpCompositeExtract %128 3 
					                                                      OpStore %118 %130 
					                                Private f32* %131 = OpAccessChain %34 %53 
					                                         f32 %132 = OpLoad %131 
					                                         f32 %133 = OpLoad %118 
					                                         f32 %134 = OpFMul %132 %133 
					                                Private f32* %135 = OpAccessChain %34 %53 
					                                                      OpStore %135 %134 
					                                Private f32* %138 = OpAccessChain %34 %53 
					                                         f32 %139 = OpLoad %138 
					                                Uniform f32* %141 = OpAccessChain %20 %140 
					                                         f32 %142 = OpLoad %141 
					                                         f32 %143 = OpFMul %139 %142 
					                                Uniform f32* %145 = OpAccessChain %20 %144 %129 
					                                         f32 %146 = OpLoad %145 
					                                         f32 %147 = OpFAdd %143 %146 
					                                Private f32* %148 = OpAccessChain %137 %53 
					                                                      OpStore %148 %147 
					                                Private f32* %150 = OpAccessChain %137 %53 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpLoad %97 
					                                         f32 %153 = OpFMul %151 %152 
					                                Private f32* %154 = OpAccessChain %149 %53 
					                                                      OpStore %154 %153 
					                                       f32_3 %155 = OpLoad %11 
					                                       f32_2 %156 = OpVectorShuffle %155 %155 1 1 
					                              Uniform f32_4* %158 = OpAccessChain %20 %157 %39 
					                                       f32_4 %159 = OpLoad %158 
					                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
					                                       f32_2 %161 = OpFMul %156 %160 
					                                                      OpStore %137 %161 
					                              Uniform f32_4* %162 = OpAccessChain %20 %157 %22 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
					                                       f32_3 %165 = OpLoad %11 
					                                       f32_2 %166 = OpVectorShuffle %165 %165 0 0 
					                                       f32_2 %167 = OpFMul %164 %166 
					                                       f32_2 %168 = OpLoad %137 
					                                       f32_2 %169 = OpFAdd %167 %168 
					                                                      OpStore %137 %169 
					                              Uniform f32_4* %171 = OpAccessChain %20 %157 %170 
					                                       f32_4 %172 = OpLoad %171 
					                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
					                                       f32_3 %174 = OpLoad %11 
					                                       f32_2 %175 = OpVectorShuffle %174 %174 2 2 
					                                       f32_2 %176 = OpFMul %173 %175 
					                                       f32_2 %177 = OpLoad %137 
					                                       f32_2 %178 = OpFAdd %176 %177 
					                                                      OpStore %137 %178 
					                                       f32_2 %179 = OpLoad %137 
					                              Uniform f32_4* %180 = OpAccessChain %20 %157 %144 
					                                       f32_4 %181 = OpLoad %180 
					                                       f32_2 %182 = OpVectorShuffle %181 %181 0 1 
					                                       f32_2 %183 = OpFAdd %179 %182 
					                                                      OpStore %137 %183 
					                  read_only Texture2DSampled %185 = OpLoad %184 
					                                       f32_2 %186 = OpLoad %137 
					                                       f32_4 %187 = OpImageSampleImplicitLod %185 %186 
					                                         f32 %188 = OpCompositeExtract %187 3 
					                                                      OpStore %118 %188 
					                                         f32 %189 = OpLoad %118 
					                                       f32_3 %190 = OpCompositeConstruct %189 %189 %189 
					                              Uniform f32_4* %191 = OpAccessChain %20 %170 
					                                       f32_4 %192 = OpLoad %191 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                       f32_3 %194 = OpFMul %190 %193 
					                                                      OpStore %34 %194 
					                                       f32_3 %196 = OpLoad %34 
					                              Uniform f32_4* %197 = OpAccessChain %20 %144 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                       f32_3 %200 = OpFMul %196 %199 
					                                                      OpStore %195 %200 
					                                       f32_3 %201 = OpLoad %149 
					                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
					                                       f32_3 %203 = OpLoad %195 
					                                       f32_3 %204 = OpFMul %202 %203 
					                                                      OpStore %149 %204 
					                                       f32_3 %205 = OpLoad %9 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 0 0 
					                              Uniform f32_4* %208 = OpAccessChain %20 %207 
					                                       f32_4 %209 = OpLoad %208 
					                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
					                                       f32_3 %211 = OpFMul %206 %210 
					                                                      OpStore %195 %211 
					                                Private f32* %212 = OpAccessChain %9 %53 
					                                         f32 %213 = OpLoad %212 
					                                         f32 %214 = OpFNegate %213 
					                                Uniform f32* %216 = OpAccessChain %20 %215 
					                                         f32 %217 = OpLoad %216 
					                                         f32 %218 = OpFMul %214 %217 
					                                         f32 %219 = OpFAdd %218 %58 
					                                Private f32* %220 = OpAccessChain %9 %53 
					                                                      OpStore %220 %219 
					                                Private f32* %221 = OpAccessChain %9 %53 
					                                         f32 %222 = OpLoad %221 
					                                         f32 %223 = OpExtInst %1 43 %222 %57 %58 
					                                Private f32* %224 = OpAccessChain %9 %53 
					                                                      OpStore %224 %223 
					                                       f32_3 %226 = OpLoad %195 
					                                Uniform f32* %227 = OpAccessChain %20 %215 
					                                         f32 %228 = OpLoad %227 
					                                Uniform f32* %229 = OpAccessChain %20 %215 
					                                         f32 %230 = OpLoad %229 
					                                Uniform f32* %231 = OpAccessChain %20 %215 
					                                         f32 %232 = OpLoad %231 
					                                       f32_3 %233 = OpCompositeConstruct %228 %230 %232 
					                                         f32 %234 = OpCompositeExtract %233 0 
					                                         f32 %235 = OpCompositeExtract %233 1 
					                                         f32 %236 = OpCompositeExtract %233 2 
					                                       f32_3 %237 = OpCompositeConstruct %234 %235 %236 
					                                       f32_3 %238 = OpFMul %226 %237 
					                                                      OpStore %225 %238 
					                              Uniform f32_4* %240 = OpAccessChain %20 %239 
					                                       f32_4 %241 = OpLoad %240 
					                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
					                                       f32_3 %243 = OpLoad %9 
					                                       f32_3 %244 = OpVectorShuffle %243 %243 0 0 0 
					                                       f32_3 %245 = OpFMul %242 %244 
					                                       f32_3 %246 = OpLoad %225 
					                                       f32_3 %247 = OpFAdd %245 %246 
					                                                      OpStore %225 %247 
					                                       f32_3 %248 = OpLoad %34 
					                                       f32_3 %249 = OpLoad %225 
					                                       f32_3 %250 = OpFMul %248 %249 
					                                                      OpStore %34 %250 
					                                       f32_3 %251 = OpLoad %50 
					                              Uniform f32_4* %252 = OpAccessChain %20 %39 
					                                       f32_4 %253 = OpLoad %252 
					                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
					                                         f32 %255 = OpDot %251 %254 
					                                                      OpStore %61 %255 
					                                         f32 %256 = OpLoad %61 
					                                         f32 %257 = OpExtInst %1 40 %256 %57 
					                                                      OpStore %61 %257 
					                                       f32_3 %258 = OpLoad %34 
					                                         f32 %259 = OpLoad %61 
					                                       f32_3 %260 = OpCompositeConstruct %259 %259 %259 
					                                       f32_3 %261 = OpFMul %258 %260 
					                                       f32_3 %262 = OpLoad %149 
					                                       f32_3 %263 = OpFAdd %261 %262 
					                                                      OpStore %9 %263 
					                                       f32_3 %266 = OpLoad %9 
					                                       f32_4 %267 = OpLoad %265 
					                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
					                                                      OpStore %265 %268 
					                                 Output f32* %270 = OpAccessChain %265 %129 
					                                                      OpStore %270 %58 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 155
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %109 %113 %143 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %97 Location 97 
					                                                      OpDecorate %98 Location 98 
					                                                      OpDecorate %109 Location 109 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %143 Location 143 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 %7 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypeVector %6 2 
					                                              %96 = OpTypePointer Output %95 
					                                Output f32_2* %97 = OpVariable Output 
					                                 Input f32_4* %98 = OpVariable Input 
					                               Output f32_2* %109 = OpVariable Output 
					                                         f32 %110 = OpConstant 3.674022E-40 
					                                       f32_2 %111 = OpConstantComposite %110 %110 
					                                             %112 = OpTypePointer Input %50 
					                                Input f32_3* %113 = OpVariable Input 
					                                         u32 %119 = OpConstant 0 
					                                             %120 = OpTypePointer Private %6 
					                                         u32 %133 = OpConstant 2 
					                                Private f32* %135 = OpVariable Private 
					                               Output f32_3* %143 = OpVariable Output 
					                                             %149 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
					                              Uniform f32_4* %101 = OpAccessChain %21 %46 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                                       f32_2 %104 = OpFMul %100 %103 
					                              Uniform f32_4* %105 = OpAccessChain %21 %46 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
					                                       f32_2 %108 = OpFAdd %104 %107 
					                                                      OpStore %97 %108 
					                                                      OpStore %109 %111 
					                                       f32_3 %114 = OpLoad %113 
					                              Uniform f32_4* %115 = OpAccessChain %21 %24 %23 
					                                       f32_4 %116 = OpLoad %115 
					                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
					                                         f32 %118 = OpDot %114 %117 
					                                Private f32* %121 = OpAccessChain %9 %119 
					                                                      OpStore %121 %118 
					                                       f32_3 %122 = OpLoad %113 
					                              Uniform f32_4* %123 = OpAccessChain %21 %24 %24 
					                                       f32_4 %124 = OpLoad %123 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                         f32 %126 = OpDot %122 %125 
					                                Private f32* %127 = OpAccessChain %9 %81 
					                                                      OpStore %127 %126 
					                                       f32_3 %128 = OpLoad %113 
					                              Uniform f32_4* %129 = OpAccessChain %21 %24 %36 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                         f32 %132 = OpDot %128 %131 
					                                Private f32* %134 = OpAccessChain %9 %133 
					                                                      OpStore %134 %132 
					                                       f32_4 %136 = OpLoad %9 
					                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
					                                         f32 %140 = OpDot %137 %139 
					                                                      OpStore %135 %140 
					                                         f32 %141 = OpLoad %135 
					                                         f32 %142 = OpExtInst %1 32 %141 
					                                                      OpStore %135 %142 
					                                         f32 %144 = OpLoad %135 
					                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                       f32_3 %148 = OpFMul %145 %147 
					                                                      OpStore %143 %148 
					                                 Output f32* %150 = OpAccessChain %85 %23 %81 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFNegate %151 
					                                 Output f32* %153 = OpAccessChain %85 %23 %81 
					                                                      OpStore %153 %152 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 272
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %50 %126 %265 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 RelaxedPrecision 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 RelaxedPrecision 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 RelaxedPrecision 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 RelaxedPrecision 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 RelaxedPrecision 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpMemberDecorate %18 8 Offset 18 
					                                                      OpMemberDecorate %18 9 Offset 18 
					                                                      OpMemberDecorate %18 10 RelaxedPrecision 
					                                                      OpMemberDecorate %18 10 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpDecorate %34 RelaxedPrecision 
					                                                      OpDecorate %42 RelaxedPrecision 
					                                                      OpDecorate %43 RelaxedPrecision 
					                                                      OpDecorate %50 Location 50 
					                                                      OpDecorate %61 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %82 RelaxedPrecision 
					                                                      OpDecorate %83 RelaxedPrecision 
					                                                      OpDecorate %84 RelaxedPrecision 
					                                                      OpDecorate %85 RelaxedPrecision 
					                                                      OpDecorate %86 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %103 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %107 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %111 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %122 DescriptorSet 122 
					                                                      OpDecorate %122 Binding 122 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %126 Location 126 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %134 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %152 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 DescriptorSet 184 
					                                                      OpDecorate %184 Binding 184 
					                                                      OpDecorate %185 RelaxedPrecision 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %192 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %196 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %200 RelaxedPrecision 
					                                                      OpDecorate %203 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %248 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %254 RelaxedPrecision 
					                                                      OpDecorate %256 RelaxedPrecision 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %260 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %265 Location 265 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 4 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %14 %16 
					                                              %18 = OpTypeStruct %7 %14 %14 %14 %17 %14 %6 %6 %6 %6 %14 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32; f32; f32; f32; f32_4;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 0 
					                                              %23 = OpTypePointer Uniform %7 
					                                              %27 = OpTypePointer Private %6 
					                                 Private f32* %28 = OpVariable Private 
					                               Private f32_3* %34 = OpVariable Private 
					                                          i32 %39 = OpConstant 1 
					                                              %40 = OpTypePointer Uniform %14 
					                                 Input f32_3* %50 = OpVariable Input 
					                                          u32 %53 = OpConstant 0 
					                                          f32 %57 = OpConstant 3.674022E-40 
					                                          f32 %58 = OpConstant 3.674022E-40 
					                                 Private f32* %61 = OpVariable Private 
					                                 Private f32* %66 = OpVariable Private 
					                                          i32 %70 = OpConstant 8 
					                                              %71 = OpTypePointer Uniform %6 
					                                 Private f32* %97 = OpVariable Private 
					                                         i32 %101 = OpConstant 6 
					                                         f32 %104 = OpConstant 3.674022E-40 
					                                Private f32* %118 = OpVariable Private 
					                                             %119 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %120 = OpTypeSampledImage %119 
					                                             %121 = OpTypePointer UniformConstant %120 
					 UniformConstant read_only Texture2DSampled* %122 = OpVariable UniformConstant 
					                                             %124 = OpTypeVector %6 2 
					                                             %125 = OpTypePointer Input %124 
					                                Input f32_2* %126 = OpVariable Input 
					                                         u32 %129 = OpConstant 3 
					                                             %136 = OpTypePointer Private %124 
					                              Private f32_2* %137 = OpVariable Private 
					                                         i32 %140 = OpConstant 7 
					                                         i32 %144 = OpConstant 3 
					                              Private f32_3* %149 = OpVariable Private 
					                                         i32 %157 = OpConstant 4 
					                                         i32 %170 = OpConstant 2 
					 UniformConstant read_only Texture2DSampled* %184 = OpVariable UniformConstant 
					                              Private f32_3* %195 = OpVariable Private 
					                                         i32 %207 = OpConstant 10 
					                                         i32 %215 = OpConstant 9 
					                              Private f32_3* %225 = OpVariable Private 
					                                         i32 %239 = OpConstant 5 
					                                             %264 = OpTypePointer Output %14 
					                               Output f32_4* %265 = OpVariable Output 
					                                             %269 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpFNegate %12 
					                               Uniform f32_3* %24 = OpAccessChain %20 %22 
					                                        f32_3 %25 = OpLoad %24 
					                                        f32_3 %26 = OpFAdd %13 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %29 = OpLoad %9 
					                                        f32_3 %30 = OpLoad %9 
					                                          f32 %31 = OpDot %29 %30 
					                                                      OpStore %28 %31 
					                                          f32 %32 = OpLoad %28 
					                                          f32 %33 = OpExtInst %1 32 %32 
					                                                      OpStore %28 %33 
					                                        f32_3 %35 = OpLoad %9 
					                                          f32 %36 = OpLoad %28 
					                                        f32_3 %37 = OpCompositeConstruct %36 %36 %36 
					                                        f32_3 %38 = OpFMul %35 %37 
					                               Uniform f32_4* %41 = OpAccessChain %20 %39 
					                                        f32_4 %42 = OpLoad %41 
					                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
					                                        f32_3 %44 = OpFAdd %38 %43 
					                                                      OpStore %34 %44 
					                                          f32 %45 = OpLoad %28 
					                                        f32_3 %46 = OpCompositeConstruct %45 %45 %45 
					                                        f32_3 %47 = OpLoad %9 
					                                        f32_3 %48 = OpFMul %46 %47 
					                                                      OpStore %9 %48 
					                                        f32_3 %49 = OpLoad %9 
					                                        f32_3 %51 = OpLoad %50 
					                                          f32 %52 = OpDot %49 %51 
					                                 Private f32* %54 = OpAccessChain %9 %53 
					                                                      OpStore %54 %52 
					                                 Private f32* %55 = OpAccessChain %9 %53 
					                                          f32 %56 = OpLoad %55 
					                                          f32 %59 = OpExtInst %1 43 %56 %57 %58 
					                                 Private f32* %60 = OpAccessChain %9 %53 
					                                                      OpStore %60 %59 
					                                 Private f32* %62 = OpAccessChain %9 %53 
					                                          f32 %63 = OpLoad %62 
					                                          f32 %64 = OpFNegate %63 
					                                          f32 %65 = OpFAdd %64 %58 
					                                                      OpStore %61 %65 
					                                          f32 %67 = OpLoad %61 
					                                          f32 %68 = OpExtInst %1 30 %67 
					                                                      OpStore %66 %68 
					                                          f32 %69 = OpLoad %66 
					                                 Uniform f32* %72 = OpAccessChain %20 %70 
					                                          f32 %73 = OpLoad %72 
					                                          f32 %74 = OpFMul %69 %73 
					                                 Private f32* %75 = OpAccessChain %9 %53 
					                                                      OpStore %75 %74 
					                                 Private f32* %76 = OpAccessChain %9 %53 
					                                          f32 %77 = OpLoad %76 
					                                          f32 %78 = OpExtInst %1 29 %77 
					                                 Private f32* %79 = OpAccessChain %9 %53 
					                                                      OpStore %79 %78 
					                                        f32_3 %80 = OpLoad %34 
					                                        f32_3 %81 = OpLoad %34 
					                                          f32 %82 = OpDot %80 %81 
					                                                      OpStore %61 %82 
					                                          f32 %83 = OpLoad %61 
					                                          f32 %84 = OpExtInst %1 32 %83 
					                                                      OpStore %61 %84 
					                                          f32 %85 = OpLoad %61 
					                                        f32_3 %86 = OpCompositeConstruct %85 %85 %85 
					                                        f32_3 %87 = OpLoad %34 
					                                        f32_3 %88 = OpFMul %86 %87 
					                                                      OpStore %34 %88 
					                                        f32_3 %89 = OpLoad %50 
					                                        f32_3 %90 = OpLoad %34 
					                                          f32 %91 = OpDot %89 %90 
					                                 Private f32* %92 = OpAccessChain %34 %53 
					                                                      OpStore %92 %91 
					                                 Private f32* %93 = OpAccessChain %34 %53 
					                                          f32 %94 = OpLoad %93 
					                                          f32 %95 = OpExtInst %1 40 %94 %57 
					                                 Private f32* %96 = OpAccessChain %34 %53 
					                                                      OpStore %96 %95 
					                                 Private f32* %98 = OpAccessChain %34 %53 
					                                          f32 %99 = OpLoad %98 
					                                         f32 %100 = OpExtInst %1 30 %99 
					                                                      OpStore %97 %100 
					                                Uniform f32* %102 = OpAccessChain %20 %101 
					                                         f32 %103 = OpLoad %102 
					                                         f32 %105 = OpFMul %103 %104 
					                                Private f32* %106 = OpAccessChain %34 %53 
					                                                      OpStore %106 %105 
					                                         f32 %107 = OpLoad %97 
					                                Private f32* %108 = OpAccessChain %34 %53 
					                                         f32 %109 = OpLoad %108 
					                                         f32 %110 = OpFMul %107 %109 
					                                                      OpStore %97 %110 
					                                         f32 %111 = OpLoad %97 
					                                         f32 %112 = OpExtInst %1 29 %111 
					                                                      OpStore %97 %112 
					                                Private f32* %113 = OpAccessChain %9 %53 
					                                         f32 %114 = OpLoad %113 
					                                         f32 %115 = OpFNegate %114 
					                                         f32 %116 = OpFAdd %115 %58 
					                                Private f32* %117 = OpAccessChain %34 %53 
					                                                      OpStore %117 %116 
					                  read_only Texture2DSampled %123 = OpLoad %122 
					                                       f32_2 %127 = OpLoad %126 
					                                       f32_4 %128 = OpImageSampleImplicitLod %123 %127 
					                                         f32 %130 = OpCompositeExtract %128 3 
					                                                      OpStore %118 %130 
					                                Private f32* %131 = OpAccessChain %34 %53 
					                                         f32 %132 = OpLoad %131 
					                                         f32 %133 = OpLoad %118 
					                                         f32 %134 = OpFMul %132 %133 
					                                Private f32* %135 = OpAccessChain %34 %53 
					                                                      OpStore %135 %134 
					                                Private f32* %138 = OpAccessChain %34 %53 
					                                         f32 %139 = OpLoad %138 
					                                Uniform f32* %141 = OpAccessChain %20 %140 
					                                         f32 %142 = OpLoad %141 
					                                         f32 %143 = OpFMul %139 %142 
					                                Uniform f32* %145 = OpAccessChain %20 %144 %129 
					                                         f32 %146 = OpLoad %145 
					                                         f32 %147 = OpFAdd %143 %146 
					                                Private f32* %148 = OpAccessChain %137 %53 
					                                                      OpStore %148 %147 
					                                Private f32* %150 = OpAccessChain %137 %53 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpLoad %97 
					                                         f32 %153 = OpFMul %151 %152 
					                                Private f32* %154 = OpAccessChain %149 %53 
					                                                      OpStore %154 %153 
					                                       f32_3 %155 = OpLoad %11 
					                                       f32_2 %156 = OpVectorShuffle %155 %155 1 1 
					                              Uniform f32_4* %158 = OpAccessChain %20 %157 %39 
					                                       f32_4 %159 = OpLoad %158 
					                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
					                                       f32_2 %161 = OpFMul %156 %160 
					                                                      OpStore %137 %161 
					                              Uniform f32_4* %162 = OpAccessChain %20 %157 %22 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
					                                       f32_3 %165 = OpLoad %11 
					                                       f32_2 %166 = OpVectorShuffle %165 %165 0 0 
					                                       f32_2 %167 = OpFMul %164 %166 
					                                       f32_2 %168 = OpLoad %137 
					                                       f32_2 %169 = OpFAdd %167 %168 
					                                                      OpStore %137 %169 
					                              Uniform f32_4* %171 = OpAccessChain %20 %157 %170 
					                                       f32_4 %172 = OpLoad %171 
					                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
					                                       f32_3 %174 = OpLoad %11 
					                                       f32_2 %175 = OpVectorShuffle %174 %174 2 2 
					                                       f32_2 %176 = OpFMul %173 %175 
					                                       f32_2 %177 = OpLoad %137 
					                                       f32_2 %178 = OpFAdd %176 %177 
					                                                      OpStore %137 %178 
					                                       f32_2 %179 = OpLoad %137 
					                              Uniform f32_4* %180 = OpAccessChain %20 %157 %144 
					                                       f32_4 %181 = OpLoad %180 
					                                       f32_2 %182 = OpVectorShuffle %181 %181 0 1 
					                                       f32_2 %183 = OpFAdd %179 %182 
					                                                      OpStore %137 %183 
					                  read_only Texture2DSampled %185 = OpLoad %184 
					                                       f32_2 %186 = OpLoad %137 
					                                       f32_4 %187 = OpImageSampleImplicitLod %185 %186 
					                                         f32 %188 = OpCompositeExtract %187 3 
					                                                      OpStore %118 %188 
					                                         f32 %189 = OpLoad %118 
					                                       f32_3 %190 = OpCompositeConstruct %189 %189 %189 
					                              Uniform f32_4* %191 = OpAccessChain %20 %170 
					                                       f32_4 %192 = OpLoad %191 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                       f32_3 %194 = OpFMul %190 %193 
					                                                      OpStore %34 %194 
					                                       f32_3 %196 = OpLoad %34 
					                              Uniform f32_4* %197 = OpAccessChain %20 %144 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                       f32_3 %200 = OpFMul %196 %199 
					                                                      OpStore %195 %200 
					                                       f32_3 %201 = OpLoad %149 
					                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
					                                       f32_3 %203 = OpLoad %195 
					                                       f32_3 %204 = OpFMul %202 %203 
					                                                      OpStore %149 %204 
					                                       f32_3 %205 = OpLoad %9 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 0 0 
					                              Uniform f32_4* %208 = OpAccessChain %20 %207 
					                                       f32_4 %209 = OpLoad %208 
					                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
					                                       f32_3 %211 = OpFMul %206 %210 
					                                                      OpStore %195 %211 
					                                Private f32* %212 = OpAccessChain %9 %53 
					                                         f32 %213 = OpLoad %212 
					                                         f32 %214 = OpFNegate %213 
					                                Uniform f32* %216 = OpAccessChain %20 %215 
					                                         f32 %217 = OpLoad %216 
					                                         f32 %218 = OpFMul %214 %217 
					                                         f32 %219 = OpFAdd %218 %58 
					                                Private f32* %220 = OpAccessChain %9 %53 
					                                                      OpStore %220 %219 
					                                Private f32* %221 = OpAccessChain %9 %53 
					                                         f32 %222 = OpLoad %221 
					                                         f32 %223 = OpExtInst %1 43 %222 %57 %58 
					                                Private f32* %224 = OpAccessChain %9 %53 
					                                                      OpStore %224 %223 
					                                       f32_3 %226 = OpLoad %195 
					                                Uniform f32* %227 = OpAccessChain %20 %215 
					                                         f32 %228 = OpLoad %227 
					                                Uniform f32* %229 = OpAccessChain %20 %215 
					                                         f32 %230 = OpLoad %229 
					                                Uniform f32* %231 = OpAccessChain %20 %215 
					                                         f32 %232 = OpLoad %231 
					                                       f32_3 %233 = OpCompositeConstruct %228 %230 %232 
					                                         f32 %234 = OpCompositeExtract %233 0 
					                                         f32 %235 = OpCompositeExtract %233 1 
					                                         f32 %236 = OpCompositeExtract %233 2 
					                                       f32_3 %237 = OpCompositeConstruct %234 %235 %236 
					                                       f32_3 %238 = OpFMul %226 %237 
					                                                      OpStore %225 %238 
					                              Uniform f32_4* %240 = OpAccessChain %20 %239 
					                                       f32_4 %241 = OpLoad %240 
					                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
					                                       f32_3 %243 = OpLoad %9 
					                                       f32_3 %244 = OpVectorShuffle %243 %243 0 0 0 
					                                       f32_3 %245 = OpFMul %242 %244 
					                                       f32_3 %246 = OpLoad %225 
					                                       f32_3 %247 = OpFAdd %245 %246 
					                                                      OpStore %225 %247 
					                                       f32_3 %248 = OpLoad %34 
					                                       f32_3 %249 = OpLoad %225 
					                                       f32_3 %250 = OpFMul %248 %249 
					                                                      OpStore %34 %250 
					                                       f32_3 %251 = OpLoad %50 
					                              Uniform f32_4* %252 = OpAccessChain %20 %39 
					                                       f32_4 %253 = OpLoad %252 
					                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
					                                         f32 %255 = OpDot %251 %254 
					                                                      OpStore %61 %255 
					                                         f32 %256 = OpLoad %61 
					                                         f32 %257 = OpExtInst %1 40 %256 %57 
					                                                      OpStore %61 %257 
					                                       f32_3 %258 = OpLoad %34 
					                                         f32 %259 = OpLoad %61 
					                                       f32_3 %260 = OpCompositeConstruct %259 %259 %259 
					                                       f32_3 %261 = OpFMul %258 %260 
					                                       f32_3 %262 = OpLoad %149 
					                                       f32_3 %263 = OpFAdd %261 %262 
					                                                      OpStore %9 %263 
					                                       f32_3 %266 = OpLoad %9 
					                                       f32_4 %267 = OpLoad %265 
					                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
					                                                      OpStore %265 %268 
					                                 Output f32* %270 = OpAccessChain %265 %129 
					                                                      OpStore %270 %58 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "POINT" }
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "POINT" }
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "POINT" }
					"spirv"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"spirv"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "SPOT" }
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "SPOT" }
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "SPOT" }
					"spirv"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"spirv"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"spirv"
				}
			}
		}
		Pass {
			Name "PREPASS"
			LOD 400
			Tags { "LIGHTMODE" = "PREPASSBASE" "RenderType" = "Opaque" }
			ZClip Off
			GpuProgramID 138000
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					varying highp vec3 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
					  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _RimAmt;
					varying highp vec3 xlv_TEXCOORD0;
					void main ()
					{
					  lowp vec4 res_1;
					  lowp vec3 tmpvar_2;
					  highp vec3 tmpvar_3;
					  tmpvar_3.x = 1.0;
					  tmpvar_2 = xlv_TEXCOORD0;
					  mediump float fres_4;
					  mediump float rim_5;
					  mediump float tmpvar_6;
					  highp float tmpvar_7;
					  tmpvar_7 = clamp (dot (normalize(tmpvar_3), tmpvar_2), 0.0, 1.0);
					  tmpvar_6 = tmpvar_7;
					  rim_5 = (1.0 - tmpvar_6);
					  fres_4 = rim_5;
					  highp float tmpvar_8;
					  tmpvar_8 = pow (rim_5, _RimAmt);
					  rim_5 = tmpvar_8;
					  highp float tmpvar_9;
					  tmpvar_9 = pow (fres_4, _FresAmt);
					  fres_4 = tmpvar_9;
					  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
					  res_1.w = _Shininess;
					  gl_FragData[0] = res_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					varying highp vec3 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
					  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _RimAmt;
					varying highp vec3 xlv_TEXCOORD0;
					void main ()
					{
					  lowp vec4 res_1;
					  lowp vec3 tmpvar_2;
					  highp vec3 tmpvar_3;
					  tmpvar_3.x = 1.0;
					  tmpvar_2 = xlv_TEXCOORD0;
					  mediump float fres_4;
					  mediump float rim_5;
					  mediump float tmpvar_6;
					  highp float tmpvar_7;
					  tmpvar_7 = clamp (dot (normalize(tmpvar_3), tmpvar_2), 0.0, 1.0);
					  tmpvar_6 = tmpvar_7;
					  rim_5 = (1.0 - tmpvar_6);
					  fres_4 = rim_5;
					  highp float tmpvar_8;
					  tmpvar_8 = pow (rim_5, _RimAmt);
					  rim_5 = tmpvar_8;
					  highp float tmpvar_9;
					  tmpvar_9 = pow (fres_4, _FresAmt);
					  fres_4 = tmpvar_9;
					  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
					  res_1.w = _Shininess;
					  gl_FragData[0] = res_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					varying highp vec3 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					void main ()
					{
					  highp vec4 tmpvar_1;
					  tmpvar_1.w = 1.0;
					  tmpvar_1.xyz = _glesVertex.xyz;
					  highp mat3 tmpvar_2;
					  tmpvar_2[0] = unity_WorldToObject[0].xyz;
					  tmpvar_2[1] = unity_WorldToObject[1].xyz;
					  tmpvar_2[2] = unity_WorldToObject[2].xyz;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
					  xlv_TEXCOORD0 = normalize((_glesNormal * tmpvar_2));
					  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _RimAmt;
					varying highp vec3 xlv_TEXCOORD0;
					void main ()
					{
					  lowp vec4 res_1;
					  lowp vec3 tmpvar_2;
					  highp vec3 tmpvar_3;
					  tmpvar_3.x = 1.0;
					  tmpvar_2 = xlv_TEXCOORD0;
					  mediump float fres_4;
					  mediump float rim_5;
					  mediump float tmpvar_6;
					  highp float tmpvar_7;
					  tmpvar_7 = clamp (dot (normalize(tmpvar_3), tmpvar_2), 0.0, 1.0);
					  tmpvar_6 = tmpvar_7;
					  rim_5 = (1.0 - tmpvar_6);
					  fres_4 = rim_5;
					  highp float tmpvar_8;
					  tmpvar_8 = pow (rim_5, _RimAmt);
					  rim_5 = tmpvar_8;
					  highp float tmpvar_9;
					  tmpvar_9 = pow (fres_4, _FresAmt);
					  fres_4 = tmpvar_9;
					  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
					  res_1.w = _Shininess;
					  gl_FragData[0] = res_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump float _Shininess;
					in highp vec3 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = _Shininess;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump float _Shininess;
					in highp vec3 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = _Shininess;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump float _Shininess;
					in highp vec3 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = _Shininess;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 138
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %96 %126 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %96 Location 96 
					                                                      OpDecorate %126 Location 126 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypePointer Input %50 
					                                 Input f32_3* %96 = OpVariable Input 
					                                         u32 %102 = OpConstant 0 
					                                             %103 = OpTypePointer Private %6 
					                                         u32 %116 = OpConstant 2 
					                                Private f32* %118 = OpVariable Private 
					                               Output f32_3* %126 = OpVariable Output 
					                                             %132 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_3 %97 = OpLoad %96 
					                               Uniform f32_4* %98 = OpAccessChain %21 %24 %23 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
					                                         f32 %101 = OpDot %97 %100 
					                                Private f32* %104 = OpAccessChain %9 %102 
					                                                      OpStore %104 %101 
					                                       f32_3 %105 = OpLoad %96 
					                              Uniform f32_4* %106 = OpAccessChain %21 %24 %24 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
					                                         f32 %109 = OpDot %105 %108 
					                                Private f32* %110 = OpAccessChain %9 %81 
					                                                      OpStore %110 %109 
					                                       f32_3 %111 = OpLoad %96 
					                              Uniform f32_4* %112 = OpAccessChain %21 %24 %36 
					                                       f32_4 %113 = OpLoad %112 
					                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
					                                         f32 %115 = OpDot %111 %114 
					                                Private f32* %117 = OpAccessChain %9 %116 
					                                                      OpStore %117 %115 
					                                       f32_4 %119 = OpLoad %9 
					                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
					                                       f32_4 %121 = OpLoad %9 
					                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
					                                         f32 %123 = OpDot %120 %122 
					                                                      OpStore %118 %123 
					                                         f32 %124 = OpLoad %118 
					                                         f32 %125 = OpExtInst %1 32 %124 
					                                                      OpStore %118 %125 
					                                         f32 %127 = OpLoad %118 
					                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
					                                       f32_4 %129 = OpLoad %9 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
					                                       f32_3 %131 = OpFMul %128 %130 
					                                                      OpStore %126 %131 
					                                 Output f32* %133 = OpAccessChain %85 %23 %81 
					                                         f32 %134 = OpLoad %133 
					                                         f32 %135 = OpFNegate %134 
					                                 Output f32* %136 = OpAccessChain %85 %23 %81 
					                                                      OpStore %136 %135 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 33
					; Schema: 0
					                               OpCapability Shader 
					                        %1 = OpExtInstImport "GLSL.std.450" 
					                               OpMemoryModel Logical GLSL450 
					                               OpEntryPoint Fragment %4 "main" %9 %12 
					                               OpExecutionMode %4 OriginUpperLeft 
					                               OpDecorate %9 RelaxedPrecision 
					                               OpDecorate %9 Location 9 
					                               OpDecorate %12 Location 12 
					                               OpMemberDecorate %20 0 RelaxedPrecision 
					                               OpMemberDecorate %20 0 Offset 20 
					                               OpDecorate %20 Block 
					                               OpDecorate %22 DescriptorSet 22 
					                               OpDecorate %22 Binding 22 
					                               OpDecorate %27 RelaxedPrecision 
					                        %2 = OpTypeVoid 
					                        %3 = OpTypeFunction %2 
					                        %6 = OpTypeFloat 32 
					                        %7 = OpTypeVector %6 4 
					                        %8 = OpTypePointer Output %7 
					          Output f32_4* %9 = OpVariable Output 
					                       %10 = OpTypeVector %6 3 
					                       %11 = OpTypePointer Input %10 
					          Input f32_3* %12 = OpVariable Input 
					                   f32 %14 = OpConstant 3.674022E-40 
					                 f32_3 %15 = OpConstantComposite %14 %14 %14 
					                       %20 = OpTypeStruct %6 
					                       %21 = OpTypePointer Uniform %20 
					Uniform struct {f32;}* %22 = OpVariable Uniform 
					                       %23 = OpTypeInt 32 1 
					                   i32 %24 = OpConstant 0 
					                       %25 = OpTypePointer Uniform %6 
					                       %28 = OpTypeInt 32 0 
					                   u32 %29 = OpConstant 3 
					                       %30 = OpTypePointer Output %6 
					                   void %4 = OpFunction None %3 
					                        %5 = OpLabel 
					                 f32_3 %13 = OpLoad %12 
					                 f32_3 %16 = OpFMul %13 %15 
					                 f32_3 %17 = OpFAdd %16 %15 
					                 f32_4 %18 = OpLoad %9 
					                 f32_4 %19 = OpVectorShuffle %18 %17 4 5 6 3 
					                               OpStore %9 %19 
					          Uniform f32* %26 = OpAccessChain %22 %24 
					                   f32 %27 = OpLoad %26 
					           Output f32* %31 = OpAccessChain %9 %29 
					                               OpStore %31 %27 
					                               OpReturn
					                               OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 138
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %96 %126 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %96 Location 96 
					                                                      OpDecorate %126 Location 126 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypePointer Input %50 
					                                 Input f32_3* %96 = OpVariable Input 
					                                         u32 %102 = OpConstant 0 
					                                             %103 = OpTypePointer Private %6 
					                                         u32 %116 = OpConstant 2 
					                                Private f32* %118 = OpVariable Private 
					                               Output f32_3* %126 = OpVariable Output 
					                                             %132 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_3 %97 = OpLoad %96 
					                               Uniform f32_4* %98 = OpAccessChain %21 %24 %23 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
					                                         f32 %101 = OpDot %97 %100 
					                                Private f32* %104 = OpAccessChain %9 %102 
					                                                      OpStore %104 %101 
					                                       f32_3 %105 = OpLoad %96 
					                              Uniform f32_4* %106 = OpAccessChain %21 %24 %24 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
					                                         f32 %109 = OpDot %105 %108 
					                                Private f32* %110 = OpAccessChain %9 %81 
					                                                      OpStore %110 %109 
					                                       f32_3 %111 = OpLoad %96 
					                              Uniform f32_4* %112 = OpAccessChain %21 %24 %36 
					                                       f32_4 %113 = OpLoad %112 
					                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
					                                         f32 %115 = OpDot %111 %114 
					                                Private f32* %117 = OpAccessChain %9 %116 
					                                                      OpStore %117 %115 
					                                       f32_4 %119 = OpLoad %9 
					                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
					                                       f32_4 %121 = OpLoad %9 
					                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
					                                         f32 %123 = OpDot %120 %122 
					                                                      OpStore %118 %123 
					                                         f32 %124 = OpLoad %118 
					                                         f32 %125 = OpExtInst %1 32 %124 
					                                                      OpStore %118 %125 
					                                         f32 %127 = OpLoad %118 
					                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
					                                       f32_4 %129 = OpLoad %9 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
					                                       f32_3 %131 = OpFMul %128 %130 
					                                                      OpStore %126 %131 
					                                 Output f32* %133 = OpAccessChain %85 %23 %81 
					                                         f32 %134 = OpLoad %133 
					                                         f32 %135 = OpFNegate %134 
					                                 Output f32* %136 = OpAccessChain %85 %23 %81 
					                                                      OpStore %136 %135 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 33
					; Schema: 0
					                               OpCapability Shader 
					                        %1 = OpExtInstImport "GLSL.std.450" 
					                               OpMemoryModel Logical GLSL450 
					                               OpEntryPoint Fragment %4 "main" %9 %12 
					                               OpExecutionMode %4 OriginUpperLeft 
					                               OpDecorate %9 RelaxedPrecision 
					                               OpDecorate %9 Location 9 
					                               OpDecorate %12 Location 12 
					                               OpMemberDecorate %20 0 RelaxedPrecision 
					                               OpMemberDecorate %20 0 Offset 20 
					                               OpDecorate %20 Block 
					                               OpDecorate %22 DescriptorSet 22 
					                               OpDecorate %22 Binding 22 
					                               OpDecorate %27 RelaxedPrecision 
					                        %2 = OpTypeVoid 
					                        %3 = OpTypeFunction %2 
					                        %6 = OpTypeFloat 32 
					                        %7 = OpTypeVector %6 4 
					                        %8 = OpTypePointer Output %7 
					          Output f32_4* %9 = OpVariable Output 
					                       %10 = OpTypeVector %6 3 
					                       %11 = OpTypePointer Input %10 
					          Input f32_3* %12 = OpVariable Input 
					                   f32 %14 = OpConstant 3.674022E-40 
					                 f32_3 %15 = OpConstantComposite %14 %14 %14 
					                       %20 = OpTypeStruct %6 
					                       %21 = OpTypePointer Uniform %20 
					Uniform struct {f32;}* %22 = OpVariable Uniform 
					                       %23 = OpTypeInt 32 1 
					                   i32 %24 = OpConstant 0 
					                       %25 = OpTypePointer Uniform %6 
					                       %28 = OpTypeInt 32 0 
					                   u32 %29 = OpConstant 3 
					                       %30 = OpTypePointer Output %6 
					                   void %4 = OpFunction None %3 
					                        %5 = OpLabel 
					                 f32_3 %13 = OpLoad %12 
					                 f32_3 %16 = OpFMul %13 %15 
					                 f32_3 %17 = OpFAdd %16 %15 
					                 f32_4 %18 = OpLoad %9 
					                 f32_4 %19 = OpVectorShuffle %18 %17 4 5 6 3 
					                               OpStore %9 %19 
					          Uniform f32* %26 = OpAccessChain %22 %24 
					                   f32 %27 = OpLoad %26 
					           Output f32* %31 = OpAccessChain %9 %29 
					                               OpStore %31 %27 
					                               OpReturn
					                               OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 138
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %96 %126 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate %52 Location 52 
					                                                      OpMemberDecorate %83 0 BuiltIn 83 
					                                                      OpMemberDecorate %83 1 BuiltIn 83 
					                                                      OpMemberDecorate %83 2 BuiltIn 83 
					                                                      OpDecorate %83 Block 
					                                                      OpDecorate %96 Location 96 
					                                                      OpDecorate %126 Location 126 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeArray %7 %15 
					                                              %19 = OpTypeStruct %16 %17 %18 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 0 
					                                          i32 %24 = OpConstant 1 
					                                              %25 = OpTypePointer Uniform %7 
					                                          i32 %36 = OpConstant 2 
					                               Private f32_4* %44 = OpVariable Private 
					                                          i32 %46 = OpConstant 3 
					                                              %50 = OpTypeVector %6 3 
					                                              %51 = OpTypePointer Output %50 
					                                Output f32_3* %52 = OpVariable Output 
					                                          u32 %81 = OpConstant 1 
					                                              %82 = OpTypeArray %6 %81 
					                                              %83 = OpTypeStruct %7 %6 %82 
					                                              %84 = OpTypePointer Output %83 
					         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
					                                              %93 = OpTypePointer Output %7 
					                                              %95 = OpTypePointer Input %50 
					                                 Input f32_3* %96 = OpVariable Input 
					                                         u32 %102 = OpConstant 0 
					                                             %103 = OpTypePointer Private %6 
					                                         u32 %116 = OpConstant 2 
					                                Private f32* %118 = OpVariable Private 
					                               Output f32_3* %126 = OpVariable Output 
					                                             %132 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
					                                        f32_4 %27 = OpLoad %26 
					                                        f32_4 %28 = OpFMul %13 %27 
					                                                      OpStore %9 %28 
					                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
					                                        f32_4 %30 = OpLoad %29 
					                                        f32_4 %31 = OpLoad %11 
					                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
					                                        f32_4 %33 = OpFMul %30 %32 
					                                        f32_4 %34 = OpLoad %9 
					                                        f32_4 %35 = OpFAdd %33 %34 
					                                                      OpStore %9 %35 
					                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
					                                        f32_4 %38 = OpLoad %37 
					                                        f32_4 %39 = OpLoad %11 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
					                                        f32_4 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpFAdd %41 %42 
					                                                      OpStore %9 %43 
					                                        f32_4 %45 = OpLoad %9 
					                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
					                                        f32_4 %48 = OpLoad %47 
					                                        f32_4 %49 = OpFAdd %45 %48 
					                                                      OpStore %44 %49 
					                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
					                                        f32_4 %56 = OpLoad %11 
					                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
					                                        f32_3 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %9 
					                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
					                                        f32_3 %61 = OpFAdd %58 %60 
					                                                      OpStore %52 %61 
					                                        f32_4 %62 = OpLoad %44 
					                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
					                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_4 %66 = OpFMul %63 %65 
					                                                      OpStore %9 %66 
					                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpLoad %44 
					                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
					                                        f32_4 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %9 
					                                        f32_4 %73 = OpFAdd %71 %72 
					                                                      OpStore %9 %73 
					                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpLoad %44 
					                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
					                                        f32_4 %78 = OpFMul %75 %77 
					                                        f32_4 %79 = OpLoad %9 
					                                        f32_4 %80 = OpFAdd %78 %79 
					                                                      OpStore %9 %80 
					                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpLoad %44 
					                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
					                                        f32_4 %90 = OpFMul %87 %89 
					                                        f32_4 %91 = OpLoad %9 
					                                        f32_4 %92 = OpFAdd %90 %91 
					                                Output f32_4* %94 = OpAccessChain %85 %23 
					                                                      OpStore %94 %92 
					                                        f32_3 %97 = OpLoad %96 
					                               Uniform f32_4* %98 = OpAccessChain %21 %24 %23 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
					                                         f32 %101 = OpDot %97 %100 
					                                Private f32* %104 = OpAccessChain %9 %102 
					                                                      OpStore %104 %101 
					                                       f32_3 %105 = OpLoad %96 
					                              Uniform f32_4* %106 = OpAccessChain %21 %24 %24 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
					                                         f32 %109 = OpDot %105 %108 
					                                Private f32* %110 = OpAccessChain %9 %81 
					                                                      OpStore %110 %109 
					                                       f32_3 %111 = OpLoad %96 
					                              Uniform f32_4* %112 = OpAccessChain %21 %24 %36 
					                                       f32_4 %113 = OpLoad %112 
					                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
					                                         f32 %115 = OpDot %111 %114 
					                                Private f32* %117 = OpAccessChain %9 %116 
					                                                      OpStore %117 %115 
					                                       f32_4 %119 = OpLoad %9 
					                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
					                                       f32_4 %121 = OpLoad %9 
					                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
					                                         f32 %123 = OpDot %120 %122 
					                                                      OpStore %118 %123 
					                                         f32 %124 = OpLoad %118 
					                                         f32 %125 = OpExtInst %1 32 %124 
					                                                      OpStore %118 %125 
					                                         f32 %127 = OpLoad %118 
					                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
					                                       f32_4 %129 = OpLoad %9 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
					                                       f32_3 %131 = OpFMul %128 %130 
					                                                      OpStore %126 %131 
					                                 Output f32* %133 = OpAccessChain %85 %23 %81 
					                                         f32 %134 = OpLoad %133 
					                                         f32 %135 = OpFNegate %134 
					                                 Output f32* %136 = OpAccessChain %85 %23 %81 
					                                                      OpStore %136 %135 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 33
					; Schema: 0
					                               OpCapability Shader 
					                        %1 = OpExtInstImport "GLSL.std.450" 
					                               OpMemoryModel Logical GLSL450 
					                               OpEntryPoint Fragment %4 "main" %9 %12 
					                               OpExecutionMode %4 OriginUpperLeft 
					                               OpDecorate %9 RelaxedPrecision 
					                               OpDecorate %9 Location 9 
					                               OpDecorate %12 Location 12 
					                               OpMemberDecorate %20 0 RelaxedPrecision 
					                               OpMemberDecorate %20 0 Offset 20 
					                               OpDecorate %20 Block 
					                               OpDecorate %22 DescriptorSet 22 
					                               OpDecorate %22 Binding 22 
					                               OpDecorate %27 RelaxedPrecision 
					                        %2 = OpTypeVoid 
					                        %3 = OpTypeFunction %2 
					                        %6 = OpTypeFloat 32 
					                        %7 = OpTypeVector %6 4 
					                        %8 = OpTypePointer Output %7 
					          Output f32_4* %9 = OpVariable Output 
					                       %10 = OpTypeVector %6 3 
					                       %11 = OpTypePointer Input %10 
					          Input f32_3* %12 = OpVariable Input 
					                   f32 %14 = OpConstant 3.674022E-40 
					                 f32_3 %15 = OpConstantComposite %14 %14 %14 
					                       %20 = OpTypeStruct %6 
					                       %21 = OpTypePointer Uniform %20 
					Uniform struct {f32;}* %22 = OpVariable Uniform 
					                       %23 = OpTypeInt 32 1 
					                   i32 %24 = OpConstant 0 
					                       %25 = OpTypePointer Uniform %6 
					                       %28 = OpTypeInt 32 0 
					                   u32 %29 = OpConstant 3 
					                       %30 = OpTypePointer Output %6 
					                   void %4 = OpFunction None %3 
					                        %5 = OpLabel 
					                 f32_3 %13 = OpLoad %12 
					                 f32_3 %16 = OpFMul %13 %15 
					                 f32_3 %17 = OpFAdd %16 %15 
					                 f32_4 %18 = OpLoad %9 
					                 f32_4 %19 = OpVectorShuffle %18 %17 4 5 6 3 
					                               OpStore %9 %19 
					          Uniform f32* %26 = OpAccessChain %22 %24 
					                   f32 %27 = OpLoad %26 
					           Output f32* %31 = OpAccessChain %9 %29 
					                               OpStore %31 %27 
					                               OpReturn
					                               OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					"spirv"
				}
			}
		}
		Pass {
			Name "PREPASS"
			LOD 400
			Tags { "LIGHTMODE" = "PREPASSFINAL" "RenderType" = "Opaque" }
			ZClip Off
			ZWrite Off
			GpuProgramID 205938
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ProjectionParams;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec3 tmpvar_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = 1.0;
					  tmpvar_6.xyz = _glesVertex.xyz;
					  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
					  highp vec3 tmpvar_7;
					  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_8;
					  tmpvar_8[0] = unity_WorldToObject[0].xyz;
					  tmpvar_8[1] = unity_WorldToObject[1].xyz;
					  tmpvar_8[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_9;
					  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
					  highp vec3 tmpvar_10;
					  highp vec3 I_11;
					  I_11 = (tmpvar_7 - _WorldSpaceCameraPos);
					  tmpvar_10 = (I_11 - (2.0 * (
					    dot (tmpvar_9, I_11)
					   * tmpvar_9)));
					  tmpvar_1 = tmpvar_10;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - tmpvar_7);
					  tmpvar_2 = tmpvar_12;
					  highp vec4 o_13;
					  highp vec4 tmpvar_14;
					  tmpvar_14 = (tmpvar_5 * 0.5);
					  highp vec2 tmpvar_15;
					  tmpvar_15.x = tmpvar_14.x;
					  tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
					  o_13.xy = (tmpvar_15 + tmpvar_14.w);
					  o_13.zw = tmpvar_5.zw;
					  tmpvar_3.zw = vec2(0.0, 0.0);
					  tmpvar_3.xy = vec2(0.0, 0.0);
					  highp mat3 tmpvar_16;
					  tmpvar_16[0] = unity_WorldToObject[0].xyz;
					  tmpvar_16[1] = unity_WorldToObject[1].xyz;
					  tmpvar_16[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_17;
					  tmpvar_17.w = 1.0;
					  tmpvar_17.xyz = normalize((_glesNormal * tmpvar_16));
					  mediump vec4 normal_18;
					  normal_18 = tmpvar_17;
					  mediump vec3 res_19;
					  mediump vec3 x_20;
					  x_20.x = dot (unity_SHAr, normal_18);
					  x_20.y = dot (unity_SHAg, normal_18);
					  x_20.z = dot (unity_SHAb, normal_18);
					  mediump vec3 x1_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22 = (normal_18.xyzz * normal_18.yzzx);
					  x1_21.x = dot (unity_SHBr, tmpvar_22);
					  x1_21.y = dot (unity_SHBg, tmpvar_22);
					  x1_21.z = dot (unity_SHBb, tmpvar_22);
					  res_19 = (x_20 + (x1_21 + (unity_SHC.xyz * 
					    ((normal_18.x * normal_18.x) - (normal_18.y * normal_18.y))
					  )));
					  mediump vec3 tmpvar_23;
					  tmpvar_23 = max (((1.055 * 
					    pow (max (res_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  res_19 = tmpvar_23;
					  tmpvar_4 = tmpvar_23;
					  gl_Position = tmpvar_5;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_9;
					  xlv_TEXCOORD3 = tmpvar_7;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = o_13;
					  xlv_TEXCOORD6 = tmpvar_3;
					  xlv_TEXCOORD7 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					uniform sampler2D _LightBuffer;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec4 c_2;
					  mediump vec4 light_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  highp vec3 tmpvar_6;
					  highp vec3 tmpvar_7;
					  mediump vec3 tmpvar_8;
					  tmpvar_8 = normalize(xlv_TEXCOORD4);
					  viewDir_5 = tmpvar_8;
					  tmpvar_6 = xlv_TEXCOORD1;
					  tmpvar_7 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_9;
					  lowp vec3 tmpvar_10;
					  lowp float tmpvar_11;
					  mediump float fres_12;
					  mediump float rim_13;
					  mediump float tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = clamp (dot (normalize(tmpvar_7), tmpvar_4), 0.0, 1.0);
					  tmpvar_14 = tmpvar_15;
					  rim_13 = (1.0 - tmpvar_14);
					  fres_12 = rim_13;
					  highp float tmpvar_16;
					  tmpvar_16 = pow (rim_13, _RimAmt);
					  rim_13 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = pow (fres_12, _FresAmt);
					  fres_12 = tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = clamp ((1.0 - (rim_13 * _RimPwr)), 0.0, 1.0);
					  tmpvar_9 = (_Color.xyz * tmpvar_18);
					  highp vec3 tmpvar_19;
					  tmpvar_19 = ((rim_13 * _RimColor) * _RimPwr).xyz;
					  tmpvar_9 = (tmpvar_9 + tmpvar_19);
					  tmpvar_11 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_13)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = textureCube (_Cube, tmpvar_6);
					  tmpvar_10 = ((tmpvar_20.xyz * _ReflectColor.xyz) * fres_12);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_LightBuffer, xlv_TEXCOORD5);
					  light_3 = tmpvar_21;
					  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
					  light_3.xyz = (light_3.xyz + xlv_TEXCOORD7);
					  lowp vec4 c_22;
					  lowp float spec_23;
					  mediump float tmpvar_24;
					  tmpvar_24 = (light_3.w * tmpvar_11);
					  spec_23 = tmpvar_24;
					  c_22.xyz = ((tmpvar_9 * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_23));
					  c_22.w = (tmpvar_20.w * _ReflectColor.w);
					  c_2 = c_22;
					  c_2.xyz = (c_2.xyz + tmpvar_10);
					  c_2.w = 1.0;
					  tmpvar_1 = c_2;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ProjectionParams;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec3 tmpvar_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = 1.0;
					  tmpvar_6.xyz = _glesVertex.xyz;
					  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
					  highp vec3 tmpvar_7;
					  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_8;
					  tmpvar_8[0] = unity_WorldToObject[0].xyz;
					  tmpvar_8[1] = unity_WorldToObject[1].xyz;
					  tmpvar_8[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_9;
					  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
					  highp vec3 tmpvar_10;
					  highp vec3 I_11;
					  I_11 = (tmpvar_7 - _WorldSpaceCameraPos);
					  tmpvar_10 = (I_11 - (2.0 * (
					    dot (tmpvar_9, I_11)
					   * tmpvar_9)));
					  tmpvar_1 = tmpvar_10;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - tmpvar_7);
					  tmpvar_2 = tmpvar_12;
					  highp vec4 o_13;
					  highp vec4 tmpvar_14;
					  tmpvar_14 = (tmpvar_5 * 0.5);
					  highp vec2 tmpvar_15;
					  tmpvar_15.x = tmpvar_14.x;
					  tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
					  o_13.xy = (tmpvar_15 + tmpvar_14.w);
					  o_13.zw = tmpvar_5.zw;
					  tmpvar_3.zw = vec2(0.0, 0.0);
					  tmpvar_3.xy = vec2(0.0, 0.0);
					  highp mat3 tmpvar_16;
					  tmpvar_16[0] = unity_WorldToObject[0].xyz;
					  tmpvar_16[1] = unity_WorldToObject[1].xyz;
					  tmpvar_16[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_17;
					  tmpvar_17.w = 1.0;
					  tmpvar_17.xyz = normalize((_glesNormal * tmpvar_16));
					  mediump vec4 normal_18;
					  normal_18 = tmpvar_17;
					  mediump vec3 res_19;
					  mediump vec3 x_20;
					  x_20.x = dot (unity_SHAr, normal_18);
					  x_20.y = dot (unity_SHAg, normal_18);
					  x_20.z = dot (unity_SHAb, normal_18);
					  mediump vec3 x1_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22 = (normal_18.xyzz * normal_18.yzzx);
					  x1_21.x = dot (unity_SHBr, tmpvar_22);
					  x1_21.y = dot (unity_SHBg, tmpvar_22);
					  x1_21.z = dot (unity_SHBb, tmpvar_22);
					  res_19 = (x_20 + (x1_21 + (unity_SHC.xyz * 
					    ((normal_18.x * normal_18.x) - (normal_18.y * normal_18.y))
					  )));
					  mediump vec3 tmpvar_23;
					  tmpvar_23 = max (((1.055 * 
					    pow (max (res_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  res_19 = tmpvar_23;
					  tmpvar_4 = tmpvar_23;
					  gl_Position = tmpvar_5;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_9;
					  xlv_TEXCOORD3 = tmpvar_7;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = o_13;
					  xlv_TEXCOORD6 = tmpvar_3;
					  xlv_TEXCOORD7 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					uniform sampler2D _LightBuffer;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec4 c_2;
					  mediump vec4 light_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  highp vec3 tmpvar_6;
					  highp vec3 tmpvar_7;
					  mediump vec3 tmpvar_8;
					  tmpvar_8 = normalize(xlv_TEXCOORD4);
					  viewDir_5 = tmpvar_8;
					  tmpvar_6 = xlv_TEXCOORD1;
					  tmpvar_7 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_9;
					  lowp vec3 tmpvar_10;
					  lowp float tmpvar_11;
					  mediump float fres_12;
					  mediump float rim_13;
					  mediump float tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = clamp (dot (normalize(tmpvar_7), tmpvar_4), 0.0, 1.0);
					  tmpvar_14 = tmpvar_15;
					  rim_13 = (1.0 - tmpvar_14);
					  fres_12 = rim_13;
					  highp float tmpvar_16;
					  tmpvar_16 = pow (rim_13, _RimAmt);
					  rim_13 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = pow (fres_12, _FresAmt);
					  fres_12 = tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = clamp ((1.0 - (rim_13 * _RimPwr)), 0.0, 1.0);
					  tmpvar_9 = (_Color.xyz * tmpvar_18);
					  highp vec3 tmpvar_19;
					  tmpvar_19 = ((rim_13 * _RimColor) * _RimPwr).xyz;
					  tmpvar_9 = (tmpvar_9 + tmpvar_19);
					  tmpvar_11 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_13)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = textureCube (_Cube, tmpvar_6);
					  tmpvar_10 = ((tmpvar_20.xyz * _ReflectColor.xyz) * fres_12);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_LightBuffer, xlv_TEXCOORD5);
					  light_3 = tmpvar_21;
					  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
					  light_3.xyz = (light_3.xyz + xlv_TEXCOORD7);
					  lowp vec4 c_22;
					  lowp float spec_23;
					  mediump float tmpvar_24;
					  tmpvar_24 = (light_3.w * tmpvar_11);
					  spec_23 = tmpvar_24;
					  c_22.xyz = ((tmpvar_9 * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_23));
					  c_22.w = (tmpvar_20.w * _ReflectColor.w);
					  c_2 = c_22;
					  c_2.xyz = (c_2.xyz + tmpvar_10);
					  c_2.w = 1.0;
					  tmpvar_1 = c_2;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ProjectionParams;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec3 tmpvar_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = 1.0;
					  tmpvar_6.xyz = _glesVertex.xyz;
					  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
					  highp vec3 tmpvar_7;
					  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_8;
					  tmpvar_8[0] = unity_WorldToObject[0].xyz;
					  tmpvar_8[1] = unity_WorldToObject[1].xyz;
					  tmpvar_8[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_9;
					  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
					  highp vec3 tmpvar_10;
					  highp vec3 I_11;
					  I_11 = (tmpvar_7 - _WorldSpaceCameraPos);
					  tmpvar_10 = (I_11 - (2.0 * (
					    dot (tmpvar_9, I_11)
					   * tmpvar_9)));
					  tmpvar_1 = tmpvar_10;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - tmpvar_7);
					  tmpvar_2 = tmpvar_12;
					  highp vec4 o_13;
					  highp vec4 tmpvar_14;
					  tmpvar_14 = (tmpvar_5 * 0.5);
					  highp vec2 tmpvar_15;
					  tmpvar_15.x = tmpvar_14.x;
					  tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
					  o_13.xy = (tmpvar_15 + tmpvar_14.w);
					  o_13.zw = tmpvar_5.zw;
					  tmpvar_3.zw = vec2(0.0, 0.0);
					  tmpvar_3.xy = vec2(0.0, 0.0);
					  highp mat3 tmpvar_16;
					  tmpvar_16[0] = unity_WorldToObject[0].xyz;
					  tmpvar_16[1] = unity_WorldToObject[1].xyz;
					  tmpvar_16[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_17;
					  tmpvar_17.w = 1.0;
					  tmpvar_17.xyz = normalize((_glesNormal * tmpvar_16));
					  mediump vec4 normal_18;
					  normal_18 = tmpvar_17;
					  mediump vec3 res_19;
					  mediump vec3 x_20;
					  x_20.x = dot (unity_SHAr, normal_18);
					  x_20.y = dot (unity_SHAg, normal_18);
					  x_20.z = dot (unity_SHAb, normal_18);
					  mediump vec3 x1_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22 = (normal_18.xyzz * normal_18.yzzx);
					  x1_21.x = dot (unity_SHBr, tmpvar_22);
					  x1_21.y = dot (unity_SHBg, tmpvar_22);
					  x1_21.z = dot (unity_SHBb, tmpvar_22);
					  res_19 = (x_20 + (x1_21 + (unity_SHC.xyz * 
					    ((normal_18.x * normal_18.x) - (normal_18.y * normal_18.y))
					  )));
					  mediump vec3 tmpvar_23;
					  tmpvar_23 = max (((1.055 * 
					    pow (max (res_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  res_19 = tmpvar_23;
					  tmpvar_4 = tmpvar_23;
					  gl_Position = tmpvar_5;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_9;
					  xlv_TEXCOORD3 = tmpvar_7;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = o_13;
					  xlv_TEXCOORD6 = tmpvar_3;
					  xlv_TEXCOORD7 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					uniform sampler2D _LightBuffer;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec4 c_2;
					  mediump vec4 light_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  highp vec3 tmpvar_6;
					  highp vec3 tmpvar_7;
					  mediump vec3 tmpvar_8;
					  tmpvar_8 = normalize(xlv_TEXCOORD4);
					  viewDir_5 = tmpvar_8;
					  tmpvar_6 = xlv_TEXCOORD1;
					  tmpvar_7 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_9;
					  lowp vec3 tmpvar_10;
					  lowp float tmpvar_11;
					  mediump float fres_12;
					  mediump float rim_13;
					  mediump float tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = clamp (dot (normalize(tmpvar_7), tmpvar_4), 0.0, 1.0);
					  tmpvar_14 = tmpvar_15;
					  rim_13 = (1.0 - tmpvar_14);
					  fres_12 = rim_13;
					  highp float tmpvar_16;
					  tmpvar_16 = pow (rim_13, _RimAmt);
					  rim_13 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = pow (fres_12, _FresAmt);
					  fres_12 = tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = clamp ((1.0 - (rim_13 * _RimPwr)), 0.0, 1.0);
					  tmpvar_9 = (_Color.xyz * tmpvar_18);
					  highp vec3 tmpvar_19;
					  tmpvar_19 = ((rim_13 * _RimColor) * _RimPwr).xyz;
					  tmpvar_9 = (tmpvar_9 + tmpvar_19);
					  tmpvar_11 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_13)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = textureCube (_Cube, tmpvar_6);
					  tmpvar_10 = ((tmpvar_20.xyz * _ReflectColor.xyz) * fres_12);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_LightBuffer, xlv_TEXCOORD5);
					  light_3 = tmpvar_21;
					  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
					  light_3.xyz = (light_3.xyz + xlv_TEXCOORD7);
					  lowp vec4 c_22;
					  lowp float spec_23;
					  mediump float tmpvar_24;
					  tmpvar_24 = (light_3.w * tmpvar_11);
					  spec_23 = tmpvar_24;
					  c_22.xyz = ((tmpvar_9 * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_23));
					  c_22.w = (tmpvar_20.w * _ReflectColor.w);
					  c_2 = c_22;
					  c_2.xyz = (c_2.xyz + tmpvar_10);
					  c_2.w = 1.0;
					  tmpvar_1 = c_2;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat18;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat20 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat20 = u_xlat20 + u_xlat20;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat20)) + (-u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD7.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp sampler2D _LightBuffer;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD7;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_8;
					vec2 u_xlat11;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat16_0.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_1 = log2(u_xlat16_0.x);
					    u_xlat1.xy = vec2(u_xlat16_1) * vec2(_RimAmt, _FresAmt);
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat1.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_0.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat11.x = (-u_xlat1.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = _Color.xyz * u_xlat11.xxx + u_xlat2.xyz;
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat10_1.x = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.x;
					    u_xlat1.x = u_xlat16_0.x * _FlakeAmt + _SpecColor.w;
					    u_xlat11.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10_0 = texture(_LightBuffer, u_xlat11.xy);
					    u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
					    u_xlat16_0 = log2(u_xlat16_0);
					    u_xlat16_3.x = u_xlat1.x * (-u_xlat16_0.w);
					    u_xlat1.xzw = (-u_xlat16_0.xyz) + vs_TEXCOORD7.xyz;
					    u_xlat16_8.xyz = u_xlat1.xzw * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat1.xzw + u_xlat16_3.xyz;
					    u_xlat10_1.xzw = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xzw * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat1.yyy + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat18;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat20 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat20 = u_xlat20 + u_xlat20;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat20)) + (-u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD7.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp sampler2D _LightBuffer;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD7;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_8;
					vec2 u_xlat11;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat16_0.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_1 = log2(u_xlat16_0.x);
					    u_xlat1.xy = vec2(u_xlat16_1) * vec2(_RimAmt, _FresAmt);
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat1.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_0.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat11.x = (-u_xlat1.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = _Color.xyz * u_xlat11.xxx + u_xlat2.xyz;
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat10_1.x = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.x;
					    u_xlat1.x = u_xlat16_0.x * _FlakeAmt + _SpecColor.w;
					    u_xlat11.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10_0 = texture(_LightBuffer, u_xlat11.xy);
					    u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
					    u_xlat16_0 = log2(u_xlat16_0);
					    u_xlat16_3.x = u_xlat1.x * (-u_xlat16_0.w);
					    u_xlat1.xzw = (-u_xlat16_0.xyz) + vs_TEXCOORD7.xyz;
					    u_xlat16_8.xyz = u_xlat1.xzw * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat1.xzw + u_xlat16_3.xyz;
					    u_xlat10_1.xzw = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xzw * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat1.yyy + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat18;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat20 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat20 = u_xlat20 + u_xlat20;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat20)) + (-u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD7.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp sampler2D _LightBuffer;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD7;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_8;
					vec2 u_xlat11;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat16_0.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_1 = log2(u_xlat16_0.x);
					    u_xlat1.xy = vec2(u_xlat16_1) * vec2(_RimAmt, _FresAmt);
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat1.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_0.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat11.x = (-u_xlat1.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = _Color.xyz * u_xlat11.xxx + u_xlat2.xyz;
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat10_1.x = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.x;
					    u_xlat1.x = u_xlat16_0.x * _FlakeAmt + _SpecColor.w;
					    u_xlat11.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10_0 = texture(_LightBuffer, u_xlat11.xy);
					    u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
					    u_xlat16_0 = log2(u_xlat16_0);
					    u_xlat16_3.x = u_xlat1.x * (-u_xlat16_0.w);
					    u_xlat1.xzw = (-u_xlat16_0.xyz) + vs_TEXCOORD7.xyz;
					    u_xlat16_8.xyz = u_xlat1.xzw * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat1.xzw + u_xlat16_3.xyz;
					    u_xlat10_1.xzw = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xzw * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat1.yyy + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 337
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %95 %101 %102 %124 %128 %188 %191 %193 %210 %222 %327 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 RelaxedPrecision 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 RelaxedPrecision 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 RelaxedPrecision 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 RelaxedPrecision 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpMemberDecorate %20 9 Offset 20 
					                                                      OpMemberDecorate %20 10 Offset 20 
					                                                      OpMemberDecorate %20 11 Offset 20 
					                                                      OpMemberDecorate %20 12 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %93 0 BuiltIn 93 
					                                                      OpMemberDecorate %93 1 BuiltIn 93 
					                                                      OpMemberDecorate %93 2 BuiltIn 93 
					                                                      OpDecorate %93 Block 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %124 Location 124 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %188 Location 188 
					                                                      OpDecorate %191 RelaxedPrecision 
					                                                      OpDecorate %191 Location 191 
					                                                      OpDecorate %193 Location 193 
					                                                      OpDecorate %210 Location 210 
					                                                      OpDecorate %222 Location 222 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %248 RelaxedPrecision 
					                                                      OpDecorate %251 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %263 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %273 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %295 RelaxedPrecision 
					                                                      OpDecorate %296 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %327 Location 327 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 9 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 11 
					                                          u32 %91 = OpConstant 1 
					                                              %92 = OpTypeArray %6 %91 
					                                              %93 = OpTypeStruct %7 %6 %92 
					                                              %94 = OpTypePointer Output %93 
					         Output struct {f32_4; f32; f32[1];}* %95 = OpVariable Output 
					                                              %97 = OpTypePointer Output %7 
					                                              %99 = OpTypeVector %6 2 
					                                             %100 = OpTypePointer Output %99 
					                               Output f32_2* %101 = OpVariable Output 
					                                Input f32_4* %102 = OpVariable Input 
					                                         i32 %105 = OpConstant 12 
					                                             %117 = OpTypePointer Uniform %14 
					                                             %123 = OpTypePointer Output %14 
					                               Output f32_3* %124 = OpVariable Output 
					                                             %127 = OpTypePointer Input %14 
					                                Input f32_3* %128 = OpVariable Input 
					                                         i32 %130 = OpConstant 10 
					                                         u32 %135 = OpConstant 0 
					                                             %136 = OpTypePointer Private %6 
					                                         u32 %149 = OpConstant 2 
					                                Private f32* %151 = OpVariable Private 
					                                Private f32* %166 = OpVariable Private 
					                                             %176 = OpTypePointer Private %14 
					                              Private f32_3* %177 = OpVariable Private 
					                               Output f32_3* %188 = OpVariable Output 
					                               Output f32_3* %191 = OpVariable Output 
					                               Output f32_3* %193 = OpVariable Output 
					                                             %198 = OpTypePointer Uniform %6 
					                                         f32 %205 = OpConstant 3.674022E-40 
					                                       f32_3 %206 = OpConstantComposite %205 %205 %205 
					                               Output f32_4* %210 = OpVariable Output 
					                               Output f32_4* %222 = OpVariable Output 
					                                         f32 %223 = OpConstant 3.674022E-40 
					                                       f32_4 %224 = OpConstantComposite %223 %223 %223 %223 
					                              Private f32_3* %225 = OpVariable Private 
					                              Private f32_4* %242 = OpVariable Private 
					                              Private f32_3* %248 = OpVariable Private 
					                                         i32 %249 = OpConstant 5 
					                                         i32 %255 = OpConstant 6 
					                                         i32 %261 = OpConstant 7 
					                                         i32 %267 = OpConstant 8 
					                                         f32 %276 = OpConstant 3.674022E-40 
					                                         u32 %277 = OpConstant 3 
					                                         i32 %289 = OpConstant 4 
					                                       f32_3 %299 = OpConstantComposite %223 %223 %223 
					                                         f32 %307 = OpConstant 3.674022E-40 
					                                       f32_3 %308 = OpConstantComposite %307 %307 %307 
					                                         f32 %319 = OpConstant 3.674022E-40 
					                                       f32_3 %320 = OpConstantComposite %319 %319 %319 
					                                         f32 %322 = OpConstant 3.674022E-40 
					                                       f32_3 %323 = OpConstantComposite %322 %322 %322 
					                               Output f32_3* %327 = OpVariable Output 
					                                             %331 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %84 = OpAccessChain %22 %66 %48 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpLoad %46 
					                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
					                                        f32_4 %88 = OpFMul %85 %87 
					                                        f32_4 %89 = OpLoad %63 
					                                        f32_4 %90 = OpFAdd %88 %89 
					                                                      OpStore %46 %90 
					                                        f32_4 %96 = OpLoad %46 
					                                Output f32_4* %98 = OpAccessChain %95 %30 
					                                                      OpStore %98 %96 
					                                       f32_4 %103 = OpLoad %102 
					                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
					                              Uniform f32_4* %106 = OpAccessChain %22 %105 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
					                                       f32_2 %109 = OpFMul %104 %108 
					                              Uniform f32_4* %110 = OpAccessChain %22 %105 
					                                       f32_4 %111 = OpLoad %110 
					                                       f32_2 %112 = OpVectorShuffle %111 %111 2 3 
					                                       f32_2 %113 = OpFAdd %109 %112 
					                                                      OpStore %101 %113 
					                                       f32_4 %114 = OpLoad %9 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                       f32_3 %116 = OpFNegate %115 
					                              Uniform f32_3* %118 = OpAccessChain %22 %30 
					                                       f32_3 %119 = OpLoad %118 
					                                       f32_3 %120 = OpFAdd %116 %119 
					                                       f32_4 %121 = OpLoad %63 
					                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
					                                                      OpStore %63 %122 
					                                       f32_4 %125 = OpLoad %9 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
					                                                      OpStore %124 %126 
					                                       f32_3 %129 = OpLoad %128 
					                              Uniform f32_4* %131 = OpAccessChain %22 %130 %30 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %129 %133 
					                                Private f32* %137 = OpAccessChain %9 %135 
					                                                      OpStore %137 %134 
					                                       f32_3 %138 = OpLoad %128 
					                              Uniform f32_4* %139 = OpAccessChain %22 %130 %25 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %9 %91 
					                                                      OpStore %143 %142 
					                                       f32_3 %144 = OpLoad %128 
					                              Uniform f32_4* %145 = OpAccessChain %22 %130 %38 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %144 %147 
					                                Private f32* %150 = OpAccessChain %9 %149 
					                                                      OpStore %150 %148 
					                                       f32_4 %152 = OpLoad %9 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                                      OpStore %151 %156 
					                                         f32 %157 = OpLoad %151 
					                                         f32 %158 = OpExtInst %1 32 %157 
					                                                      OpStore %151 %158 
					                                         f32 %159 = OpLoad %151 
					                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
					                                       f32_4 %161 = OpLoad %9 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %9 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %9 %165 
					                                       f32_4 %167 = OpLoad %63 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
					                                       f32_3 %169 = OpFNegate %168 
					                                       f32_4 %170 = OpLoad %9 
					                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                         f32 %172 = OpDot %169 %171 
					                                                      OpStore %166 %172 
					                                         f32 %173 = OpLoad %166 
					                                         f32 %174 = OpLoad %166 
					                                         f32 %175 = OpFAdd %173 %174 
					                                                      OpStore %166 %175 
					                                       f32_4 %178 = OpLoad %9 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpLoad %166 
					                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFMul %179 %182 
					                                       f32_4 %184 = OpLoad %63 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
					                                       f32_3 %186 = OpFNegate %185 
					                                       f32_3 %187 = OpFAdd %183 %186 
					                                                      OpStore %177 %187 
					                                       f32_4 %189 = OpLoad %63 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                                      OpStore %188 %190 
					                                       f32_3 %192 = OpLoad %177 
					                                                      OpStore %191 %192 
					                                       f32_4 %194 = OpLoad %9 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
					                                                      OpStore %193 %195 
					                                Private f32* %196 = OpAccessChain %46 %91 
					                                         f32 %197 = OpLoad %196 
					                                Uniform f32* %199 = OpAccessChain %22 %25 %135 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpFMul %197 %200 
					                                Private f32* %202 = OpAccessChain %46 %91 
					                                                      OpStore %202 %201 
					                                       f32_4 %203 = OpLoad %46 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 3 1 
					                                       f32_3 %207 = OpFMul %204 %206 
					                                       f32_4 %208 = OpLoad %63 
					                                       f32_4 %209 = OpVectorShuffle %208 %207 4 1 5 6 
					                                                      OpStore %63 %209 
					                                       f32_4 %211 = OpLoad %46 
					                                       f32_2 %212 = OpVectorShuffle %211 %211 2 3 
					                                       f32_4 %213 = OpLoad %210 
					                                       f32_4 %214 = OpVectorShuffle %213 %212 0 1 4 5 
					                                                      OpStore %210 %214 
					                                       f32_4 %215 = OpLoad %63 
					                                       f32_2 %216 = OpVectorShuffle %215 %215 2 2 
					                                       f32_4 %217 = OpLoad %63 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 3 
					                                       f32_2 %219 = OpFAdd %216 %218 
					                                       f32_4 %220 = OpLoad %210 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 2 3 
					                                                      OpStore %210 %221 
					                                                      OpStore %222 %224 
					                                Private f32* %226 = OpAccessChain %9 %91 
					                                         f32 %227 = OpLoad %226 
					                                Private f32* %228 = OpAccessChain %9 %91 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFMul %227 %229 
					                                Private f32* %231 = OpAccessChain %225 %135 
					                                                      OpStore %231 %230 
					                                Private f32* %232 = OpAccessChain %9 %135 
					                                         f32 %233 = OpLoad %232 
					                                Private f32* %234 = OpAccessChain %9 %135 
					                                         f32 %235 = OpLoad %234 
					                                         f32 %236 = OpFMul %233 %235 
					                                Private f32* %237 = OpAccessChain %225 %135 
					                                         f32 %238 = OpLoad %237 
					                                         f32 %239 = OpFNegate %238 
					                                         f32 %240 = OpFAdd %236 %239 
					                                Private f32* %241 = OpAccessChain %225 %135 
					                                                      OpStore %241 %240 
					                                       f32_4 %243 = OpLoad %9 
					                                       f32_4 %244 = OpVectorShuffle %243 %243 1 2 2 0 
					                                       f32_4 %245 = OpLoad %9 
					                                       f32_4 %246 = OpVectorShuffle %245 %245 0 1 2 2 
					                                       f32_4 %247 = OpFMul %244 %246 
					                                                      OpStore %242 %247 
					                              Uniform f32_4* %250 = OpAccessChain %22 %249 
					                                       f32_4 %251 = OpLoad %250 
					                                       f32_4 %252 = OpLoad %242 
					                                         f32 %253 = OpDot %251 %252 
					                                Private f32* %254 = OpAccessChain %248 %135 
					                                                      OpStore %254 %253 
					                              Uniform f32_4* %256 = OpAccessChain %22 %255 
					                                       f32_4 %257 = OpLoad %256 
					                                       f32_4 %258 = OpLoad %242 
					                                         f32 %259 = OpDot %257 %258 
					                                Private f32* %260 = OpAccessChain %248 %91 
					                                                      OpStore %260 %259 
					                              Uniform f32_4* %262 = OpAccessChain %22 %261 
					                                       f32_4 %263 = OpLoad %262 
					                                       f32_4 %264 = OpLoad %242 
					                                         f32 %265 = OpDot %263 %264 
					                                Private f32* %266 = OpAccessChain %248 %149 
					                                                      OpStore %266 %265 
					                              Uniform f32_4* %268 = OpAccessChain %22 %267 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
					                                       f32_3 %271 = OpLoad %225 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
					                                       f32_3 %273 = OpFMul %270 %272 
					                                       f32_3 %274 = OpLoad %248 
					                                       f32_3 %275 = OpFAdd %273 %274 
					                                                      OpStore %225 %275 
					                                Private f32* %278 = OpAccessChain %9 %277 
					                                                      OpStore %278 %276 
					                              Uniform f32_4* %279 = OpAccessChain %22 %38 
					                                       f32_4 %280 = OpLoad %279 
					                                       f32_4 %281 = OpLoad %9 
					                                         f32 %282 = OpDot %280 %281 
					                                Private f32* %283 = OpAccessChain %248 %135 
					                                                      OpStore %283 %282 
					                              Uniform f32_4* %284 = OpAccessChain %22 %48 
					                                       f32_4 %285 = OpLoad %284 
					                                       f32_4 %286 = OpLoad %9 
					                                         f32 %287 = OpDot %285 %286 
					                                Private f32* %288 = OpAccessChain %248 %91 
					                                                      OpStore %288 %287 
					                              Uniform f32_4* %290 = OpAccessChain %22 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_4 %292 = OpLoad %9 
					                                         f32 %293 = OpDot %291 %292 
					                                Private f32* %294 = OpAccessChain %248 %149 
					                                                      OpStore %294 %293 
					                                       f32_3 %295 = OpLoad %225 
					                                       f32_3 %296 = OpLoad %248 
					                                       f32_3 %297 = OpFAdd %295 %296 
					                                                      OpStore %225 %297 
					                                       f32_3 %298 = OpLoad %225 
					                                       f32_3 %300 = OpExtInst %1 40 %298 %299 
					                                                      OpStore %225 %300 
					                                       f32_3 %301 = OpLoad %225 
					                                       f32_3 %302 = OpExtInst %1 30 %301 
					                                       f32_4 %303 = OpLoad %9 
					                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
					                                                      OpStore %9 %304 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
					                                       f32_3 %309 = OpFMul %306 %308 
					                                       f32_4 %310 = OpLoad %9 
					                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
					                                                      OpStore %9 %311 
					                                       f32_4 %312 = OpLoad %9 
					                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
					                                       f32_3 %314 = OpExtInst %1 29 %313 
					                                       f32_4 %315 = OpLoad %9 
					                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
					                                                      OpStore %9 %316 
					                                       f32_4 %317 = OpLoad %9 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
					                                       f32_3 %321 = OpFMul %318 %320 
					                                       f32_3 %324 = OpFAdd %321 %323 
					                                       f32_4 %325 = OpLoad %9 
					                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
					                                                      OpStore %9 %326 
					                                       f32_4 %328 = OpLoad %9 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_3 %330 = OpExtInst %1 40 %329 %299 
					                                                      OpStore %327 %330 
					                                 Output f32* %332 = OpAccessChain %95 %30 %91 
					                                         f32 %333 = OpLoad %332 
					                                         f32 %334 = OpFNegate %333 
					                                 Output f32* %335 = OpAccessChain %95 %30 %91 
					                                                      OpStore %335 %334 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 243
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %33 %137 %161 %189 %216 %231 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %9 RelaxedPrecision 
					                                                      OpDecorate %12 RelaxedPrecision 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %13 RelaxedPrecision 
					                                                      OpDecorate %14 RelaxedPrecision 
					                                                      OpDecorate %15 RelaxedPrecision 
					                                                      OpDecorate %21 RelaxedPrecision 
					                                                      OpDecorate %22 RelaxedPrecision 
					                                                      OpDecorate %24 RelaxedPrecision 
					                                                      OpDecorate %25 RelaxedPrecision 
					                                                      OpDecorate %26 RelaxedPrecision 
					                                                      OpDecorate %27 RelaxedPrecision 
					                                                      OpDecorate %31 RelaxedPrecision 
					                                                      OpDecorate %32 RelaxedPrecision 
					                                                      OpDecorate %33 Location 33 
					                                                      OpDecorate %48 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %52 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 Offset 55 
					                                                      OpMemberDecorate %55 1 RelaxedPrecision 
					                                                      OpMemberDecorate %55 1 Offset 55 
					                                                      OpMemberDecorate %55 2 RelaxedPrecision 
					                                                      OpMemberDecorate %55 2 Offset 55 
					                                                      OpMemberDecorate %55 3 Offset 55 
					                                                      OpMemberDecorate %55 4 Offset 55 
					                                                      OpMemberDecorate %55 5 Offset 55 
					                                                      OpMemberDecorate %55 6 Offset 55 
					                                                      OpMemberDecorate %55 7 RelaxedPrecision 
					                                                      OpMemberDecorate %55 7 Offset 55 
					                                                      OpDecorate %55 Block 
					                                                      OpDecorate %57 DescriptorSet 57 
					                                                      OpDecorate %57 Binding 57 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %119 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %134 RelaxedPrecision 
					                                                      OpDecorate %134 DescriptorSet 134 
					                                                      OpDecorate %134 Binding 134 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %137 Location 137 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %168 DescriptorSet 168 
					                                                      OpDecorate %168 Binding 168 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %175 RelaxedPrecision 
					                                                      OpDecorate %176 RelaxedPrecision 
					                                                      OpDecorate %177 RelaxedPrecision 
					                                                      OpDecorate %178 RelaxedPrecision 
					                                                      OpDecorate %182 RelaxedPrecision 
					                                                      OpDecorate %183 RelaxedPrecision 
					                                                      OpDecorate %186 RelaxedPrecision 
					                                                      OpDecorate %187 RelaxedPrecision 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %201 RelaxedPrecision 
					                                                      OpDecorate %202 RelaxedPrecision 
					                                                      OpDecorate %203 RelaxedPrecision 
					                                                      OpDecorate %204 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %214 DescriptorSet 214 
					                                                      OpDecorate %214 Binding 214 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %216 Location 216 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %231 Location 231 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 0 
					                                              %18 = OpTypePointer Private %6 
					                               Private f32_4* %30 = OpVariable Private 
					                                 Input f32_3* %33 = OpVariable Input 
					                                          f32 %39 = OpConstant 3.674022E-40 
					                                          f32 %40 = OpConstant 3.674022E-40 
					                                 Private f32* %48 = OpVariable Private 
					                                              %53 = OpTypeVector %6 2 
					                                              %55 = OpTypeStruct %7 %7 %7 %6 %6 %6 %6 %7 
					                                              %56 = OpTypePointer Uniform %55 
					Uniform struct {f32_4; f32_4; f32_4; f32; f32; f32; f32; f32_4;}* %57 = OpVariable Uniform 
					                                              %58 = OpTypeInt 32 1 
					                                          i32 %59 = OpConstant 5 
					                                              %60 = OpTypePointer Uniform %6 
					                                          i32 %63 = OpConstant 3 
					                                          i32 %77 = OpConstant 7 
					                                              %78 = OpTypePointer Uniform %7 
					                                              %85 = OpTypePointer Private %10 
					                               Private f32_3* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 6 
					                                             %102 = OpTypePointer Private %53 
					                              Private f32_2* %103 = OpVariable Private 
					                                         i32 %116 = OpConstant 1 
					                              Private f32_4* %130 = OpVariable Private 
					                                             %131 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %132 = OpTypeSampledImage %131 
					                                             %133 = OpTypePointer UniformConstant %132 
					 UniformConstant read_only Texture2DSampled* %134 = OpVariable UniformConstant 
					                                             %136 = OpTypePointer Input %53 
					                                Input f32_2* %137 = OpVariable Input 
					                                         u32 %140 = OpConstant 3 
					                                         i32 %151 = OpConstant 4 
					                                         i32 %155 = OpConstant 0 
					                                             %160 = OpTypePointer Input %7 
					                                Input f32_4* %161 = OpVariable Input 
					                              Private f32_4* %167 = OpVariable Private 
					 UniformConstant read_only Texture2DSampled* %168 = OpVariable UniformConstant 
					                                         f32 %173 = OpConstant 3.674022E-40 
					                                       f32_4 %174 = OpConstantComposite %173 %173 %173 %173 
					                              Private f32_3* %178 = OpVariable Private 
					                                Input f32_3* %189 = OpVariable Input 
					                              Private f32_3* %194 = OpVariable Private 
					                                             %211 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %212 = OpTypeSampledImage %211 
					                                             %213 = OpTypePointer UniformConstant %212 
					UniformConstant read_only TextureCubeSampled* %214 = OpVariable UniformConstant 
					                                Input f32_3* %216 = OpVariable Input 
					                              Private f32_3* %222 = OpVariable Private 
					                                         i32 %225 = OpConstant 2 
					                                             %230 = OpTypePointer Output %7 
					                               Output f32_4* %231 = OpVariable Output 
					                                             %240 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_3 %14 = OpLoad %12 
					                                          f32 %15 = OpDot %13 %14 
					                                 Private f32* %19 = OpAccessChain %9 %17 
					                                                      OpStore %19 %15 
					                                 Private f32* %20 = OpAccessChain %9 %17 
					                                          f32 %21 = OpLoad %20 
					                                          f32 %22 = OpExtInst %1 32 %21 
					                                 Private f32* %23 = OpAccessChain %9 %17 
					                                                      OpStore %23 %22 
					                                        f32_4 %24 = OpLoad %9 
					                                        f32_3 %25 = OpVectorShuffle %24 %24 0 0 0 
					                                        f32_3 %26 = OpLoad %12 
					                                        f32_3 %27 = OpFMul %25 %26 
					                                        f32_4 %28 = OpLoad %9 
					                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
					                                                      OpStore %9 %29 
					                                        f32_4 %31 = OpLoad %9 
					                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
					                                        f32_3 %34 = OpLoad %33 
					                                          f32 %35 = OpDot %32 %34 
					                                 Private f32* %36 = OpAccessChain %30 %17 
					                                                      OpStore %36 %35 
					                                 Private f32* %37 = OpAccessChain %30 %17 
					                                          f32 %38 = OpLoad %37 
					                                          f32 %41 = OpExtInst %1 43 %38 %39 %40 
					                                 Private f32* %42 = OpAccessChain %30 %17 
					                                                      OpStore %42 %41 
					                                 Private f32* %43 = OpAccessChain %30 %17 
					                                          f32 %44 = OpLoad %43 
					                                          f32 %45 = OpFNegate %44 
					                                          f32 %46 = OpFAdd %45 %40 
					                                 Private f32* %47 = OpAccessChain %9 %17 
					                                                      OpStore %47 %46 
					                                 Private f32* %49 = OpAccessChain %9 %17 
					                                          f32 %50 = OpLoad %49 
					                                          f32 %51 = OpExtInst %1 30 %50 
					                                                      OpStore %48 %51 
					                                          f32 %52 = OpLoad %48 
					                                        f32_2 %54 = OpCompositeConstruct %52 %52 
					                                 Uniform f32* %61 = OpAccessChain %57 %59 
					                                          f32 %62 = OpLoad %61 
					                                 Uniform f32* %64 = OpAccessChain %57 %63 
					                                          f32 %65 = OpLoad %64 
					                                        f32_2 %66 = OpCompositeConstruct %62 %65 
					                                        f32_2 %67 = OpFMul %54 %66 
					                                        f32_4 %68 = OpLoad %30 
					                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 2 3 
					                                                      OpStore %30 %69 
					                                        f32_4 %70 = OpLoad %30 
					                                        f32_2 %71 = OpVectorShuffle %70 %70 0 1 
					                                        f32_2 %72 = OpExtInst %1 29 %71 
					                                        f32_4 %73 = OpLoad %30 
					                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 2 3 
					                                                      OpStore %30 %74 
					                                        f32_4 %75 = OpLoad %30 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 0 0 
					                               Uniform f32_4* %79 = OpAccessChain %57 %77 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
					                                        f32_3 %82 = OpFMul %76 %81 
					                                        f32_4 %83 = OpLoad %9 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
					                                                      OpStore %9 %84 
					                                        f32_4 %87 = OpLoad %9 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                 Uniform f32* %90 = OpAccessChain %57 %89 
					                                          f32 %91 = OpLoad %90 
					                                 Uniform f32* %92 = OpAccessChain %57 %89 
					                                          f32 %93 = OpLoad %92 
					                                 Uniform f32* %94 = OpAccessChain %57 %89 
					                                          f32 %95 = OpLoad %94 
					                                        f32_3 %96 = OpCompositeConstruct %91 %93 %95 
					                                          f32 %97 = OpCompositeExtract %96 0 
					                                          f32 %98 = OpCompositeExtract %96 1 
					                                          f32 %99 = OpCompositeExtract %96 2 
					                                       f32_3 %100 = OpCompositeConstruct %97 %98 %99 
					                                       f32_3 %101 = OpFMul %88 %100 
					                                                      OpStore %86 %101 
					                                Private f32* %104 = OpAccessChain %30 %17 
					                                         f32 %105 = OpLoad %104 
					                                         f32 %106 = OpFNegate %105 
					                                Uniform f32* %107 = OpAccessChain %57 %89 
					                                         f32 %108 = OpLoad %107 
					                                         f32 %109 = OpFMul %106 %108 
					                                         f32 %110 = OpFAdd %109 %40 
					                                Private f32* %111 = OpAccessChain %103 %17 
					                                                      OpStore %111 %110 
					                                Private f32* %112 = OpAccessChain %103 %17 
					                                         f32 %113 = OpLoad %112 
					                                         f32 %114 = OpExtInst %1 43 %113 %39 %40 
					                                Private f32* %115 = OpAccessChain %103 %17 
					                                                      OpStore %115 %114 
					                              Uniform f32_4* %117 = OpAccessChain %57 %116 
					                                       f32_4 %118 = OpLoad %117 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_2 %120 = OpLoad %103 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
					                                       f32_3 %122 = OpFMul %119 %121 
					                                       f32_3 %123 = OpLoad %86 
					                                       f32_3 %124 = OpFAdd %122 %123 
					                                                      OpStore %86 %124 
					                                Private f32* %125 = OpAccessChain %30 %17 
					                                         f32 %126 = OpLoad %125 
					                                         f32 %127 = OpFNegate %126 
					                                         f32 %128 = OpFAdd %127 %40 
					                                Private f32* %129 = OpAccessChain %9 %17 
					                                                      OpStore %129 %128 
					                  read_only Texture2DSampled %135 = OpLoad %134 
					                                       f32_2 %138 = OpLoad %137 
					                                       f32_4 %139 = OpImageSampleImplicitLod %135 %138 
					                                         f32 %141 = OpCompositeExtract %139 3 
					                                Private f32* %142 = OpAccessChain %130 %17 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %9 %17 
					                                         f32 %144 = OpLoad %143 
					                                Private f32* %145 = OpAccessChain %130 %17 
					                                         f32 %146 = OpLoad %145 
					                                         f32 %147 = OpFMul %144 %146 
					                                Private f32* %148 = OpAccessChain %9 %17 
					                                                      OpStore %148 %147 
					                                Private f32* %149 = OpAccessChain %9 %17 
					                                         f32 %150 = OpLoad %149 
					                                Uniform f32* %152 = OpAccessChain %57 %151 
					                                         f32 %153 = OpLoad %152 
					                                         f32 %154 = OpFMul %150 %153 
					                                Uniform f32* %156 = OpAccessChain %57 %155 %140 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpFAdd %154 %157 
					                                Private f32* %159 = OpAccessChain %30 %17 
					                                                      OpStore %159 %158 
					                                       f32_4 %162 = OpLoad %161 
					                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
					                                       f32_4 %164 = OpLoad %161 
					                                       f32_2 %165 = OpVectorShuffle %164 %164 3 3 
					                                       f32_2 %166 = OpFDiv %163 %165 
					                                                      OpStore %103 %166 
					                  read_only Texture2DSampled %169 = OpLoad %168 
					                                       f32_2 %170 = OpLoad %103 
					                                       f32_4 %171 = OpImageSampleImplicitLod %169 %170 
					                                                      OpStore %167 %171 
					                                       f32_4 %172 = OpLoad %167 
					                                       f32_4 %175 = OpExtInst %1 40 %172 %174 
					                                                      OpStore %9 %175 
					                                       f32_4 %176 = OpLoad %9 
					                                       f32_4 %177 = OpExtInst %1 30 %176 
					                                                      OpStore %9 %177 
					                                Private f32* %179 = OpAccessChain %30 %17 
					                                         f32 %180 = OpLoad %179 
					                                Private f32* %181 = OpAccessChain %9 %140 
					                                         f32 %182 = OpLoad %181 
					                                         f32 %183 = OpFNegate %182 
					                                         f32 %184 = OpFMul %180 %183 
					                                Private f32* %185 = OpAccessChain %178 %17 
					                                                      OpStore %185 %184 
					                                       f32_4 %186 = OpLoad %9 
					                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
					                                       f32_3 %188 = OpFNegate %187 
					                                       f32_3 %190 = OpLoad %189 
					                                       f32_3 %191 = OpFAdd %188 %190 
					                                       f32_4 %192 = OpLoad %30 
					                                       f32_4 %193 = OpVectorShuffle %192 %191 4 1 5 6 
					                                                      OpStore %30 %193 
					                                       f32_4 %195 = OpLoad %30 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 2 3 
					                              Uniform f32_4* %197 = OpAccessChain %57 %155 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                       f32_3 %200 = OpFMul %196 %199 
					                                                      OpStore %194 %200 
					                                       f32_3 %201 = OpLoad %178 
					                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
					                                       f32_3 %203 = OpLoad %194 
					                                       f32_3 %204 = OpFMul %202 %203 
					                                                      OpStore %178 %204 
					                                       f32_3 %205 = OpLoad %86 
					                                       f32_4 %206 = OpLoad %30 
					                                       f32_3 %207 = OpVectorShuffle %206 %206 0 2 3 
					                                       f32_3 %208 = OpFMul %205 %207 
					                                       f32_3 %209 = OpLoad %178 
					                                       f32_3 %210 = OpFAdd %208 %209 
					                                                      OpStore %178 %210 
					                read_only TextureCubeSampled %215 = OpLoad %214 
					                                       f32_3 %217 = OpLoad %216 
					                                       f32_4 %218 = OpImageSampleImplicitLod %215 %217 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                       f32_4 %220 = OpLoad %130 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 1 5 6 
					                                                      OpStore %130 %221 
					                                       f32_4 %223 = OpLoad %130 
					                                       f32_3 %224 = OpVectorShuffle %223 %223 0 2 3 
					                              Uniform f32_4* %226 = OpAccessChain %57 %225 
					                                       f32_4 %227 = OpLoad %226 
					                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
					                                       f32_3 %229 = OpFMul %224 %228 
					                                                      OpStore %222 %229 
					                                       f32_3 %232 = OpLoad %222 
					                                       f32_4 %233 = OpLoad %30 
					                                       f32_3 %234 = OpVectorShuffle %233 %233 1 1 1 
					                                       f32_3 %235 = OpFMul %232 %234 
					                                       f32_3 %236 = OpLoad %178 
					                                       f32_3 %237 = OpFAdd %235 %236 
					                                       f32_4 %238 = OpLoad %231 
					                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
					                                                      OpStore %231 %239 
					                                 Output f32* %241 = OpAccessChain %231 %140 
					                                                      OpStore %241 %40 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 337
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %95 %101 %102 %124 %128 %188 %191 %193 %210 %222 %327 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 RelaxedPrecision 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 RelaxedPrecision 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 RelaxedPrecision 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 RelaxedPrecision 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpMemberDecorate %20 9 Offset 20 
					                                                      OpMemberDecorate %20 10 Offset 20 
					                                                      OpMemberDecorate %20 11 Offset 20 
					                                                      OpMemberDecorate %20 12 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %93 0 BuiltIn 93 
					                                                      OpMemberDecorate %93 1 BuiltIn 93 
					                                                      OpMemberDecorate %93 2 BuiltIn 93 
					                                                      OpDecorate %93 Block 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %124 Location 124 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %188 Location 188 
					                                                      OpDecorate %191 RelaxedPrecision 
					                                                      OpDecorate %191 Location 191 
					                                                      OpDecorate %193 Location 193 
					                                                      OpDecorate %210 Location 210 
					                                                      OpDecorate %222 Location 222 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %248 RelaxedPrecision 
					                                                      OpDecorate %251 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %263 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %273 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %295 RelaxedPrecision 
					                                                      OpDecorate %296 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %327 Location 327 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 9 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 11 
					                                          u32 %91 = OpConstant 1 
					                                              %92 = OpTypeArray %6 %91 
					                                              %93 = OpTypeStruct %7 %6 %92 
					                                              %94 = OpTypePointer Output %93 
					         Output struct {f32_4; f32; f32[1];}* %95 = OpVariable Output 
					                                              %97 = OpTypePointer Output %7 
					                                              %99 = OpTypeVector %6 2 
					                                             %100 = OpTypePointer Output %99 
					                               Output f32_2* %101 = OpVariable Output 
					                                Input f32_4* %102 = OpVariable Input 
					                                         i32 %105 = OpConstant 12 
					                                             %117 = OpTypePointer Uniform %14 
					                                             %123 = OpTypePointer Output %14 
					                               Output f32_3* %124 = OpVariable Output 
					                                             %127 = OpTypePointer Input %14 
					                                Input f32_3* %128 = OpVariable Input 
					                                         i32 %130 = OpConstant 10 
					                                         u32 %135 = OpConstant 0 
					                                             %136 = OpTypePointer Private %6 
					                                         u32 %149 = OpConstant 2 
					                                Private f32* %151 = OpVariable Private 
					                                Private f32* %166 = OpVariable Private 
					                                             %176 = OpTypePointer Private %14 
					                              Private f32_3* %177 = OpVariable Private 
					                               Output f32_3* %188 = OpVariable Output 
					                               Output f32_3* %191 = OpVariable Output 
					                               Output f32_3* %193 = OpVariable Output 
					                                             %198 = OpTypePointer Uniform %6 
					                                         f32 %205 = OpConstant 3.674022E-40 
					                                       f32_3 %206 = OpConstantComposite %205 %205 %205 
					                               Output f32_4* %210 = OpVariable Output 
					                               Output f32_4* %222 = OpVariable Output 
					                                         f32 %223 = OpConstant 3.674022E-40 
					                                       f32_4 %224 = OpConstantComposite %223 %223 %223 %223 
					                              Private f32_3* %225 = OpVariable Private 
					                              Private f32_4* %242 = OpVariable Private 
					                              Private f32_3* %248 = OpVariable Private 
					                                         i32 %249 = OpConstant 5 
					                                         i32 %255 = OpConstant 6 
					                                         i32 %261 = OpConstant 7 
					                                         i32 %267 = OpConstant 8 
					                                         f32 %276 = OpConstant 3.674022E-40 
					                                         u32 %277 = OpConstant 3 
					                                         i32 %289 = OpConstant 4 
					                                       f32_3 %299 = OpConstantComposite %223 %223 %223 
					                                         f32 %307 = OpConstant 3.674022E-40 
					                                       f32_3 %308 = OpConstantComposite %307 %307 %307 
					                                         f32 %319 = OpConstant 3.674022E-40 
					                                       f32_3 %320 = OpConstantComposite %319 %319 %319 
					                                         f32 %322 = OpConstant 3.674022E-40 
					                                       f32_3 %323 = OpConstantComposite %322 %322 %322 
					                               Output f32_3* %327 = OpVariable Output 
					                                             %331 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %84 = OpAccessChain %22 %66 %48 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpLoad %46 
					                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
					                                        f32_4 %88 = OpFMul %85 %87 
					                                        f32_4 %89 = OpLoad %63 
					                                        f32_4 %90 = OpFAdd %88 %89 
					                                                      OpStore %46 %90 
					                                        f32_4 %96 = OpLoad %46 
					                                Output f32_4* %98 = OpAccessChain %95 %30 
					                                                      OpStore %98 %96 
					                                       f32_4 %103 = OpLoad %102 
					                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
					                              Uniform f32_4* %106 = OpAccessChain %22 %105 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
					                                       f32_2 %109 = OpFMul %104 %108 
					                              Uniform f32_4* %110 = OpAccessChain %22 %105 
					                                       f32_4 %111 = OpLoad %110 
					                                       f32_2 %112 = OpVectorShuffle %111 %111 2 3 
					                                       f32_2 %113 = OpFAdd %109 %112 
					                                                      OpStore %101 %113 
					                                       f32_4 %114 = OpLoad %9 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                       f32_3 %116 = OpFNegate %115 
					                              Uniform f32_3* %118 = OpAccessChain %22 %30 
					                                       f32_3 %119 = OpLoad %118 
					                                       f32_3 %120 = OpFAdd %116 %119 
					                                       f32_4 %121 = OpLoad %63 
					                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
					                                                      OpStore %63 %122 
					                                       f32_4 %125 = OpLoad %9 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
					                                                      OpStore %124 %126 
					                                       f32_3 %129 = OpLoad %128 
					                              Uniform f32_4* %131 = OpAccessChain %22 %130 %30 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %129 %133 
					                                Private f32* %137 = OpAccessChain %9 %135 
					                                                      OpStore %137 %134 
					                                       f32_3 %138 = OpLoad %128 
					                              Uniform f32_4* %139 = OpAccessChain %22 %130 %25 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %9 %91 
					                                                      OpStore %143 %142 
					                                       f32_3 %144 = OpLoad %128 
					                              Uniform f32_4* %145 = OpAccessChain %22 %130 %38 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %144 %147 
					                                Private f32* %150 = OpAccessChain %9 %149 
					                                                      OpStore %150 %148 
					                                       f32_4 %152 = OpLoad %9 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                                      OpStore %151 %156 
					                                         f32 %157 = OpLoad %151 
					                                         f32 %158 = OpExtInst %1 32 %157 
					                                                      OpStore %151 %158 
					                                         f32 %159 = OpLoad %151 
					                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
					                                       f32_4 %161 = OpLoad %9 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %9 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %9 %165 
					                                       f32_4 %167 = OpLoad %63 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
					                                       f32_3 %169 = OpFNegate %168 
					                                       f32_4 %170 = OpLoad %9 
					                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                         f32 %172 = OpDot %169 %171 
					                                                      OpStore %166 %172 
					                                         f32 %173 = OpLoad %166 
					                                         f32 %174 = OpLoad %166 
					                                         f32 %175 = OpFAdd %173 %174 
					                                                      OpStore %166 %175 
					                                       f32_4 %178 = OpLoad %9 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpLoad %166 
					                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFMul %179 %182 
					                                       f32_4 %184 = OpLoad %63 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
					                                       f32_3 %186 = OpFNegate %185 
					                                       f32_3 %187 = OpFAdd %183 %186 
					                                                      OpStore %177 %187 
					                                       f32_4 %189 = OpLoad %63 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                                      OpStore %188 %190 
					                                       f32_3 %192 = OpLoad %177 
					                                                      OpStore %191 %192 
					                                       f32_4 %194 = OpLoad %9 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
					                                                      OpStore %193 %195 
					                                Private f32* %196 = OpAccessChain %46 %91 
					                                         f32 %197 = OpLoad %196 
					                                Uniform f32* %199 = OpAccessChain %22 %25 %135 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpFMul %197 %200 
					                                Private f32* %202 = OpAccessChain %46 %91 
					                                                      OpStore %202 %201 
					                                       f32_4 %203 = OpLoad %46 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 3 1 
					                                       f32_3 %207 = OpFMul %204 %206 
					                                       f32_4 %208 = OpLoad %63 
					                                       f32_4 %209 = OpVectorShuffle %208 %207 4 1 5 6 
					                                                      OpStore %63 %209 
					                                       f32_4 %211 = OpLoad %46 
					                                       f32_2 %212 = OpVectorShuffle %211 %211 2 3 
					                                       f32_4 %213 = OpLoad %210 
					                                       f32_4 %214 = OpVectorShuffle %213 %212 0 1 4 5 
					                                                      OpStore %210 %214 
					                                       f32_4 %215 = OpLoad %63 
					                                       f32_2 %216 = OpVectorShuffle %215 %215 2 2 
					                                       f32_4 %217 = OpLoad %63 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 3 
					                                       f32_2 %219 = OpFAdd %216 %218 
					                                       f32_4 %220 = OpLoad %210 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 2 3 
					                                                      OpStore %210 %221 
					                                                      OpStore %222 %224 
					                                Private f32* %226 = OpAccessChain %9 %91 
					                                         f32 %227 = OpLoad %226 
					                                Private f32* %228 = OpAccessChain %9 %91 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFMul %227 %229 
					                                Private f32* %231 = OpAccessChain %225 %135 
					                                                      OpStore %231 %230 
					                                Private f32* %232 = OpAccessChain %9 %135 
					                                         f32 %233 = OpLoad %232 
					                                Private f32* %234 = OpAccessChain %9 %135 
					                                         f32 %235 = OpLoad %234 
					                                         f32 %236 = OpFMul %233 %235 
					                                Private f32* %237 = OpAccessChain %225 %135 
					                                         f32 %238 = OpLoad %237 
					                                         f32 %239 = OpFNegate %238 
					                                         f32 %240 = OpFAdd %236 %239 
					                                Private f32* %241 = OpAccessChain %225 %135 
					                                                      OpStore %241 %240 
					                                       f32_4 %243 = OpLoad %9 
					                                       f32_4 %244 = OpVectorShuffle %243 %243 1 2 2 0 
					                                       f32_4 %245 = OpLoad %9 
					                                       f32_4 %246 = OpVectorShuffle %245 %245 0 1 2 2 
					                                       f32_4 %247 = OpFMul %244 %246 
					                                                      OpStore %242 %247 
					                              Uniform f32_4* %250 = OpAccessChain %22 %249 
					                                       f32_4 %251 = OpLoad %250 
					                                       f32_4 %252 = OpLoad %242 
					                                         f32 %253 = OpDot %251 %252 
					                                Private f32* %254 = OpAccessChain %248 %135 
					                                                      OpStore %254 %253 
					                              Uniform f32_4* %256 = OpAccessChain %22 %255 
					                                       f32_4 %257 = OpLoad %256 
					                                       f32_4 %258 = OpLoad %242 
					                                         f32 %259 = OpDot %257 %258 
					                                Private f32* %260 = OpAccessChain %248 %91 
					                                                      OpStore %260 %259 
					                              Uniform f32_4* %262 = OpAccessChain %22 %261 
					                                       f32_4 %263 = OpLoad %262 
					                                       f32_4 %264 = OpLoad %242 
					                                         f32 %265 = OpDot %263 %264 
					                                Private f32* %266 = OpAccessChain %248 %149 
					                                                      OpStore %266 %265 
					                              Uniform f32_4* %268 = OpAccessChain %22 %267 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
					                                       f32_3 %271 = OpLoad %225 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
					                                       f32_3 %273 = OpFMul %270 %272 
					                                       f32_3 %274 = OpLoad %248 
					                                       f32_3 %275 = OpFAdd %273 %274 
					                                                      OpStore %225 %275 
					                                Private f32* %278 = OpAccessChain %9 %277 
					                                                      OpStore %278 %276 
					                              Uniform f32_4* %279 = OpAccessChain %22 %38 
					                                       f32_4 %280 = OpLoad %279 
					                                       f32_4 %281 = OpLoad %9 
					                                         f32 %282 = OpDot %280 %281 
					                                Private f32* %283 = OpAccessChain %248 %135 
					                                                      OpStore %283 %282 
					                              Uniform f32_4* %284 = OpAccessChain %22 %48 
					                                       f32_4 %285 = OpLoad %284 
					                                       f32_4 %286 = OpLoad %9 
					                                         f32 %287 = OpDot %285 %286 
					                                Private f32* %288 = OpAccessChain %248 %91 
					                                                      OpStore %288 %287 
					                              Uniform f32_4* %290 = OpAccessChain %22 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_4 %292 = OpLoad %9 
					                                         f32 %293 = OpDot %291 %292 
					                                Private f32* %294 = OpAccessChain %248 %149 
					                                                      OpStore %294 %293 
					                                       f32_3 %295 = OpLoad %225 
					                                       f32_3 %296 = OpLoad %248 
					                                       f32_3 %297 = OpFAdd %295 %296 
					                                                      OpStore %225 %297 
					                                       f32_3 %298 = OpLoad %225 
					                                       f32_3 %300 = OpExtInst %1 40 %298 %299 
					                                                      OpStore %225 %300 
					                                       f32_3 %301 = OpLoad %225 
					                                       f32_3 %302 = OpExtInst %1 30 %301 
					                                       f32_4 %303 = OpLoad %9 
					                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
					                                                      OpStore %9 %304 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
					                                       f32_3 %309 = OpFMul %306 %308 
					                                       f32_4 %310 = OpLoad %9 
					                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
					                                                      OpStore %9 %311 
					                                       f32_4 %312 = OpLoad %9 
					                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
					                                       f32_3 %314 = OpExtInst %1 29 %313 
					                                       f32_4 %315 = OpLoad %9 
					                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
					                                                      OpStore %9 %316 
					                                       f32_4 %317 = OpLoad %9 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
					                                       f32_3 %321 = OpFMul %318 %320 
					                                       f32_3 %324 = OpFAdd %321 %323 
					                                       f32_4 %325 = OpLoad %9 
					                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
					                                                      OpStore %9 %326 
					                                       f32_4 %328 = OpLoad %9 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_3 %330 = OpExtInst %1 40 %329 %299 
					                                                      OpStore %327 %330 
					                                 Output f32* %332 = OpAccessChain %95 %30 %91 
					                                         f32 %333 = OpLoad %332 
					                                         f32 %334 = OpFNegate %333 
					                                 Output f32* %335 = OpAccessChain %95 %30 %91 
					                                                      OpStore %335 %334 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 243
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %33 %137 %161 %189 %216 %231 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %9 RelaxedPrecision 
					                                                      OpDecorate %12 RelaxedPrecision 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %13 RelaxedPrecision 
					                                                      OpDecorate %14 RelaxedPrecision 
					                                                      OpDecorate %15 RelaxedPrecision 
					                                                      OpDecorate %21 RelaxedPrecision 
					                                                      OpDecorate %22 RelaxedPrecision 
					                                                      OpDecorate %24 RelaxedPrecision 
					                                                      OpDecorate %25 RelaxedPrecision 
					                                                      OpDecorate %26 RelaxedPrecision 
					                                                      OpDecorate %27 RelaxedPrecision 
					                                                      OpDecorate %31 RelaxedPrecision 
					                                                      OpDecorate %32 RelaxedPrecision 
					                                                      OpDecorate %33 Location 33 
					                                                      OpDecorate %48 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %52 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 Offset 55 
					                                                      OpMemberDecorate %55 1 RelaxedPrecision 
					                                                      OpMemberDecorate %55 1 Offset 55 
					                                                      OpMemberDecorate %55 2 RelaxedPrecision 
					                                                      OpMemberDecorate %55 2 Offset 55 
					                                                      OpMemberDecorate %55 3 Offset 55 
					                                                      OpMemberDecorate %55 4 Offset 55 
					                                                      OpMemberDecorate %55 5 Offset 55 
					                                                      OpMemberDecorate %55 6 Offset 55 
					                                                      OpMemberDecorate %55 7 RelaxedPrecision 
					                                                      OpMemberDecorate %55 7 Offset 55 
					                                                      OpDecorate %55 Block 
					                                                      OpDecorate %57 DescriptorSet 57 
					                                                      OpDecorate %57 Binding 57 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %119 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %134 RelaxedPrecision 
					                                                      OpDecorate %134 DescriptorSet 134 
					                                                      OpDecorate %134 Binding 134 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %137 Location 137 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %168 DescriptorSet 168 
					                                                      OpDecorate %168 Binding 168 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %175 RelaxedPrecision 
					                                                      OpDecorate %176 RelaxedPrecision 
					                                                      OpDecorate %177 RelaxedPrecision 
					                                                      OpDecorate %178 RelaxedPrecision 
					                                                      OpDecorate %182 RelaxedPrecision 
					                                                      OpDecorate %183 RelaxedPrecision 
					                                                      OpDecorate %186 RelaxedPrecision 
					                                                      OpDecorate %187 RelaxedPrecision 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %201 RelaxedPrecision 
					                                                      OpDecorate %202 RelaxedPrecision 
					                                                      OpDecorate %203 RelaxedPrecision 
					                                                      OpDecorate %204 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %214 DescriptorSet 214 
					                                                      OpDecorate %214 Binding 214 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %216 Location 216 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %231 Location 231 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 0 
					                                              %18 = OpTypePointer Private %6 
					                               Private f32_4* %30 = OpVariable Private 
					                                 Input f32_3* %33 = OpVariable Input 
					                                          f32 %39 = OpConstant 3.674022E-40 
					                                          f32 %40 = OpConstant 3.674022E-40 
					                                 Private f32* %48 = OpVariable Private 
					                                              %53 = OpTypeVector %6 2 
					                                              %55 = OpTypeStruct %7 %7 %7 %6 %6 %6 %6 %7 
					                                              %56 = OpTypePointer Uniform %55 
					Uniform struct {f32_4; f32_4; f32_4; f32; f32; f32; f32; f32_4;}* %57 = OpVariable Uniform 
					                                              %58 = OpTypeInt 32 1 
					                                          i32 %59 = OpConstant 5 
					                                              %60 = OpTypePointer Uniform %6 
					                                          i32 %63 = OpConstant 3 
					                                          i32 %77 = OpConstant 7 
					                                              %78 = OpTypePointer Uniform %7 
					                                              %85 = OpTypePointer Private %10 
					                               Private f32_3* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 6 
					                                             %102 = OpTypePointer Private %53 
					                              Private f32_2* %103 = OpVariable Private 
					                                         i32 %116 = OpConstant 1 
					                              Private f32_4* %130 = OpVariable Private 
					                                             %131 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %132 = OpTypeSampledImage %131 
					                                             %133 = OpTypePointer UniformConstant %132 
					 UniformConstant read_only Texture2DSampled* %134 = OpVariable UniformConstant 
					                                             %136 = OpTypePointer Input %53 
					                                Input f32_2* %137 = OpVariable Input 
					                                         u32 %140 = OpConstant 3 
					                                         i32 %151 = OpConstant 4 
					                                         i32 %155 = OpConstant 0 
					                                             %160 = OpTypePointer Input %7 
					                                Input f32_4* %161 = OpVariable Input 
					                              Private f32_4* %167 = OpVariable Private 
					 UniformConstant read_only Texture2DSampled* %168 = OpVariable UniformConstant 
					                                         f32 %173 = OpConstant 3.674022E-40 
					                                       f32_4 %174 = OpConstantComposite %173 %173 %173 %173 
					                              Private f32_3* %178 = OpVariable Private 
					                                Input f32_3* %189 = OpVariable Input 
					                              Private f32_3* %194 = OpVariable Private 
					                                             %211 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %212 = OpTypeSampledImage %211 
					                                             %213 = OpTypePointer UniformConstant %212 
					UniformConstant read_only TextureCubeSampled* %214 = OpVariable UniformConstant 
					                                Input f32_3* %216 = OpVariable Input 
					                              Private f32_3* %222 = OpVariable Private 
					                                         i32 %225 = OpConstant 2 
					                                             %230 = OpTypePointer Output %7 
					                               Output f32_4* %231 = OpVariable Output 
					                                             %240 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_3 %14 = OpLoad %12 
					                                          f32 %15 = OpDot %13 %14 
					                                 Private f32* %19 = OpAccessChain %9 %17 
					                                                      OpStore %19 %15 
					                                 Private f32* %20 = OpAccessChain %9 %17 
					                                          f32 %21 = OpLoad %20 
					                                          f32 %22 = OpExtInst %1 32 %21 
					                                 Private f32* %23 = OpAccessChain %9 %17 
					                                                      OpStore %23 %22 
					                                        f32_4 %24 = OpLoad %9 
					                                        f32_3 %25 = OpVectorShuffle %24 %24 0 0 0 
					                                        f32_3 %26 = OpLoad %12 
					                                        f32_3 %27 = OpFMul %25 %26 
					                                        f32_4 %28 = OpLoad %9 
					                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
					                                                      OpStore %9 %29 
					                                        f32_4 %31 = OpLoad %9 
					                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
					                                        f32_3 %34 = OpLoad %33 
					                                          f32 %35 = OpDot %32 %34 
					                                 Private f32* %36 = OpAccessChain %30 %17 
					                                                      OpStore %36 %35 
					                                 Private f32* %37 = OpAccessChain %30 %17 
					                                          f32 %38 = OpLoad %37 
					                                          f32 %41 = OpExtInst %1 43 %38 %39 %40 
					                                 Private f32* %42 = OpAccessChain %30 %17 
					                                                      OpStore %42 %41 
					                                 Private f32* %43 = OpAccessChain %30 %17 
					                                          f32 %44 = OpLoad %43 
					                                          f32 %45 = OpFNegate %44 
					                                          f32 %46 = OpFAdd %45 %40 
					                                 Private f32* %47 = OpAccessChain %9 %17 
					                                                      OpStore %47 %46 
					                                 Private f32* %49 = OpAccessChain %9 %17 
					                                          f32 %50 = OpLoad %49 
					                                          f32 %51 = OpExtInst %1 30 %50 
					                                                      OpStore %48 %51 
					                                          f32 %52 = OpLoad %48 
					                                        f32_2 %54 = OpCompositeConstruct %52 %52 
					                                 Uniform f32* %61 = OpAccessChain %57 %59 
					                                          f32 %62 = OpLoad %61 
					                                 Uniform f32* %64 = OpAccessChain %57 %63 
					                                          f32 %65 = OpLoad %64 
					                                        f32_2 %66 = OpCompositeConstruct %62 %65 
					                                        f32_2 %67 = OpFMul %54 %66 
					                                        f32_4 %68 = OpLoad %30 
					                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 2 3 
					                                                      OpStore %30 %69 
					                                        f32_4 %70 = OpLoad %30 
					                                        f32_2 %71 = OpVectorShuffle %70 %70 0 1 
					                                        f32_2 %72 = OpExtInst %1 29 %71 
					                                        f32_4 %73 = OpLoad %30 
					                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 2 3 
					                                                      OpStore %30 %74 
					                                        f32_4 %75 = OpLoad %30 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 0 0 
					                               Uniform f32_4* %79 = OpAccessChain %57 %77 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
					                                        f32_3 %82 = OpFMul %76 %81 
					                                        f32_4 %83 = OpLoad %9 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
					                                                      OpStore %9 %84 
					                                        f32_4 %87 = OpLoad %9 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                 Uniform f32* %90 = OpAccessChain %57 %89 
					                                          f32 %91 = OpLoad %90 
					                                 Uniform f32* %92 = OpAccessChain %57 %89 
					                                          f32 %93 = OpLoad %92 
					                                 Uniform f32* %94 = OpAccessChain %57 %89 
					                                          f32 %95 = OpLoad %94 
					                                        f32_3 %96 = OpCompositeConstruct %91 %93 %95 
					                                          f32 %97 = OpCompositeExtract %96 0 
					                                          f32 %98 = OpCompositeExtract %96 1 
					                                          f32 %99 = OpCompositeExtract %96 2 
					                                       f32_3 %100 = OpCompositeConstruct %97 %98 %99 
					                                       f32_3 %101 = OpFMul %88 %100 
					                                                      OpStore %86 %101 
					                                Private f32* %104 = OpAccessChain %30 %17 
					                                         f32 %105 = OpLoad %104 
					                                         f32 %106 = OpFNegate %105 
					                                Uniform f32* %107 = OpAccessChain %57 %89 
					                                         f32 %108 = OpLoad %107 
					                                         f32 %109 = OpFMul %106 %108 
					                                         f32 %110 = OpFAdd %109 %40 
					                                Private f32* %111 = OpAccessChain %103 %17 
					                                                      OpStore %111 %110 
					                                Private f32* %112 = OpAccessChain %103 %17 
					                                         f32 %113 = OpLoad %112 
					                                         f32 %114 = OpExtInst %1 43 %113 %39 %40 
					                                Private f32* %115 = OpAccessChain %103 %17 
					                                                      OpStore %115 %114 
					                              Uniform f32_4* %117 = OpAccessChain %57 %116 
					                                       f32_4 %118 = OpLoad %117 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_2 %120 = OpLoad %103 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
					                                       f32_3 %122 = OpFMul %119 %121 
					                                       f32_3 %123 = OpLoad %86 
					                                       f32_3 %124 = OpFAdd %122 %123 
					                                                      OpStore %86 %124 
					                                Private f32* %125 = OpAccessChain %30 %17 
					                                         f32 %126 = OpLoad %125 
					                                         f32 %127 = OpFNegate %126 
					                                         f32 %128 = OpFAdd %127 %40 
					                                Private f32* %129 = OpAccessChain %9 %17 
					                                                      OpStore %129 %128 
					                  read_only Texture2DSampled %135 = OpLoad %134 
					                                       f32_2 %138 = OpLoad %137 
					                                       f32_4 %139 = OpImageSampleImplicitLod %135 %138 
					                                         f32 %141 = OpCompositeExtract %139 3 
					                                Private f32* %142 = OpAccessChain %130 %17 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %9 %17 
					                                         f32 %144 = OpLoad %143 
					                                Private f32* %145 = OpAccessChain %130 %17 
					                                         f32 %146 = OpLoad %145 
					                                         f32 %147 = OpFMul %144 %146 
					                                Private f32* %148 = OpAccessChain %9 %17 
					                                                      OpStore %148 %147 
					                                Private f32* %149 = OpAccessChain %9 %17 
					                                         f32 %150 = OpLoad %149 
					                                Uniform f32* %152 = OpAccessChain %57 %151 
					                                         f32 %153 = OpLoad %152 
					                                         f32 %154 = OpFMul %150 %153 
					                                Uniform f32* %156 = OpAccessChain %57 %155 %140 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpFAdd %154 %157 
					                                Private f32* %159 = OpAccessChain %30 %17 
					                                                      OpStore %159 %158 
					                                       f32_4 %162 = OpLoad %161 
					                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
					                                       f32_4 %164 = OpLoad %161 
					                                       f32_2 %165 = OpVectorShuffle %164 %164 3 3 
					                                       f32_2 %166 = OpFDiv %163 %165 
					                                                      OpStore %103 %166 
					                  read_only Texture2DSampled %169 = OpLoad %168 
					                                       f32_2 %170 = OpLoad %103 
					                                       f32_4 %171 = OpImageSampleImplicitLod %169 %170 
					                                                      OpStore %167 %171 
					                                       f32_4 %172 = OpLoad %167 
					                                       f32_4 %175 = OpExtInst %1 40 %172 %174 
					                                                      OpStore %9 %175 
					                                       f32_4 %176 = OpLoad %9 
					                                       f32_4 %177 = OpExtInst %1 30 %176 
					                                                      OpStore %9 %177 
					                                Private f32* %179 = OpAccessChain %30 %17 
					                                         f32 %180 = OpLoad %179 
					                                Private f32* %181 = OpAccessChain %9 %140 
					                                         f32 %182 = OpLoad %181 
					                                         f32 %183 = OpFNegate %182 
					                                         f32 %184 = OpFMul %180 %183 
					                                Private f32* %185 = OpAccessChain %178 %17 
					                                                      OpStore %185 %184 
					                                       f32_4 %186 = OpLoad %9 
					                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
					                                       f32_3 %188 = OpFNegate %187 
					                                       f32_3 %190 = OpLoad %189 
					                                       f32_3 %191 = OpFAdd %188 %190 
					                                       f32_4 %192 = OpLoad %30 
					                                       f32_4 %193 = OpVectorShuffle %192 %191 4 1 5 6 
					                                                      OpStore %30 %193 
					                                       f32_4 %195 = OpLoad %30 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 2 3 
					                              Uniform f32_4* %197 = OpAccessChain %57 %155 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                       f32_3 %200 = OpFMul %196 %199 
					                                                      OpStore %194 %200 
					                                       f32_3 %201 = OpLoad %178 
					                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
					                                       f32_3 %203 = OpLoad %194 
					                                       f32_3 %204 = OpFMul %202 %203 
					                                                      OpStore %178 %204 
					                                       f32_3 %205 = OpLoad %86 
					                                       f32_4 %206 = OpLoad %30 
					                                       f32_3 %207 = OpVectorShuffle %206 %206 0 2 3 
					                                       f32_3 %208 = OpFMul %205 %207 
					                                       f32_3 %209 = OpLoad %178 
					                                       f32_3 %210 = OpFAdd %208 %209 
					                                                      OpStore %178 %210 
					                read_only TextureCubeSampled %215 = OpLoad %214 
					                                       f32_3 %217 = OpLoad %216 
					                                       f32_4 %218 = OpImageSampleImplicitLod %215 %217 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                       f32_4 %220 = OpLoad %130 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 1 5 6 
					                                                      OpStore %130 %221 
					                                       f32_4 %223 = OpLoad %130 
					                                       f32_3 %224 = OpVectorShuffle %223 %223 0 2 3 
					                              Uniform f32_4* %226 = OpAccessChain %57 %225 
					                                       f32_4 %227 = OpLoad %226 
					                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
					                                       f32_3 %229 = OpFMul %224 %228 
					                                                      OpStore %222 %229 
					                                       f32_3 %232 = OpLoad %222 
					                                       f32_4 %233 = OpLoad %30 
					                                       f32_3 %234 = OpVectorShuffle %233 %233 1 1 1 
					                                       f32_3 %235 = OpFMul %232 %234 
					                                       f32_3 %236 = OpLoad %178 
					                                       f32_3 %237 = OpFAdd %235 %236 
					                                       f32_4 %238 = OpLoad %231 
					                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
					                                                      OpStore %231 %239 
					                                 Output f32* %241 = OpAccessChain %231 %140 
					                                                      OpStore %241 %40 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 337
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %95 %101 %102 %124 %128 %188 %191 %193 %210 %222 %327 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 RelaxedPrecision 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 RelaxedPrecision 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 RelaxedPrecision 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 RelaxedPrecision 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpMemberDecorate %20 9 Offset 20 
					                                                      OpMemberDecorate %20 10 Offset 20 
					                                                      OpMemberDecorate %20 11 Offset 20 
					                                                      OpMemberDecorate %20 12 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %93 0 BuiltIn 93 
					                                                      OpMemberDecorate %93 1 BuiltIn 93 
					                                                      OpMemberDecorate %93 2 BuiltIn 93 
					                                                      OpDecorate %93 Block 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %124 Location 124 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %188 Location 188 
					                                                      OpDecorate %191 RelaxedPrecision 
					                                                      OpDecorate %191 Location 191 
					                                                      OpDecorate %193 Location 193 
					                                                      OpDecorate %210 Location 210 
					                                                      OpDecorate %222 Location 222 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %248 RelaxedPrecision 
					                                                      OpDecorate %251 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %263 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %273 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %295 RelaxedPrecision 
					                                                      OpDecorate %296 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %327 Location 327 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 9 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 11 
					                                          u32 %91 = OpConstant 1 
					                                              %92 = OpTypeArray %6 %91 
					                                              %93 = OpTypeStruct %7 %6 %92 
					                                              %94 = OpTypePointer Output %93 
					         Output struct {f32_4; f32; f32[1];}* %95 = OpVariable Output 
					                                              %97 = OpTypePointer Output %7 
					                                              %99 = OpTypeVector %6 2 
					                                             %100 = OpTypePointer Output %99 
					                               Output f32_2* %101 = OpVariable Output 
					                                Input f32_4* %102 = OpVariable Input 
					                                         i32 %105 = OpConstant 12 
					                                             %117 = OpTypePointer Uniform %14 
					                                             %123 = OpTypePointer Output %14 
					                               Output f32_3* %124 = OpVariable Output 
					                                             %127 = OpTypePointer Input %14 
					                                Input f32_3* %128 = OpVariable Input 
					                                         i32 %130 = OpConstant 10 
					                                         u32 %135 = OpConstant 0 
					                                             %136 = OpTypePointer Private %6 
					                                         u32 %149 = OpConstant 2 
					                                Private f32* %151 = OpVariable Private 
					                                Private f32* %166 = OpVariable Private 
					                                             %176 = OpTypePointer Private %14 
					                              Private f32_3* %177 = OpVariable Private 
					                               Output f32_3* %188 = OpVariable Output 
					                               Output f32_3* %191 = OpVariable Output 
					                               Output f32_3* %193 = OpVariable Output 
					                                             %198 = OpTypePointer Uniform %6 
					                                         f32 %205 = OpConstant 3.674022E-40 
					                                       f32_3 %206 = OpConstantComposite %205 %205 %205 
					                               Output f32_4* %210 = OpVariable Output 
					                               Output f32_4* %222 = OpVariable Output 
					                                         f32 %223 = OpConstant 3.674022E-40 
					                                       f32_4 %224 = OpConstantComposite %223 %223 %223 %223 
					                              Private f32_3* %225 = OpVariable Private 
					                              Private f32_4* %242 = OpVariable Private 
					                              Private f32_3* %248 = OpVariable Private 
					                                         i32 %249 = OpConstant 5 
					                                         i32 %255 = OpConstant 6 
					                                         i32 %261 = OpConstant 7 
					                                         i32 %267 = OpConstant 8 
					                                         f32 %276 = OpConstant 3.674022E-40 
					                                         u32 %277 = OpConstant 3 
					                                         i32 %289 = OpConstant 4 
					                                       f32_3 %299 = OpConstantComposite %223 %223 %223 
					                                         f32 %307 = OpConstant 3.674022E-40 
					                                       f32_3 %308 = OpConstantComposite %307 %307 %307 
					                                         f32 %319 = OpConstant 3.674022E-40 
					                                       f32_3 %320 = OpConstantComposite %319 %319 %319 
					                                         f32 %322 = OpConstant 3.674022E-40 
					                                       f32_3 %323 = OpConstantComposite %322 %322 %322 
					                               Output f32_3* %327 = OpVariable Output 
					                                             %331 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %84 = OpAccessChain %22 %66 %48 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpLoad %46 
					                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
					                                        f32_4 %88 = OpFMul %85 %87 
					                                        f32_4 %89 = OpLoad %63 
					                                        f32_4 %90 = OpFAdd %88 %89 
					                                                      OpStore %46 %90 
					                                        f32_4 %96 = OpLoad %46 
					                                Output f32_4* %98 = OpAccessChain %95 %30 
					                                                      OpStore %98 %96 
					                                       f32_4 %103 = OpLoad %102 
					                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
					                              Uniform f32_4* %106 = OpAccessChain %22 %105 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
					                                       f32_2 %109 = OpFMul %104 %108 
					                              Uniform f32_4* %110 = OpAccessChain %22 %105 
					                                       f32_4 %111 = OpLoad %110 
					                                       f32_2 %112 = OpVectorShuffle %111 %111 2 3 
					                                       f32_2 %113 = OpFAdd %109 %112 
					                                                      OpStore %101 %113 
					                                       f32_4 %114 = OpLoad %9 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                       f32_3 %116 = OpFNegate %115 
					                              Uniform f32_3* %118 = OpAccessChain %22 %30 
					                                       f32_3 %119 = OpLoad %118 
					                                       f32_3 %120 = OpFAdd %116 %119 
					                                       f32_4 %121 = OpLoad %63 
					                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
					                                                      OpStore %63 %122 
					                                       f32_4 %125 = OpLoad %9 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
					                                                      OpStore %124 %126 
					                                       f32_3 %129 = OpLoad %128 
					                              Uniform f32_4* %131 = OpAccessChain %22 %130 %30 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %129 %133 
					                                Private f32* %137 = OpAccessChain %9 %135 
					                                                      OpStore %137 %134 
					                                       f32_3 %138 = OpLoad %128 
					                              Uniform f32_4* %139 = OpAccessChain %22 %130 %25 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %9 %91 
					                                                      OpStore %143 %142 
					                                       f32_3 %144 = OpLoad %128 
					                              Uniform f32_4* %145 = OpAccessChain %22 %130 %38 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %144 %147 
					                                Private f32* %150 = OpAccessChain %9 %149 
					                                                      OpStore %150 %148 
					                                       f32_4 %152 = OpLoad %9 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                                      OpStore %151 %156 
					                                         f32 %157 = OpLoad %151 
					                                         f32 %158 = OpExtInst %1 32 %157 
					                                                      OpStore %151 %158 
					                                         f32 %159 = OpLoad %151 
					                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
					                                       f32_4 %161 = OpLoad %9 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %9 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %9 %165 
					                                       f32_4 %167 = OpLoad %63 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
					                                       f32_3 %169 = OpFNegate %168 
					                                       f32_4 %170 = OpLoad %9 
					                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                         f32 %172 = OpDot %169 %171 
					                                                      OpStore %166 %172 
					                                         f32 %173 = OpLoad %166 
					                                         f32 %174 = OpLoad %166 
					                                         f32 %175 = OpFAdd %173 %174 
					                                                      OpStore %166 %175 
					                                       f32_4 %178 = OpLoad %9 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpLoad %166 
					                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFMul %179 %182 
					                                       f32_4 %184 = OpLoad %63 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
					                                       f32_3 %186 = OpFNegate %185 
					                                       f32_3 %187 = OpFAdd %183 %186 
					                                                      OpStore %177 %187 
					                                       f32_4 %189 = OpLoad %63 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                                      OpStore %188 %190 
					                                       f32_3 %192 = OpLoad %177 
					                                                      OpStore %191 %192 
					                                       f32_4 %194 = OpLoad %9 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
					                                                      OpStore %193 %195 
					                                Private f32* %196 = OpAccessChain %46 %91 
					                                         f32 %197 = OpLoad %196 
					                                Uniform f32* %199 = OpAccessChain %22 %25 %135 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpFMul %197 %200 
					                                Private f32* %202 = OpAccessChain %46 %91 
					                                                      OpStore %202 %201 
					                                       f32_4 %203 = OpLoad %46 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 3 1 
					                                       f32_3 %207 = OpFMul %204 %206 
					                                       f32_4 %208 = OpLoad %63 
					                                       f32_4 %209 = OpVectorShuffle %208 %207 4 1 5 6 
					                                                      OpStore %63 %209 
					                                       f32_4 %211 = OpLoad %46 
					                                       f32_2 %212 = OpVectorShuffle %211 %211 2 3 
					                                       f32_4 %213 = OpLoad %210 
					                                       f32_4 %214 = OpVectorShuffle %213 %212 0 1 4 5 
					                                                      OpStore %210 %214 
					                                       f32_4 %215 = OpLoad %63 
					                                       f32_2 %216 = OpVectorShuffle %215 %215 2 2 
					                                       f32_4 %217 = OpLoad %63 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 3 
					                                       f32_2 %219 = OpFAdd %216 %218 
					                                       f32_4 %220 = OpLoad %210 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 2 3 
					                                                      OpStore %210 %221 
					                                                      OpStore %222 %224 
					                                Private f32* %226 = OpAccessChain %9 %91 
					                                         f32 %227 = OpLoad %226 
					                                Private f32* %228 = OpAccessChain %9 %91 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFMul %227 %229 
					                                Private f32* %231 = OpAccessChain %225 %135 
					                                                      OpStore %231 %230 
					                                Private f32* %232 = OpAccessChain %9 %135 
					                                         f32 %233 = OpLoad %232 
					                                Private f32* %234 = OpAccessChain %9 %135 
					                                         f32 %235 = OpLoad %234 
					                                         f32 %236 = OpFMul %233 %235 
					                                Private f32* %237 = OpAccessChain %225 %135 
					                                         f32 %238 = OpLoad %237 
					                                         f32 %239 = OpFNegate %238 
					                                         f32 %240 = OpFAdd %236 %239 
					                                Private f32* %241 = OpAccessChain %225 %135 
					                                                      OpStore %241 %240 
					                                       f32_4 %243 = OpLoad %9 
					                                       f32_4 %244 = OpVectorShuffle %243 %243 1 2 2 0 
					                                       f32_4 %245 = OpLoad %9 
					                                       f32_4 %246 = OpVectorShuffle %245 %245 0 1 2 2 
					                                       f32_4 %247 = OpFMul %244 %246 
					                                                      OpStore %242 %247 
					                              Uniform f32_4* %250 = OpAccessChain %22 %249 
					                                       f32_4 %251 = OpLoad %250 
					                                       f32_4 %252 = OpLoad %242 
					                                         f32 %253 = OpDot %251 %252 
					                                Private f32* %254 = OpAccessChain %248 %135 
					                                                      OpStore %254 %253 
					                              Uniform f32_4* %256 = OpAccessChain %22 %255 
					                                       f32_4 %257 = OpLoad %256 
					                                       f32_4 %258 = OpLoad %242 
					                                         f32 %259 = OpDot %257 %258 
					                                Private f32* %260 = OpAccessChain %248 %91 
					                                                      OpStore %260 %259 
					                              Uniform f32_4* %262 = OpAccessChain %22 %261 
					                                       f32_4 %263 = OpLoad %262 
					                                       f32_4 %264 = OpLoad %242 
					                                         f32 %265 = OpDot %263 %264 
					                                Private f32* %266 = OpAccessChain %248 %149 
					                                                      OpStore %266 %265 
					                              Uniform f32_4* %268 = OpAccessChain %22 %267 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
					                                       f32_3 %271 = OpLoad %225 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
					                                       f32_3 %273 = OpFMul %270 %272 
					                                       f32_3 %274 = OpLoad %248 
					                                       f32_3 %275 = OpFAdd %273 %274 
					                                                      OpStore %225 %275 
					                                Private f32* %278 = OpAccessChain %9 %277 
					                                                      OpStore %278 %276 
					                              Uniform f32_4* %279 = OpAccessChain %22 %38 
					                                       f32_4 %280 = OpLoad %279 
					                                       f32_4 %281 = OpLoad %9 
					                                         f32 %282 = OpDot %280 %281 
					                                Private f32* %283 = OpAccessChain %248 %135 
					                                                      OpStore %283 %282 
					                              Uniform f32_4* %284 = OpAccessChain %22 %48 
					                                       f32_4 %285 = OpLoad %284 
					                                       f32_4 %286 = OpLoad %9 
					                                         f32 %287 = OpDot %285 %286 
					                                Private f32* %288 = OpAccessChain %248 %91 
					                                                      OpStore %288 %287 
					                              Uniform f32_4* %290 = OpAccessChain %22 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_4 %292 = OpLoad %9 
					                                         f32 %293 = OpDot %291 %292 
					                                Private f32* %294 = OpAccessChain %248 %149 
					                                                      OpStore %294 %293 
					                                       f32_3 %295 = OpLoad %225 
					                                       f32_3 %296 = OpLoad %248 
					                                       f32_3 %297 = OpFAdd %295 %296 
					                                                      OpStore %225 %297 
					                                       f32_3 %298 = OpLoad %225 
					                                       f32_3 %300 = OpExtInst %1 40 %298 %299 
					                                                      OpStore %225 %300 
					                                       f32_3 %301 = OpLoad %225 
					                                       f32_3 %302 = OpExtInst %1 30 %301 
					                                       f32_4 %303 = OpLoad %9 
					                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
					                                                      OpStore %9 %304 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
					                                       f32_3 %309 = OpFMul %306 %308 
					                                       f32_4 %310 = OpLoad %9 
					                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
					                                                      OpStore %9 %311 
					                                       f32_4 %312 = OpLoad %9 
					                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
					                                       f32_3 %314 = OpExtInst %1 29 %313 
					                                       f32_4 %315 = OpLoad %9 
					                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
					                                                      OpStore %9 %316 
					                                       f32_4 %317 = OpLoad %9 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
					                                       f32_3 %321 = OpFMul %318 %320 
					                                       f32_3 %324 = OpFAdd %321 %323 
					                                       f32_4 %325 = OpLoad %9 
					                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
					                                                      OpStore %9 %326 
					                                       f32_4 %328 = OpLoad %9 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_3 %330 = OpExtInst %1 40 %329 %299 
					                                                      OpStore %327 %330 
					                                 Output f32* %332 = OpAccessChain %95 %30 %91 
					                                         f32 %333 = OpLoad %332 
					                                         f32 %334 = OpFNegate %333 
					                                 Output f32* %335 = OpAccessChain %95 %30 %91 
					                                                      OpStore %335 %334 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 243
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %33 %137 %161 %189 %216 %231 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %9 RelaxedPrecision 
					                                                      OpDecorate %12 RelaxedPrecision 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %13 RelaxedPrecision 
					                                                      OpDecorate %14 RelaxedPrecision 
					                                                      OpDecorate %15 RelaxedPrecision 
					                                                      OpDecorate %21 RelaxedPrecision 
					                                                      OpDecorate %22 RelaxedPrecision 
					                                                      OpDecorate %24 RelaxedPrecision 
					                                                      OpDecorate %25 RelaxedPrecision 
					                                                      OpDecorate %26 RelaxedPrecision 
					                                                      OpDecorate %27 RelaxedPrecision 
					                                                      OpDecorate %31 RelaxedPrecision 
					                                                      OpDecorate %32 RelaxedPrecision 
					                                                      OpDecorate %33 Location 33 
					                                                      OpDecorate %48 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %52 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 Offset 55 
					                                                      OpMemberDecorate %55 1 RelaxedPrecision 
					                                                      OpMemberDecorate %55 1 Offset 55 
					                                                      OpMemberDecorate %55 2 RelaxedPrecision 
					                                                      OpMemberDecorate %55 2 Offset 55 
					                                                      OpMemberDecorate %55 3 Offset 55 
					                                                      OpMemberDecorate %55 4 Offset 55 
					                                                      OpMemberDecorate %55 5 Offset 55 
					                                                      OpMemberDecorate %55 6 Offset 55 
					                                                      OpMemberDecorate %55 7 RelaxedPrecision 
					                                                      OpMemberDecorate %55 7 Offset 55 
					                                                      OpDecorate %55 Block 
					                                                      OpDecorate %57 DescriptorSet 57 
					                                                      OpDecorate %57 Binding 57 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %119 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %134 RelaxedPrecision 
					                                                      OpDecorate %134 DescriptorSet 134 
					                                                      OpDecorate %134 Binding 134 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %137 Location 137 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %168 DescriptorSet 168 
					                                                      OpDecorate %168 Binding 168 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %175 RelaxedPrecision 
					                                                      OpDecorate %176 RelaxedPrecision 
					                                                      OpDecorate %177 RelaxedPrecision 
					                                                      OpDecorate %178 RelaxedPrecision 
					                                                      OpDecorate %182 RelaxedPrecision 
					                                                      OpDecorate %183 RelaxedPrecision 
					                                                      OpDecorate %186 RelaxedPrecision 
					                                                      OpDecorate %187 RelaxedPrecision 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %201 RelaxedPrecision 
					                                                      OpDecorate %202 RelaxedPrecision 
					                                                      OpDecorate %203 RelaxedPrecision 
					                                                      OpDecorate %204 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %214 DescriptorSet 214 
					                                                      OpDecorate %214 Binding 214 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %216 RelaxedPrecision 
					                                                      OpDecorate %216 Location 216 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %231 Location 231 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %236 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 0 
					                                              %18 = OpTypePointer Private %6 
					                               Private f32_4* %30 = OpVariable Private 
					                                 Input f32_3* %33 = OpVariable Input 
					                                          f32 %39 = OpConstant 3.674022E-40 
					                                          f32 %40 = OpConstant 3.674022E-40 
					                                 Private f32* %48 = OpVariable Private 
					                                              %53 = OpTypeVector %6 2 
					                                              %55 = OpTypeStruct %7 %7 %7 %6 %6 %6 %6 %7 
					                                              %56 = OpTypePointer Uniform %55 
					Uniform struct {f32_4; f32_4; f32_4; f32; f32; f32; f32; f32_4;}* %57 = OpVariable Uniform 
					                                              %58 = OpTypeInt 32 1 
					                                          i32 %59 = OpConstant 5 
					                                              %60 = OpTypePointer Uniform %6 
					                                          i32 %63 = OpConstant 3 
					                                          i32 %77 = OpConstant 7 
					                                              %78 = OpTypePointer Uniform %7 
					                                              %85 = OpTypePointer Private %10 
					                               Private f32_3* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 6 
					                                             %102 = OpTypePointer Private %53 
					                              Private f32_2* %103 = OpVariable Private 
					                                         i32 %116 = OpConstant 1 
					                              Private f32_4* %130 = OpVariable Private 
					                                             %131 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %132 = OpTypeSampledImage %131 
					                                             %133 = OpTypePointer UniformConstant %132 
					 UniformConstant read_only Texture2DSampled* %134 = OpVariable UniformConstant 
					                                             %136 = OpTypePointer Input %53 
					                                Input f32_2* %137 = OpVariable Input 
					                                         u32 %140 = OpConstant 3 
					                                         i32 %151 = OpConstant 4 
					                                         i32 %155 = OpConstant 0 
					                                             %160 = OpTypePointer Input %7 
					                                Input f32_4* %161 = OpVariable Input 
					                              Private f32_4* %167 = OpVariable Private 
					 UniformConstant read_only Texture2DSampled* %168 = OpVariable UniformConstant 
					                                         f32 %173 = OpConstant 3.674022E-40 
					                                       f32_4 %174 = OpConstantComposite %173 %173 %173 %173 
					                              Private f32_3* %178 = OpVariable Private 
					                                Input f32_3* %189 = OpVariable Input 
					                              Private f32_3* %194 = OpVariable Private 
					                                             %211 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %212 = OpTypeSampledImage %211 
					                                             %213 = OpTypePointer UniformConstant %212 
					UniformConstant read_only TextureCubeSampled* %214 = OpVariable UniformConstant 
					                                Input f32_3* %216 = OpVariable Input 
					                              Private f32_3* %222 = OpVariable Private 
					                                         i32 %225 = OpConstant 2 
					                                             %230 = OpTypePointer Output %7 
					                               Output f32_4* %231 = OpVariable Output 
					                                             %240 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_3 %14 = OpLoad %12 
					                                          f32 %15 = OpDot %13 %14 
					                                 Private f32* %19 = OpAccessChain %9 %17 
					                                                      OpStore %19 %15 
					                                 Private f32* %20 = OpAccessChain %9 %17 
					                                          f32 %21 = OpLoad %20 
					                                          f32 %22 = OpExtInst %1 32 %21 
					                                 Private f32* %23 = OpAccessChain %9 %17 
					                                                      OpStore %23 %22 
					                                        f32_4 %24 = OpLoad %9 
					                                        f32_3 %25 = OpVectorShuffle %24 %24 0 0 0 
					                                        f32_3 %26 = OpLoad %12 
					                                        f32_3 %27 = OpFMul %25 %26 
					                                        f32_4 %28 = OpLoad %9 
					                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
					                                                      OpStore %9 %29 
					                                        f32_4 %31 = OpLoad %9 
					                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
					                                        f32_3 %34 = OpLoad %33 
					                                          f32 %35 = OpDot %32 %34 
					                                 Private f32* %36 = OpAccessChain %30 %17 
					                                                      OpStore %36 %35 
					                                 Private f32* %37 = OpAccessChain %30 %17 
					                                          f32 %38 = OpLoad %37 
					                                          f32 %41 = OpExtInst %1 43 %38 %39 %40 
					                                 Private f32* %42 = OpAccessChain %30 %17 
					                                                      OpStore %42 %41 
					                                 Private f32* %43 = OpAccessChain %30 %17 
					                                          f32 %44 = OpLoad %43 
					                                          f32 %45 = OpFNegate %44 
					                                          f32 %46 = OpFAdd %45 %40 
					                                 Private f32* %47 = OpAccessChain %9 %17 
					                                                      OpStore %47 %46 
					                                 Private f32* %49 = OpAccessChain %9 %17 
					                                          f32 %50 = OpLoad %49 
					                                          f32 %51 = OpExtInst %1 30 %50 
					                                                      OpStore %48 %51 
					                                          f32 %52 = OpLoad %48 
					                                        f32_2 %54 = OpCompositeConstruct %52 %52 
					                                 Uniform f32* %61 = OpAccessChain %57 %59 
					                                          f32 %62 = OpLoad %61 
					                                 Uniform f32* %64 = OpAccessChain %57 %63 
					                                          f32 %65 = OpLoad %64 
					                                        f32_2 %66 = OpCompositeConstruct %62 %65 
					                                        f32_2 %67 = OpFMul %54 %66 
					                                        f32_4 %68 = OpLoad %30 
					                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 2 3 
					                                                      OpStore %30 %69 
					                                        f32_4 %70 = OpLoad %30 
					                                        f32_2 %71 = OpVectorShuffle %70 %70 0 1 
					                                        f32_2 %72 = OpExtInst %1 29 %71 
					                                        f32_4 %73 = OpLoad %30 
					                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 2 3 
					                                                      OpStore %30 %74 
					                                        f32_4 %75 = OpLoad %30 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 0 0 
					                               Uniform f32_4* %79 = OpAccessChain %57 %77 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
					                                        f32_3 %82 = OpFMul %76 %81 
					                                        f32_4 %83 = OpLoad %9 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
					                                                      OpStore %9 %84 
					                                        f32_4 %87 = OpLoad %9 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                 Uniform f32* %90 = OpAccessChain %57 %89 
					                                          f32 %91 = OpLoad %90 
					                                 Uniform f32* %92 = OpAccessChain %57 %89 
					                                          f32 %93 = OpLoad %92 
					                                 Uniform f32* %94 = OpAccessChain %57 %89 
					                                          f32 %95 = OpLoad %94 
					                                        f32_3 %96 = OpCompositeConstruct %91 %93 %95 
					                                          f32 %97 = OpCompositeExtract %96 0 
					                                          f32 %98 = OpCompositeExtract %96 1 
					                                          f32 %99 = OpCompositeExtract %96 2 
					                                       f32_3 %100 = OpCompositeConstruct %97 %98 %99 
					                                       f32_3 %101 = OpFMul %88 %100 
					                                                      OpStore %86 %101 
					                                Private f32* %104 = OpAccessChain %30 %17 
					                                         f32 %105 = OpLoad %104 
					                                         f32 %106 = OpFNegate %105 
					                                Uniform f32* %107 = OpAccessChain %57 %89 
					                                         f32 %108 = OpLoad %107 
					                                         f32 %109 = OpFMul %106 %108 
					                                         f32 %110 = OpFAdd %109 %40 
					                                Private f32* %111 = OpAccessChain %103 %17 
					                                                      OpStore %111 %110 
					                                Private f32* %112 = OpAccessChain %103 %17 
					                                         f32 %113 = OpLoad %112 
					                                         f32 %114 = OpExtInst %1 43 %113 %39 %40 
					                                Private f32* %115 = OpAccessChain %103 %17 
					                                                      OpStore %115 %114 
					                              Uniform f32_4* %117 = OpAccessChain %57 %116 
					                                       f32_4 %118 = OpLoad %117 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_2 %120 = OpLoad %103 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
					                                       f32_3 %122 = OpFMul %119 %121 
					                                       f32_3 %123 = OpLoad %86 
					                                       f32_3 %124 = OpFAdd %122 %123 
					                                                      OpStore %86 %124 
					                                Private f32* %125 = OpAccessChain %30 %17 
					                                         f32 %126 = OpLoad %125 
					                                         f32 %127 = OpFNegate %126 
					                                         f32 %128 = OpFAdd %127 %40 
					                                Private f32* %129 = OpAccessChain %9 %17 
					                                                      OpStore %129 %128 
					                  read_only Texture2DSampled %135 = OpLoad %134 
					                                       f32_2 %138 = OpLoad %137 
					                                       f32_4 %139 = OpImageSampleImplicitLod %135 %138 
					                                         f32 %141 = OpCompositeExtract %139 3 
					                                Private f32* %142 = OpAccessChain %130 %17 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %9 %17 
					                                         f32 %144 = OpLoad %143 
					                                Private f32* %145 = OpAccessChain %130 %17 
					                                         f32 %146 = OpLoad %145 
					                                         f32 %147 = OpFMul %144 %146 
					                                Private f32* %148 = OpAccessChain %9 %17 
					                                                      OpStore %148 %147 
					                                Private f32* %149 = OpAccessChain %9 %17 
					                                         f32 %150 = OpLoad %149 
					                                Uniform f32* %152 = OpAccessChain %57 %151 
					                                         f32 %153 = OpLoad %152 
					                                         f32 %154 = OpFMul %150 %153 
					                                Uniform f32* %156 = OpAccessChain %57 %155 %140 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpFAdd %154 %157 
					                                Private f32* %159 = OpAccessChain %30 %17 
					                                                      OpStore %159 %158 
					                                       f32_4 %162 = OpLoad %161 
					                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
					                                       f32_4 %164 = OpLoad %161 
					                                       f32_2 %165 = OpVectorShuffle %164 %164 3 3 
					                                       f32_2 %166 = OpFDiv %163 %165 
					                                                      OpStore %103 %166 
					                  read_only Texture2DSampled %169 = OpLoad %168 
					                                       f32_2 %170 = OpLoad %103 
					                                       f32_4 %171 = OpImageSampleImplicitLod %169 %170 
					                                                      OpStore %167 %171 
					                                       f32_4 %172 = OpLoad %167 
					                                       f32_4 %175 = OpExtInst %1 40 %172 %174 
					                                                      OpStore %9 %175 
					                                       f32_4 %176 = OpLoad %9 
					                                       f32_4 %177 = OpExtInst %1 30 %176 
					                                                      OpStore %9 %177 
					                                Private f32* %179 = OpAccessChain %30 %17 
					                                         f32 %180 = OpLoad %179 
					                                Private f32* %181 = OpAccessChain %9 %140 
					                                         f32 %182 = OpLoad %181 
					                                         f32 %183 = OpFNegate %182 
					                                         f32 %184 = OpFMul %180 %183 
					                                Private f32* %185 = OpAccessChain %178 %17 
					                                                      OpStore %185 %184 
					                                       f32_4 %186 = OpLoad %9 
					                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
					                                       f32_3 %188 = OpFNegate %187 
					                                       f32_3 %190 = OpLoad %189 
					                                       f32_3 %191 = OpFAdd %188 %190 
					                                       f32_4 %192 = OpLoad %30 
					                                       f32_4 %193 = OpVectorShuffle %192 %191 4 1 5 6 
					                                                      OpStore %30 %193 
					                                       f32_4 %195 = OpLoad %30 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 2 3 
					                              Uniform f32_4* %197 = OpAccessChain %57 %155 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                       f32_3 %200 = OpFMul %196 %199 
					                                                      OpStore %194 %200 
					                                       f32_3 %201 = OpLoad %178 
					                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
					                                       f32_3 %203 = OpLoad %194 
					                                       f32_3 %204 = OpFMul %202 %203 
					                                                      OpStore %178 %204 
					                                       f32_3 %205 = OpLoad %86 
					                                       f32_4 %206 = OpLoad %30 
					                                       f32_3 %207 = OpVectorShuffle %206 %206 0 2 3 
					                                       f32_3 %208 = OpFMul %205 %207 
					                                       f32_3 %209 = OpLoad %178 
					                                       f32_3 %210 = OpFAdd %208 %209 
					                                                      OpStore %178 %210 
					                read_only TextureCubeSampled %215 = OpLoad %214 
					                                       f32_3 %217 = OpLoad %216 
					                                       f32_4 %218 = OpImageSampleImplicitLod %215 %217 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                       f32_4 %220 = OpLoad %130 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 1 5 6 
					                                                      OpStore %130 %221 
					                                       f32_4 %223 = OpLoad %130 
					                                       f32_3 %224 = OpVectorShuffle %223 %223 0 2 3 
					                              Uniform f32_4* %226 = OpAccessChain %57 %225 
					                                       f32_4 %227 = OpLoad %226 
					                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
					                                       f32_3 %229 = OpFMul %224 %228 
					                                                      OpStore %222 %229 
					                                       f32_3 %232 = OpLoad %222 
					                                       f32_4 %233 = OpLoad %30 
					                                       f32_3 %234 = OpVectorShuffle %233 %233 1 1 1 
					                                       f32_3 %235 = OpFMul %232 %234 
					                                       f32_3 %236 = OpLoad %178 
					                                       f32_3 %237 = OpFAdd %235 %236 
					                                       f32_4 %238 = OpLoad %231 
					                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
					                                                      OpStore %231 %239 
					                                 Output f32* %241 = OpAccessChain %231 %140 
					                                                      OpStore %241 %40 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ProjectionParams;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec3 tmpvar_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = 1.0;
					  tmpvar_6.xyz = _glesVertex.xyz;
					  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
					  highp vec3 tmpvar_7;
					  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_8;
					  tmpvar_8[0] = unity_WorldToObject[0].xyz;
					  tmpvar_8[1] = unity_WorldToObject[1].xyz;
					  tmpvar_8[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_9;
					  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
					  highp vec3 tmpvar_10;
					  highp vec3 I_11;
					  I_11 = (tmpvar_7 - _WorldSpaceCameraPos);
					  tmpvar_10 = (I_11 - (2.0 * (
					    dot (tmpvar_9, I_11)
					   * tmpvar_9)));
					  tmpvar_1 = tmpvar_10;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - tmpvar_7);
					  tmpvar_2 = tmpvar_12;
					  highp vec4 o_13;
					  highp vec4 tmpvar_14;
					  tmpvar_14 = (tmpvar_5 * 0.5);
					  highp vec2 tmpvar_15;
					  tmpvar_15.x = tmpvar_14.x;
					  tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
					  o_13.xy = (tmpvar_15 + tmpvar_14.w);
					  o_13.zw = tmpvar_5.zw;
					  tmpvar_3.zw = vec2(0.0, 0.0);
					  tmpvar_3.xy = vec2(0.0, 0.0);
					  highp mat3 tmpvar_16;
					  tmpvar_16[0] = unity_WorldToObject[0].xyz;
					  tmpvar_16[1] = unity_WorldToObject[1].xyz;
					  tmpvar_16[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_17;
					  tmpvar_17.w = 1.0;
					  tmpvar_17.xyz = normalize((_glesNormal * tmpvar_16));
					  mediump vec4 normal_18;
					  normal_18 = tmpvar_17;
					  mediump vec3 res_19;
					  mediump vec3 x_20;
					  x_20.x = dot (unity_SHAr, normal_18);
					  x_20.y = dot (unity_SHAg, normal_18);
					  x_20.z = dot (unity_SHAb, normal_18);
					  mediump vec3 x1_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22 = (normal_18.xyzz * normal_18.yzzx);
					  x1_21.x = dot (unity_SHBr, tmpvar_22);
					  x1_21.y = dot (unity_SHBg, tmpvar_22);
					  x1_21.z = dot (unity_SHBb, tmpvar_22);
					  res_19 = (x_20 + (x1_21 + (unity_SHC.xyz * 
					    ((normal_18.x * normal_18.x) - (normal_18.y * normal_18.y))
					  )));
					  mediump vec3 tmpvar_23;
					  tmpvar_23 = max (((1.055 * 
					    pow (max (res_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  res_19 = tmpvar_23;
					  tmpvar_4 = tmpvar_23;
					  gl_Position = tmpvar_5;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_9;
					  xlv_TEXCOORD3 = tmpvar_7;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = o_13;
					  xlv_TEXCOORD6 = tmpvar_3;
					  xlv_TEXCOORD7 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					uniform sampler2D _LightBuffer;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec4 c_2;
					  mediump vec4 light_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  highp vec3 tmpvar_6;
					  highp vec3 tmpvar_7;
					  mediump vec3 tmpvar_8;
					  tmpvar_8 = normalize(xlv_TEXCOORD4);
					  viewDir_5 = tmpvar_8;
					  tmpvar_6 = xlv_TEXCOORD1;
					  tmpvar_7 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_9;
					  lowp vec3 tmpvar_10;
					  lowp float tmpvar_11;
					  mediump float fres_12;
					  mediump float rim_13;
					  mediump float tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = clamp (dot (normalize(tmpvar_7), tmpvar_4), 0.0, 1.0);
					  tmpvar_14 = tmpvar_15;
					  rim_13 = (1.0 - tmpvar_14);
					  fres_12 = rim_13;
					  highp float tmpvar_16;
					  tmpvar_16 = pow (rim_13, _RimAmt);
					  rim_13 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = pow (fres_12, _FresAmt);
					  fres_12 = tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = clamp ((1.0 - (rim_13 * _RimPwr)), 0.0, 1.0);
					  tmpvar_9 = (_Color.xyz * tmpvar_18);
					  highp vec3 tmpvar_19;
					  tmpvar_19 = ((rim_13 * _RimColor) * _RimPwr).xyz;
					  tmpvar_9 = (tmpvar_9 + tmpvar_19);
					  tmpvar_11 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_13)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = textureCube (_Cube, tmpvar_6);
					  tmpvar_10 = ((tmpvar_20.xyz * _ReflectColor.xyz) * fres_12);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_LightBuffer, xlv_TEXCOORD5);
					  light_3 = tmpvar_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
					  light_3.w = tmpvar_22.w;
					  light_3.xyz = (tmpvar_22.xyz + xlv_TEXCOORD7);
					  lowp vec4 c_23;
					  lowp float spec_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = (tmpvar_22.w * tmpvar_11);
					  spec_24 = tmpvar_25;
					  c_23.xyz = ((tmpvar_9 * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_24));
					  c_23.w = (tmpvar_20.w * _ReflectColor.w);
					  c_2 = c_23;
					  c_2.xyz = (c_2.xyz + tmpvar_10);
					  c_2.w = 1.0;
					  tmpvar_1 = c_2;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ProjectionParams;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec3 tmpvar_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = 1.0;
					  tmpvar_6.xyz = _glesVertex.xyz;
					  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
					  highp vec3 tmpvar_7;
					  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_8;
					  tmpvar_8[0] = unity_WorldToObject[0].xyz;
					  tmpvar_8[1] = unity_WorldToObject[1].xyz;
					  tmpvar_8[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_9;
					  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
					  highp vec3 tmpvar_10;
					  highp vec3 I_11;
					  I_11 = (tmpvar_7 - _WorldSpaceCameraPos);
					  tmpvar_10 = (I_11 - (2.0 * (
					    dot (tmpvar_9, I_11)
					   * tmpvar_9)));
					  tmpvar_1 = tmpvar_10;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - tmpvar_7);
					  tmpvar_2 = tmpvar_12;
					  highp vec4 o_13;
					  highp vec4 tmpvar_14;
					  tmpvar_14 = (tmpvar_5 * 0.5);
					  highp vec2 tmpvar_15;
					  tmpvar_15.x = tmpvar_14.x;
					  tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
					  o_13.xy = (tmpvar_15 + tmpvar_14.w);
					  o_13.zw = tmpvar_5.zw;
					  tmpvar_3.zw = vec2(0.0, 0.0);
					  tmpvar_3.xy = vec2(0.0, 0.0);
					  highp mat3 tmpvar_16;
					  tmpvar_16[0] = unity_WorldToObject[0].xyz;
					  tmpvar_16[1] = unity_WorldToObject[1].xyz;
					  tmpvar_16[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_17;
					  tmpvar_17.w = 1.0;
					  tmpvar_17.xyz = normalize((_glesNormal * tmpvar_16));
					  mediump vec4 normal_18;
					  normal_18 = tmpvar_17;
					  mediump vec3 res_19;
					  mediump vec3 x_20;
					  x_20.x = dot (unity_SHAr, normal_18);
					  x_20.y = dot (unity_SHAg, normal_18);
					  x_20.z = dot (unity_SHAb, normal_18);
					  mediump vec3 x1_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22 = (normal_18.xyzz * normal_18.yzzx);
					  x1_21.x = dot (unity_SHBr, tmpvar_22);
					  x1_21.y = dot (unity_SHBg, tmpvar_22);
					  x1_21.z = dot (unity_SHBb, tmpvar_22);
					  res_19 = (x_20 + (x1_21 + (unity_SHC.xyz * 
					    ((normal_18.x * normal_18.x) - (normal_18.y * normal_18.y))
					  )));
					  mediump vec3 tmpvar_23;
					  tmpvar_23 = max (((1.055 * 
					    pow (max (res_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  res_19 = tmpvar_23;
					  tmpvar_4 = tmpvar_23;
					  gl_Position = tmpvar_5;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_9;
					  xlv_TEXCOORD3 = tmpvar_7;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = o_13;
					  xlv_TEXCOORD6 = tmpvar_3;
					  xlv_TEXCOORD7 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					uniform sampler2D _LightBuffer;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec4 c_2;
					  mediump vec4 light_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  highp vec3 tmpvar_6;
					  highp vec3 tmpvar_7;
					  mediump vec3 tmpvar_8;
					  tmpvar_8 = normalize(xlv_TEXCOORD4);
					  viewDir_5 = tmpvar_8;
					  tmpvar_6 = xlv_TEXCOORD1;
					  tmpvar_7 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_9;
					  lowp vec3 tmpvar_10;
					  lowp float tmpvar_11;
					  mediump float fres_12;
					  mediump float rim_13;
					  mediump float tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = clamp (dot (normalize(tmpvar_7), tmpvar_4), 0.0, 1.0);
					  tmpvar_14 = tmpvar_15;
					  rim_13 = (1.0 - tmpvar_14);
					  fres_12 = rim_13;
					  highp float tmpvar_16;
					  tmpvar_16 = pow (rim_13, _RimAmt);
					  rim_13 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = pow (fres_12, _FresAmt);
					  fres_12 = tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = clamp ((1.0 - (rim_13 * _RimPwr)), 0.0, 1.0);
					  tmpvar_9 = (_Color.xyz * tmpvar_18);
					  highp vec3 tmpvar_19;
					  tmpvar_19 = ((rim_13 * _RimColor) * _RimPwr).xyz;
					  tmpvar_9 = (tmpvar_9 + tmpvar_19);
					  tmpvar_11 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_13)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = textureCube (_Cube, tmpvar_6);
					  tmpvar_10 = ((tmpvar_20.xyz * _ReflectColor.xyz) * fres_12);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_LightBuffer, xlv_TEXCOORD5);
					  light_3 = tmpvar_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
					  light_3.w = tmpvar_22.w;
					  light_3.xyz = (tmpvar_22.xyz + xlv_TEXCOORD7);
					  lowp vec4 c_23;
					  lowp float spec_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = (tmpvar_22.w * tmpvar_11);
					  spec_24 = tmpvar_25;
					  c_23.xyz = ((tmpvar_9 * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_24));
					  c_23.w = (tmpvar_20.w * _ReflectColor.w);
					  c_2 = c_23;
					  c_2.xyz = (c_2.xyz + tmpvar_10);
					  c_2.w = 1.0;
					  tmpvar_1 = c_2;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp vec4 _ProjectionParams;
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec4 xlv_TEXCOORD6;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec3 tmpvar_4;
					  highp vec4 tmpvar_5;
					  highp vec4 tmpvar_6;
					  tmpvar_6.w = 1.0;
					  tmpvar_6.xyz = _glesVertex.xyz;
					  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
					  highp vec3 tmpvar_7;
					  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_8;
					  tmpvar_8[0] = unity_WorldToObject[0].xyz;
					  tmpvar_8[1] = unity_WorldToObject[1].xyz;
					  tmpvar_8[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_9;
					  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
					  highp vec3 tmpvar_10;
					  highp vec3 I_11;
					  I_11 = (tmpvar_7 - _WorldSpaceCameraPos);
					  tmpvar_10 = (I_11 - (2.0 * (
					    dot (tmpvar_9, I_11)
					   * tmpvar_9)));
					  tmpvar_1 = tmpvar_10;
					  highp vec3 tmpvar_12;
					  tmpvar_12 = (_WorldSpaceCameraPos - tmpvar_7);
					  tmpvar_2 = tmpvar_12;
					  highp vec4 o_13;
					  highp vec4 tmpvar_14;
					  tmpvar_14 = (tmpvar_5 * 0.5);
					  highp vec2 tmpvar_15;
					  tmpvar_15.x = tmpvar_14.x;
					  tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
					  o_13.xy = (tmpvar_15 + tmpvar_14.w);
					  o_13.zw = tmpvar_5.zw;
					  tmpvar_3.zw = vec2(0.0, 0.0);
					  tmpvar_3.xy = vec2(0.0, 0.0);
					  highp mat3 tmpvar_16;
					  tmpvar_16[0] = unity_WorldToObject[0].xyz;
					  tmpvar_16[1] = unity_WorldToObject[1].xyz;
					  tmpvar_16[2] = unity_WorldToObject[2].xyz;
					  highp vec4 tmpvar_17;
					  tmpvar_17.w = 1.0;
					  tmpvar_17.xyz = normalize((_glesNormal * tmpvar_16));
					  mediump vec4 normal_18;
					  normal_18 = tmpvar_17;
					  mediump vec3 res_19;
					  mediump vec3 x_20;
					  x_20.x = dot (unity_SHAr, normal_18);
					  x_20.y = dot (unity_SHAg, normal_18);
					  x_20.z = dot (unity_SHAb, normal_18);
					  mediump vec3 x1_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22 = (normal_18.xyzz * normal_18.yzzx);
					  x1_21.x = dot (unity_SHBr, tmpvar_22);
					  x1_21.y = dot (unity_SHBg, tmpvar_22);
					  x1_21.z = dot (unity_SHBb, tmpvar_22);
					  res_19 = (x_20 + (x1_21 + (unity_SHC.xyz * 
					    ((normal_18.x * normal_18.x) - (normal_18.y * normal_18.y))
					  )));
					  mediump vec3 tmpvar_23;
					  tmpvar_23 = max (((1.055 * 
					    pow (max (res_19, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
					  ) - 0.055), vec3(0.0, 0.0, 0.0));
					  res_19 = tmpvar_23;
					  tmpvar_4 = tmpvar_23;
					  gl_Position = tmpvar_5;
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_9;
					  xlv_TEXCOORD3 = tmpvar_7;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = o_13;
					  xlv_TEXCOORD6 = tmpvar_3;
					  xlv_TEXCOORD7 = tmpvar_4;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					uniform sampler2D _LightBuffer;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying highp vec3 xlv_TEXCOORD7;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec4 c_2;
					  mediump vec4 light_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  highp vec3 tmpvar_6;
					  highp vec3 tmpvar_7;
					  mediump vec3 tmpvar_8;
					  tmpvar_8 = normalize(xlv_TEXCOORD4);
					  viewDir_5 = tmpvar_8;
					  tmpvar_6 = xlv_TEXCOORD1;
					  tmpvar_7 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_9;
					  lowp vec3 tmpvar_10;
					  lowp float tmpvar_11;
					  mediump float fres_12;
					  mediump float rim_13;
					  mediump float tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = clamp (dot (normalize(tmpvar_7), tmpvar_4), 0.0, 1.0);
					  tmpvar_14 = tmpvar_15;
					  rim_13 = (1.0 - tmpvar_14);
					  fres_12 = rim_13;
					  highp float tmpvar_16;
					  tmpvar_16 = pow (rim_13, _RimAmt);
					  rim_13 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = pow (fres_12, _FresAmt);
					  fres_12 = tmpvar_17;
					  highp float tmpvar_18;
					  tmpvar_18 = clamp ((1.0 - (rim_13 * _RimPwr)), 0.0, 1.0);
					  tmpvar_9 = (_Color.xyz * tmpvar_18);
					  highp vec3 tmpvar_19;
					  tmpvar_19 = ((rim_13 * _RimColor) * _RimPwr).xyz;
					  tmpvar_9 = (tmpvar_9 + tmpvar_19);
					  tmpvar_11 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_13)
					  ) * _FlakeAmt));
					  lowp vec4 tmpvar_20;
					  tmpvar_20 = textureCube (_Cube, tmpvar_6);
					  tmpvar_10 = ((tmpvar_20.xyz * _ReflectColor.xyz) * fres_12);
					  lowp vec4 tmpvar_21;
					  tmpvar_21 = texture2DProj (_LightBuffer, xlv_TEXCOORD5);
					  light_3 = tmpvar_21;
					  mediump vec4 tmpvar_22;
					  tmpvar_22 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
					  light_3.w = tmpvar_22.w;
					  light_3.xyz = (tmpvar_22.xyz + xlv_TEXCOORD7);
					  lowp vec4 c_23;
					  lowp float spec_24;
					  mediump float tmpvar_25;
					  tmpvar_25 = (tmpvar_22.w * tmpvar_11);
					  spec_24 = tmpvar_25;
					  c_23.xyz = ((tmpvar_9 * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_24));
					  c_23.w = (tmpvar_20.w * _ReflectColor.w);
					  c_2 = c_23;
					  c_2.xyz = (c_2.xyz + tmpvar_10);
					  c_2.w = 1.0;
					  tmpvar_1 = c_2;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat18;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat20 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat20 = u_xlat20 + u_xlat20;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat20)) + (-u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD7.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp sampler2D _LightBuffer;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD7;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_8;
					vec2 u_xlat11;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat16_0.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_1 = log2(u_xlat16_0.x);
					    u_xlat1.xy = vec2(u_xlat16_1) * vec2(_RimAmt, _FresAmt);
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat1.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_0.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat11.x = (-u_xlat1.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = _Color.xyz * u_xlat11.xxx + u_xlat2.xyz;
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat10_1.x = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.x;
					    u_xlat1.x = u_xlat16_0.x * _FlakeAmt + _SpecColor.w;
					    u_xlat11.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10_0 = texture(_LightBuffer, u_xlat11.xy);
					    u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
					    u_xlat16_3.x = u_xlat1.x * u_xlat16_0.w;
					    u_xlat1.xzw = u_xlat16_0.xyz + vs_TEXCOORD7.xyz;
					    u_xlat16_8.xyz = u_xlat1.xzw * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat1.xzw + u_xlat16_3.xyz;
					    u_xlat10_1.xzw = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xzw * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat1.yyy + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat18;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat20 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat20 = u_xlat20 + u_xlat20;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat20)) + (-u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD7.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp sampler2D _LightBuffer;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD7;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_8;
					vec2 u_xlat11;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat16_0.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_1 = log2(u_xlat16_0.x);
					    u_xlat1.xy = vec2(u_xlat16_1) * vec2(_RimAmt, _FresAmt);
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat1.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_0.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat11.x = (-u_xlat1.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = _Color.xyz * u_xlat11.xxx + u_xlat2.xyz;
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat10_1.x = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.x;
					    u_xlat1.x = u_xlat16_0.x * _FlakeAmt + _SpecColor.w;
					    u_xlat11.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10_0 = texture(_LightBuffer, u_xlat11.xy);
					    u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
					    u_xlat16_3.x = u_xlat1.x * u_xlat16_0.w;
					    u_xlat1.xzw = u_xlat16_0.xyz + vs_TEXCOORD7.xyz;
					    u_xlat16_8.xyz = u_xlat1.xzw * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat1.xzw + u_xlat16_3.xyz;
					    u_xlat10_1.xzw = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xzw * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat1.yyy + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					out highp vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat18;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat20 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat20 = u_xlat20 + u_xlat20;
					    u_xlat3.xyz = u_xlat0.xyz * (-vec3(u_xlat20)) + (-u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_4.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_4.xyz = unity_SHC.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat16_4.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD7.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp sampler2D _LightBuffer;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD7;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_8;
					vec2 u_xlat11;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat16_0.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_1 = log2(u_xlat16_0.x);
					    u_xlat1.xy = vec2(u_xlat16_1) * vec2(_RimAmt, _FresAmt);
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat1.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_0.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat11.x = (-u_xlat1.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = _Color.xyz * u_xlat11.xxx + u_xlat2.xyz;
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat10_1.x = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.x;
					    u_xlat1.x = u_xlat16_0.x * _FlakeAmt + _SpecColor.w;
					    u_xlat11.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10_0 = texture(_LightBuffer, u_xlat11.xy);
					    u_xlat16_0 = max(u_xlat10_0, vec4(0.00100000005, 0.00100000005, 0.00100000005, 0.00100000005));
					    u_xlat16_3.x = u_xlat1.x * u_xlat16_0.w;
					    u_xlat1.xzw = u_xlat16_0.xyz + vs_TEXCOORD7.xyz;
					    u_xlat16_8.xyz = u_xlat1.xzw * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat1.xzw + u_xlat16_3.xyz;
					    u_xlat10_1.xzw = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xzw * _ReflectColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat1.yyy + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 337
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %95 %101 %102 %124 %128 %188 %191 %193 %210 %222 %327 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 RelaxedPrecision 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 RelaxedPrecision 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 RelaxedPrecision 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 RelaxedPrecision 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpMemberDecorate %20 9 Offset 20 
					                                                      OpMemberDecorate %20 10 Offset 20 
					                                                      OpMemberDecorate %20 11 Offset 20 
					                                                      OpMemberDecorate %20 12 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %93 0 BuiltIn 93 
					                                                      OpMemberDecorate %93 1 BuiltIn 93 
					                                                      OpMemberDecorate %93 2 BuiltIn 93 
					                                                      OpDecorate %93 Block 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %124 Location 124 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %188 Location 188 
					                                                      OpDecorate %191 RelaxedPrecision 
					                                                      OpDecorate %191 Location 191 
					                                                      OpDecorate %193 Location 193 
					                                                      OpDecorate %210 Location 210 
					                                                      OpDecorate %222 Location 222 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %248 RelaxedPrecision 
					                                                      OpDecorate %251 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %263 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %273 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %295 RelaxedPrecision 
					                                                      OpDecorate %296 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %327 Location 327 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 9 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 11 
					                                          u32 %91 = OpConstant 1 
					                                              %92 = OpTypeArray %6 %91 
					                                              %93 = OpTypeStruct %7 %6 %92 
					                                              %94 = OpTypePointer Output %93 
					         Output struct {f32_4; f32; f32[1];}* %95 = OpVariable Output 
					                                              %97 = OpTypePointer Output %7 
					                                              %99 = OpTypeVector %6 2 
					                                             %100 = OpTypePointer Output %99 
					                               Output f32_2* %101 = OpVariable Output 
					                                Input f32_4* %102 = OpVariable Input 
					                                         i32 %105 = OpConstant 12 
					                                             %117 = OpTypePointer Uniform %14 
					                                             %123 = OpTypePointer Output %14 
					                               Output f32_3* %124 = OpVariable Output 
					                                             %127 = OpTypePointer Input %14 
					                                Input f32_3* %128 = OpVariable Input 
					                                         i32 %130 = OpConstant 10 
					                                         u32 %135 = OpConstant 0 
					                                             %136 = OpTypePointer Private %6 
					                                         u32 %149 = OpConstant 2 
					                                Private f32* %151 = OpVariable Private 
					                                Private f32* %166 = OpVariable Private 
					                                             %176 = OpTypePointer Private %14 
					                              Private f32_3* %177 = OpVariable Private 
					                               Output f32_3* %188 = OpVariable Output 
					                               Output f32_3* %191 = OpVariable Output 
					                               Output f32_3* %193 = OpVariable Output 
					                                             %198 = OpTypePointer Uniform %6 
					                                         f32 %205 = OpConstant 3.674022E-40 
					                                       f32_3 %206 = OpConstantComposite %205 %205 %205 
					                               Output f32_4* %210 = OpVariable Output 
					                               Output f32_4* %222 = OpVariable Output 
					                                         f32 %223 = OpConstant 3.674022E-40 
					                                       f32_4 %224 = OpConstantComposite %223 %223 %223 %223 
					                              Private f32_3* %225 = OpVariable Private 
					                              Private f32_4* %242 = OpVariable Private 
					                              Private f32_3* %248 = OpVariable Private 
					                                         i32 %249 = OpConstant 5 
					                                         i32 %255 = OpConstant 6 
					                                         i32 %261 = OpConstant 7 
					                                         i32 %267 = OpConstant 8 
					                                         f32 %276 = OpConstant 3.674022E-40 
					                                         u32 %277 = OpConstant 3 
					                                         i32 %289 = OpConstant 4 
					                                       f32_3 %299 = OpConstantComposite %223 %223 %223 
					                                         f32 %307 = OpConstant 3.674022E-40 
					                                       f32_3 %308 = OpConstantComposite %307 %307 %307 
					                                         f32 %319 = OpConstant 3.674022E-40 
					                                       f32_3 %320 = OpConstantComposite %319 %319 %319 
					                                         f32 %322 = OpConstant 3.674022E-40 
					                                       f32_3 %323 = OpConstantComposite %322 %322 %322 
					                               Output f32_3* %327 = OpVariable Output 
					                                             %331 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %84 = OpAccessChain %22 %66 %48 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpLoad %46 
					                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
					                                        f32_4 %88 = OpFMul %85 %87 
					                                        f32_4 %89 = OpLoad %63 
					                                        f32_4 %90 = OpFAdd %88 %89 
					                                                      OpStore %46 %90 
					                                        f32_4 %96 = OpLoad %46 
					                                Output f32_4* %98 = OpAccessChain %95 %30 
					                                                      OpStore %98 %96 
					                                       f32_4 %103 = OpLoad %102 
					                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
					                              Uniform f32_4* %106 = OpAccessChain %22 %105 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
					                                       f32_2 %109 = OpFMul %104 %108 
					                              Uniform f32_4* %110 = OpAccessChain %22 %105 
					                                       f32_4 %111 = OpLoad %110 
					                                       f32_2 %112 = OpVectorShuffle %111 %111 2 3 
					                                       f32_2 %113 = OpFAdd %109 %112 
					                                                      OpStore %101 %113 
					                                       f32_4 %114 = OpLoad %9 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                       f32_3 %116 = OpFNegate %115 
					                              Uniform f32_3* %118 = OpAccessChain %22 %30 
					                                       f32_3 %119 = OpLoad %118 
					                                       f32_3 %120 = OpFAdd %116 %119 
					                                       f32_4 %121 = OpLoad %63 
					                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
					                                                      OpStore %63 %122 
					                                       f32_4 %125 = OpLoad %9 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
					                                                      OpStore %124 %126 
					                                       f32_3 %129 = OpLoad %128 
					                              Uniform f32_4* %131 = OpAccessChain %22 %130 %30 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %129 %133 
					                                Private f32* %137 = OpAccessChain %9 %135 
					                                                      OpStore %137 %134 
					                                       f32_3 %138 = OpLoad %128 
					                              Uniform f32_4* %139 = OpAccessChain %22 %130 %25 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %9 %91 
					                                                      OpStore %143 %142 
					                                       f32_3 %144 = OpLoad %128 
					                              Uniform f32_4* %145 = OpAccessChain %22 %130 %38 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %144 %147 
					                                Private f32* %150 = OpAccessChain %9 %149 
					                                                      OpStore %150 %148 
					                                       f32_4 %152 = OpLoad %9 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                                      OpStore %151 %156 
					                                         f32 %157 = OpLoad %151 
					                                         f32 %158 = OpExtInst %1 32 %157 
					                                                      OpStore %151 %158 
					                                         f32 %159 = OpLoad %151 
					                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
					                                       f32_4 %161 = OpLoad %9 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %9 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %9 %165 
					                                       f32_4 %167 = OpLoad %63 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
					                                       f32_3 %169 = OpFNegate %168 
					                                       f32_4 %170 = OpLoad %9 
					                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                         f32 %172 = OpDot %169 %171 
					                                                      OpStore %166 %172 
					                                         f32 %173 = OpLoad %166 
					                                         f32 %174 = OpLoad %166 
					                                         f32 %175 = OpFAdd %173 %174 
					                                                      OpStore %166 %175 
					                                       f32_4 %178 = OpLoad %9 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpLoad %166 
					                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFMul %179 %182 
					                                       f32_4 %184 = OpLoad %63 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
					                                       f32_3 %186 = OpFNegate %185 
					                                       f32_3 %187 = OpFAdd %183 %186 
					                                                      OpStore %177 %187 
					                                       f32_4 %189 = OpLoad %63 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                                      OpStore %188 %190 
					                                       f32_3 %192 = OpLoad %177 
					                                                      OpStore %191 %192 
					                                       f32_4 %194 = OpLoad %9 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
					                                                      OpStore %193 %195 
					                                Private f32* %196 = OpAccessChain %46 %91 
					                                         f32 %197 = OpLoad %196 
					                                Uniform f32* %199 = OpAccessChain %22 %25 %135 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpFMul %197 %200 
					                                Private f32* %202 = OpAccessChain %46 %91 
					                                                      OpStore %202 %201 
					                                       f32_4 %203 = OpLoad %46 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 3 1 
					                                       f32_3 %207 = OpFMul %204 %206 
					                                       f32_4 %208 = OpLoad %63 
					                                       f32_4 %209 = OpVectorShuffle %208 %207 4 1 5 6 
					                                                      OpStore %63 %209 
					                                       f32_4 %211 = OpLoad %46 
					                                       f32_2 %212 = OpVectorShuffle %211 %211 2 3 
					                                       f32_4 %213 = OpLoad %210 
					                                       f32_4 %214 = OpVectorShuffle %213 %212 0 1 4 5 
					                                                      OpStore %210 %214 
					                                       f32_4 %215 = OpLoad %63 
					                                       f32_2 %216 = OpVectorShuffle %215 %215 2 2 
					                                       f32_4 %217 = OpLoad %63 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 3 
					                                       f32_2 %219 = OpFAdd %216 %218 
					                                       f32_4 %220 = OpLoad %210 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 2 3 
					                                                      OpStore %210 %221 
					                                                      OpStore %222 %224 
					                                Private f32* %226 = OpAccessChain %9 %91 
					                                         f32 %227 = OpLoad %226 
					                                Private f32* %228 = OpAccessChain %9 %91 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFMul %227 %229 
					                                Private f32* %231 = OpAccessChain %225 %135 
					                                                      OpStore %231 %230 
					                                Private f32* %232 = OpAccessChain %9 %135 
					                                         f32 %233 = OpLoad %232 
					                                Private f32* %234 = OpAccessChain %9 %135 
					                                         f32 %235 = OpLoad %234 
					                                         f32 %236 = OpFMul %233 %235 
					                                Private f32* %237 = OpAccessChain %225 %135 
					                                         f32 %238 = OpLoad %237 
					                                         f32 %239 = OpFNegate %238 
					                                         f32 %240 = OpFAdd %236 %239 
					                                Private f32* %241 = OpAccessChain %225 %135 
					                                                      OpStore %241 %240 
					                                       f32_4 %243 = OpLoad %9 
					                                       f32_4 %244 = OpVectorShuffle %243 %243 1 2 2 0 
					                                       f32_4 %245 = OpLoad %9 
					                                       f32_4 %246 = OpVectorShuffle %245 %245 0 1 2 2 
					                                       f32_4 %247 = OpFMul %244 %246 
					                                                      OpStore %242 %247 
					                              Uniform f32_4* %250 = OpAccessChain %22 %249 
					                                       f32_4 %251 = OpLoad %250 
					                                       f32_4 %252 = OpLoad %242 
					                                         f32 %253 = OpDot %251 %252 
					                                Private f32* %254 = OpAccessChain %248 %135 
					                                                      OpStore %254 %253 
					                              Uniform f32_4* %256 = OpAccessChain %22 %255 
					                                       f32_4 %257 = OpLoad %256 
					                                       f32_4 %258 = OpLoad %242 
					                                         f32 %259 = OpDot %257 %258 
					                                Private f32* %260 = OpAccessChain %248 %91 
					                                                      OpStore %260 %259 
					                              Uniform f32_4* %262 = OpAccessChain %22 %261 
					                                       f32_4 %263 = OpLoad %262 
					                                       f32_4 %264 = OpLoad %242 
					                                         f32 %265 = OpDot %263 %264 
					                                Private f32* %266 = OpAccessChain %248 %149 
					                                                      OpStore %266 %265 
					                              Uniform f32_4* %268 = OpAccessChain %22 %267 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
					                                       f32_3 %271 = OpLoad %225 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
					                                       f32_3 %273 = OpFMul %270 %272 
					                                       f32_3 %274 = OpLoad %248 
					                                       f32_3 %275 = OpFAdd %273 %274 
					                                                      OpStore %225 %275 
					                                Private f32* %278 = OpAccessChain %9 %277 
					                                                      OpStore %278 %276 
					                              Uniform f32_4* %279 = OpAccessChain %22 %38 
					                                       f32_4 %280 = OpLoad %279 
					                                       f32_4 %281 = OpLoad %9 
					                                         f32 %282 = OpDot %280 %281 
					                                Private f32* %283 = OpAccessChain %248 %135 
					                                                      OpStore %283 %282 
					                              Uniform f32_4* %284 = OpAccessChain %22 %48 
					                                       f32_4 %285 = OpLoad %284 
					                                       f32_4 %286 = OpLoad %9 
					                                         f32 %287 = OpDot %285 %286 
					                                Private f32* %288 = OpAccessChain %248 %91 
					                                                      OpStore %288 %287 
					                              Uniform f32_4* %290 = OpAccessChain %22 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_4 %292 = OpLoad %9 
					                                         f32 %293 = OpDot %291 %292 
					                                Private f32* %294 = OpAccessChain %248 %149 
					                                                      OpStore %294 %293 
					                                       f32_3 %295 = OpLoad %225 
					                                       f32_3 %296 = OpLoad %248 
					                                       f32_3 %297 = OpFAdd %295 %296 
					                                                      OpStore %225 %297 
					                                       f32_3 %298 = OpLoad %225 
					                                       f32_3 %300 = OpExtInst %1 40 %298 %299 
					                                                      OpStore %225 %300 
					                                       f32_3 %301 = OpLoad %225 
					                                       f32_3 %302 = OpExtInst %1 30 %301 
					                                       f32_4 %303 = OpLoad %9 
					                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
					                                                      OpStore %9 %304 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
					                                       f32_3 %309 = OpFMul %306 %308 
					                                       f32_4 %310 = OpLoad %9 
					                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
					                                                      OpStore %9 %311 
					                                       f32_4 %312 = OpLoad %9 
					                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
					                                       f32_3 %314 = OpExtInst %1 29 %313 
					                                       f32_4 %315 = OpLoad %9 
					                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
					                                                      OpStore %9 %316 
					                                       f32_4 %317 = OpLoad %9 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
					                                       f32_3 %321 = OpFMul %318 %320 
					                                       f32_3 %324 = OpFAdd %321 %323 
					                                       f32_4 %325 = OpLoad %9 
					                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
					                                                      OpStore %9 %326 
					                                       f32_4 %328 = OpLoad %9 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_3 %330 = OpExtInst %1 40 %329 %299 
					                                                      OpStore %327 %330 
					                                 Output f32* %332 = OpAccessChain %95 %30 %91 
					                                         f32 %333 = OpLoad %332 
					                                         f32 %334 = OpFNegate %333 
					                                 Output f32* %335 = OpAccessChain %95 %30 %91 
					                                                      OpStore %335 %334 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 239
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %33 %137 %161 %185 %212 %227 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %9 RelaxedPrecision 
					                                                      OpDecorate %12 RelaxedPrecision 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %13 RelaxedPrecision 
					                                                      OpDecorate %14 RelaxedPrecision 
					                                                      OpDecorate %15 RelaxedPrecision 
					                                                      OpDecorate %21 RelaxedPrecision 
					                                                      OpDecorate %22 RelaxedPrecision 
					                                                      OpDecorate %24 RelaxedPrecision 
					                                                      OpDecorate %25 RelaxedPrecision 
					                                                      OpDecorate %26 RelaxedPrecision 
					                                                      OpDecorate %27 RelaxedPrecision 
					                                                      OpDecorate %31 RelaxedPrecision 
					                                                      OpDecorate %32 RelaxedPrecision 
					                                                      OpDecorate %33 Location 33 
					                                                      OpDecorate %48 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %52 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 Offset 55 
					                                                      OpMemberDecorate %55 1 RelaxedPrecision 
					                                                      OpMemberDecorate %55 1 Offset 55 
					                                                      OpMemberDecorate %55 2 RelaxedPrecision 
					                                                      OpMemberDecorate %55 2 Offset 55 
					                                                      OpMemberDecorate %55 3 Offset 55 
					                                                      OpMemberDecorate %55 4 Offset 55 
					                                                      OpMemberDecorate %55 5 Offset 55 
					                                                      OpMemberDecorate %55 6 Offset 55 
					                                                      OpMemberDecorate %55 7 RelaxedPrecision 
					                                                      OpMemberDecorate %55 7 Offset 55 
					                                                      OpDecorate %55 Block 
					                                                      OpDecorate %57 DescriptorSet 57 
					                                                      OpDecorate %57 Binding 57 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %119 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %134 RelaxedPrecision 
					                                                      OpDecorate %134 DescriptorSet 134 
					                                                      OpDecorate %134 Binding 134 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %137 Location 137 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %168 DescriptorSet 168 
					                                                      OpDecorate %168 Binding 168 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %175 RelaxedPrecision 
					                                                      OpDecorate %176 RelaxedPrecision 
					                                                      OpDecorate %180 RelaxedPrecision 
					                                                      OpDecorate %183 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %185 Location 185 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %197 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %200 RelaxedPrecision 
					                                                      OpDecorate %205 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %210 DescriptorSet 210 
					                                                      OpDecorate %210 Binding 210 
					                                                      OpDecorate %211 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %212 Location 212 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %227 Location 227 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 0 
					                                              %18 = OpTypePointer Private %6 
					                               Private f32_4* %30 = OpVariable Private 
					                                 Input f32_3* %33 = OpVariable Input 
					                                          f32 %39 = OpConstant 3.674022E-40 
					                                          f32 %40 = OpConstant 3.674022E-40 
					                                 Private f32* %48 = OpVariable Private 
					                                              %53 = OpTypeVector %6 2 
					                                              %55 = OpTypeStruct %7 %7 %7 %6 %6 %6 %6 %7 
					                                              %56 = OpTypePointer Uniform %55 
					Uniform struct {f32_4; f32_4; f32_4; f32; f32; f32; f32; f32_4;}* %57 = OpVariable Uniform 
					                                              %58 = OpTypeInt 32 1 
					                                          i32 %59 = OpConstant 5 
					                                              %60 = OpTypePointer Uniform %6 
					                                          i32 %63 = OpConstant 3 
					                                          i32 %77 = OpConstant 7 
					                                              %78 = OpTypePointer Uniform %7 
					                                              %85 = OpTypePointer Private %10 
					                               Private f32_3* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 6 
					                                             %102 = OpTypePointer Private %53 
					                              Private f32_2* %103 = OpVariable Private 
					                                         i32 %116 = OpConstant 1 
					                              Private f32_4* %130 = OpVariable Private 
					                                             %131 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %132 = OpTypeSampledImage %131 
					                                             %133 = OpTypePointer UniformConstant %132 
					 UniformConstant read_only Texture2DSampled* %134 = OpVariable UniformConstant 
					                                             %136 = OpTypePointer Input %53 
					                                Input f32_2* %137 = OpVariable Input 
					                                         u32 %140 = OpConstant 3 
					                                         i32 %151 = OpConstant 4 
					                                         i32 %155 = OpConstant 0 
					                                             %160 = OpTypePointer Input %7 
					                                Input f32_4* %161 = OpVariable Input 
					                              Private f32_4* %167 = OpVariable Private 
					 UniformConstant read_only Texture2DSampled* %168 = OpVariable UniformConstant 
					                                         f32 %173 = OpConstant 3.674022E-40 
					                                       f32_4 %174 = OpConstantComposite %173 %173 %173 %173 
					                              Private f32_3* %176 = OpVariable Private 
					                                Input f32_3* %185 = OpVariable Input 
					                              Private f32_3* %190 = OpVariable Private 
					                                             %207 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %208 = OpTypeSampledImage %207 
					                                             %209 = OpTypePointer UniformConstant %208 
					UniformConstant read_only TextureCubeSampled* %210 = OpVariable UniformConstant 
					                                Input f32_3* %212 = OpVariable Input 
					                              Private f32_3* %218 = OpVariable Private 
					                                         i32 %221 = OpConstant 2 
					                                             %226 = OpTypePointer Output %7 
					                               Output f32_4* %227 = OpVariable Output 
					                                             %236 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_3 %14 = OpLoad %12 
					                                          f32 %15 = OpDot %13 %14 
					                                 Private f32* %19 = OpAccessChain %9 %17 
					                                                      OpStore %19 %15 
					                                 Private f32* %20 = OpAccessChain %9 %17 
					                                          f32 %21 = OpLoad %20 
					                                          f32 %22 = OpExtInst %1 32 %21 
					                                 Private f32* %23 = OpAccessChain %9 %17 
					                                                      OpStore %23 %22 
					                                        f32_4 %24 = OpLoad %9 
					                                        f32_3 %25 = OpVectorShuffle %24 %24 0 0 0 
					                                        f32_3 %26 = OpLoad %12 
					                                        f32_3 %27 = OpFMul %25 %26 
					                                        f32_4 %28 = OpLoad %9 
					                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
					                                                      OpStore %9 %29 
					                                        f32_4 %31 = OpLoad %9 
					                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
					                                        f32_3 %34 = OpLoad %33 
					                                          f32 %35 = OpDot %32 %34 
					                                 Private f32* %36 = OpAccessChain %30 %17 
					                                                      OpStore %36 %35 
					                                 Private f32* %37 = OpAccessChain %30 %17 
					                                          f32 %38 = OpLoad %37 
					                                          f32 %41 = OpExtInst %1 43 %38 %39 %40 
					                                 Private f32* %42 = OpAccessChain %30 %17 
					                                                      OpStore %42 %41 
					                                 Private f32* %43 = OpAccessChain %30 %17 
					                                          f32 %44 = OpLoad %43 
					                                          f32 %45 = OpFNegate %44 
					                                          f32 %46 = OpFAdd %45 %40 
					                                 Private f32* %47 = OpAccessChain %9 %17 
					                                                      OpStore %47 %46 
					                                 Private f32* %49 = OpAccessChain %9 %17 
					                                          f32 %50 = OpLoad %49 
					                                          f32 %51 = OpExtInst %1 30 %50 
					                                                      OpStore %48 %51 
					                                          f32 %52 = OpLoad %48 
					                                        f32_2 %54 = OpCompositeConstruct %52 %52 
					                                 Uniform f32* %61 = OpAccessChain %57 %59 
					                                          f32 %62 = OpLoad %61 
					                                 Uniform f32* %64 = OpAccessChain %57 %63 
					                                          f32 %65 = OpLoad %64 
					                                        f32_2 %66 = OpCompositeConstruct %62 %65 
					                                        f32_2 %67 = OpFMul %54 %66 
					                                        f32_4 %68 = OpLoad %30 
					                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 2 3 
					                                                      OpStore %30 %69 
					                                        f32_4 %70 = OpLoad %30 
					                                        f32_2 %71 = OpVectorShuffle %70 %70 0 1 
					                                        f32_2 %72 = OpExtInst %1 29 %71 
					                                        f32_4 %73 = OpLoad %30 
					                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 2 3 
					                                                      OpStore %30 %74 
					                                        f32_4 %75 = OpLoad %30 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 0 0 
					                               Uniform f32_4* %79 = OpAccessChain %57 %77 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
					                                        f32_3 %82 = OpFMul %76 %81 
					                                        f32_4 %83 = OpLoad %9 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
					                                                      OpStore %9 %84 
					                                        f32_4 %87 = OpLoad %9 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                 Uniform f32* %90 = OpAccessChain %57 %89 
					                                          f32 %91 = OpLoad %90 
					                                 Uniform f32* %92 = OpAccessChain %57 %89 
					                                          f32 %93 = OpLoad %92 
					                                 Uniform f32* %94 = OpAccessChain %57 %89 
					                                          f32 %95 = OpLoad %94 
					                                        f32_3 %96 = OpCompositeConstruct %91 %93 %95 
					                                          f32 %97 = OpCompositeExtract %96 0 
					                                          f32 %98 = OpCompositeExtract %96 1 
					                                          f32 %99 = OpCompositeExtract %96 2 
					                                       f32_3 %100 = OpCompositeConstruct %97 %98 %99 
					                                       f32_3 %101 = OpFMul %88 %100 
					                                                      OpStore %86 %101 
					                                Private f32* %104 = OpAccessChain %30 %17 
					                                         f32 %105 = OpLoad %104 
					                                         f32 %106 = OpFNegate %105 
					                                Uniform f32* %107 = OpAccessChain %57 %89 
					                                         f32 %108 = OpLoad %107 
					                                         f32 %109 = OpFMul %106 %108 
					                                         f32 %110 = OpFAdd %109 %40 
					                                Private f32* %111 = OpAccessChain %103 %17 
					                                                      OpStore %111 %110 
					                                Private f32* %112 = OpAccessChain %103 %17 
					                                         f32 %113 = OpLoad %112 
					                                         f32 %114 = OpExtInst %1 43 %113 %39 %40 
					                                Private f32* %115 = OpAccessChain %103 %17 
					                                                      OpStore %115 %114 
					                              Uniform f32_4* %117 = OpAccessChain %57 %116 
					                                       f32_4 %118 = OpLoad %117 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_2 %120 = OpLoad %103 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
					                                       f32_3 %122 = OpFMul %119 %121 
					                                       f32_3 %123 = OpLoad %86 
					                                       f32_3 %124 = OpFAdd %122 %123 
					                                                      OpStore %86 %124 
					                                Private f32* %125 = OpAccessChain %30 %17 
					                                         f32 %126 = OpLoad %125 
					                                         f32 %127 = OpFNegate %126 
					                                         f32 %128 = OpFAdd %127 %40 
					                                Private f32* %129 = OpAccessChain %9 %17 
					                                                      OpStore %129 %128 
					                  read_only Texture2DSampled %135 = OpLoad %134 
					                                       f32_2 %138 = OpLoad %137 
					                                       f32_4 %139 = OpImageSampleImplicitLod %135 %138 
					                                         f32 %141 = OpCompositeExtract %139 3 
					                                Private f32* %142 = OpAccessChain %130 %17 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %9 %17 
					                                         f32 %144 = OpLoad %143 
					                                Private f32* %145 = OpAccessChain %130 %17 
					                                         f32 %146 = OpLoad %145 
					                                         f32 %147 = OpFMul %144 %146 
					                                Private f32* %148 = OpAccessChain %9 %17 
					                                                      OpStore %148 %147 
					                                Private f32* %149 = OpAccessChain %9 %17 
					                                         f32 %150 = OpLoad %149 
					                                Uniform f32* %152 = OpAccessChain %57 %151 
					                                         f32 %153 = OpLoad %152 
					                                         f32 %154 = OpFMul %150 %153 
					                                Uniform f32* %156 = OpAccessChain %57 %155 %140 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpFAdd %154 %157 
					                                Private f32* %159 = OpAccessChain %30 %17 
					                                                      OpStore %159 %158 
					                                       f32_4 %162 = OpLoad %161 
					                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
					                                       f32_4 %164 = OpLoad %161 
					                                       f32_2 %165 = OpVectorShuffle %164 %164 3 3 
					                                       f32_2 %166 = OpFDiv %163 %165 
					                                                      OpStore %103 %166 
					                  read_only Texture2DSampled %169 = OpLoad %168 
					                                       f32_2 %170 = OpLoad %103 
					                                       f32_4 %171 = OpImageSampleImplicitLod %169 %170 
					                                                      OpStore %167 %171 
					                                       f32_4 %172 = OpLoad %167 
					                                       f32_4 %175 = OpExtInst %1 40 %172 %174 
					                                                      OpStore %9 %175 
					                                Private f32* %177 = OpAccessChain %30 %17 
					                                         f32 %178 = OpLoad %177 
					                                Private f32* %179 = OpAccessChain %9 %140 
					                                         f32 %180 = OpLoad %179 
					                                         f32 %181 = OpFMul %178 %180 
					                                Private f32* %182 = OpAccessChain %176 %17 
					                                                      OpStore %182 %181 
					                                       f32_4 %183 = OpLoad %9 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                       f32_3 %186 = OpLoad %185 
					                                       f32_3 %187 = OpFAdd %184 %186 
					                                       f32_4 %188 = OpLoad %30 
					                                       f32_4 %189 = OpVectorShuffle %188 %187 4 1 5 6 
					                                                      OpStore %30 %189 
					                                       f32_4 %191 = OpLoad %30 
					                                       f32_3 %192 = OpVectorShuffle %191 %191 0 2 3 
					                              Uniform f32_4* %193 = OpAccessChain %57 %155 
					                                       f32_4 %194 = OpLoad %193 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
					                                       f32_3 %196 = OpFMul %192 %195 
					                                                      OpStore %190 %196 
					                                       f32_3 %197 = OpLoad %176 
					                                       f32_3 %198 = OpVectorShuffle %197 %197 0 0 0 
					                                       f32_3 %199 = OpLoad %190 
					                                       f32_3 %200 = OpFMul %198 %199 
					                                                      OpStore %176 %200 
					                                       f32_3 %201 = OpLoad %86 
					                                       f32_4 %202 = OpLoad %30 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 2 3 
					                                       f32_3 %204 = OpFMul %201 %203 
					                                       f32_3 %205 = OpLoad %176 
					                                       f32_3 %206 = OpFAdd %204 %205 
					                                                      OpStore %176 %206 
					                read_only TextureCubeSampled %211 = OpLoad %210 
					                                       f32_3 %213 = OpLoad %212 
					                                       f32_4 %214 = OpImageSampleImplicitLod %211 %213 
					                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
					                                       f32_4 %216 = OpLoad %130 
					                                       f32_4 %217 = OpVectorShuffle %216 %215 4 1 5 6 
					                                                      OpStore %130 %217 
					                                       f32_4 %219 = OpLoad %130 
					                                       f32_3 %220 = OpVectorShuffle %219 %219 0 2 3 
					                              Uniform f32_4* %222 = OpAccessChain %57 %221 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
					                                       f32_3 %225 = OpFMul %220 %224 
					                                                      OpStore %218 %225 
					                                       f32_3 %228 = OpLoad %218 
					                                       f32_4 %229 = OpLoad %30 
					                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
					                                       f32_3 %231 = OpFMul %228 %230 
					                                       f32_3 %232 = OpLoad %176 
					                                       f32_3 %233 = OpFAdd %231 %232 
					                                       f32_4 %234 = OpLoad %227 
					                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
					                                                      OpStore %227 %235 
					                                 Output f32* %237 = OpAccessChain %227 %140 
					                                                      OpStore %237 %40 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 337
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %95 %101 %102 %124 %128 %188 %191 %193 %210 %222 %327 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 RelaxedPrecision 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 RelaxedPrecision 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 RelaxedPrecision 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 RelaxedPrecision 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpMemberDecorate %20 9 Offset 20 
					                                                      OpMemberDecorate %20 10 Offset 20 
					                                                      OpMemberDecorate %20 11 Offset 20 
					                                                      OpMemberDecorate %20 12 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %93 0 BuiltIn 93 
					                                                      OpMemberDecorate %93 1 BuiltIn 93 
					                                                      OpMemberDecorate %93 2 BuiltIn 93 
					                                                      OpDecorate %93 Block 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %124 Location 124 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %188 Location 188 
					                                                      OpDecorate %191 RelaxedPrecision 
					                                                      OpDecorate %191 Location 191 
					                                                      OpDecorate %193 Location 193 
					                                                      OpDecorate %210 Location 210 
					                                                      OpDecorate %222 Location 222 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %248 RelaxedPrecision 
					                                                      OpDecorate %251 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %263 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %273 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %295 RelaxedPrecision 
					                                                      OpDecorate %296 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %327 Location 327 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 9 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 11 
					                                          u32 %91 = OpConstant 1 
					                                              %92 = OpTypeArray %6 %91 
					                                              %93 = OpTypeStruct %7 %6 %92 
					                                              %94 = OpTypePointer Output %93 
					         Output struct {f32_4; f32; f32[1];}* %95 = OpVariable Output 
					                                              %97 = OpTypePointer Output %7 
					                                              %99 = OpTypeVector %6 2 
					                                             %100 = OpTypePointer Output %99 
					                               Output f32_2* %101 = OpVariable Output 
					                                Input f32_4* %102 = OpVariable Input 
					                                         i32 %105 = OpConstant 12 
					                                             %117 = OpTypePointer Uniform %14 
					                                             %123 = OpTypePointer Output %14 
					                               Output f32_3* %124 = OpVariable Output 
					                                             %127 = OpTypePointer Input %14 
					                                Input f32_3* %128 = OpVariable Input 
					                                         i32 %130 = OpConstant 10 
					                                         u32 %135 = OpConstant 0 
					                                             %136 = OpTypePointer Private %6 
					                                         u32 %149 = OpConstant 2 
					                                Private f32* %151 = OpVariable Private 
					                                Private f32* %166 = OpVariable Private 
					                                             %176 = OpTypePointer Private %14 
					                              Private f32_3* %177 = OpVariable Private 
					                               Output f32_3* %188 = OpVariable Output 
					                               Output f32_3* %191 = OpVariable Output 
					                               Output f32_3* %193 = OpVariable Output 
					                                             %198 = OpTypePointer Uniform %6 
					                                         f32 %205 = OpConstant 3.674022E-40 
					                                       f32_3 %206 = OpConstantComposite %205 %205 %205 
					                               Output f32_4* %210 = OpVariable Output 
					                               Output f32_4* %222 = OpVariable Output 
					                                         f32 %223 = OpConstant 3.674022E-40 
					                                       f32_4 %224 = OpConstantComposite %223 %223 %223 %223 
					                              Private f32_3* %225 = OpVariable Private 
					                              Private f32_4* %242 = OpVariable Private 
					                              Private f32_3* %248 = OpVariable Private 
					                                         i32 %249 = OpConstant 5 
					                                         i32 %255 = OpConstant 6 
					                                         i32 %261 = OpConstant 7 
					                                         i32 %267 = OpConstant 8 
					                                         f32 %276 = OpConstant 3.674022E-40 
					                                         u32 %277 = OpConstant 3 
					                                         i32 %289 = OpConstant 4 
					                                       f32_3 %299 = OpConstantComposite %223 %223 %223 
					                                         f32 %307 = OpConstant 3.674022E-40 
					                                       f32_3 %308 = OpConstantComposite %307 %307 %307 
					                                         f32 %319 = OpConstant 3.674022E-40 
					                                       f32_3 %320 = OpConstantComposite %319 %319 %319 
					                                         f32 %322 = OpConstant 3.674022E-40 
					                                       f32_3 %323 = OpConstantComposite %322 %322 %322 
					                               Output f32_3* %327 = OpVariable Output 
					                                             %331 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %84 = OpAccessChain %22 %66 %48 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpLoad %46 
					                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
					                                        f32_4 %88 = OpFMul %85 %87 
					                                        f32_4 %89 = OpLoad %63 
					                                        f32_4 %90 = OpFAdd %88 %89 
					                                                      OpStore %46 %90 
					                                        f32_4 %96 = OpLoad %46 
					                                Output f32_4* %98 = OpAccessChain %95 %30 
					                                                      OpStore %98 %96 
					                                       f32_4 %103 = OpLoad %102 
					                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
					                              Uniform f32_4* %106 = OpAccessChain %22 %105 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
					                                       f32_2 %109 = OpFMul %104 %108 
					                              Uniform f32_4* %110 = OpAccessChain %22 %105 
					                                       f32_4 %111 = OpLoad %110 
					                                       f32_2 %112 = OpVectorShuffle %111 %111 2 3 
					                                       f32_2 %113 = OpFAdd %109 %112 
					                                                      OpStore %101 %113 
					                                       f32_4 %114 = OpLoad %9 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                       f32_3 %116 = OpFNegate %115 
					                              Uniform f32_3* %118 = OpAccessChain %22 %30 
					                                       f32_3 %119 = OpLoad %118 
					                                       f32_3 %120 = OpFAdd %116 %119 
					                                       f32_4 %121 = OpLoad %63 
					                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
					                                                      OpStore %63 %122 
					                                       f32_4 %125 = OpLoad %9 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
					                                                      OpStore %124 %126 
					                                       f32_3 %129 = OpLoad %128 
					                              Uniform f32_4* %131 = OpAccessChain %22 %130 %30 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %129 %133 
					                                Private f32* %137 = OpAccessChain %9 %135 
					                                                      OpStore %137 %134 
					                                       f32_3 %138 = OpLoad %128 
					                              Uniform f32_4* %139 = OpAccessChain %22 %130 %25 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %9 %91 
					                                                      OpStore %143 %142 
					                                       f32_3 %144 = OpLoad %128 
					                              Uniform f32_4* %145 = OpAccessChain %22 %130 %38 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %144 %147 
					                                Private f32* %150 = OpAccessChain %9 %149 
					                                                      OpStore %150 %148 
					                                       f32_4 %152 = OpLoad %9 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                                      OpStore %151 %156 
					                                         f32 %157 = OpLoad %151 
					                                         f32 %158 = OpExtInst %1 32 %157 
					                                                      OpStore %151 %158 
					                                         f32 %159 = OpLoad %151 
					                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
					                                       f32_4 %161 = OpLoad %9 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %9 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %9 %165 
					                                       f32_4 %167 = OpLoad %63 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
					                                       f32_3 %169 = OpFNegate %168 
					                                       f32_4 %170 = OpLoad %9 
					                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                         f32 %172 = OpDot %169 %171 
					                                                      OpStore %166 %172 
					                                         f32 %173 = OpLoad %166 
					                                         f32 %174 = OpLoad %166 
					                                         f32 %175 = OpFAdd %173 %174 
					                                                      OpStore %166 %175 
					                                       f32_4 %178 = OpLoad %9 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpLoad %166 
					                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFMul %179 %182 
					                                       f32_4 %184 = OpLoad %63 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
					                                       f32_3 %186 = OpFNegate %185 
					                                       f32_3 %187 = OpFAdd %183 %186 
					                                                      OpStore %177 %187 
					                                       f32_4 %189 = OpLoad %63 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                                      OpStore %188 %190 
					                                       f32_3 %192 = OpLoad %177 
					                                                      OpStore %191 %192 
					                                       f32_4 %194 = OpLoad %9 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
					                                                      OpStore %193 %195 
					                                Private f32* %196 = OpAccessChain %46 %91 
					                                         f32 %197 = OpLoad %196 
					                                Uniform f32* %199 = OpAccessChain %22 %25 %135 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpFMul %197 %200 
					                                Private f32* %202 = OpAccessChain %46 %91 
					                                                      OpStore %202 %201 
					                                       f32_4 %203 = OpLoad %46 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 3 1 
					                                       f32_3 %207 = OpFMul %204 %206 
					                                       f32_4 %208 = OpLoad %63 
					                                       f32_4 %209 = OpVectorShuffle %208 %207 4 1 5 6 
					                                                      OpStore %63 %209 
					                                       f32_4 %211 = OpLoad %46 
					                                       f32_2 %212 = OpVectorShuffle %211 %211 2 3 
					                                       f32_4 %213 = OpLoad %210 
					                                       f32_4 %214 = OpVectorShuffle %213 %212 0 1 4 5 
					                                                      OpStore %210 %214 
					                                       f32_4 %215 = OpLoad %63 
					                                       f32_2 %216 = OpVectorShuffle %215 %215 2 2 
					                                       f32_4 %217 = OpLoad %63 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 3 
					                                       f32_2 %219 = OpFAdd %216 %218 
					                                       f32_4 %220 = OpLoad %210 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 2 3 
					                                                      OpStore %210 %221 
					                                                      OpStore %222 %224 
					                                Private f32* %226 = OpAccessChain %9 %91 
					                                         f32 %227 = OpLoad %226 
					                                Private f32* %228 = OpAccessChain %9 %91 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFMul %227 %229 
					                                Private f32* %231 = OpAccessChain %225 %135 
					                                                      OpStore %231 %230 
					                                Private f32* %232 = OpAccessChain %9 %135 
					                                         f32 %233 = OpLoad %232 
					                                Private f32* %234 = OpAccessChain %9 %135 
					                                         f32 %235 = OpLoad %234 
					                                         f32 %236 = OpFMul %233 %235 
					                                Private f32* %237 = OpAccessChain %225 %135 
					                                         f32 %238 = OpLoad %237 
					                                         f32 %239 = OpFNegate %238 
					                                         f32 %240 = OpFAdd %236 %239 
					                                Private f32* %241 = OpAccessChain %225 %135 
					                                                      OpStore %241 %240 
					                                       f32_4 %243 = OpLoad %9 
					                                       f32_4 %244 = OpVectorShuffle %243 %243 1 2 2 0 
					                                       f32_4 %245 = OpLoad %9 
					                                       f32_4 %246 = OpVectorShuffle %245 %245 0 1 2 2 
					                                       f32_4 %247 = OpFMul %244 %246 
					                                                      OpStore %242 %247 
					                              Uniform f32_4* %250 = OpAccessChain %22 %249 
					                                       f32_4 %251 = OpLoad %250 
					                                       f32_4 %252 = OpLoad %242 
					                                         f32 %253 = OpDot %251 %252 
					                                Private f32* %254 = OpAccessChain %248 %135 
					                                                      OpStore %254 %253 
					                              Uniform f32_4* %256 = OpAccessChain %22 %255 
					                                       f32_4 %257 = OpLoad %256 
					                                       f32_4 %258 = OpLoad %242 
					                                         f32 %259 = OpDot %257 %258 
					                                Private f32* %260 = OpAccessChain %248 %91 
					                                                      OpStore %260 %259 
					                              Uniform f32_4* %262 = OpAccessChain %22 %261 
					                                       f32_4 %263 = OpLoad %262 
					                                       f32_4 %264 = OpLoad %242 
					                                         f32 %265 = OpDot %263 %264 
					                                Private f32* %266 = OpAccessChain %248 %149 
					                                                      OpStore %266 %265 
					                              Uniform f32_4* %268 = OpAccessChain %22 %267 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
					                                       f32_3 %271 = OpLoad %225 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
					                                       f32_3 %273 = OpFMul %270 %272 
					                                       f32_3 %274 = OpLoad %248 
					                                       f32_3 %275 = OpFAdd %273 %274 
					                                                      OpStore %225 %275 
					                                Private f32* %278 = OpAccessChain %9 %277 
					                                                      OpStore %278 %276 
					                              Uniform f32_4* %279 = OpAccessChain %22 %38 
					                                       f32_4 %280 = OpLoad %279 
					                                       f32_4 %281 = OpLoad %9 
					                                         f32 %282 = OpDot %280 %281 
					                                Private f32* %283 = OpAccessChain %248 %135 
					                                                      OpStore %283 %282 
					                              Uniform f32_4* %284 = OpAccessChain %22 %48 
					                                       f32_4 %285 = OpLoad %284 
					                                       f32_4 %286 = OpLoad %9 
					                                         f32 %287 = OpDot %285 %286 
					                                Private f32* %288 = OpAccessChain %248 %91 
					                                                      OpStore %288 %287 
					                              Uniform f32_4* %290 = OpAccessChain %22 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_4 %292 = OpLoad %9 
					                                         f32 %293 = OpDot %291 %292 
					                                Private f32* %294 = OpAccessChain %248 %149 
					                                                      OpStore %294 %293 
					                                       f32_3 %295 = OpLoad %225 
					                                       f32_3 %296 = OpLoad %248 
					                                       f32_3 %297 = OpFAdd %295 %296 
					                                                      OpStore %225 %297 
					                                       f32_3 %298 = OpLoad %225 
					                                       f32_3 %300 = OpExtInst %1 40 %298 %299 
					                                                      OpStore %225 %300 
					                                       f32_3 %301 = OpLoad %225 
					                                       f32_3 %302 = OpExtInst %1 30 %301 
					                                       f32_4 %303 = OpLoad %9 
					                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
					                                                      OpStore %9 %304 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
					                                       f32_3 %309 = OpFMul %306 %308 
					                                       f32_4 %310 = OpLoad %9 
					                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
					                                                      OpStore %9 %311 
					                                       f32_4 %312 = OpLoad %9 
					                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
					                                       f32_3 %314 = OpExtInst %1 29 %313 
					                                       f32_4 %315 = OpLoad %9 
					                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
					                                                      OpStore %9 %316 
					                                       f32_4 %317 = OpLoad %9 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
					                                       f32_3 %321 = OpFMul %318 %320 
					                                       f32_3 %324 = OpFAdd %321 %323 
					                                       f32_4 %325 = OpLoad %9 
					                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
					                                                      OpStore %9 %326 
					                                       f32_4 %328 = OpLoad %9 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_3 %330 = OpExtInst %1 40 %329 %299 
					                                                      OpStore %327 %330 
					                                 Output f32* %332 = OpAccessChain %95 %30 %91 
					                                         f32 %333 = OpLoad %332 
					                                         f32 %334 = OpFNegate %333 
					                                 Output f32* %335 = OpAccessChain %95 %30 %91 
					                                                      OpStore %335 %334 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 239
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %33 %137 %161 %185 %212 %227 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %9 RelaxedPrecision 
					                                                      OpDecorate %12 RelaxedPrecision 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %13 RelaxedPrecision 
					                                                      OpDecorate %14 RelaxedPrecision 
					                                                      OpDecorate %15 RelaxedPrecision 
					                                                      OpDecorate %21 RelaxedPrecision 
					                                                      OpDecorate %22 RelaxedPrecision 
					                                                      OpDecorate %24 RelaxedPrecision 
					                                                      OpDecorate %25 RelaxedPrecision 
					                                                      OpDecorate %26 RelaxedPrecision 
					                                                      OpDecorate %27 RelaxedPrecision 
					                                                      OpDecorate %31 RelaxedPrecision 
					                                                      OpDecorate %32 RelaxedPrecision 
					                                                      OpDecorate %33 Location 33 
					                                                      OpDecorate %48 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %52 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 Offset 55 
					                                                      OpMemberDecorate %55 1 RelaxedPrecision 
					                                                      OpMemberDecorate %55 1 Offset 55 
					                                                      OpMemberDecorate %55 2 RelaxedPrecision 
					                                                      OpMemberDecorate %55 2 Offset 55 
					                                                      OpMemberDecorate %55 3 Offset 55 
					                                                      OpMemberDecorate %55 4 Offset 55 
					                                                      OpMemberDecorate %55 5 Offset 55 
					                                                      OpMemberDecorate %55 6 Offset 55 
					                                                      OpMemberDecorate %55 7 RelaxedPrecision 
					                                                      OpMemberDecorate %55 7 Offset 55 
					                                                      OpDecorate %55 Block 
					                                                      OpDecorate %57 DescriptorSet 57 
					                                                      OpDecorate %57 Binding 57 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %119 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %134 RelaxedPrecision 
					                                                      OpDecorate %134 DescriptorSet 134 
					                                                      OpDecorate %134 Binding 134 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %137 Location 137 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %168 DescriptorSet 168 
					                                                      OpDecorate %168 Binding 168 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %175 RelaxedPrecision 
					                                                      OpDecorate %176 RelaxedPrecision 
					                                                      OpDecorate %180 RelaxedPrecision 
					                                                      OpDecorate %183 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %185 Location 185 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %197 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %200 RelaxedPrecision 
					                                                      OpDecorate %205 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %210 DescriptorSet 210 
					                                                      OpDecorate %210 Binding 210 
					                                                      OpDecorate %211 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %212 Location 212 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %227 Location 227 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 0 
					                                              %18 = OpTypePointer Private %6 
					                               Private f32_4* %30 = OpVariable Private 
					                                 Input f32_3* %33 = OpVariable Input 
					                                          f32 %39 = OpConstant 3.674022E-40 
					                                          f32 %40 = OpConstant 3.674022E-40 
					                                 Private f32* %48 = OpVariable Private 
					                                              %53 = OpTypeVector %6 2 
					                                              %55 = OpTypeStruct %7 %7 %7 %6 %6 %6 %6 %7 
					                                              %56 = OpTypePointer Uniform %55 
					Uniform struct {f32_4; f32_4; f32_4; f32; f32; f32; f32; f32_4;}* %57 = OpVariable Uniform 
					                                              %58 = OpTypeInt 32 1 
					                                          i32 %59 = OpConstant 5 
					                                              %60 = OpTypePointer Uniform %6 
					                                          i32 %63 = OpConstant 3 
					                                          i32 %77 = OpConstant 7 
					                                              %78 = OpTypePointer Uniform %7 
					                                              %85 = OpTypePointer Private %10 
					                               Private f32_3* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 6 
					                                             %102 = OpTypePointer Private %53 
					                              Private f32_2* %103 = OpVariable Private 
					                                         i32 %116 = OpConstant 1 
					                              Private f32_4* %130 = OpVariable Private 
					                                             %131 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %132 = OpTypeSampledImage %131 
					                                             %133 = OpTypePointer UniformConstant %132 
					 UniformConstant read_only Texture2DSampled* %134 = OpVariable UniformConstant 
					                                             %136 = OpTypePointer Input %53 
					                                Input f32_2* %137 = OpVariable Input 
					                                         u32 %140 = OpConstant 3 
					                                         i32 %151 = OpConstant 4 
					                                         i32 %155 = OpConstant 0 
					                                             %160 = OpTypePointer Input %7 
					                                Input f32_4* %161 = OpVariable Input 
					                              Private f32_4* %167 = OpVariable Private 
					 UniformConstant read_only Texture2DSampled* %168 = OpVariable UniformConstant 
					                                         f32 %173 = OpConstant 3.674022E-40 
					                                       f32_4 %174 = OpConstantComposite %173 %173 %173 %173 
					                              Private f32_3* %176 = OpVariable Private 
					                                Input f32_3* %185 = OpVariable Input 
					                              Private f32_3* %190 = OpVariable Private 
					                                             %207 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %208 = OpTypeSampledImage %207 
					                                             %209 = OpTypePointer UniformConstant %208 
					UniformConstant read_only TextureCubeSampled* %210 = OpVariable UniformConstant 
					                                Input f32_3* %212 = OpVariable Input 
					                              Private f32_3* %218 = OpVariable Private 
					                                         i32 %221 = OpConstant 2 
					                                             %226 = OpTypePointer Output %7 
					                               Output f32_4* %227 = OpVariable Output 
					                                             %236 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_3 %14 = OpLoad %12 
					                                          f32 %15 = OpDot %13 %14 
					                                 Private f32* %19 = OpAccessChain %9 %17 
					                                                      OpStore %19 %15 
					                                 Private f32* %20 = OpAccessChain %9 %17 
					                                          f32 %21 = OpLoad %20 
					                                          f32 %22 = OpExtInst %1 32 %21 
					                                 Private f32* %23 = OpAccessChain %9 %17 
					                                                      OpStore %23 %22 
					                                        f32_4 %24 = OpLoad %9 
					                                        f32_3 %25 = OpVectorShuffle %24 %24 0 0 0 
					                                        f32_3 %26 = OpLoad %12 
					                                        f32_3 %27 = OpFMul %25 %26 
					                                        f32_4 %28 = OpLoad %9 
					                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
					                                                      OpStore %9 %29 
					                                        f32_4 %31 = OpLoad %9 
					                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
					                                        f32_3 %34 = OpLoad %33 
					                                          f32 %35 = OpDot %32 %34 
					                                 Private f32* %36 = OpAccessChain %30 %17 
					                                                      OpStore %36 %35 
					                                 Private f32* %37 = OpAccessChain %30 %17 
					                                          f32 %38 = OpLoad %37 
					                                          f32 %41 = OpExtInst %1 43 %38 %39 %40 
					                                 Private f32* %42 = OpAccessChain %30 %17 
					                                                      OpStore %42 %41 
					                                 Private f32* %43 = OpAccessChain %30 %17 
					                                          f32 %44 = OpLoad %43 
					                                          f32 %45 = OpFNegate %44 
					                                          f32 %46 = OpFAdd %45 %40 
					                                 Private f32* %47 = OpAccessChain %9 %17 
					                                                      OpStore %47 %46 
					                                 Private f32* %49 = OpAccessChain %9 %17 
					                                          f32 %50 = OpLoad %49 
					                                          f32 %51 = OpExtInst %1 30 %50 
					                                                      OpStore %48 %51 
					                                          f32 %52 = OpLoad %48 
					                                        f32_2 %54 = OpCompositeConstruct %52 %52 
					                                 Uniform f32* %61 = OpAccessChain %57 %59 
					                                          f32 %62 = OpLoad %61 
					                                 Uniform f32* %64 = OpAccessChain %57 %63 
					                                          f32 %65 = OpLoad %64 
					                                        f32_2 %66 = OpCompositeConstruct %62 %65 
					                                        f32_2 %67 = OpFMul %54 %66 
					                                        f32_4 %68 = OpLoad %30 
					                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 2 3 
					                                                      OpStore %30 %69 
					                                        f32_4 %70 = OpLoad %30 
					                                        f32_2 %71 = OpVectorShuffle %70 %70 0 1 
					                                        f32_2 %72 = OpExtInst %1 29 %71 
					                                        f32_4 %73 = OpLoad %30 
					                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 2 3 
					                                                      OpStore %30 %74 
					                                        f32_4 %75 = OpLoad %30 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 0 0 
					                               Uniform f32_4* %79 = OpAccessChain %57 %77 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
					                                        f32_3 %82 = OpFMul %76 %81 
					                                        f32_4 %83 = OpLoad %9 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
					                                                      OpStore %9 %84 
					                                        f32_4 %87 = OpLoad %9 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                 Uniform f32* %90 = OpAccessChain %57 %89 
					                                          f32 %91 = OpLoad %90 
					                                 Uniform f32* %92 = OpAccessChain %57 %89 
					                                          f32 %93 = OpLoad %92 
					                                 Uniform f32* %94 = OpAccessChain %57 %89 
					                                          f32 %95 = OpLoad %94 
					                                        f32_3 %96 = OpCompositeConstruct %91 %93 %95 
					                                          f32 %97 = OpCompositeExtract %96 0 
					                                          f32 %98 = OpCompositeExtract %96 1 
					                                          f32 %99 = OpCompositeExtract %96 2 
					                                       f32_3 %100 = OpCompositeConstruct %97 %98 %99 
					                                       f32_3 %101 = OpFMul %88 %100 
					                                                      OpStore %86 %101 
					                                Private f32* %104 = OpAccessChain %30 %17 
					                                         f32 %105 = OpLoad %104 
					                                         f32 %106 = OpFNegate %105 
					                                Uniform f32* %107 = OpAccessChain %57 %89 
					                                         f32 %108 = OpLoad %107 
					                                         f32 %109 = OpFMul %106 %108 
					                                         f32 %110 = OpFAdd %109 %40 
					                                Private f32* %111 = OpAccessChain %103 %17 
					                                                      OpStore %111 %110 
					                                Private f32* %112 = OpAccessChain %103 %17 
					                                         f32 %113 = OpLoad %112 
					                                         f32 %114 = OpExtInst %1 43 %113 %39 %40 
					                                Private f32* %115 = OpAccessChain %103 %17 
					                                                      OpStore %115 %114 
					                              Uniform f32_4* %117 = OpAccessChain %57 %116 
					                                       f32_4 %118 = OpLoad %117 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_2 %120 = OpLoad %103 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
					                                       f32_3 %122 = OpFMul %119 %121 
					                                       f32_3 %123 = OpLoad %86 
					                                       f32_3 %124 = OpFAdd %122 %123 
					                                                      OpStore %86 %124 
					                                Private f32* %125 = OpAccessChain %30 %17 
					                                         f32 %126 = OpLoad %125 
					                                         f32 %127 = OpFNegate %126 
					                                         f32 %128 = OpFAdd %127 %40 
					                                Private f32* %129 = OpAccessChain %9 %17 
					                                                      OpStore %129 %128 
					                  read_only Texture2DSampled %135 = OpLoad %134 
					                                       f32_2 %138 = OpLoad %137 
					                                       f32_4 %139 = OpImageSampleImplicitLod %135 %138 
					                                         f32 %141 = OpCompositeExtract %139 3 
					                                Private f32* %142 = OpAccessChain %130 %17 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %9 %17 
					                                         f32 %144 = OpLoad %143 
					                                Private f32* %145 = OpAccessChain %130 %17 
					                                         f32 %146 = OpLoad %145 
					                                         f32 %147 = OpFMul %144 %146 
					                                Private f32* %148 = OpAccessChain %9 %17 
					                                                      OpStore %148 %147 
					                                Private f32* %149 = OpAccessChain %9 %17 
					                                         f32 %150 = OpLoad %149 
					                                Uniform f32* %152 = OpAccessChain %57 %151 
					                                         f32 %153 = OpLoad %152 
					                                         f32 %154 = OpFMul %150 %153 
					                                Uniform f32* %156 = OpAccessChain %57 %155 %140 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpFAdd %154 %157 
					                                Private f32* %159 = OpAccessChain %30 %17 
					                                                      OpStore %159 %158 
					                                       f32_4 %162 = OpLoad %161 
					                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
					                                       f32_4 %164 = OpLoad %161 
					                                       f32_2 %165 = OpVectorShuffle %164 %164 3 3 
					                                       f32_2 %166 = OpFDiv %163 %165 
					                                                      OpStore %103 %166 
					                  read_only Texture2DSampled %169 = OpLoad %168 
					                                       f32_2 %170 = OpLoad %103 
					                                       f32_4 %171 = OpImageSampleImplicitLod %169 %170 
					                                                      OpStore %167 %171 
					                                       f32_4 %172 = OpLoad %167 
					                                       f32_4 %175 = OpExtInst %1 40 %172 %174 
					                                                      OpStore %9 %175 
					                                Private f32* %177 = OpAccessChain %30 %17 
					                                         f32 %178 = OpLoad %177 
					                                Private f32* %179 = OpAccessChain %9 %140 
					                                         f32 %180 = OpLoad %179 
					                                         f32 %181 = OpFMul %178 %180 
					                                Private f32* %182 = OpAccessChain %176 %17 
					                                                      OpStore %182 %181 
					                                       f32_4 %183 = OpLoad %9 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                       f32_3 %186 = OpLoad %185 
					                                       f32_3 %187 = OpFAdd %184 %186 
					                                       f32_4 %188 = OpLoad %30 
					                                       f32_4 %189 = OpVectorShuffle %188 %187 4 1 5 6 
					                                                      OpStore %30 %189 
					                                       f32_4 %191 = OpLoad %30 
					                                       f32_3 %192 = OpVectorShuffle %191 %191 0 2 3 
					                              Uniform f32_4* %193 = OpAccessChain %57 %155 
					                                       f32_4 %194 = OpLoad %193 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
					                                       f32_3 %196 = OpFMul %192 %195 
					                                                      OpStore %190 %196 
					                                       f32_3 %197 = OpLoad %176 
					                                       f32_3 %198 = OpVectorShuffle %197 %197 0 0 0 
					                                       f32_3 %199 = OpLoad %190 
					                                       f32_3 %200 = OpFMul %198 %199 
					                                                      OpStore %176 %200 
					                                       f32_3 %201 = OpLoad %86 
					                                       f32_4 %202 = OpLoad %30 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 2 3 
					                                       f32_3 %204 = OpFMul %201 %203 
					                                       f32_3 %205 = OpLoad %176 
					                                       f32_3 %206 = OpFAdd %204 %205 
					                                                      OpStore %176 %206 
					                read_only TextureCubeSampled %211 = OpLoad %210 
					                                       f32_3 %213 = OpLoad %212 
					                                       f32_4 %214 = OpImageSampleImplicitLod %211 %213 
					                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
					                                       f32_4 %216 = OpLoad %130 
					                                       f32_4 %217 = OpVectorShuffle %216 %215 4 1 5 6 
					                                                      OpStore %130 %217 
					                                       f32_4 %219 = OpLoad %130 
					                                       f32_3 %220 = OpVectorShuffle %219 %219 0 2 3 
					                              Uniform f32_4* %222 = OpAccessChain %57 %221 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
					                                       f32_3 %225 = OpFMul %220 %224 
					                                                      OpStore %218 %225 
					                                       f32_3 %228 = OpLoad %218 
					                                       f32_4 %229 = OpLoad %30 
					                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
					                                       f32_3 %231 = OpFMul %228 %230 
					                                       f32_3 %232 = OpLoad %176 
					                                       f32_3 %233 = OpFAdd %231 %232 
					                                       f32_4 %234 = OpLoad %227 
					                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
					                                                      OpStore %227 %235 
					                                 Output f32* %237 = OpAccessChain %227 %140 
					                                                      OpStore %237 %40 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 337
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %95 %101 %102 %124 %128 %188 %191 %193 %210 %222 %327 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 RelaxedPrecision 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 RelaxedPrecision 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 RelaxedPrecision 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 RelaxedPrecision 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpMemberDecorate %20 9 Offset 20 
					                                                      OpMemberDecorate %20 10 Offset 20 
					                                                      OpMemberDecorate %20 11 Offset 20 
					                                                      OpMemberDecorate %20 12 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %93 0 BuiltIn 93 
					                                                      OpMemberDecorate %93 1 BuiltIn 93 
					                                                      OpMemberDecorate %93 2 BuiltIn 93 
					                                                      OpDecorate %93 Block 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %102 Location 102 
					                                                      OpDecorate %124 Location 124 
					                                                      OpDecorate %128 Location 128 
					                                                      OpDecorate %188 RelaxedPrecision 
					                                                      OpDecorate %188 Location 188 
					                                                      OpDecorate %191 RelaxedPrecision 
					                                                      OpDecorate %191 Location 191 
					                                                      OpDecorate %193 Location 193 
					                                                      OpDecorate %210 Location 210 
					                                                      OpDecorate %222 Location 222 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %248 RelaxedPrecision 
					                                                      OpDecorate %251 RelaxedPrecision 
					                                                      OpDecorate %252 RelaxedPrecision 
					                                                      OpDecorate %253 RelaxedPrecision 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %263 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %273 RelaxedPrecision 
					                                                      OpDecorate %274 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %285 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %295 RelaxedPrecision 
					                                                      OpDecorate %296 RelaxedPrecision 
					                                                      OpDecorate %297 RelaxedPrecision 
					                                                      OpDecorate %298 RelaxedPrecision 
					                                                      OpDecorate %300 RelaxedPrecision 
					                                                      OpDecorate %301 RelaxedPrecision 
					                                                      OpDecorate %302 RelaxedPrecision 
					                                                      OpDecorate %327 Location 327 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 9 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 11 
					                                          u32 %91 = OpConstant 1 
					                                              %92 = OpTypeArray %6 %91 
					                                              %93 = OpTypeStruct %7 %6 %92 
					                                              %94 = OpTypePointer Output %93 
					         Output struct {f32_4; f32; f32[1];}* %95 = OpVariable Output 
					                                              %97 = OpTypePointer Output %7 
					                                              %99 = OpTypeVector %6 2 
					                                             %100 = OpTypePointer Output %99 
					                               Output f32_2* %101 = OpVariable Output 
					                                Input f32_4* %102 = OpVariable Input 
					                                         i32 %105 = OpConstant 12 
					                                             %117 = OpTypePointer Uniform %14 
					                                             %123 = OpTypePointer Output %14 
					                               Output f32_3* %124 = OpVariable Output 
					                                             %127 = OpTypePointer Input %14 
					                                Input f32_3* %128 = OpVariable Input 
					                                         i32 %130 = OpConstant 10 
					                                         u32 %135 = OpConstant 0 
					                                             %136 = OpTypePointer Private %6 
					                                         u32 %149 = OpConstant 2 
					                                Private f32* %151 = OpVariable Private 
					                                Private f32* %166 = OpVariable Private 
					                                             %176 = OpTypePointer Private %14 
					                              Private f32_3* %177 = OpVariable Private 
					                               Output f32_3* %188 = OpVariable Output 
					                               Output f32_3* %191 = OpVariable Output 
					                               Output f32_3* %193 = OpVariable Output 
					                                             %198 = OpTypePointer Uniform %6 
					                                         f32 %205 = OpConstant 3.674022E-40 
					                                       f32_3 %206 = OpConstantComposite %205 %205 %205 
					                               Output f32_4* %210 = OpVariable Output 
					                               Output f32_4* %222 = OpVariable Output 
					                                         f32 %223 = OpConstant 3.674022E-40 
					                                       f32_4 %224 = OpConstantComposite %223 %223 %223 %223 
					                              Private f32_3* %225 = OpVariable Private 
					                              Private f32_4* %242 = OpVariable Private 
					                              Private f32_3* %248 = OpVariable Private 
					                                         i32 %249 = OpConstant 5 
					                                         i32 %255 = OpConstant 6 
					                                         i32 %261 = OpConstant 7 
					                                         i32 %267 = OpConstant 8 
					                                         f32 %276 = OpConstant 3.674022E-40 
					                                         u32 %277 = OpConstant 3 
					                                         i32 %289 = OpConstant 4 
					                                       f32_3 %299 = OpConstantComposite %223 %223 %223 
					                                         f32 %307 = OpConstant 3.674022E-40 
					                                       f32_3 %308 = OpConstantComposite %307 %307 %307 
					                                         f32 %319 = OpConstant 3.674022E-40 
					                                       f32_3 %320 = OpConstantComposite %319 %319 %319 
					                                         f32 %322 = OpConstant 3.674022E-40 
					                                       f32_3 %323 = OpConstantComposite %322 %322 %322 
					                               Output f32_3* %327 = OpVariable Output 
					                                             %331 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %84 = OpAccessChain %22 %66 %48 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpLoad %46 
					                                        f32_4 %87 = OpVectorShuffle %86 %86 3 3 3 3 
					                                        f32_4 %88 = OpFMul %85 %87 
					                                        f32_4 %89 = OpLoad %63 
					                                        f32_4 %90 = OpFAdd %88 %89 
					                                                      OpStore %46 %90 
					                                        f32_4 %96 = OpLoad %46 
					                                Output f32_4* %98 = OpAccessChain %95 %30 
					                                                      OpStore %98 %96 
					                                       f32_4 %103 = OpLoad %102 
					                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
					                              Uniform f32_4* %106 = OpAccessChain %22 %105 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
					                                       f32_2 %109 = OpFMul %104 %108 
					                              Uniform f32_4* %110 = OpAccessChain %22 %105 
					                                       f32_4 %111 = OpLoad %110 
					                                       f32_2 %112 = OpVectorShuffle %111 %111 2 3 
					                                       f32_2 %113 = OpFAdd %109 %112 
					                                                      OpStore %101 %113 
					                                       f32_4 %114 = OpLoad %9 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                       f32_3 %116 = OpFNegate %115 
					                              Uniform f32_3* %118 = OpAccessChain %22 %30 
					                                       f32_3 %119 = OpLoad %118 
					                                       f32_3 %120 = OpFAdd %116 %119 
					                                       f32_4 %121 = OpLoad %63 
					                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
					                                                      OpStore %63 %122 
					                                       f32_4 %125 = OpLoad %9 
					                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
					                                                      OpStore %124 %126 
					                                       f32_3 %129 = OpLoad %128 
					                              Uniform f32_4* %131 = OpAccessChain %22 %130 %30 
					                                       f32_4 %132 = OpLoad %131 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
					                                         f32 %134 = OpDot %129 %133 
					                                Private f32* %137 = OpAccessChain %9 %135 
					                                                      OpStore %137 %134 
					                                       f32_3 %138 = OpLoad %128 
					                              Uniform f32_4* %139 = OpAccessChain %22 %130 %25 
					                                       f32_4 %140 = OpLoad %139 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                         f32 %142 = OpDot %138 %141 
					                                Private f32* %143 = OpAccessChain %9 %91 
					                                                      OpStore %143 %142 
					                                       f32_3 %144 = OpLoad %128 
					                              Uniform f32_4* %145 = OpAccessChain %22 %130 %38 
					                                       f32_4 %146 = OpLoad %145 
					                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
					                                         f32 %148 = OpDot %144 %147 
					                                Private f32* %150 = OpAccessChain %9 %149 
					                                                      OpStore %150 %148 
					                                       f32_4 %152 = OpLoad %9 
					                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
					                                         f32 %156 = OpDot %153 %155 
					                                                      OpStore %151 %156 
					                                         f32 %157 = OpLoad %151 
					                                         f32 %158 = OpExtInst %1 32 %157 
					                                                      OpStore %151 %158 
					                                         f32 %159 = OpLoad %151 
					                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
					                                       f32_4 %161 = OpLoad %9 
					                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %9 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
					                                                      OpStore %9 %165 
					                                       f32_4 %167 = OpLoad %63 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
					                                       f32_3 %169 = OpFNegate %168 
					                                       f32_4 %170 = OpLoad %9 
					                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                         f32 %172 = OpDot %169 %171 
					                                                      OpStore %166 %172 
					                                         f32 %173 = OpLoad %166 
					                                         f32 %174 = OpLoad %166 
					                                         f32 %175 = OpFAdd %173 %174 
					                                                      OpStore %166 %175 
					                                       f32_4 %178 = OpLoad %9 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpLoad %166 
					                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFMul %179 %182 
					                                       f32_4 %184 = OpLoad %63 
					                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
					                                       f32_3 %186 = OpFNegate %185 
					                                       f32_3 %187 = OpFAdd %183 %186 
					                                                      OpStore %177 %187 
					                                       f32_4 %189 = OpLoad %63 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                                      OpStore %188 %190 
					                                       f32_3 %192 = OpLoad %177 
					                                                      OpStore %191 %192 
					                                       f32_4 %194 = OpLoad %9 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
					                                                      OpStore %193 %195 
					                                Private f32* %196 = OpAccessChain %46 %91 
					                                         f32 %197 = OpLoad %196 
					                                Uniform f32* %199 = OpAccessChain %22 %25 %135 
					                                         f32 %200 = OpLoad %199 
					                                         f32 %201 = OpFMul %197 %200 
					                                Private f32* %202 = OpAccessChain %46 %91 
					                                                      OpStore %202 %201 
					                                       f32_4 %203 = OpLoad %46 
					                                       f32_3 %204 = OpVectorShuffle %203 %203 0 3 1 
					                                       f32_3 %207 = OpFMul %204 %206 
					                                       f32_4 %208 = OpLoad %63 
					                                       f32_4 %209 = OpVectorShuffle %208 %207 4 1 5 6 
					                                                      OpStore %63 %209 
					                                       f32_4 %211 = OpLoad %46 
					                                       f32_2 %212 = OpVectorShuffle %211 %211 2 3 
					                                       f32_4 %213 = OpLoad %210 
					                                       f32_4 %214 = OpVectorShuffle %213 %212 0 1 4 5 
					                                                      OpStore %210 %214 
					                                       f32_4 %215 = OpLoad %63 
					                                       f32_2 %216 = OpVectorShuffle %215 %215 2 2 
					                                       f32_4 %217 = OpLoad %63 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 3 
					                                       f32_2 %219 = OpFAdd %216 %218 
					                                       f32_4 %220 = OpLoad %210 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 2 3 
					                                                      OpStore %210 %221 
					                                                      OpStore %222 %224 
					                                Private f32* %226 = OpAccessChain %9 %91 
					                                         f32 %227 = OpLoad %226 
					                                Private f32* %228 = OpAccessChain %9 %91 
					                                         f32 %229 = OpLoad %228 
					                                         f32 %230 = OpFMul %227 %229 
					                                Private f32* %231 = OpAccessChain %225 %135 
					                                                      OpStore %231 %230 
					                                Private f32* %232 = OpAccessChain %9 %135 
					                                         f32 %233 = OpLoad %232 
					                                Private f32* %234 = OpAccessChain %9 %135 
					                                         f32 %235 = OpLoad %234 
					                                         f32 %236 = OpFMul %233 %235 
					                                Private f32* %237 = OpAccessChain %225 %135 
					                                         f32 %238 = OpLoad %237 
					                                         f32 %239 = OpFNegate %238 
					                                         f32 %240 = OpFAdd %236 %239 
					                                Private f32* %241 = OpAccessChain %225 %135 
					                                                      OpStore %241 %240 
					                                       f32_4 %243 = OpLoad %9 
					                                       f32_4 %244 = OpVectorShuffle %243 %243 1 2 2 0 
					                                       f32_4 %245 = OpLoad %9 
					                                       f32_4 %246 = OpVectorShuffle %245 %245 0 1 2 2 
					                                       f32_4 %247 = OpFMul %244 %246 
					                                                      OpStore %242 %247 
					                              Uniform f32_4* %250 = OpAccessChain %22 %249 
					                                       f32_4 %251 = OpLoad %250 
					                                       f32_4 %252 = OpLoad %242 
					                                         f32 %253 = OpDot %251 %252 
					                                Private f32* %254 = OpAccessChain %248 %135 
					                                                      OpStore %254 %253 
					                              Uniform f32_4* %256 = OpAccessChain %22 %255 
					                                       f32_4 %257 = OpLoad %256 
					                                       f32_4 %258 = OpLoad %242 
					                                         f32 %259 = OpDot %257 %258 
					                                Private f32* %260 = OpAccessChain %248 %91 
					                                                      OpStore %260 %259 
					                              Uniform f32_4* %262 = OpAccessChain %22 %261 
					                                       f32_4 %263 = OpLoad %262 
					                                       f32_4 %264 = OpLoad %242 
					                                         f32 %265 = OpDot %263 %264 
					                                Private f32* %266 = OpAccessChain %248 %149 
					                                                      OpStore %266 %265 
					                              Uniform f32_4* %268 = OpAccessChain %22 %267 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
					                                       f32_3 %271 = OpLoad %225 
					                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
					                                       f32_3 %273 = OpFMul %270 %272 
					                                       f32_3 %274 = OpLoad %248 
					                                       f32_3 %275 = OpFAdd %273 %274 
					                                                      OpStore %225 %275 
					                                Private f32* %278 = OpAccessChain %9 %277 
					                                                      OpStore %278 %276 
					                              Uniform f32_4* %279 = OpAccessChain %22 %38 
					                                       f32_4 %280 = OpLoad %279 
					                                       f32_4 %281 = OpLoad %9 
					                                         f32 %282 = OpDot %280 %281 
					                                Private f32* %283 = OpAccessChain %248 %135 
					                                                      OpStore %283 %282 
					                              Uniform f32_4* %284 = OpAccessChain %22 %48 
					                                       f32_4 %285 = OpLoad %284 
					                                       f32_4 %286 = OpLoad %9 
					                                         f32 %287 = OpDot %285 %286 
					                                Private f32* %288 = OpAccessChain %248 %91 
					                                                      OpStore %288 %287 
					                              Uniform f32_4* %290 = OpAccessChain %22 %289 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_4 %292 = OpLoad %9 
					                                         f32 %293 = OpDot %291 %292 
					                                Private f32* %294 = OpAccessChain %248 %149 
					                                                      OpStore %294 %293 
					                                       f32_3 %295 = OpLoad %225 
					                                       f32_3 %296 = OpLoad %248 
					                                       f32_3 %297 = OpFAdd %295 %296 
					                                                      OpStore %225 %297 
					                                       f32_3 %298 = OpLoad %225 
					                                       f32_3 %300 = OpExtInst %1 40 %298 %299 
					                                                      OpStore %225 %300 
					                                       f32_3 %301 = OpLoad %225 
					                                       f32_3 %302 = OpExtInst %1 30 %301 
					                                       f32_4 %303 = OpLoad %9 
					                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
					                                                      OpStore %9 %304 
					                                       f32_4 %305 = OpLoad %9 
					                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
					                                       f32_3 %309 = OpFMul %306 %308 
					                                       f32_4 %310 = OpLoad %9 
					                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
					                                                      OpStore %9 %311 
					                                       f32_4 %312 = OpLoad %9 
					                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
					                                       f32_3 %314 = OpExtInst %1 29 %313 
					                                       f32_4 %315 = OpLoad %9 
					                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
					                                                      OpStore %9 %316 
					                                       f32_4 %317 = OpLoad %9 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
					                                       f32_3 %321 = OpFMul %318 %320 
					                                       f32_3 %324 = OpFAdd %321 %323 
					                                       f32_4 %325 = OpLoad %9 
					                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
					                                                      OpStore %9 %326 
					                                       f32_4 %328 = OpLoad %9 
					                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
					                                       f32_3 %330 = OpExtInst %1 40 %329 %299 
					                                                      OpStore %327 %330 
					                                 Output f32* %332 = OpAccessChain %95 %30 %91 
					                                         f32 %333 = OpLoad %332 
					                                         f32 %334 = OpFNegate %333 
					                                 Output f32* %335 = OpAccessChain %95 %30 %91 
					                                                      OpStore %335 %334 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 239
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %33 %137 %161 %185 %212 %227 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %9 RelaxedPrecision 
					                                                      OpDecorate %12 RelaxedPrecision 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %13 RelaxedPrecision 
					                                                      OpDecorate %14 RelaxedPrecision 
					                                                      OpDecorate %15 RelaxedPrecision 
					                                                      OpDecorate %21 RelaxedPrecision 
					                                                      OpDecorate %22 RelaxedPrecision 
					                                                      OpDecorate %24 RelaxedPrecision 
					                                                      OpDecorate %25 RelaxedPrecision 
					                                                      OpDecorate %26 RelaxedPrecision 
					                                                      OpDecorate %27 RelaxedPrecision 
					                                                      OpDecorate %31 RelaxedPrecision 
					                                                      OpDecorate %32 RelaxedPrecision 
					                                                      OpDecorate %33 Location 33 
					                                                      OpDecorate %48 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %52 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 Offset 55 
					                                                      OpMemberDecorate %55 1 RelaxedPrecision 
					                                                      OpMemberDecorate %55 1 Offset 55 
					                                                      OpMemberDecorate %55 2 RelaxedPrecision 
					                                                      OpMemberDecorate %55 2 Offset 55 
					                                                      OpMemberDecorate %55 3 Offset 55 
					                                                      OpMemberDecorate %55 4 Offset 55 
					                                                      OpMemberDecorate %55 5 Offset 55 
					                                                      OpMemberDecorate %55 6 Offset 55 
					                                                      OpMemberDecorate %55 7 RelaxedPrecision 
					                                                      OpMemberDecorate %55 7 Offset 55 
					                                                      OpDecorate %55 Block 
					                                                      OpDecorate %57 DescriptorSet 57 
					                                                      OpDecorate %57 Binding 57 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %81 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %98 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %101 RelaxedPrecision 
					                                                      OpDecorate %118 RelaxedPrecision 
					                                                      OpDecorate %119 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %134 RelaxedPrecision 
					                                                      OpDecorate %134 DescriptorSet 134 
					                                                      OpDecorate %134 Binding 134 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %137 Location 137 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %161 Location 161 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %168 DescriptorSet 168 
					                                                      OpDecorate %168 Binding 168 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %172 RelaxedPrecision 
					                                                      OpDecorate %175 RelaxedPrecision 
					                                                      OpDecorate %176 RelaxedPrecision 
					                                                      OpDecorate %180 RelaxedPrecision 
					                                                      OpDecorate %183 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %185 Location 185 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %194 RelaxedPrecision 
					                                                      OpDecorate %195 RelaxedPrecision 
					                                                      OpDecorate %197 RelaxedPrecision 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %200 RelaxedPrecision 
					                                                      OpDecorate %205 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %210 DescriptorSet 210 
					                                                      OpDecorate %210 Binding 210 
					                                                      OpDecorate %211 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %212 Location 212 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %224 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %227 Location 227 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 0 
					                                              %18 = OpTypePointer Private %6 
					                               Private f32_4* %30 = OpVariable Private 
					                                 Input f32_3* %33 = OpVariable Input 
					                                          f32 %39 = OpConstant 3.674022E-40 
					                                          f32 %40 = OpConstant 3.674022E-40 
					                                 Private f32* %48 = OpVariable Private 
					                                              %53 = OpTypeVector %6 2 
					                                              %55 = OpTypeStruct %7 %7 %7 %6 %6 %6 %6 %7 
					                                              %56 = OpTypePointer Uniform %55 
					Uniform struct {f32_4; f32_4; f32_4; f32; f32; f32; f32; f32_4;}* %57 = OpVariable Uniform 
					                                              %58 = OpTypeInt 32 1 
					                                          i32 %59 = OpConstant 5 
					                                              %60 = OpTypePointer Uniform %6 
					                                          i32 %63 = OpConstant 3 
					                                          i32 %77 = OpConstant 7 
					                                              %78 = OpTypePointer Uniform %7 
					                                              %85 = OpTypePointer Private %10 
					                               Private f32_3* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 6 
					                                             %102 = OpTypePointer Private %53 
					                              Private f32_2* %103 = OpVariable Private 
					                                         i32 %116 = OpConstant 1 
					                              Private f32_4* %130 = OpVariable Private 
					                                             %131 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %132 = OpTypeSampledImage %131 
					                                             %133 = OpTypePointer UniformConstant %132 
					 UniformConstant read_only Texture2DSampled* %134 = OpVariable UniformConstant 
					                                             %136 = OpTypePointer Input %53 
					                                Input f32_2* %137 = OpVariable Input 
					                                         u32 %140 = OpConstant 3 
					                                         i32 %151 = OpConstant 4 
					                                         i32 %155 = OpConstant 0 
					                                             %160 = OpTypePointer Input %7 
					                                Input f32_4* %161 = OpVariable Input 
					                              Private f32_4* %167 = OpVariable Private 
					 UniformConstant read_only Texture2DSampled* %168 = OpVariable UniformConstant 
					                                         f32 %173 = OpConstant 3.674022E-40 
					                                       f32_4 %174 = OpConstantComposite %173 %173 %173 %173 
					                              Private f32_3* %176 = OpVariable Private 
					                                Input f32_3* %185 = OpVariable Input 
					                              Private f32_3* %190 = OpVariable Private 
					                                             %207 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %208 = OpTypeSampledImage %207 
					                                             %209 = OpTypePointer UniformConstant %208 
					UniformConstant read_only TextureCubeSampled* %210 = OpVariable UniformConstant 
					                                Input f32_3* %212 = OpVariable Input 
					                              Private f32_3* %218 = OpVariable Private 
					                                         i32 %221 = OpConstant 2 
					                                             %226 = OpTypePointer Output %7 
					                               Output f32_4* %227 = OpVariable Output 
					                                             %236 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_3 %14 = OpLoad %12 
					                                          f32 %15 = OpDot %13 %14 
					                                 Private f32* %19 = OpAccessChain %9 %17 
					                                                      OpStore %19 %15 
					                                 Private f32* %20 = OpAccessChain %9 %17 
					                                          f32 %21 = OpLoad %20 
					                                          f32 %22 = OpExtInst %1 32 %21 
					                                 Private f32* %23 = OpAccessChain %9 %17 
					                                                      OpStore %23 %22 
					                                        f32_4 %24 = OpLoad %9 
					                                        f32_3 %25 = OpVectorShuffle %24 %24 0 0 0 
					                                        f32_3 %26 = OpLoad %12 
					                                        f32_3 %27 = OpFMul %25 %26 
					                                        f32_4 %28 = OpLoad %9 
					                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
					                                                      OpStore %9 %29 
					                                        f32_4 %31 = OpLoad %9 
					                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
					                                        f32_3 %34 = OpLoad %33 
					                                          f32 %35 = OpDot %32 %34 
					                                 Private f32* %36 = OpAccessChain %30 %17 
					                                                      OpStore %36 %35 
					                                 Private f32* %37 = OpAccessChain %30 %17 
					                                          f32 %38 = OpLoad %37 
					                                          f32 %41 = OpExtInst %1 43 %38 %39 %40 
					                                 Private f32* %42 = OpAccessChain %30 %17 
					                                                      OpStore %42 %41 
					                                 Private f32* %43 = OpAccessChain %30 %17 
					                                          f32 %44 = OpLoad %43 
					                                          f32 %45 = OpFNegate %44 
					                                          f32 %46 = OpFAdd %45 %40 
					                                 Private f32* %47 = OpAccessChain %9 %17 
					                                                      OpStore %47 %46 
					                                 Private f32* %49 = OpAccessChain %9 %17 
					                                          f32 %50 = OpLoad %49 
					                                          f32 %51 = OpExtInst %1 30 %50 
					                                                      OpStore %48 %51 
					                                          f32 %52 = OpLoad %48 
					                                        f32_2 %54 = OpCompositeConstruct %52 %52 
					                                 Uniform f32* %61 = OpAccessChain %57 %59 
					                                          f32 %62 = OpLoad %61 
					                                 Uniform f32* %64 = OpAccessChain %57 %63 
					                                          f32 %65 = OpLoad %64 
					                                        f32_2 %66 = OpCompositeConstruct %62 %65 
					                                        f32_2 %67 = OpFMul %54 %66 
					                                        f32_4 %68 = OpLoad %30 
					                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 2 3 
					                                                      OpStore %30 %69 
					                                        f32_4 %70 = OpLoad %30 
					                                        f32_2 %71 = OpVectorShuffle %70 %70 0 1 
					                                        f32_2 %72 = OpExtInst %1 29 %71 
					                                        f32_4 %73 = OpLoad %30 
					                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 2 3 
					                                                      OpStore %30 %74 
					                                        f32_4 %75 = OpLoad %30 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 0 0 
					                               Uniform f32_4* %79 = OpAccessChain %57 %77 
					                                        f32_4 %80 = OpLoad %79 
					                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
					                                        f32_3 %82 = OpFMul %76 %81 
					                                        f32_4 %83 = OpLoad %9 
					                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
					                                                      OpStore %9 %84 
					                                        f32_4 %87 = OpLoad %9 
					                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
					                                 Uniform f32* %90 = OpAccessChain %57 %89 
					                                          f32 %91 = OpLoad %90 
					                                 Uniform f32* %92 = OpAccessChain %57 %89 
					                                          f32 %93 = OpLoad %92 
					                                 Uniform f32* %94 = OpAccessChain %57 %89 
					                                          f32 %95 = OpLoad %94 
					                                        f32_3 %96 = OpCompositeConstruct %91 %93 %95 
					                                          f32 %97 = OpCompositeExtract %96 0 
					                                          f32 %98 = OpCompositeExtract %96 1 
					                                          f32 %99 = OpCompositeExtract %96 2 
					                                       f32_3 %100 = OpCompositeConstruct %97 %98 %99 
					                                       f32_3 %101 = OpFMul %88 %100 
					                                                      OpStore %86 %101 
					                                Private f32* %104 = OpAccessChain %30 %17 
					                                         f32 %105 = OpLoad %104 
					                                         f32 %106 = OpFNegate %105 
					                                Uniform f32* %107 = OpAccessChain %57 %89 
					                                         f32 %108 = OpLoad %107 
					                                         f32 %109 = OpFMul %106 %108 
					                                         f32 %110 = OpFAdd %109 %40 
					                                Private f32* %111 = OpAccessChain %103 %17 
					                                                      OpStore %111 %110 
					                                Private f32* %112 = OpAccessChain %103 %17 
					                                         f32 %113 = OpLoad %112 
					                                         f32 %114 = OpExtInst %1 43 %113 %39 %40 
					                                Private f32* %115 = OpAccessChain %103 %17 
					                                                      OpStore %115 %114 
					                              Uniform f32_4* %117 = OpAccessChain %57 %116 
					                                       f32_4 %118 = OpLoad %117 
					                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
					                                       f32_2 %120 = OpLoad %103 
					                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
					                                       f32_3 %122 = OpFMul %119 %121 
					                                       f32_3 %123 = OpLoad %86 
					                                       f32_3 %124 = OpFAdd %122 %123 
					                                                      OpStore %86 %124 
					                                Private f32* %125 = OpAccessChain %30 %17 
					                                         f32 %126 = OpLoad %125 
					                                         f32 %127 = OpFNegate %126 
					                                         f32 %128 = OpFAdd %127 %40 
					                                Private f32* %129 = OpAccessChain %9 %17 
					                                                      OpStore %129 %128 
					                  read_only Texture2DSampled %135 = OpLoad %134 
					                                       f32_2 %138 = OpLoad %137 
					                                       f32_4 %139 = OpImageSampleImplicitLod %135 %138 
					                                         f32 %141 = OpCompositeExtract %139 3 
					                                Private f32* %142 = OpAccessChain %130 %17 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %9 %17 
					                                         f32 %144 = OpLoad %143 
					                                Private f32* %145 = OpAccessChain %130 %17 
					                                         f32 %146 = OpLoad %145 
					                                         f32 %147 = OpFMul %144 %146 
					                                Private f32* %148 = OpAccessChain %9 %17 
					                                                      OpStore %148 %147 
					                                Private f32* %149 = OpAccessChain %9 %17 
					                                         f32 %150 = OpLoad %149 
					                                Uniform f32* %152 = OpAccessChain %57 %151 
					                                         f32 %153 = OpLoad %152 
					                                         f32 %154 = OpFMul %150 %153 
					                                Uniform f32* %156 = OpAccessChain %57 %155 %140 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpFAdd %154 %157 
					                                Private f32* %159 = OpAccessChain %30 %17 
					                                                      OpStore %159 %158 
					                                       f32_4 %162 = OpLoad %161 
					                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
					                                       f32_4 %164 = OpLoad %161 
					                                       f32_2 %165 = OpVectorShuffle %164 %164 3 3 
					                                       f32_2 %166 = OpFDiv %163 %165 
					                                                      OpStore %103 %166 
					                  read_only Texture2DSampled %169 = OpLoad %168 
					                                       f32_2 %170 = OpLoad %103 
					                                       f32_4 %171 = OpImageSampleImplicitLod %169 %170 
					                                                      OpStore %167 %171 
					                                       f32_4 %172 = OpLoad %167 
					                                       f32_4 %175 = OpExtInst %1 40 %172 %174 
					                                                      OpStore %9 %175 
					                                Private f32* %177 = OpAccessChain %30 %17 
					                                         f32 %178 = OpLoad %177 
					                                Private f32* %179 = OpAccessChain %9 %140 
					                                         f32 %180 = OpLoad %179 
					                                         f32 %181 = OpFMul %178 %180 
					                                Private f32* %182 = OpAccessChain %176 %17 
					                                                      OpStore %182 %181 
					                                       f32_4 %183 = OpLoad %9 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                       f32_3 %186 = OpLoad %185 
					                                       f32_3 %187 = OpFAdd %184 %186 
					                                       f32_4 %188 = OpLoad %30 
					                                       f32_4 %189 = OpVectorShuffle %188 %187 4 1 5 6 
					                                                      OpStore %30 %189 
					                                       f32_4 %191 = OpLoad %30 
					                                       f32_3 %192 = OpVectorShuffle %191 %191 0 2 3 
					                              Uniform f32_4* %193 = OpAccessChain %57 %155 
					                                       f32_4 %194 = OpLoad %193 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
					                                       f32_3 %196 = OpFMul %192 %195 
					                                                      OpStore %190 %196 
					                                       f32_3 %197 = OpLoad %176 
					                                       f32_3 %198 = OpVectorShuffle %197 %197 0 0 0 
					                                       f32_3 %199 = OpLoad %190 
					                                       f32_3 %200 = OpFMul %198 %199 
					                                                      OpStore %176 %200 
					                                       f32_3 %201 = OpLoad %86 
					                                       f32_4 %202 = OpLoad %30 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 2 3 
					                                       f32_3 %204 = OpFMul %201 %203 
					                                       f32_3 %205 = OpLoad %176 
					                                       f32_3 %206 = OpFAdd %204 %205 
					                                                      OpStore %176 %206 
					                read_only TextureCubeSampled %211 = OpLoad %210 
					                                       f32_3 %213 = OpLoad %212 
					                                       f32_4 %214 = OpImageSampleImplicitLod %211 %213 
					                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
					                                       f32_4 %216 = OpLoad %130 
					                                       f32_4 %217 = OpVectorShuffle %216 %215 4 1 5 6 
					                                                      OpStore %130 %217 
					                                       f32_4 %219 = OpLoad %130 
					                                       f32_3 %220 = OpVectorShuffle %219 %219 0 2 3 
					                              Uniform f32_4* %222 = OpAccessChain %57 %221 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
					                                       f32_3 %225 = OpFMul %220 %224 
					                                                      OpStore %218 %225 
					                                       f32_3 %228 = OpLoad %218 
					                                       f32_4 %229 = OpLoad %30 
					                                       f32_3 %230 = OpVectorShuffle %229 %229 1 1 1 
					                                       f32_3 %231 = OpFMul %228 %230 
					                                       f32_3 %232 = OpLoad %176 
					                                       f32_3 %233 = OpFAdd %231 %232 
					                                       f32_4 %234 = OpLoad %227 
					                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
					                                                      OpStore %227 %235 
					                                 Output f32* %237 = OpAccessChain %227 %140 
					                                                      OpStore %237 %40 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					"spirv"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"spirv"
				}
			}
		}
		Pass {
			Name "DEFERRED"
			LOD 400
			Tags { "LIGHTMODE" = "DEFERRED" "RenderType" = "Opaque" }
			ZClip Off
			GpuProgramID 323636
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  highp vec3 tmpvar_8;
					  highp vec3 I_9;
					  I_9 = (tmpvar_5 - _WorldSpaceCameraPos);
					  tmpvar_8 = (I_9 - (2.0 * (
					    dot (tmpvar_7, I_9)
					   * tmpvar_7)));
					  tmpvar_1 = tmpvar_8;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - tmpvar_5);
					  tmpvar_2 = tmpvar_10;
					  tmpvar_3.zw = vec2(0.0, 0.0);
					  tmpvar_3.xy = vec2(0.0, 0.0);
					  mediump vec3 normal_11;
					  normal_11 = tmpvar_7;
					  mediump vec3 x1_12;
					  mediump vec4 tmpvar_13;
					  tmpvar_13 = (normal_11.xyzz * normal_11.yzzx);
					  x1_12.x = dot (unity_SHBr, tmpvar_13);
					  x1_12.y = dot (unity_SHBg, tmpvar_13);
					  x1_12.z = dot (unity_SHBb, tmpvar_13);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_7;
					  xlv_TEXCOORD3 = tmpvar_5;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD6 = (x1_12 + (unity_SHC.xyz * (
					    (normal_11.x * normal_11.x)
					   - 
					    (normal_11.y * normal_11.y)
					  )));
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying mediump vec3 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  lowp vec3 tmpvar_2;
					  lowp vec3 viewDir_3;
					  highp vec3 tmpvar_4;
					  highp vec3 tmpvar_5;
					  mediump vec3 tmpvar_6;
					  tmpvar_6 = normalize(xlv_TEXCOORD4);
					  viewDir_3 = tmpvar_6;
					  tmpvar_4 = xlv_TEXCOORD1;
					  tmpvar_5 = viewDir_3;
					  tmpvar_2 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_7;
					  lowp vec3 tmpvar_8;
					  lowp float tmpvar_9;
					  mediump float fres_10;
					  mediump float rim_11;
					  mediump float tmpvar_12;
					  highp float tmpvar_13;
					  tmpvar_13 = clamp (dot (normalize(tmpvar_5), tmpvar_2), 0.0, 1.0);
					  tmpvar_12 = tmpvar_13;
					  rim_11 = (1.0 - tmpvar_12);
					  fres_10 = rim_11;
					  highp float tmpvar_14;
					  tmpvar_14 = pow (rim_11, _RimAmt);
					  rim_11 = tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = pow (fres_10, _FresAmt);
					  fres_10 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = clamp ((1.0 - (rim_11 * _RimPwr)), 0.0, 1.0);
					  tmpvar_7 = (_Color.xyz * tmpvar_16);
					  highp vec3 tmpvar_17;
					  tmpvar_17 = ((rim_11 * _RimColor) * _RimPwr).xyz;
					  tmpvar_7 = (tmpvar_7 + tmpvar_17);
					  tmpvar_9 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_11)
					  ) * _FlakeAmt));
					  tmpvar_8 = ((textureCube (_Cube, tmpvar_4).xyz * _ReflectColor.xyz) * fres_10);
					  mediump vec3 normalWorld_18;
					  normalWorld_18 = tmpvar_2;
					  mediump vec4 tmpvar_19;
					  tmpvar_19.w = 1.0;
					  tmpvar_19.xyz = normalWorld_18;
					  mediump vec3 x_20;
					  x_20.x = dot (unity_SHAr, tmpvar_19);
					  x_20.y = dot (unity_SHAg, tmpvar_19);
					  x_20.z = dot (unity_SHAb, tmpvar_19);
					  mediump vec4 emission_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 tmpvar_23;
					  highp vec3 tmpvar_24;
					  tmpvar_22 = tmpvar_7;
					  tmpvar_23 = ((_SpecColor.xyz * tmpvar_9) * 0.3183099);
					  tmpvar_24 = tmpvar_2;
					  mediump vec4 outGBuffer2_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = tmpvar_22;
					  tmpvar_26.w = 1.0;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.xyz = tmpvar_23;
					  tmpvar_27.w = _Shininess;
					  highp vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = ((tmpvar_24 * 0.5) + 0.5);
					  outGBuffer2_25 = tmpvar_28;
					  lowp vec4 tmpvar_29;
					  tmpvar_29.w = 1.0;
					  tmpvar_29.xyz = tmpvar_8;
					  emission_21 = tmpvar_29;
					  emission_21.xyz = (emission_21.xyz + (tmpvar_7 * max (
					    ((1.055 * pow (max (vec3(0.0, 0.0, 0.0), 
					      (xlv_TEXCOORD6 + x_20)
					    ), vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055)
					  , vec3(0.0, 0.0, 0.0))));
					  outEmission_1.w = emission_21.w;
					  outEmission_1.xyz = exp2(-(emission_21.xyz));
					  gl_FragData[0] = tmpvar_26;
					  gl_FragData[1] = tmpvar_27;
					  gl_FragData[2] = outGBuffer2_25;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  highp vec3 tmpvar_8;
					  highp vec3 I_9;
					  I_9 = (tmpvar_5 - _WorldSpaceCameraPos);
					  tmpvar_8 = (I_9 - (2.0 * (
					    dot (tmpvar_7, I_9)
					   * tmpvar_7)));
					  tmpvar_1 = tmpvar_8;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - tmpvar_5);
					  tmpvar_2 = tmpvar_10;
					  tmpvar_3.zw = vec2(0.0, 0.0);
					  tmpvar_3.xy = vec2(0.0, 0.0);
					  mediump vec3 normal_11;
					  normal_11 = tmpvar_7;
					  mediump vec3 x1_12;
					  mediump vec4 tmpvar_13;
					  tmpvar_13 = (normal_11.xyzz * normal_11.yzzx);
					  x1_12.x = dot (unity_SHBr, tmpvar_13);
					  x1_12.y = dot (unity_SHBg, tmpvar_13);
					  x1_12.z = dot (unity_SHBb, tmpvar_13);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_7;
					  xlv_TEXCOORD3 = tmpvar_5;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD6 = (x1_12 + (unity_SHC.xyz * (
					    (normal_11.x * normal_11.x)
					   - 
					    (normal_11.y * normal_11.y)
					  )));
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying mediump vec3 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  lowp vec3 tmpvar_2;
					  lowp vec3 viewDir_3;
					  highp vec3 tmpvar_4;
					  highp vec3 tmpvar_5;
					  mediump vec3 tmpvar_6;
					  tmpvar_6 = normalize(xlv_TEXCOORD4);
					  viewDir_3 = tmpvar_6;
					  tmpvar_4 = xlv_TEXCOORD1;
					  tmpvar_5 = viewDir_3;
					  tmpvar_2 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_7;
					  lowp vec3 tmpvar_8;
					  lowp float tmpvar_9;
					  mediump float fres_10;
					  mediump float rim_11;
					  mediump float tmpvar_12;
					  highp float tmpvar_13;
					  tmpvar_13 = clamp (dot (normalize(tmpvar_5), tmpvar_2), 0.0, 1.0);
					  tmpvar_12 = tmpvar_13;
					  rim_11 = (1.0 - tmpvar_12);
					  fres_10 = rim_11;
					  highp float tmpvar_14;
					  tmpvar_14 = pow (rim_11, _RimAmt);
					  rim_11 = tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = pow (fres_10, _FresAmt);
					  fres_10 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = clamp ((1.0 - (rim_11 * _RimPwr)), 0.0, 1.0);
					  tmpvar_7 = (_Color.xyz * tmpvar_16);
					  highp vec3 tmpvar_17;
					  tmpvar_17 = ((rim_11 * _RimColor) * _RimPwr).xyz;
					  tmpvar_7 = (tmpvar_7 + tmpvar_17);
					  tmpvar_9 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_11)
					  ) * _FlakeAmt));
					  tmpvar_8 = ((textureCube (_Cube, tmpvar_4).xyz * _ReflectColor.xyz) * fres_10);
					  mediump vec3 normalWorld_18;
					  normalWorld_18 = tmpvar_2;
					  mediump vec4 tmpvar_19;
					  tmpvar_19.w = 1.0;
					  tmpvar_19.xyz = normalWorld_18;
					  mediump vec3 x_20;
					  x_20.x = dot (unity_SHAr, tmpvar_19);
					  x_20.y = dot (unity_SHAg, tmpvar_19);
					  x_20.z = dot (unity_SHAb, tmpvar_19);
					  mediump vec4 emission_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 tmpvar_23;
					  highp vec3 tmpvar_24;
					  tmpvar_22 = tmpvar_7;
					  tmpvar_23 = ((_SpecColor.xyz * tmpvar_9) * 0.3183099);
					  tmpvar_24 = tmpvar_2;
					  mediump vec4 outGBuffer2_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = tmpvar_22;
					  tmpvar_26.w = 1.0;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.xyz = tmpvar_23;
					  tmpvar_27.w = _Shininess;
					  highp vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = ((tmpvar_24 * 0.5) + 0.5);
					  outGBuffer2_25 = tmpvar_28;
					  lowp vec4 tmpvar_29;
					  tmpvar_29.w = 1.0;
					  tmpvar_29.xyz = tmpvar_8;
					  emission_21 = tmpvar_29;
					  emission_21.xyz = (emission_21.xyz + (tmpvar_7 * max (
					    ((1.055 * pow (max (vec3(0.0, 0.0, 0.0), 
					      (xlv_TEXCOORD6 + x_20)
					    ), vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055)
					  , vec3(0.0, 0.0, 0.0))));
					  outEmission_1.w = emission_21.w;
					  outEmission_1.xyz = exp2(-(emission_21.xyz));
					  gl_FragData[0] = tmpvar_26;
					  gl_FragData[1] = tmpvar_27;
					  gl_FragData[2] = outGBuffer2_25;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  highp vec3 tmpvar_8;
					  highp vec3 I_9;
					  I_9 = (tmpvar_5 - _WorldSpaceCameraPos);
					  tmpvar_8 = (I_9 - (2.0 * (
					    dot (tmpvar_7, I_9)
					   * tmpvar_7)));
					  tmpvar_1 = tmpvar_8;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - tmpvar_5);
					  tmpvar_2 = tmpvar_10;
					  tmpvar_3.zw = vec2(0.0, 0.0);
					  tmpvar_3.xy = vec2(0.0, 0.0);
					  mediump vec3 normal_11;
					  normal_11 = tmpvar_7;
					  mediump vec3 x1_12;
					  mediump vec4 tmpvar_13;
					  tmpvar_13 = (normal_11.xyzz * normal_11.yzzx);
					  x1_12.x = dot (unity_SHBr, tmpvar_13);
					  x1_12.y = dot (unity_SHBg, tmpvar_13);
					  x1_12.z = dot (unity_SHBb, tmpvar_13);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_7;
					  xlv_TEXCOORD3 = tmpvar_5;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD6 = (x1_12 + (unity_SHC.xyz * (
					    (normal_11.x * normal_11.x)
					   - 
					    (normal_11.y * normal_11.y)
					  )));
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying mediump vec3 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec4 outEmission_1;
					  lowp vec3 tmpvar_2;
					  lowp vec3 viewDir_3;
					  highp vec3 tmpvar_4;
					  highp vec3 tmpvar_5;
					  mediump vec3 tmpvar_6;
					  tmpvar_6 = normalize(xlv_TEXCOORD4);
					  viewDir_3 = tmpvar_6;
					  tmpvar_4 = xlv_TEXCOORD1;
					  tmpvar_5 = viewDir_3;
					  tmpvar_2 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_7;
					  lowp vec3 tmpvar_8;
					  lowp float tmpvar_9;
					  mediump float fres_10;
					  mediump float rim_11;
					  mediump float tmpvar_12;
					  highp float tmpvar_13;
					  tmpvar_13 = clamp (dot (normalize(tmpvar_5), tmpvar_2), 0.0, 1.0);
					  tmpvar_12 = tmpvar_13;
					  rim_11 = (1.0 - tmpvar_12);
					  fres_10 = rim_11;
					  highp float tmpvar_14;
					  tmpvar_14 = pow (rim_11, _RimAmt);
					  rim_11 = tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = pow (fres_10, _FresAmt);
					  fres_10 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = clamp ((1.0 - (rim_11 * _RimPwr)), 0.0, 1.0);
					  tmpvar_7 = (_Color.xyz * tmpvar_16);
					  highp vec3 tmpvar_17;
					  tmpvar_17 = ((rim_11 * _RimColor) * _RimPwr).xyz;
					  tmpvar_7 = (tmpvar_7 + tmpvar_17);
					  tmpvar_9 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_11)
					  ) * _FlakeAmt));
					  tmpvar_8 = ((textureCube (_Cube, tmpvar_4).xyz * _ReflectColor.xyz) * fres_10);
					  mediump vec3 normalWorld_18;
					  normalWorld_18 = tmpvar_2;
					  mediump vec4 tmpvar_19;
					  tmpvar_19.w = 1.0;
					  tmpvar_19.xyz = normalWorld_18;
					  mediump vec3 x_20;
					  x_20.x = dot (unity_SHAr, tmpvar_19);
					  x_20.y = dot (unity_SHAg, tmpvar_19);
					  x_20.z = dot (unity_SHAb, tmpvar_19);
					  mediump vec4 emission_21;
					  mediump vec3 tmpvar_22;
					  mediump vec3 tmpvar_23;
					  highp vec3 tmpvar_24;
					  tmpvar_22 = tmpvar_7;
					  tmpvar_23 = ((_SpecColor.xyz * tmpvar_9) * 0.3183099);
					  tmpvar_24 = tmpvar_2;
					  mediump vec4 outGBuffer2_25;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = tmpvar_22;
					  tmpvar_26.w = 1.0;
					  mediump vec4 tmpvar_27;
					  tmpvar_27.xyz = tmpvar_23;
					  tmpvar_27.w = _Shininess;
					  highp vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = ((tmpvar_24 * 0.5) + 0.5);
					  outGBuffer2_25 = tmpvar_28;
					  lowp vec4 tmpvar_29;
					  tmpvar_29.w = 1.0;
					  tmpvar_29.xyz = tmpvar_8;
					  emission_21 = tmpvar_29;
					  emission_21.xyz = (emission_21.xyz + (tmpvar_7 * max (
					    ((1.055 * pow (max (vec3(0.0, 0.0, 0.0), 
					      (xlv_TEXCOORD6 + x_20)
					    ), vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055)
					  , vec3(0.0, 0.0, 0.0))));
					  outEmission_1.w = emission_21.w;
					  outEmission_1.xyz = exp2(-(emission_21.xyz));
					  gl_FragData[0] = tmpvar_26;
					  gl_FragData[1] = tmpvar_27;
					  gl_FragData[2] = outGBuffer2_25;
					  gl_FragData[3] = outEmission_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat2.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_3 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD4;
					in mediump vec3 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec2 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat11;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat16_0.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_1.x = log2(u_xlat16_0.x);
					    u_xlat1.xy = u_xlat16_1.xx * vec2(_RimAmt, _FresAmt);
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat1.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_0.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat11 = (-u_xlat1.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
					#else
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = _Color.xyz * vec3(u_xlat11) + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat10_1.x = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.x;
					    u_xlat1.x = u_xlat16_0.x * _FlakeAmt + _SpecColor.w;
					    u_xlat16_0.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    u_xlat16_1.xzw = u_xlat16_0.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.xyz = u_xlat16_1.xzw;
					    SV_Target1.w = _Shininess;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD6.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xzw = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xzw = exp2(u_xlat16_1.xzw);
					    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xzw = max(u_xlat16_1.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = u_xlat16_1.xzw * u_xlat2.xyz;
					    u_xlat10_1.xzw = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xzw * _ReflectColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat1.yyy + u_xlat16_3.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_3.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat2.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_3 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD4;
					in mediump vec3 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec2 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat11;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat16_0.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_1.x = log2(u_xlat16_0.x);
					    u_xlat1.xy = u_xlat16_1.xx * vec2(_RimAmt, _FresAmt);
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat1.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_0.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat11 = (-u_xlat1.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
					#else
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = _Color.xyz * vec3(u_xlat11) + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat10_1.x = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.x;
					    u_xlat1.x = u_xlat16_0.x * _FlakeAmt + _SpecColor.w;
					    u_xlat16_0.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    u_xlat16_1.xzw = u_xlat16_0.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.xyz = u_xlat16_1.xzw;
					    SV_Target1.w = _Shininess;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD6.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xzw = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xzw = exp2(u_xlat16_1.xzw);
					    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xzw = max(u_xlat16_1.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = u_xlat16_1.xzw * u_xlat2.xyz;
					    u_xlat10_1.xzw = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xzw * _ReflectColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat1.yyy + u_xlat16_3.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_3.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat2.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_3 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD4;
					in mediump vec3 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec2 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat11;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat16_0.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_1.x = log2(u_xlat16_0.x);
					    u_xlat1.xy = u_xlat16_1.xx * vec2(_RimAmt, _FresAmt);
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat1.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_0.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat11 = (-u_xlat1.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
					#else
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = _Color.xyz * vec3(u_xlat11) + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat10_1.x = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.x;
					    u_xlat1.x = u_xlat16_0.x * _FlakeAmt + _SpecColor.w;
					    u_xlat16_0.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    u_xlat16_1.xzw = u_xlat16_0.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.xyz = u_xlat16_1.xzw;
					    SV_Target1.w = _Shininess;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD6.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xzw = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xzw = exp2(u_xlat16_1.xzw);
					    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xzw = max(u_xlat16_1.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = u_xlat16_1.xzw * u_xlat2.xyz;
					    u_xlat10_1.xzw = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xzw * _ReflectColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat1.yyy + u_xlat16_3.xyz;
					    SV_Target3.xyz = exp2((-u_xlat16_3.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 251
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %123 %127 %186 %189 %192 %195 %235 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate %100 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %127 Location 127 
					                                                      OpDecorate %186 RelaxedPrecision 
					                                                      OpDecorate %186 Location 186 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %192 Location 192 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %235 Location 235 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %243 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 5 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                               Output f32_2* %100 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                                             %116 = OpTypePointer Uniform %14 
					                                             %122 = OpTypePointer Output %14 
					                               Output f32_3* %123 = OpVariable Output 
					                                             %126 = OpTypePointer Input %14 
					                                Input f32_3* %127 = OpVariable Input 
					                                         i32 %129 = OpConstant 6 
					                                         u32 %134 = OpConstant 0 
					                                             %135 = OpTypePointer Private %6 
					                                         u32 %148 = OpConstant 2 
					                                Private f32* %150 = OpVariable Private 
					                               Output f32_3* %186 = OpVariable Output 
					                               Output f32_3* %189 = OpVariable Output 
					                               Output f32_3* %192 = OpVariable Output 
					                               Output f32_4* %195 = OpVariable Output 
					                                         f32 %196 = OpConstant 3.674022E-40 
					                                       f32_4 %197 = OpConstantComposite %196 %196 %196 %196 
					                                Private f32* %198 = OpVariable Private 
					                              Private f32_4* %212 = OpVariable Private 
					                                             %218 = OpTypePointer Private %14 
					                              Private f32_3* %219 = OpVariable Private 
					                               Output f32_3* %235 = OpVariable Output 
					                                         i32 %236 = OpConstant 4 
					                                             %245 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %22 %66 %48 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %46 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %30 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %22 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %22 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore %100 %112 
					                                       f32_4 %113 = OpLoad %9 
					                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
					                                       f32_3 %115 = OpFNegate %114 
					                              Uniform f32_3* %117 = OpAccessChain %22 %30 
					                                       f32_3 %118 = OpLoad %117 
					                                       f32_3 %119 = OpFAdd %115 %118 
					                                       f32_4 %120 = OpLoad %46 
					                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
					                                                      OpStore %46 %121 
					                                       f32_4 %124 = OpLoad %9 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                                      OpStore %123 %125 
					                                       f32_3 %128 = OpLoad %127 
					                              Uniform f32_4* %130 = OpAccessChain %22 %129 %30 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                         f32 %133 = OpDot %128 %132 
					                                Private f32* %136 = OpAccessChain %9 %134 
					                                                      OpStore %136 %133 
					                                       f32_3 %137 = OpLoad %127 
					                              Uniform f32_4* %138 = OpAccessChain %22 %129 %25 
					                                       f32_4 %139 = OpLoad %138 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                         f32 %141 = OpDot %137 %140 
					                                Private f32* %142 = OpAccessChain %9 %84 
					                                                      OpStore %142 %141 
					                                       f32_3 %143 = OpLoad %127 
					                              Uniform f32_4* %144 = OpAccessChain %22 %129 %38 
					                                       f32_4 %145 = OpLoad %144 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
					                                         f32 %147 = OpDot %143 %146 
					                                Private f32* %149 = OpAccessChain %9 %148 
					                                                      OpStore %149 %147 
					                                       f32_4 %151 = OpLoad %9 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
					                                       f32_4 %153 = OpLoad %9 
					                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
					                                         f32 %155 = OpDot %152 %154 
					                                                      OpStore %150 %155 
					                                         f32 %156 = OpLoad %150 
					                                         f32 %157 = OpExtInst %1 32 %156 
					                                                      OpStore %150 %157 
					                                         f32 %158 = OpLoad %150 
					                                       f32_3 %159 = OpCompositeConstruct %158 %158 %158 
					                                       f32_4 %160 = OpLoad %9 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
					                                       f32_3 %162 = OpFMul %159 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
					                                                      OpStore %9 %164 
					                                       f32_4 %165 = OpLoad %46 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                       f32_3 %167 = OpFNegate %166 
					                                       f32_4 %168 = OpLoad %9 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                         f32 %170 = OpDot %167 %169 
					                                                      OpStore %150 %170 
					                                         f32 %171 = OpLoad %150 
					                                         f32 %172 = OpLoad %150 
					                                         f32 %173 = OpFAdd %171 %172 
					                                                      OpStore %150 %173 
					                                       f32_4 %174 = OpLoad %9 
					                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
					                                         f32 %176 = OpLoad %150 
					                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
					                                       f32_3 %178 = OpFNegate %177 
					                                       f32_3 %179 = OpFMul %175 %178 
					                                       f32_4 %180 = OpLoad %46 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFAdd %179 %182 
					                                       f32_4 %184 = OpLoad %63 
					                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
					                                                      OpStore %63 %185 
					                                       f32_4 %187 = OpLoad %46 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                                      OpStore %186 %188 
					                                       f32_4 %190 = OpLoad %63 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                                      OpStore %189 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                                      OpStore %192 %194 
					                                                      OpStore %195 %197 
					                                Private f32* %199 = OpAccessChain %9 %84 
					                                         f32 %200 = OpLoad %199 
					                                Private f32* %201 = OpAccessChain %9 %84 
					                                         f32 %202 = OpLoad %201 
					                                         f32 %203 = OpFMul %200 %202 
					                                                      OpStore %198 %203 
					                                Private f32* %204 = OpAccessChain %9 %134 
					                                         f32 %205 = OpLoad %204 
					                                Private f32* %206 = OpAccessChain %9 %134 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFMul %205 %207 
					                                         f32 %209 = OpLoad %198 
					                                         f32 %210 = OpFNegate %209 
					                                         f32 %211 = OpFAdd %208 %210 
					                                                      OpStore %198 %211 
					                                       f32_4 %213 = OpLoad %9 
					                                       f32_4 %214 = OpVectorShuffle %213 %213 1 2 2 0 
					                                       f32_4 %215 = OpLoad %9 
					                                       f32_4 %216 = OpVectorShuffle %215 %215 0 1 2 2 
					                                       f32_4 %217 = OpFMul %214 %216 
					                                                      OpStore %212 %217 
					                              Uniform f32_4* %220 = OpAccessChain %22 %25 
					                                       f32_4 %221 = OpLoad %220 
					                                       f32_4 %222 = OpLoad %212 
					                                         f32 %223 = OpDot %221 %222 
					                                Private f32* %224 = OpAccessChain %219 %134 
					                                                      OpStore %224 %223 
					                              Uniform f32_4* %225 = OpAccessChain %22 %38 
					                                       f32_4 %226 = OpLoad %225 
					                                       f32_4 %227 = OpLoad %212 
					                                         f32 %228 = OpDot %226 %227 
					                                Private f32* %229 = OpAccessChain %219 %84 
					                                                      OpStore %229 %228 
					                              Uniform f32_4* %230 = OpAccessChain %22 %48 
					                                       f32_4 %231 = OpLoad %230 
					                                       f32_4 %232 = OpLoad %212 
					                                         f32 %233 = OpDot %231 %232 
					                                Private f32* %234 = OpAccessChain %219 %148 
					                                                      OpStore %234 %233 
					                              Uniform f32_4* %237 = OpAccessChain %22 %236 
					                                       f32_4 %238 = OpLoad %237 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                         f32 %240 = OpLoad %198 
					                                       f32_3 %241 = OpCompositeConstruct %240 %240 %240 
					                                       f32_3 %242 = OpFMul %239 %241 
					                                       f32_3 %243 = OpLoad %219 
					                                       f32_3 %244 = OpFAdd %242 %243 
					                                                      OpStore %235 %244 
					                                 Output f32* %246 = OpAccessChain %88 %30 %84 
					                                         f32 %247 = OpLoad %246 
					                                         f32 %248 = OpFNegate %247 
					                                 Output f32* %249 = OpAccessChain %88 %30 %84 
					                                                      OpStore %249 %248 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 286
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %31 %113 %132 %166 %184 %212 %258 %278 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %9 RelaxedPrecision 
					                                                      OpDecorate %11 RelaxedPrecision 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %12 RelaxedPrecision 
					                                                      OpDecorate %13 RelaxedPrecision 
					                                                      OpDecorate %14 RelaxedPrecision 
					                                                      OpDecorate %20 RelaxedPrecision 
					                                                      OpDecorate %21 RelaxedPrecision 
					                                                      OpDecorate %23 RelaxedPrecision 
					                                                      OpDecorate %24 RelaxedPrecision 
					                                                      OpDecorate %25 RelaxedPrecision 
					                                                      OpDecorate %26 RelaxedPrecision 
					                                                      OpDecorate %30 RelaxedPrecision 
					                                                      OpDecorate %31 Location 31 
					                                                      OpDecorate %48 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %54 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 Offset 55 
					                                                      OpMemberDecorate %55 1 RelaxedPrecision 
					                                                      OpMemberDecorate %55 1 Offset 55 
					                                                      OpMemberDecorate %55 2 RelaxedPrecision 
					                                                      OpMemberDecorate %55 2 Offset 55 
					                                                      OpMemberDecorate %55 3 RelaxedPrecision 
					                                                      OpMemberDecorate %55 3 Offset 55 
					                                                      OpMemberDecorate %55 4 RelaxedPrecision 
					                                                      OpMemberDecorate %55 4 Offset 55 
					                                                      OpMemberDecorate %55 5 RelaxedPrecision 
					                                                      OpMemberDecorate %55 5 Offset 55 
					                                                      OpMemberDecorate %55 6 RelaxedPrecision 
					                                                      OpMemberDecorate %55 6 Offset 55 
					                                                      OpMemberDecorate %55 7 Offset 55 
					                                                      OpMemberDecorate %55 8 Offset 55 
					                                                      OpMemberDecorate %55 9 Offset 55 
					                                                      OpMemberDecorate %55 10 Offset 55 
					                                                      OpMemberDecorate %55 11 RelaxedPrecision 
					                                                      OpMemberDecorate %55 11 Offset 55 
					                                                      OpDecorate %55 Block 
					                                                      OpDecorate %57 DescriptorSet 57 
					                                                      OpDecorate %57 Binding 57 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %75 RelaxedPrecision 
					                                                      OpDecorate %76 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %89 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %91 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %125 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %129 DescriptorSet 129 
					                                                      OpDecorate %129 Binding 129 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %132 Location 132 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %140 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %151 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %163 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %166 Location 166 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %173 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 Location 184 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %211 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %212 Location 212 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %246 RelaxedPrecision 
					                                                      OpDecorate %249 RelaxedPrecision 
					                                                      OpDecorate %250 RelaxedPrecision 
					                                                      OpDecorate %256 RelaxedPrecision 
					                                                      OpDecorate %256 DescriptorSet 256 
					                                                      OpDecorate %256 Binding 256 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %258 Location 258 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %276 RelaxedPrecision 
					                                                      OpDecorate %278 RelaxedPrecision 
					                                                      OpDecorate %278 Location 278 
					                                                      OpDecorate %279 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 0 
					                                              %17 = OpTypePointer Private %6 
					                                              %27 = OpTypeVector %6 2 
					                                              %28 = OpTypePointer Private %27 
					                               Private f32_2* %29 = OpVariable Private 
					                                 Input f32_3* %31 = OpVariable Input 
					                                          f32 %37 = OpConstant 3.674022E-40 
					                                          f32 %38 = OpConstant 3.674022E-40 
					                                              %46 = OpTypeVector %6 4 
					                                              %47 = OpTypePointer Private %46 
					                               Private f32_4* %48 = OpVariable Private 
					                                              %55 = OpTypeStruct %46 %46 %46 %46 %46 %46 %6 %6 %6 %6 %6 %46 
					                                              %56 = OpTypePointer Uniform %55 
					Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %57 = OpVariable Uniform 
					                                              %58 = OpTypeInt 32 1 
					                                          i32 %59 = OpConstant 9 
					                                              %60 = OpTypePointer Uniform %6 
					                                          i32 %63 = OpConstant 7 
					                                          i32 %72 = OpConstant 11 
					                                              %73 = OpTypePointer Uniform %46 
					                               Private f32_3* %78 = OpVariable Private 
					                                          i32 %80 = OpConstant 10 
					                                 Private f32* %93 = OpVariable Private 
					                                         i32 %103 = OpConstant 4 
					                                             %112 = OpTypePointer Output %46 
					                               Output f32_4* %113 = OpVariable Output 
					                                         u32 %117 = OpConstant 3 
					                                             %118 = OpTypePointer Output %6 
					                              Private f32_4* %125 = OpVariable Private 
					                                             %126 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %127 = OpTypeSampledImage %126 
					                                             %128 = OpTypePointer UniformConstant %127 
					 UniformConstant read_only Texture2DSampled* %129 = OpVariable UniformConstant 
					                                             %131 = OpTypePointer Input %27 
					                                Input f32_2* %132 = OpVariable Input 
					                                         i32 %145 = OpConstant 8 
					                                         i32 %149 = OpConstant 3 
					                                         f32 %161 = OpConstant 3.674022E-40 
					                                       f32_3 %162 = OpConstantComposite %161 %161 %161 
					                               Output f32_4* %166 = OpVariable Output 
					                                         i32 %171 = OpConstant 6 
					                              Private f32_4* %175 = OpVariable Private 
					                                         f32 %177 = OpConstant 3.674022E-40 
					                                       f32_3 %178 = OpConstantComposite %177 %177 %177 
					                               Output f32_4* %184 = OpVariable Output 
					                              Private f32_3* %190 = OpVariable Private 
					                                         i32 %191 = OpConstant 0 
					                                         i32 %197 = OpConstant 1 
					                                         u32 %202 = OpConstant 1 
					                                         i32 %204 = OpConstant 2 
					                                         u32 %209 = OpConstant 2 
					                                Input f32_3* %212 = OpVariable Input 
					                                       f32_3 %216 = OpConstantComposite %37 %37 %37 
					                                         f32 %224 = OpConstant 3.674022E-40 
					                                       f32_3 %225 = OpConstantComposite %224 %224 %224 
					                                         f32 %236 = OpConstant 3.674022E-40 
					                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
					                                         f32 %239 = OpConstant 3.674022E-40 
					                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
					                                             %253 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %254 = OpTypeSampledImage %253 
					                                             %255 = OpTypePointer UniformConstant %254 
					UniformConstant read_only TextureCubeSampled* %256 = OpVariable UniformConstant 
					                                Input f32_3* %258 = OpVariable Input 
					                              Private f32_3* %264 = OpVariable Private 
					                                         i32 %267 = OpConstant 5 
					                               Output f32_4* %278 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpLoad %11 
					                                          f32 %14 = OpDot %12 %13 
					                                 Private f32* %18 = OpAccessChain %9 %16 
					                                                      OpStore %18 %14 
					                                 Private f32* %19 = OpAccessChain %9 %16 
					                                          f32 %20 = OpLoad %19 
					                                          f32 %21 = OpExtInst %1 32 %20 
					                                 Private f32* %22 = OpAccessChain %9 %16 
					                                                      OpStore %22 %21 
					                                        f32_3 %23 = OpLoad %9 
					                                        f32_3 %24 = OpVectorShuffle %23 %23 0 0 0 
					                                        f32_3 %25 = OpLoad %11 
					                                        f32_3 %26 = OpFMul %24 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %30 = OpLoad %9 
					                                        f32_3 %32 = OpLoad %31 
					                                          f32 %33 = OpDot %30 %32 
					                                 Private f32* %34 = OpAccessChain %29 %16 
					                                                      OpStore %34 %33 
					                                 Private f32* %35 = OpAccessChain %29 %16 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %39 = OpExtInst %1 43 %36 %37 %38 
					                                 Private f32* %40 = OpAccessChain %29 %16 
					                                                      OpStore %40 %39 
					                                 Private f32* %41 = OpAccessChain %29 %16 
					                                          f32 %42 = OpLoad %41 
					                                          f32 %43 = OpFNegate %42 
					                                          f32 %44 = OpFAdd %43 %38 
					                                 Private f32* %45 = OpAccessChain %9 %16 
					                                                      OpStore %45 %44 
					                                 Private f32* %49 = OpAccessChain %9 %16 
					                                          f32 %50 = OpLoad %49 
					                                          f32 %51 = OpExtInst %1 30 %50 
					                                 Private f32* %52 = OpAccessChain %48 %16 
					                                                      OpStore %52 %51 
					                                        f32_4 %53 = OpLoad %48 
					                                        f32_2 %54 = OpVectorShuffle %53 %53 0 0 
					                                 Uniform f32* %61 = OpAccessChain %57 %59 
					                                          f32 %62 = OpLoad %61 
					                                 Uniform f32* %64 = OpAccessChain %57 %63 
					                                          f32 %65 = OpLoad %64 
					                                        f32_2 %66 = OpCompositeConstruct %62 %65 
					                                        f32_2 %67 = OpFMul %54 %66 
					                                                      OpStore %29 %67 
					                                        f32_2 %68 = OpLoad %29 
					                                        f32_2 %69 = OpExtInst %1 29 %68 
					                                                      OpStore %29 %69 
					                                        f32_2 %70 = OpLoad %29 
					                                        f32_3 %71 = OpVectorShuffle %70 %70 0 0 0 
					                               Uniform f32_4* %74 = OpAccessChain %57 %72 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
					                                        f32_3 %77 = OpFMul %71 %76 
					                                                      OpStore %9 %77 
					                                        f32_3 %79 = OpLoad %9 
					                                 Uniform f32* %81 = OpAccessChain %57 %80 
					                                          f32 %82 = OpLoad %81 
					                                 Uniform f32* %83 = OpAccessChain %57 %80 
					                                          f32 %84 = OpLoad %83 
					                                 Uniform f32* %85 = OpAccessChain %57 %80 
					                                          f32 %86 = OpLoad %85 
					                                        f32_3 %87 = OpCompositeConstruct %82 %84 %86 
					                                          f32 %88 = OpCompositeExtract %87 0 
					                                          f32 %89 = OpCompositeExtract %87 1 
					                                          f32 %90 = OpCompositeExtract %87 2 
					                                        f32_3 %91 = OpCompositeConstruct %88 %89 %90 
					                                        f32_3 %92 = OpFMul %79 %91 
					                                                      OpStore %78 %92 
					                                 Private f32* %94 = OpAccessChain %29 %16 
					                                          f32 %95 = OpLoad %94 
					                                          f32 %96 = OpFNegate %95 
					                                 Uniform f32* %97 = OpAccessChain %57 %80 
					                                          f32 %98 = OpLoad %97 
					                                          f32 %99 = OpFMul %96 %98 
					                                         f32 %100 = OpFAdd %99 %38 
					                                                      OpStore %93 %100 
					                                         f32 %101 = OpLoad %93 
					                                         f32 %102 = OpExtInst %1 43 %101 %37 %38 
					                                                      OpStore %93 %102 
					                              Uniform f32_4* %104 = OpAccessChain %57 %103 
					                                       f32_4 %105 = OpLoad %104 
					                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
					                                         f32 %107 = OpLoad %93 
					                                       f32_3 %108 = OpCompositeConstruct %107 %107 %107 
					                                       f32_3 %109 = OpFMul %106 %108 
					                                       f32_3 %110 = OpLoad %78 
					                                       f32_3 %111 = OpFAdd %109 %110 
					                                                      OpStore %78 %111 
					                                       f32_3 %114 = OpLoad %78 
					                                       f32_4 %115 = OpLoad %113 
					                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                      OpStore %113 %116 
					                                 Output f32* %119 = OpAccessChain %113 %117 
					                                                      OpStore %119 %38 
					                                Private f32* %120 = OpAccessChain %29 %16 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %122 = OpFNegate %121 
					                                         f32 %123 = OpFAdd %122 %38 
					                                Private f32* %124 = OpAccessChain %9 %16 
					                                                      OpStore %124 %123 
					                  read_only Texture2DSampled %130 = OpLoad %129 
					                                       f32_2 %133 = OpLoad %132 
					                                       f32_4 %134 = OpImageSampleImplicitLod %130 %133 
					                                         f32 %135 = OpCompositeExtract %134 3 
					                                Private f32* %136 = OpAccessChain %125 %16 
					                                                      OpStore %136 %135 
					                                Private f32* %137 = OpAccessChain %9 %16 
					                                         f32 %138 = OpLoad %137 
					                                Private f32* %139 = OpAccessChain %125 %16 
					                                         f32 %140 = OpLoad %139 
					                                         f32 %141 = OpFMul %138 %140 
					                                Private f32* %142 = OpAccessChain %9 %16 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %9 %16 
					                                         f32 %144 = OpLoad %143 
					                                Uniform f32* %146 = OpAccessChain %57 %145 
					                                         f32 %147 = OpLoad %146 
					                                         f32 %148 = OpFMul %144 %147 
					                                Uniform f32* %150 = OpAccessChain %57 %149 %117 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFAdd %148 %151 
					                                Private f32* %153 = OpAccessChain %29 %16 
					                                                      OpStore %153 %152 
					                                       f32_2 %154 = OpLoad %29 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 0 0 
					                              Uniform f32_4* %156 = OpAccessChain %57 %149 
					                                       f32_4 %157 = OpLoad %156 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
					                                       f32_3 %159 = OpFMul %155 %158 
					                                                      OpStore %9 %159 
					                                       f32_3 %160 = OpLoad %9 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %48 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 1 5 6 
					                                                      OpStore %48 %165 
					                                       f32_4 %167 = OpLoad %48 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 2 3 
					                                       f32_4 %169 = OpLoad %166 
					                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
					                                                      OpStore %166 %170 
					                                Uniform f32* %172 = OpAccessChain %57 %171 
					                                         f32 %173 = OpLoad %172 
					                                 Output f32* %174 = OpAccessChain %166 %117 
					                                                      OpStore %174 %173 
					                                       f32_3 %176 = OpLoad %31 
					                                       f32_3 %179 = OpFMul %176 %178 
					                                       f32_3 %180 = OpFAdd %179 %178 
					                                       f32_4 %181 = OpLoad %175 
					                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
					                                                      OpStore %175 %182 
					                                Private f32* %183 = OpAccessChain %175 %117 
					                                                      OpStore %183 %38 
					                                       f32_4 %185 = OpLoad %175 
					                                                      OpStore %184 %185 
					                                       f32_3 %186 = OpLoad %31 
					                                       f32_4 %187 = OpLoad %175 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %175 %188 
					                                Private f32* %189 = OpAccessChain %175 %117 
					                                                      OpStore %189 %38 
					                              Uniform f32_4* %192 = OpAccessChain %57 %191 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_4 %194 = OpLoad %175 
					                                         f32 %195 = OpDot %193 %194 
					                                Private f32* %196 = OpAccessChain %190 %16 
					                                                      OpStore %196 %195 
					                              Uniform f32_4* %198 = OpAccessChain %57 %197 
					                                       f32_4 %199 = OpLoad %198 
					                                       f32_4 %200 = OpLoad %175 
					                                         f32 %201 = OpDot %199 %200 
					                                Private f32* %203 = OpAccessChain %190 %202 
					                                                      OpStore %203 %201 
					                              Uniform f32_4* %205 = OpAccessChain %57 %204 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_4 %207 = OpLoad %175 
					                                         f32 %208 = OpDot %206 %207 
					                                Private f32* %210 = OpAccessChain %190 %209 
					                                                      OpStore %210 %208 
					                                       f32_3 %211 = OpLoad %190 
					                                       f32_3 %213 = OpLoad %212 
					                                       f32_3 %214 = OpFAdd %211 %213 
					                                                      OpStore %190 %214 
					                                       f32_3 %215 = OpLoad %190 
					                                       f32_3 %217 = OpExtInst %1 40 %215 %216 
					                                                      OpStore %190 %217 
					                                       f32_3 %218 = OpLoad %190 
					                                       f32_3 %219 = OpExtInst %1 30 %218 
					                                       f32_4 %220 = OpLoad %48 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 1 5 6 
					                                                      OpStore %48 %221 
					                                       f32_4 %222 = OpLoad %48 
					                                       f32_3 %223 = OpVectorShuffle %222 %222 0 2 3 
					                                       f32_3 %226 = OpFMul %223 %225 
					                                       f32_4 %227 = OpLoad %48 
					                                       f32_4 %228 = OpVectorShuffle %227 %226 4 1 5 6 
					                                                      OpStore %48 %228 
					                                       f32_4 %229 = OpLoad %48 
					                                       f32_3 %230 = OpVectorShuffle %229 %229 0 2 3 
					                                       f32_3 %231 = OpExtInst %1 29 %230 
					                                       f32_4 %232 = OpLoad %48 
					                                       f32_4 %233 = OpVectorShuffle %232 %231 4 1 5 6 
					                                                      OpStore %48 %233 
					                                       f32_4 %234 = OpLoad %48 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 2 3 
					                                       f32_3 %238 = OpFMul %235 %237 
					                                       f32_3 %241 = OpFAdd %238 %240 
					                                       f32_4 %242 = OpLoad %48 
					                                       f32_4 %243 = OpVectorShuffle %242 %241 4 1 5 6 
					                                                      OpStore %48 %243 
					                                       f32_4 %244 = OpLoad %48 
					                                       f32_3 %245 = OpVectorShuffle %244 %244 0 2 3 
					                                       f32_3 %246 = OpExtInst %1 40 %245 %216 
					                                       f32_4 %247 = OpLoad %48 
					                                       f32_4 %248 = OpVectorShuffle %247 %246 4 1 5 6 
					                                                      OpStore %48 %248 
					                                       f32_4 %249 = OpLoad %48 
					                                       f32_3 %250 = OpVectorShuffle %249 %249 0 2 3 
					                                       f32_3 %251 = OpLoad %78 
					                                       f32_3 %252 = OpFMul %250 %251 
					                                                      OpStore %190 %252 
					                read_only TextureCubeSampled %257 = OpLoad %256 
					                                       f32_3 %259 = OpLoad %258 
					                                       f32_4 %260 = OpImageSampleImplicitLod %257 %259 
					                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
					                                       f32_4 %262 = OpLoad %125 
					                                       f32_4 %263 = OpVectorShuffle %262 %261 4 1 5 6 
					                                                      OpStore %125 %263 
					                                       f32_4 %265 = OpLoad %125 
					                                       f32_3 %266 = OpVectorShuffle %265 %265 0 2 3 
					                              Uniform f32_4* %268 = OpAccessChain %57 %267 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
					                                       f32_3 %271 = OpFMul %266 %270 
					                                                      OpStore %264 %271 
					                                       f32_3 %272 = OpLoad %264 
					                                       f32_2 %273 = OpLoad %29 
					                                       f32_3 %274 = OpVectorShuffle %273 %273 1 1 1 
					                                       f32_3 %275 = OpFMul %272 %274 
					                                       f32_3 %276 = OpLoad %190 
					                                       f32_3 %277 = OpFAdd %275 %276 
					                                                      OpStore %190 %277 
					                                       f32_3 %279 = OpLoad %190 
					                                       f32_3 %280 = OpFNegate %279 
					                                       f32_3 %281 = OpExtInst %1 29 %280 
					                                       f32_4 %282 = OpLoad %278 
					                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
					                                                      OpStore %278 %283 
					                                 Output f32* %284 = OpAccessChain %278 %117 
					                                                      OpStore %284 %38 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 251
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %123 %127 %186 %189 %192 %195 %235 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate %100 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %127 Location 127 
					                                                      OpDecorate %186 RelaxedPrecision 
					                                                      OpDecorate %186 Location 186 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %192 Location 192 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %235 Location 235 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %243 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 5 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                               Output f32_2* %100 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                                             %116 = OpTypePointer Uniform %14 
					                                             %122 = OpTypePointer Output %14 
					                               Output f32_3* %123 = OpVariable Output 
					                                             %126 = OpTypePointer Input %14 
					                                Input f32_3* %127 = OpVariable Input 
					                                         i32 %129 = OpConstant 6 
					                                         u32 %134 = OpConstant 0 
					                                             %135 = OpTypePointer Private %6 
					                                         u32 %148 = OpConstant 2 
					                                Private f32* %150 = OpVariable Private 
					                               Output f32_3* %186 = OpVariable Output 
					                               Output f32_3* %189 = OpVariable Output 
					                               Output f32_3* %192 = OpVariable Output 
					                               Output f32_4* %195 = OpVariable Output 
					                                         f32 %196 = OpConstant 3.674022E-40 
					                                       f32_4 %197 = OpConstantComposite %196 %196 %196 %196 
					                                Private f32* %198 = OpVariable Private 
					                              Private f32_4* %212 = OpVariable Private 
					                                             %218 = OpTypePointer Private %14 
					                              Private f32_3* %219 = OpVariable Private 
					                               Output f32_3* %235 = OpVariable Output 
					                                         i32 %236 = OpConstant 4 
					                                             %245 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %22 %66 %48 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %46 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %30 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %22 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %22 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore %100 %112 
					                                       f32_4 %113 = OpLoad %9 
					                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
					                                       f32_3 %115 = OpFNegate %114 
					                              Uniform f32_3* %117 = OpAccessChain %22 %30 
					                                       f32_3 %118 = OpLoad %117 
					                                       f32_3 %119 = OpFAdd %115 %118 
					                                       f32_4 %120 = OpLoad %46 
					                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
					                                                      OpStore %46 %121 
					                                       f32_4 %124 = OpLoad %9 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                                      OpStore %123 %125 
					                                       f32_3 %128 = OpLoad %127 
					                              Uniform f32_4* %130 = OpAccessChain %22 %129 %30 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                         f32 %133 = OpDot %128 %132 
					                                Private f32* %136 = OpAccessChain %9 %134 
					                                                      OpStore %136 %133 
					                                       f32_3 %137 = OpLoad %127 
					                              Uniform f32_4* %138 = OpAccessChain %22 %129 %25 
					                                       f32_4 %139 = OpLoad %138 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                         f32 %141 = OpDot %137 %140 
					                                Private f32* %142 = OpAccessChain %9 %84 
					                                                      OpStore %142 %141 
					                                       f32_3 %143 = OpLoad %127 
					                              Uniform f32_4* %144 = OpAccessChain %22 %129 %38 
					                                       f32_4 %145 = OpLoad %144 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
					                                         f32 %147 = OpDot %143 %146 
					                                Private f32* %149 = OpAccessChain %9 %148 
					                                                      OpStore %149 %147 
					                                       f32_4 %151 = OpLoad %9 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
					                                       f32_4 %153 = OpLoad %9 
					                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
					                                         f32 %155 = OpDot %152 %154 
					                                                      OpStore %150 %155 
					                                         f32 %156 = OpLoad %150 
					                                         f32 %157 = OpExtInst %1 32 %156 
					                                                      OpStore %150 %157 
					                                         f32 %158 = OpLoad %150 
					                                       f32_3 %159 = OpCompositeConstruct %158 %158 %158 
					                                       f32_4 %160 = OpLoad %9 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
					                                       f32_3 %162 = OpFMul %159 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
					                                                      OpStore %9 %164 
					                                       f32_4 %165 = OpLoad %46 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                       f32_3 %167 = OpFNegate %166 
					                                       f32_4 %168 = OpLoad %9 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                         f32 %170 = OpDot %167 %169 
					                                                      OpStore %150 %170 
					                                         f32 %171 = OpLoad %150 
					                                         f32 %172 = OpLoad %150 
					                                         f32 %173 = OpFAdd %171 %172 
					                                                      OpStore %150 %173 
					                                       f32_4 %174 = OpLoad %9 
					                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
					                                         f32 %176 = OpLoad %150 
					                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
					                                       f32_3 %178 = OpFNegate %177 
					                                       f32_3 %179 = OpFMul %175 %178 
					                                       f32_4 %180 = OpLoad %46 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFAdd %179 %182 
					                                       f32_4 %184 = OpLoad %63 
					                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
					                                                      OpStore %63 %185 
					                                       f32_4 %187 = OpLoad %46 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                                      OpStore %186 %188 
					                                       f32_4 %190 = OpLoad %63 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                                      OpStore %189 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                                      OpStore %192 %194 
					                                                      OpStore %195 %197 
					                                Private f32* %199 = OpAccessChain %9 %84 
					                                         f32 %200 = OpLoad %199 
					                                Private f32* %201 = OpAccessChain %9 %84 
					                                         f32 %202 = OpLoad %201 
					                                         f32 %203 = OpFMul %200 %202 
					                                                      OpStore %198 %203 
					                                Private f32* %204 = OpAccessChain %9 %134 
					                                         f32 %205 = OpLoad %204 
					                                Private f32* %206 = OpAccessChain %9 %134 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFMul %205 %207 
					                                         f32 %209 = OpLoad %198 
					                                         f32 %210 = OpFNegate %209 
					                                         f32 %211 = OpFAdd %208 %210 
					                                                      OpStore %198 %211 
					                                       f32_4 %213 = OpLoad %9 
					                                       f32_4 %214 = OpVectorShuffle %213 %213 1 2 2 0 
					                                       f32_4 %215 = OpLoad %9 
					                                       f32_4 %216 = OpVectorShuffle %215 %215 0 1 2 2 
					                                       f32_4 %217 = OpFMul %214 %216 
					                                                      OpStore %212 %217 
					                              Uniform f32_4* %220 = OpAccessChain %22 %25 
					                                       f32_4 %221 = OpLoad %220 
					                                       f32_4 %222 = OpLoad %212 
					                                         f32 %223 = OpDot %221 %222 
					                                Private f32* %224 = OpAccessChain %219 %134 
					                                                      OpStore %224 %223 
					                              Uniform f32_4* %225 = OpAccessChain %22 %38 
					                                       f32_4 %226 = OpLoad %225 
					                                       f32_4 %227 = OpLoad %212 
					                                         f32 %228 = OpDot %226 %227 
					                                Private f32* %229 = OpAccessChain %219 %84 
					                                                      OpStore %229 %228 
					                              Uniform f32_4* %230 = OpAccessChain %22 %48 
					                                       f32_4 %231 = OpLoad %230 
					                                       f32_4 %232 = OpLoad %212 
					                                         f32 %233 = OpDot %231 %232 
					                                Private f32* %234 = OpAccessChain %219 %148 
					                                                      OpStore %234 %233 
					                              Uniform f32_4* %237 = OpAccessChain %22 %236 
					                                       f32_4 %238 = OpLoad %237 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                         f32 %240 = OpLoad %198 
					                                       f32_3 %241 = OpCompositeConstruct %240 %240 %240 
					                                       f32_3 %242 = OpFMul %239 %241 
					                                       f32_3 %243 = OpLoad %219 
					                                       f32_3 %244 = OpFAdd %242 %243 
					                                                      OpStore %235 %244 
					                                 Output f32* %246 = OpAccessChain %88 %30 %84 
					                                         f32 %247 = OpLoad %246 
					                                         f32 %248 = OpFNegate %247 
					                                 Output f32* %249 = OpAccessChain %88 %30 %84 
					                                                      OpStore %249 %248 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 286
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %31 %113 %132 %166 %184 %212 %258 %278 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %9 RelaxedPrecision 
					                                                      OpDecorate %11 RelaxedPrecision 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %12 RelaxedPrecision 
					                                                      OpDecorate %13 RelaxedPrecision 
					                                                      OpDecorate %14 RelaxedPrecision 
					                                                      OpDecorate %20 RelaxedPrecision 
					                                                      OpDecorate %21 RelaxedPrecision 
					                                                      OpDecorate %23 RelaxedPrecision 
					                                                      OpDecorate %24 RelaxedPrecision 
					                                                      OpDecorate %25 RelaxedPrecision 
					                                                      OpDecorate %26 RelaxedPrecision 
					                                                      OpDecorate %30 RelaxedPrecision 
					                                                      OpDecorate %31 Location 31 
					                                                      OpDecorate %48 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %54 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 Offset 55 
					                                                      OpMemberDecorate %55 1 RelaxedPrecision 
					                                                      OpMemberDecorate %55 1 Offset 55 
					                                                      OpMemberDecorate %55 2 RelaxedPrecision 
					                                                      OpMemberDecorate %55 2 Offset 55 
					                                                      OpMemberDecorate %55 3 RelaxedPrecision 
					                                                      OpMemberDecorate %55 3 Offset 55 
					                                                      OpMemberDecorate %55 4 RelaxedPrecision 
					                                                      OpMemberDecorate %55 4 Offset 55 
					                                                      OpMemberDecorate %55 5 RelaxedPrecision 
					                                                      OpMemberDecorate %55 5 Offset 55 
					                                                      OpMemberDecorate %55 6 RelaxedPrecision 
					                                                      OpMemberDecorate %55 6 Offset 55 
					                                                      OpMemberDecorate %55 7 Offset 55 
					                                                      OpMemberDecorate %55 8 Offset 55 
					                                                      OpMemberDecorate %55 9 Offset 55 
					                                                      OpMemberDecorate %55 10 Offset 55 
					                                                      OpMemberDecorate %55 11 RelaxedPrecision 
					                                                      OpMemberDecorate %55 11 Offset 55 
					                                                      OpDecorate %55 Block 
					                                                      OpDecorate %57 DescriptorSet 57 
					                                                      OpDecorate %57 Binding 57 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %75 RelaxedPrecision 
					                                                      OpDecorate %76 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %89 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %91 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %125 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %129 DescriptorSet 129 
					                                                      OpDecorate %129 Binding 129 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %132 Location 132 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %140 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %151 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %163 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %166 Location 166 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %173 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 Location 184 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %211 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %212 Location 212 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %246 RelaxedPrecision 
					                                                      OpDecorate %249 RelaxedPrecision 
					                                                      OpDecorate %250 RelaxedPrecision 
					                                                      OpDecorate %256 RelaxedPrecision 
					                                                      OpDecorate %256 DescriptorSet 256 
					                                                      OpDecorate %256 Binding 256 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %258 Location 258 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %276 RelaxedPrecision 
					                                                      OpDecorate %278 RelaxedPrecision 
					                                                      OpDecorate %278 Location 278 
					                                                      OpDecorate %279 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 0 
					                                              %17 = OpTypePointer Private %6 
					                                              %27 = OpTypeVector %6 2 
					                                              %28 = OpTypePointer Private %27 
					                               Private f32_2* %29 = OpVariable Private 
					                                 Input f32_3* %31 = OpVariable Input 
					                                          f32 %37 = OpConstant 3.674022E-40 
					                                          f32 %38 = OpConstant 3.674022E-40 
					                                              %46 = OpTypeVector %6 4 
					                                              %47 = OpTypePointer Private %46 
					                               Private f32_4* %48 = OpVariable Private 
					                                              %55 = OpTypeStruct %46 %46 %46 %46 %46 %46 %6 %6 %6 %6 %6 %46 
					                                              %56 = OpTypePointer Uniform %55 
					Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %57 = OpVariable Uniform 
					                                              %58 = OpTypeInt 32 1 
					                                          i32 %59 = OpConstant 9 
					                                              %60 = OpTypePointer Uniform %6 
					                                          i32 %63 = OpConstant 7 
					                                          i32 %72 = OpConstant 11 
					                                              %73 = OpTypePointer Uniform %46 
					                               Private f32_3* %78 = OpVariable Private 
					                                          i32 %80 = OpConstant 10 
					                                 Private f32* %93 = OpVariable Private 
					                                         i32 %103 = OpConstant 4 
					                                             %112 = OpTypePointer Output %46 
					                               Output f32_4* %113 = OpVariable Output 
					                                         u32 %117 = OpConstant 3 
					                                             %118 = OpTypePointer Output %6 
					                              Private f32_4* %125 = OpVariable Private 
					                                             %126 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %127 = OpTypeSampledImage %126 
					                                             %128 = OpTypePointer UniformConstant %127 
					 UniformConstant read_only Texture2DSampled* %129 = OpVariable UniformConstant 
					                                             %131 = OpTypePointer Input %27 
					                                Input f32_2* %132 = OpVariable Input 
					                                         i32 %145 = OpConstant 8 
					                                         i32 %149 = OpConstant 3 
					                                         f32 %161 = OpConstant 3.674022E-40 
					                                       f32_3 %162 = OpConstantComposite %161 %161 %161 
					                               Output f32_4* %166 = OpVariable Output 
					                                         i32 %171 = OpConstant 6 
					                              Private f32_4* %175 = OpVariable Private 
					                                         f32 %177 = OpConstant 3.674022E-40 
					                                       f32_3 %178 = OpConstantComposite %177 %177 %177 
					                               Output f32_4* %184 = OpVariable Output 
					                              Private f32_3* %190 = OpVariable Private 
					                                         i32 %191 = OpConstant 0 
					                                         i32 %197 = OpConstant 1 
					                                         u32 %202 = OpConstant 1 
					                                         i32 %204 = OpConstant 2 
					                                         u32 %209 = OpConstant 2 
					                                Input f32_3* %212 = OpVariable Input 
					                                       f32_3 %216 = OpConstantComposite %37 %37 %37 
					                                         f32 %224 = OpConstant 3.674022E-40 
					                                       f32_3 %225 = OpConstantComposite %224 %224 %224 
					                                         f32 %236 = OpConstant 3.674022E-40 
					                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
					                                         f32 %239 = OpConstant 3.674022E-40 
					                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
					                                             %253 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %254 = OpTypeSampledImage %253 
					                                             %255 = OpTypePointer UniformConstant %254 
					UniformConstant read_only TextureCubeSampled* %256 = OpVariable UniformConstant 
					                                Input f32_3* %258 = OpVariable Input 
					                              Private f32_3* %264 = OpVariable Private 
					                                         i32 %267 = OpConstant 5 
					                               Output f32_4* %278 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpLoad %11 
					                                          f32 %14 = OpDot %12 %13 
					                                 Private f32* %18 = OpAccessChain %9 %16 
					                                                      OpStore %18 %14 
					                                 Private f32* %19 = OpAccessChain %9 %16 
					                                          f32 %20 = OpLoad %19 
					                                          f32 %21 = OpExtInst %1 32 %20 
					                                 Private f32* %22 = OpAccessChain %9 %16 
					                                                      OpStore %22 %21 
					                                        f32_3 %23 = OpLoad %9 
					                                        f32_3 %24 = OpVectorShuffle %23 %23 0 0 0 
					                                        f32_3 %25 = OpLoad %11 
					                                        f32_3 %26 = OpFMul %24 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %30 = OpLoad %9 
					                                        f32_3 %32 = OpLoad %31 
					                                          f32 %33 = OpDot %30 %32 
					                                 Private f32* %34 = OpAccessChain %29 %16 
					                                                      OpStore %34 %33 
					                                 Private f32* %35 = OpAccessChain %29 %16 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %39 = OpExtInst %1 43 %36 %37 %38 
					                                 Private f32* %40 = OpAccessChain %29 %16 
					                                                      OpStore %40 %39 
					                                 Private f32* %41 = OpAccessChain %29 %16 
					                                          f32 %42 = OpLoad %41 
					                                          f32 %43 = OpFNegate %42 
					                                          f32 %44 = OpFAdd %43 %38 
					                                 Private f32* %45 = OpAccessChain %9 %16 
					                                                      OpStore %45 %44 
					                                 Private f32* %49 = OpAccessChain %9 %16 
					                                          f32 %50 = OpLoad %49 
					                                          f32 %51 = OpExtInst %1 30 %50 
					                                 Private f32* %52 = OpAccessChain %48 %16 
					                                                      OpStore %52 %51 
					                                        f32_4 %53 = OpLoad %48 
					                                        f32_2 %54 = OpVectorShuffle %53 %53 0 0 
					                                 Uniform f32* %61 = OpAccessChain %57 %59 
					                                          f32 %62 = OpLoad %61 
					                                 Uniform f32* %64 = OpAccessChain %57 %63 
					                                          f32 %65 = OpLoad %64 
					                                        f32_2 %66 = OpCompositeConstruct %62 %65 
					                                        f32_2 %67 = OpFMul %54 %66 
					                                                      OpStore %29 %67 
					                                        f32_2 %68 = OpLoad %29 
					                                        f32_2 %69 = OpExtInst %1 29 %68 
					                                                      OpStore %29 %69 
					                                        f32_2 %70 = OpLoad %29 
					                                        f32_3 %71 = OpVectorShuffle %70 %70 0 0 0 
					                               Uniform f32_4* %74 = OpAccessChain %57 %72 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
					                                        f32_3 %77 = OpFMul %71 %76 
					                                                      OpStore %9 %77 
					                                        f32_3 %79 = OpLoad %9 
					                                 Uniform f32* %81 = OpAccessChain %57 %80 
					                                          f32 %82 = OpLoad %81 
					                                 Uniform f32* %83 = OpAccessChain %57 %80 
					                                          f32 %84 = OpLoad %83 
					                                 Uniform f32* %85 = OpAccessChain %57 %80 
					                                          f32 %86 = OpLoad %85 
					                                        f32_3 %87 = OpCompositeConstruct %82 %84 %86 
					                                          f32 %88 = OpCompositeExtract %87 0 
					                                          f32 %89 = OpCompositeExtract %87 1 
					                                          f32 %90 = OpCompositeExtract %87 2 
					                                        f32_3 %91 = OpCompositeConstruct %88 %89 %90 
					                                        f32_3 %92 = OpFMul %79 %91 
					                                                      OpStore %78 %92 
					                                 Private f32* %94 = OpAccessChain %29 %16 
					                                          f32 %95 = OpLoad %94 
					                                          f32 %96 = OpFNegate %95 
					                                 Uniform f32* %97 = OpAccessChain %57 %80 
					                                          f32 %98 = OpLoad %97 
					                                          f32 %99 = OpFMul %96 %98 
					                                         f32 %100 = OpFAdd %99 %38 
					                                                      OpStore %93 %100 
					                                         f32 %101 = OpLoad %93 
					                                         f32 %102 = OpExtInst %1 43 %101 %37 %38 
					                                                      OpStore %93 %102 
					                              Uniform f32_4* %104 = OpAccessChain %57 %103 
					                                       f32_4 %105 = OpLoad %104 
					                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
					                                         f32 %107 = OpLoad %93 
					                                       f32_3 %108 = OpCompositeConstruct %107 %107 %107 
					                                       f32_3 %109 = OpFMul %106 %108 
					                                       f32_3 %110 = OpLoad %78 
					                                       f32_3 %111 = OpFAdd %109 %110 
					                                                      OpStore %78 %111 
					                                       f32_3 %114 = OpLoad %78 
					                                       f32_4 %115 = OpLoad %113 
					                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                      OpStore %113 %116 
					                                 Output f32* %119 = OpAccessChain %113 %117 
					                                                      OpStore %119 %38 
					                                Private f32* %120 = OpAccessChain %29 %16 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %122 = OpFNegate %121 
					                                         f32 %123 = OpFAdd %122 %38 
					                                Private f32* %124 = OpAccessChain %9 %16 
					                                                      OpStore %124 %123 
					                  read_only Texture2DSampled %130 = OpLoad %129 
					                                       f32_2 %133 = OpLoad %132 
					                                       f32_4 %134 = OpImageSampleImplicitLod %130 %133 
					                                         f32 %135 = OpCompositeExtract %134 3 
					                                Private f32* %136 = OpAccessChain %125 %16 
					                                                      OpStore %136 %135 
					                                Private f32* %137 = OpAccessChain %9 %16 
					                                         f32 %138 = OpLoad %137 
					                                Private f32* %139 = OpAccessChain %125 %16 
					                                         f32 %140 = OpLoad %139 
					                                         f32 %141 = OpFMul %138 %140 
					                                Private f32* %142 = OpAccessChain %9 %16 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %9 %16 
					                                         f32 %144 = OpLoad %143 
					                                Uniform f32* %146 = OpAccessChain %57 %145 
					                                         f32 %147 = OpLoad %146 
					                                         f32 %148 = OpFMul %144 %147 
					                                Uniform f32* %150 = OpAccessChain %57 %149 %117 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFAdd %148 %151 
					                                Private f32* %153 = OpAccessChain %29 %16 
					                                                      OpStore %153 %152 
					                                       f32_2 %154 = OpLoad %29 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 0 0 
					                              Uniform f32_4* %156 = OpAccessChain %57 %149 
					                                       f32_4 %157 = OpLoad %156 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
					                                       f32_3 %159 = OpFMul %155 %158 
					                                                      OpStore %9 %159 
					                                       f32_3 %160 = OpLoad %9 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %48 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 1 5 6 
					                                                      OpStore %48 %165 
					                                       f32_4 %167 = OpLoad %48 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 2 3 
					                                       f32_4 %169 = OpLoad %166 
					                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
					                                                      OpStore %166 %170 
					                                Uniform f32* %172 = OpAccessChain %57 %171 
					                                         f32 %173 = OpLoad %172 
					                                 Output f32* %174 = OpAccessChain %166 %117 
					                                                      OpStore %174 %173 
					                                       f32_3 %176 = OpLoad %31 
					                                       f32_3 %179 = OpFMul %176 %178 
					                                       f32_3 %180 = OpFAdd %179 %178 
					                                       f32_4 %181 = OpLoad %175 
					                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
					                                                      OpStore %175 %182 
					                                Private f32* %183 = OpAccessChain %175 %117 
					                                                      OpStore %183 %38 
					                                       f32_4 %185 = OpLoad %175 
					                                                      OpStore %184 %185 
					                                       f32_3 %186 = OpLoad %31 
					                                       f32_4 %187 = OpLoad %175 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %175 %188 
					                                Private f32* %189 = OpAccessChain %175 %117 
					                                                      OpStore %189 %38 
					                              Uniform f32_4* %192 = OpAccessChain %57 %191 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_4 %194 = OpLoad %175 
					                                         f32 %195 = OpDot %193 %194 
					                                Private f32* %196 = OpAccessChain %190 %16 
					                                                      OpStore %196 %195 
					                              Uniform f32_4* %198 = OpAccessChain %57 %197 
					                                       f32_4 %199 = OpLoad %198 
					                                       f32_4 %200 = OpLoad %175 
					                                         f32 %201 = OpDot %199 %200 
					                                Private f32* %203 = OpAccessChain %190 %202 
					                                                      OpStore %203 %201 
					                              Uniform f32_4* %205 = OpAccessChain %57 %204 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_4 %207 = OpLoad %175 
					                                         f32 %208 = OpDot %206 %207 
					                                Private f32* %210 = OpAccessChain %190 %209 
					                                                      OpStore %210 %208 
					                                       f32_3 %211 = OpLoad %190 
					                                       f32_3 %213 = OpLoad %212 
					                                       f32_3 %214 = OpFAdd %211 %213 
					                                                      OpStore %190 %214 
					                                       f32_3 %215 = OpLoad %190 
					                                       f32_3 %217 = OpExtInst %1 40 %215 %216 
					                                                      OpStore %190 %217 
					                                       f32_3 %218 = OpLoad %190 
					                                       f32_3 %219 = OpExtInst %1 30 %218 
					                                       f32_4 %220 = OpLoad %48 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 1 5 6 
					                                                      OpStore %48 %221 
					                                       f32_4 %222 = OpLoad %48 
					                                       f32_3 %223 = OpVectorShuffle %222 %222 0 2 3 
					                                       f32_3 %226 = OpFMul %223 %225 
					                                       f32_4 %227 = OpLoad %48 
					                                       f32_4 %228 = OpVectorShuffle %227 %226 4 1 5 6 
					                                                      OpStore %48 %228 
					                                       f32_4 %229 = OpLoad %48 
					                                       f32_3 %230 = OpVectorShuffle %229 %229 0 2 3 
					                                       f32_3 %231 = OpExtInst %1 29 %230 
					                                       f32_4 %232 = OpLoad %48 
					                                       f32_4 %233 = OpVectorShuffle %232 %231 4 1 5 6 
					                                                      OpStore %48 %233 
					                                       f32_4 %234 = OpLoad %48 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 2 3 
					                                       f32_3 %238 = OpFMul %235 %237 
					                                       f32_3 %241 = OpFAdd %238 %240 
					                                       f32_4 %242 = OpLoad %48 
					                                       f32_4 %243 = OpVectorShuffle %242 %241 4 1 5 6 
					                                                      OpStore %48 %243 
					                                       f32_4 %244 = OpLoad %48 
					                                       f32_3 %245 = OpVectorShuffle %244 %244 0 2 3 
					                                       f32_3 %246 = OpExtInst %1 40 %245 %216 
					                                       f32_4 %247 = OpLoad %48 
					                                       f32_4 %248 = OpVectorShuffle %247 %246 4 1 5 6 
					                                                      OpStore %48 %248 
					                                       f32_4 %249 = OpLoad %48 
					                                       f32_3 %250 = OpVectorShuffle %249 %249 0 2 3 
					                                       f32_3 %251 = OpLoad %78 
					                                       f32_3 %252 = OpFMul %250 %251 
					                                                      OpStore %190 %252 
					                read_only TextureCubeSampled %257 = OpLoad %256 
					                                       f32_3 %259 = OpLoad %258 
					                                       f32_4 %260 = OpImageSampleImplicitLod %257 %259 
					                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
					                                       f32_4 %262 = OpLoad %125 
					                                       f32_4 %263 = OpVectorShuffle %262 %261 4 1 5 6 
					                                                      OpStore %125 %263 
					                                       f32_4 %265 = OpLoad %125 
					                                       f32_3 %266 = OpVectorShuffle %265 %265 0 2 3 
					                              Uniform f32_4* %268 = OpAccessChain %57 %267 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
					                                       f32_3 %271 = OpFMul %266 %270 
					                                                      OpStore %264 %271 
					                                       f32_3 %272 = OpLoad %264 
					                                       f32_2 %273 = OpLoad %29 
					                                       f32_3 %274 = OpVectorShuffle %273 %273 1 1 1 
					                                       f32_3 %275 = OpFMul %272 %274 
					                                       f32_3 %276 = OpLoad %190 
					                                       f32_3 %277 = OpFAdd %275 %276 
					                                                      OpStore %190 %277 
					                                       f32_3 %279 = OpLoad %190 
					                                       f32_3 %280 = OpFNegate %279 
					                                       f32_3 %281 = OpExtInst %1 29 %280 
					                                       f32_4 %282 = OpLoad %278 
					                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
					                                                      OpStore %278 %283 
					                                 Output f32* %284 = OpAccessChain %278 %117 
					                                                      OpStore %284 %38 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 251
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %123 %127 %186 %189 %192 %195 %235 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate %100 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %127 Location 127 
					                                                      OpDecorate %186 RelaxedPrecision 
					                                                      OpDecorate %186 Location 186 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %192 Location 192 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %235 Location 235 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %243 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 5 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                               Output f32_2* %100 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                                             %116 = OpTypePointer Uniform %14 
					                                             %122 = OpTypePointer Output %14 
					                               Output f32_3* %123 = OpVariable Output 
					                                             %126 = OpTypePointer Input %14 
					                                Input f32_3* %127 = OpVariable Input 
					                                         i32 %129 = OpConstant 6 
					                                         u32 %134 = OpConstant 0 
					                                             %135 = OpTypePointer Private %6 
					                                         u32 %148 = OpConstant 2 
					                                Private f32* %150 = OpVariable Private 
					                               Output f32_3* %186 = OpVariable Output 
					                               Output f32_3* %189 = OpVariable Output 
					                               Output f32_3* %192 = OpVariable Output 
					                               Output f32_4* %195 = OpVariable Output 
					                                         f32 %196 = OpConstant 3.674022E-40 
					                                       f32_4 %197 = OpConstantComposite %196 %196 %196 %196 
					                                Private f32* %198 = OpVariable Private 
					                              Private f32_4* %212 = OpVariable Private 
					                                             %218 = OpTypePointer Private %14 
					                              Private f32_3* %219 = OpVariable Private 
					                               Output f32_3* %235 = OpVariable Output 
					                                         i32 %236 = OpConstant 4 
					                                             %245 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %22 %66 %48 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %46 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %30 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %22 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %22 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore %100 %112 
					                                       f32_4 %113 = OpLoad %9 
					                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
					                                       f32_3 %115 = OpFNegate %114 
					                              Uniform f32_3* %117 = OpAccessChain %22 %30 
					                                       f32_3 %118 = OpLoad %117 
					                                       f32_3 %119 = OpFAdd %115 %118 
					                                       f32_4 %120 = OpLoad %46 
					                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
					                                                      OpStore %46 %121 
					                                       f32_4 %124 = OpLoad %9 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                                      OpStore %123 %125 
					                                       f32_3 %128 = OpLoad %127 
					                              Uniform f32_4* %130 = OpAccessChain %22 %129 %30 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                         f32 %133 = OpDot %128 %132 
					                                Private f32* %136 = OpAccessChain %9 %134 
					                                                      OpStore %136 %133 
					                                       f32_3 %137 = OpLoad %127 
					                              Uniform f32_4* %138 = OpAccessChain %22 %129 %25 
					                                       f32_4 %139 = OpLoad %138 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                         f32 %141 = OpDot %137 %140 
					                                Private f32* %142 = OpAccessChain %9 %84 
					                                                      OpStore %142 %141 
					                                       f32_3 %143 = OpLoad %127 
					                              Uniform f32_4* %144 = OpAccessChain %22 %129 %38 
					                                       f32_4 %145 = OpLoad %144 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
					                                         f32 %147 = OpDot %143 %146 
					                                Private f32* %149 = OpAccessChain %9 %148 
					                                                      OpStore %149 %147 
					                                       f32_4 %151 = OpLoad %9 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
					                                       f32_4 %153 = OpLoad %9 
					                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
					                                         f32 %155 = OpDot %152 %154 
					                                                      OpStore %150 %155 
					                                         f32 %156 = OpLoad %150 
					                                         f32 %157 = OpExtInst %1 32 %156 
					                                                      OpStore %150 %157 
					                                         f32 %158 = OpLoad %150 
					                                       f32_3 %159 = OpCompositeConstruct %158 %158 %158 
					                                       f32_4 %160 = OpLoad %9 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
					                                       f32_3 %162 = OpFMul %159 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
					                                                      OpStore %9 %164 
					                                       f32_4 %165 = OpLoad %46 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                       f32_3 %167 = OpFNegate %166 
					                                       f32_4 %168 = OpLoad %9 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                         f32 %170 = OpDot %167 %169 
					                                                      OpStore %150 %170 
					                                         f32 %171 = OpLoad %150 
					                                         f32 %172 = OpLoad %150 
					                                         f32 %173 = OpFAdd %171 %172 
					                                                      OpStore %150 %173 
					                                       f32_4 %174 = OpLoad %9 
					                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
					                                         f32 %176 = OpLoad %150 
					                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
					                                       f32_3 %178 = OpFNegate %177 
					                                       f32_3 %179 = OpFMul %175 %178 
					                                       f32_4 %180 = OpLoad %46 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFAdd %179 %182 
					                                       f32_4 %184 = OpLoad %63 
					                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
					                                                      OpStore %63 %185 
					                                       f32_4 %187 = OpLoad %46 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                                      OpStore %186 %188 
					                                       f32_4 %190 = OpLoad %63 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                                      OpStore %189 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                                      OpStore %192 %194 
					                                                      OpStore %195 %197 
					                                Private f32* %199 = OpAccessChain %9 %84 
					                                         f32 %200 = OpLoad %199 
					                                Private f32* %201 = OpAccessChain %9 %84 
					                                         f32 %202 = OpLoad %201 
					                                         f32 %203 = OpFMul %200 %202 
					                                                      OpStore %198 %203 
					                                Private f32* %204 = OpAccessChain %9 %134 
					                                         f32 %205 = OpLoad %204 
					                                Private f32* %206 = OpAccessChain %9 %134 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFMul %205 %207 
					                                         f32 %209 = OpLoad %198 
					                                         f32 %210 = OpFNegate %209 
					                                         f32 %211 = OpFAdd %208 %210 
					                                                      OpStore %198 %211 
					                                       f32_4 %213 = OpLoad %9 
					                                       f32_4 %214 = OpVectorShuffle %213 %213 1 2 2 0 
					                                       f32_4 %215 = OpLoad %9 
					                                       f32_4 %216 = OpVectorShuffle %215 %215 0 1 2 2 
					                                       f32_4 %217 = OpFMul %214 %216 
					                                                      OpStore %212 %217 
					                              Uniform f32_4* %220 = OpAccessChain %22 %25 
					                                       f32_4 %221 = OpLoad %220 
					                                       f32_4 %222 = OpLoad %212 
					                                         f32 %223 = OpDot %221 %222 
					                                Private f32* %224 = OpAccessChain %219 %134 
					                                                      OpStore %224 %223 
					                              Uniform f32_4* %225 = OpAccessChain %22 %38 
					                                       f32_4 %226 = OpLoad %225 
					                                       f32_4 %227 = OpLoad %212 
					                                         f32 %228 = OpDot %226 %227 
					                                Private f32* %229 = OpAccessChain %219 %84 
					                                                      OpStore %229 %228 
					                              Uniform f32_4* %230 = OpAccessChain %22 %48 
					                                       f32_4 %231 = OpLoad %230 
					                                       f32_4 %232 = OpLoad %212 
					                                         f32 %233 = OpDot %231 %232 
					                                Private f32* %234 = OpAccessChain %219 %148 
					                                                      OpStore %234 %233 
					                              Uniform f32_4* %237 = OpAccessChain %22 %236 
					                                       f32_4 %238 = OpLoad %237 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                         f32 %240 = OpLoad %198 
					                                       f32_3 %241 = OpCompositeConstruct %240 %240 %240 
					                                       f32_3 %242 = OpFMul %239 %241 
					                                       f32_3 %243 = OpLoad %219 
					                                       f32_3 %244 = OpFAdd %242 %243 
					                                                      OpStore %235 %244 
					                                 Output f32* %246 = OpAccessChain %88 %30 %84 
					                                         f32 %247 = OpLoad %246 
					                                         f32 %248 = OpFNegate %247 
					                                 Output f32* %249 = OpAccessChain %88 %30 %84 
					                                                      OpStore %249 %248 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 286
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %31 %113 %132 %166 %184 %212 %258 %278 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %9 RelaxedPrecision 
					                                                      OpDecorate %11 RelaxedPrecision 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %12 RelaxedPrecision 
					                                                      OpDecorate %13 RelaxedPrecision 
					                                                      OpDecorate %14 RelaxedPrecision 
					                                                      OpDecorate %20 RelaxedPrecision 
					                                                      OpDecorate %21 RelaxedPrecision 
					                                                      OpDecorate %23 RelaxedPrecision 
					                                                      OpDecorate %24 RelaxedPrecision 
					                                                      OpDecorate %25 RelaxedPrecision 
					                                                      OpDecorate %26 RelaxedPrecision 
					                                                      OpDecorate %30 RelaxedPrecision 
					                                                      OpDecorate %31 Location 31 
					                                                      OpDecorate %48 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %54 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 Offset 55 
					                                                      OpMemberDecorate %55 1 RelaxedPrecision 
					                                                      OpMemberDecorate %55 1 Offset 55 
					                                                      OpMemberDecorate %55 2 RelaxedPrecision 
					                                                      OpMemberDecorate %55 2 Offset 55 
					                                                      OpMemberDecorate %55 3 RelaxedPrecision 
					                                                      OpMemberDecorate %55 3 Offset 55 
					                                                      OpMemberDecorate %55 4 RelaxedPrecision 
					                                                      OpMemberDecorate %55 4 Offset 55 
					                                                      OpMemberDecorate %55 5 RelaxedPrecision 
					                                                      OpMemberDecorate %55 5 Offset 55 
					                                                      OpMemberDecorate %55 6 RelaxedPrecision 
					                                                      OpMemberDecorate %55 6 Offset 55 
					                                                      OpMemberDecorate %55 7 Offset 55 
					                                                      OpMemberDecorate %55 8 Offset 55 
					                                                      OpMemberDecorate %55 9 Offset 55 
					                                                      OpMemberDecorate %55 10 Offset 55 
					                                                      OpMemberDecorate %55 11 RelaxedPrecision 
					                                                      OpMemberDecorate %55 11 Offset 55 
					                                                      OpDecorate %55 Block 
					                                                      OpDecorate %57 DescriptorSet 57 
					                                                      OpDecorate %57 Binding 57 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %75 RelaxedPrecision 
					                                                      OpDecorate %76 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %89 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %91 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %125 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %129 DescriptorSet 129 
					                                                      OpDecorate %129 Binding 129 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %132 Location 132 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %140 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %151 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %163 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %166 Location 166 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %173 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 Location 184 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %211 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %212 Location 212 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %246 RelaxedPrecision 
					                                                      OpDecorate %249 RelaxedPrecision 
					                                                      OpDecorate %250 RelaxedPrecision 
					                                                      OpDecorate %256 RelaxedPrecision 
					                                                      OpDecorate %256 DescriptorSet 256 
					                                                      OpDecorate %256 Binding 256 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %258 Location 258 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %276 RelaxedPrecision 
					                                                      OpDecorate %278 RelaxedPrecision 
					                                                      OpDecorate %278 Location 278 
					                                                      OpDecorate %279 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 0 
					                                              %17 = OpTypePointer Private %6 
					                                              %27 = OpTypeVector %6 2 
					                                              %28 = OpTypePointer Private %27 
					                               Private f32_2* %29 = OpVariable Private 
					                                 Input f32_3* %31 = OpVariable Input 
					                                          f32 %37 = OpConstant 3.674022E-40 
					                                          f32 %38 = OpConstant 3.674022E-40 
					                                              %46 = OpTypeVector %6 4 
					                                              %47 = OpTypePointer Private %46 
					                               Private f32_4* %48 = OpVariable Private 
					                                              %55 = OpTypeStruct %46 %46 %46 %46 %46 %46 %6 %6 %6 %6 %6 %46 
					                                              %56 = OpTypePointer Uniform %55 
					Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %57 = OpVariable Uniform 
					                                              %58 = OpTypeInt 32 1 
					                                          i32 %59 = OpConstant 9 
					                                              %60 = OpTypePointer Uniform %6 
					                                          i32 %63 = OpConstant 7 
					                                          i32 %72 = OpConstant 11 
					                                              %73 = OpTypePointer Uniform %46 
					                               Private f32_3* %78 = OpVariable Private 
					                                          i32 %80 = OpConstant 10 
					                                 Private f32* %93 = OpVariable Private 
					                                         i32 %103 = OpConstant 4 
					                                             %112 = OpTypePointer Output %46 
					                               Output f32_4* %113 = OpVariable Output 
					                                         u32 %117 = OpConstant 3 
					                                             %118 = OpTypePointer Output %6 
					                              Private f32_4* %125 = OpVariable Private 
					                                             %126 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %127 = OpTypeSampledImage %126 
					                                             %128 = OpTypePointer UniformConstant %127 
					 UniformConstant read_only Texture2DSampled* %129 = OpVariable UniformConstant 
					                                             %131 = OpTypePointer Input %27 
					                                Input f32_2* %132 = OpVariable Input 
					                                         i32 %145 = OpConstant 8 
					                                         i32 %149 = OpConstant 3 
					                                         f32 %161 = OpConstant 3.674022E-40 
					                                       f32_3 %162 = OpConstantComposite %161 %161 %161 
					                               Output f32_4* %166 = OpVariable Output 
					                                         i32 %171 = OpConstant 6 
					                              Private f32_4* %175 = OpVariable Private 
					                                         f32 %177 = OpConstant 3.674022E-40 
					                                       f32_3 %178 = OpConstantComposite %177 %177 %177 
					                               Output f32_4* %184 = OpVariable Output 
					                              Private f32_3* %190 = OpVariable Private 
					                                         i32 %191 = OpConstant 0 
					                                         i32 %197 = OpConstant 1 
					                                         u32 %202 = OpConstant 1 
					                                         i32 %204 = OpConstant 2 
					                                         u32 %209 = OpConstant 2 
					                                Input f32_3* %212 = OpVariable Input 
					                                       f32_3 %216 = OpConstantComposite %37 %37 %37 
					                                         f32 %224 = OpConstant 3.674022E-40 
					                                       f32_3 %225 = OpConstantComposite %224 %224 %224 
					                                         f32 %236 = OpConstant 3.674022E-40 
					                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
					                                         f32 %239 = OpConstant 3.674022E-40 
					                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
					                                             %253 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %254 = OpTypeSampledImage %253 
					                                             %255 = OpTypePointer UniformConstant %254 
					UniformConstant read_only TextureCubeSampled* %256 = OpVariable UniformConstant 
					                                Input f32_3* %258 = OpVariable Input 
					                              Private f32_3* %264 = OpVariable Private 
					                                         i32 %267 = OpConstant 5 
					                               Output f32_4* %278 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpLoad %11 
					                                          f32 %14 = OpDot %12 %13 
					                                 Private f32* %18 = OpAccessChain %9 %16 
					                                                      OpStore %18 %14 
					                                 Private f32* %19 = OpAccessChain %9 %16 
					                                          f32 %20 = OpLoad %19 
					                                          f32 %21 = OpExtInst %1 32 %20 
					                                 Private f32* %22 = OpAccessChain %9 %16 
					                                                      OpStore %22 %21 
					                                        f32_3 %23 = OpLoad %9 
					                                        f32_3 %24 = OpVectorShuffle %23 %23 0 0 0 
					                                        f32_3 %25 = OpLoad %11 
					                                        f32_3 %26 = OpFMul %24 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %30 = OpLoad %9 
					                                        f32_3 %32 = OpLoad %31 
					                                          f32 %33 = OpDot %30 %32 
					                                 Private f32* %34 = OpAccessChain %29 %16 
					                                                      OpStore %34 %33 
					                                 Private f32* %35 = OpAccessChain %29 %16 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %39 = OpExtInst %1 43 %36 %37 %38 
					                                 Private f32* %40 = OpAccessChain %29 %16 
					                                                      OpStore %40 %39 
					                                 Private f32* %41 = OpAccessChain %29 %16 
					                                          f32 %42 = OpLoad %41 
					                                          f32 %43 = OpFNegate %42 
					                                          f32 %44 = OpFAdd %43 %38 
					                                 Private f32* %45 = OpAccessChain %9 %16 
					                                                      OpStore %45 %44 
					                                 Private f32* %49 = OpAccessChain %9 %16 
					                                          f32 %50 = OpLoad %49 
					                                          f32 %51 = OpExtInst %1 30 %50 
					                                 Private f32* %52 = OpAccessChain %48 %16 
					                                                      OpStore %52 %51 
					                                        f32_4 %53 = OpLoad %48 
					                                        f32_2 %54 = OpVectorShuffle %53 %53 0 0 
					                                 Uniform f32* %61 = OpAccessChain %57 %59 
					                                          f32 %62 = OpLoad %61 
					                                 Uniform f32* %64 = OpAccessChain %57 %63 
					                                          f32 %65 = OpLoad %64 
					                                        f32_2 %66 = OpCompositeConstruct %62 %65 
					                                        f32_2 %67 = OpFMul %54 %66 
					                                                      OpStore %29 %67 
					                                        f32_2 %68 = OpLoad %29 
					                                        f32_2 %69 = OpExtInst %1 29 %68 
					                                                      OpStore %29 %69 
					                                        f32_2 %70 = OpLoad %29 
					                                        f32_3 %71 = OpVectorShuffle %70 %70 0 0 0 
					                               Uniform f32_4* %74 = OpAccessChain %57 %72 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
					                                        f32_3 %77 = OpFMul %71 %76 
					                                                      OpStore %9 %77 
					                                        f32_3 %79 = OpLoad %9 
					                                 Uniform f32* %81 = OpAccessChain %57 %80 
					                                          f32 %82 = OpLoad %81 
					                                 Uniform f32* %83 = OpAccessChain %57 %80 
					                                          f32 %84 = OpLoad %83 
					                                 Uniform f32* %85 = OpAccessChain %57 %80 
					                                          f32 %86 = OpLoad %85 
					                                        f32_3 %87 = OpCompositeConstruct %82 %84 %86 
					                                          f32 %88 = OpCompositeExtract %87 0 
					                                          f32 %89 = OpCompositeExtract %87 1 
					                                          f32 %90 = OpCompositeExtract %87 2 
					                                        f32_3 %91 = OpCompositeConstruct %88 %89 %90 
					                                        f32_3 %92 = OpFMul %79 %91 
					                                                      OpStore %78 %92 
					                                 Private f32* %94 = OpAccessChain %29 %16 
					                                          f32 %95 = OpLoad %94 
					                                          f32 %96 = OpFNegate %95 
					                                 Uniform f32* %97 = OpAccessChain %57 %80 
					                                          f32 %98 = OpLoad %97 
					                                          f32 %99 = OpFMul %96 %98 
					                                         f32 %100 = OpFAdd %99 %38 
					                                                      OpStore %93 %100 
					                                         f32 %101 = OpLoad %93 
					                                         f32 %102 = OpExtInst %1 43 %101 %37 %38 
					                                                      OpStore %93 %102 
					                              Uniform f32_4* %104 = OpAccessChain %57 %103 
					                                       f32_4 %105 = OpLoad %104 
					                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
					                                         f32 %107 = OpLoad %93 
					                                       f32_3 %108 = OpCompositeConstruct %107 %107 %107 
					                                       f32_3 %109 = OpFMul %106 %108 
					                                       f32_3 %110 = OpLoad %78 
					                                       f32_3 %111 = OpFAdd %109 %110 
					                                                      OpStore %78 %111 
					                                       f32_3 %114 = OpLoad %78 
					                                       f32_4 %115 = OpLoad %113 
					                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                      OpStore %113 %116 
					                                 Output f32* %119 = OpAccessChain %113 %117 
					                                                      OpStore %119 %38 
					                                Private f32* %120 = OpAccessChain %29 %16 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %122 = OpFNegate %121 
					                                         f32 %123 = OpFAdd %122 %38 
					                                Private f32* %124 = OpAccessChain %9 %16 
					                                                      OpStore %124 %123 
					                  read_only Texture2DSampled %130 = OpLoad %129 
					                                       f32_2 %133 = OpLoad %132 
					                                       f32_4 %134 = OpImageSampleImplicitLod %130 %133 
					                                         f32 %135 = OpCompositeExtract %134 3 
					                                Private f32* %136 = OpAccessChain %125 %16 
					                                                      OpStore %136 %135 
					                                Private f32* %137 = OpAccessChain %9 %16 
					                                         f32 %138 = OpLoad %137 
					                                Private f32* %139 = OpAccessChain %125 %16 
					                                         f32 %140 = OpLoad %139 
					                                         f32 %141 = OpFMul %138 %140 
					                                Private f32* %142 = OpAccessChain %9 %16 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %9 %16 
					                                         f32 %144 = OpLoad %143 
					                                Uniform f32* %146 = OpAccessChain %57 %145 
					                                         f32 %147 = OpLoad %146 
					                                         f32 %148 = OpFMul %144 %147 
					                                Uniform f32* %150 = OpAccessChain %57 %149 %117 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFAdd %148 %151 
					                                Private f32* %153 = OpAccessChain %29 %16 
					                                                      OpStore %153 %152 
					                                       f32_2 %154 = OpLoad %29 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 0 0 
					                              Uniform f32_4* %156 = OpAccessChain %57 %149 
					                                       f32_4 %157 = OpLoad %156 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
					                                       f32_3 %159 = OpFMul %155 %158 
					                                                      OpStore %9 %159 
					                                       f32_3 %160 = OpLoad %9 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %48 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 1 5 6 
					                                                      OpStore %48 %165 
					                                       f32_4 %167 = OpLoad %48 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 2 3 
					                                       f32_4 %169 = OpLoad %166 
					                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
					                                                      OpStore %166 %170 
					                                Uniform f32* %172 = OpAccessChain %57 %171 
					                                         f32 %173 = OpLoad %172 
					                                 Output f32* %174 = OpAccessChain %166 %117 
					                                                      OpStore %174 %173 
					                                       f32_3 %176 = OpLoad %31 
					                                       f32_3 %179 = OpFMul %176 %178 
					                                       f32_3 %180 = OpFAdd %179 %178 
					                                       f32_4 %181 = OpLoad %175 
					                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
					                                                      OpStore %175 %182 
					                                Private f32* %183 = OpAccessChain %175 %117 
					                                                      OpStore %183 %38 
					                                       f32_4 %185 = OpLoad %175 
					                                                      OpStore %184 %185 
					                                       f32_3 %186 = OpLoad %31 
					                                       f32_4 %187 = OpLoad %175 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %175 %188 
					                                Private f32* %189 = OpAccessChain %175 %117 
					                                                      OpStore %189 %38 
					                              Uniform f32_4* %192 = OpAccessChain %57 %191 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_4 %194 = OpLoad %175 
					                                         f32 %195 = OpDot %193 %194 
					                                Private f32* %196 = OpAccessChain %190 %16 
					                                                      OpStore %196 %195 
					                              Uniform f32_4* %198 = OpAccessChain %57 %197 
					                                       f32_4 %199 = OpLoad %198 
					                                       f32_4 %200 = OpLoad %175 
					                                         f32 %201 = OpDot %199 %200 
					                                Private f32* %203 = OpAccessChain %190 %202 
					                                                      OpStore %203 %201 
					                              Uniform f32_4* %205 = OpAccessChain %57 %204 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_4 %207 = OpLoad %175 
					                                         f32 %208 = OpDot %206 %207 
					                                Private f32* %210 = OpAccessChain %190 %209 
					                                                      OpStore %210 %208 
					                                       f32_3 %211 = OpLoad %190 
					                                       f32_3 %213 = OpLoad %212 
					                                       f32_3 %214 = OpFAdd %211 %213 
					                                                      OpStore %190 %214 
					                                       f32_3 %215 = OpLoad %190 
					                                       f32_3 %217 = OpExtInst %1 40 %215 %216 
					                                                      OpStore %190 %217 
					                                       f32_3 %218 = OpLoad %190 
					                                       f32_3 %219 = OpExtInst %1 30 %218 
					                                       f32_4 %220 = OpLoad %48 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 1 5 6 
					                                                      OpStore %48 %221 
					                                       f32_4 %222 = OpLoad %48 
					                                       f32_3 %223 = OpVectorShuffle %222 %222 0 2 3 
					                                       f32_3 %226 = OpFMul %223 %225 
					                                       f32_4 %227 = OpLoad %48 
					                                       f32_4 %228 = OpVectorShuffle %227 %226 4 1 5 6 
					                                                      OpStore %48 %228 
					                                       f32_4 %229 = OpLoad %48 
					                                       f32_3 %230 = OpVectorShuffle %229 %229 0 2 3 
					                                       f32_3 %231 = OpExtInst %1 29 %230 
					                                       f32_4 %232 = OpLoad %48 
					                                       f32_4 %233 = OpVectorShuffle %232 %231 4 1 5 6 
					                                                      OpStore %48 %233 
					                                       f32_4 %234 = OpLoad %48 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 2 3 
					                                       f32_3 %238 = OpFMul %235 %237 
					                                       f32_3 %241 = OpFAdd %238 %240 
					                                       f32_4 %242 = OpLoad %48 
					                                       f32_4 %243 = OpVectorShuffle %242 %241 4 1 5 6 
					                                                      OpStore %48 %243 
					                                       f32_4 %244 = OpLoad %48 
					                                       f32_3 %245 = OpVectorShuffle %244 %244 0 2 3 
					                                       f32_3 %246 = OpExtInst %1 40 %245 %216 
					                                       f32_4 %247 = OpLoad %48 
					                                       f32_4 %248 = OpVectorShuffle %247 %246 4 1 5 6 
					                                                      OpStore %48 %248 
					                                       f32_4 %249 = OpLoad %48 
					                                       f32_3 %250 = OpVectorShuffle %249 %249 0 2 3 
					                                       f32_3 %251 = OpLoad %78 
					                                       f32_3 %252 = OpFMul %250 %251 
					                                                      OpStore %190 %252 
					                read_only TextureCubeSampled %257 = OpLoad %256 
					                                       f32_3 %259 = OpLoad %258 
					                                       f32_4 %260 = OpImageSampleImplicitLod %257 %259 
					                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
					                                       f32_4 %262 = OpLoad %125 
					                                       f32_4 %263 = OpVectorShuffle %262 %261 4 1 5 6 
					                                                      OpStore %125 %263 
					                                       f32_4 %265 = OpLoad %125 
					                                       f32_3 %266 = OpVectorShuffle %265 %265 0 2 3 
					                              Uniform f32_4* %268 = OpAccessChain %57 %267 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
					                                       f32_3 %271 = OpFMul %266 %270 
					                                                      OpStore %264 %271 
					                                       f32_3 %272 = OpLoad %264 
					                                       f32_2 %273 = OpLoad %29 
					                                       f32_3 %274 = OpVectorShuffle %273 %273 1 1 1 
					                                       f32_3 %275 = OpFMul %272 %274 
					                                       f32_3 %276 = OpLoad %190 
					                                       f32_3 %277 = OpFAdd %275 %276 
					                                                      OpStore %190 %277 
					                                       f32_3 %279 = OpLoad %190 
					                                       f32_3 %280 = OpFNegate %279 
					                                       f32_3 %281 = OpExtInst %1 29 %280 
					                                       f32_4 %282 = OpLoad %278 
					                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
					                                                      OpStore %278 %283 
					                                 Output f32* %284 = OpAccessChain %278 %117 
					                                                      OpStore %284 %38 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  highp vec3 tmpvar_8;
					  highp vec3 I_9;
					  I_9 = (tmpvar_5 - _WorldSpaceCameraPos);
					  tmpvar_8 = (I_9 - (2.0 * (
					    dot (tmpvar_7, I_9)
					   * tmpvar_7)));
					  tmpvar_1 = tmpvar_8;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - tmpvar_5);
					  tmpvar_2 = tmpvar_10;
					  tmpvar_3.zw = vec2(0.0, 0.0);
					  tmpvar_3.xy = vec2(0.0, 0.0);
					  mediump vec3 normal_11;
					  normal_11 = tmpvar_7;
					  mediump vec3 x1_12;
					  mediump vec4 tmpvar_13;
					  tmpvar_13 = (normal_11.xyzz * normal_11.yzzx);
					  x1_12.x = dot (unity_SHBr, tmpvar_13);
					  x1_12.y = dot (unity_SHBg, tmpvar_13);
					  x1_12.z = dot (unity_SHBb, tmpvar_13);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_7;
					  xlv_TEXCOORD3 = tmpvar_5;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD6 = (x1_12 + (unity_SHC.xyz * (
					    (normal_11.x * normal_11.x)
					   - 
					    (normal_11.y * normal_11.y)
					  )));
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying mediump vec3 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec3 tmpvar_1;
					  lowp vec3 viewDir_2;
					  highp vec3 tmpvar_3;
					  highp vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  tmpvar_5 = normalize(xlv_TEXCOORD4);
					  viewDir_2 = tmpvar_5;
					  tmpvar_3 = xlv_TEXCOORD1;
					  tmpvar_4 = viewDir_2;
					  tmpvar_1 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  mediump float fres_9;
					  mediump float rim_10;
					  mediump float tmpvar_11;
					  highp float tmpvar_12;
					  tmpvar_12 = clamp (dot (normalize(tmpvar_4), tmpvar_1), 0.0, 1.0);
					  tmpvar_11 = tmpvar_12;
					  rim_10 = (1.0 - tmpvar_11);
					  fres_9 = rim_10;
					  highp float tmpvar_13;
					  tmpvar_13 = pow (rim_10, _RimAmt);
					  rim_10 = tmpvar_13;
					  highp float tmpvar_14;
					  tmpvar_14 = pow (fres_9, _FresAmt);
					  fres_9 = tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = clamp ((1.0 - (rim_10 * _RimPwr)), 0.0, 1.0);
					  tmpvar_6 = (_Color.xyz * tmpvar_15);
					  highp vec3 tmpvar_16;
					  tmpvar_16 = ((rim_10 * _RimColor) * _RimPwr).xyz;
					  tmpvar_6 = (tmpvar_6 + tmpvar_16);
					  tmpvar_8 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_10)
					  ) * _FlakeAmt));
					  tmpvar_7 = ((textureCube (_Cube, tmpvar_3).xyz * _ReflectColor.xyz) * fres_9);
					  mediump vec3 normalWorld_17;
					  normalWorld_17 = tmpvar_1;
					  mediump vec4 tmpvar_18;
					  tmpvar_18.w = 1.0;
					  tmpvar_18.xyz = normalWorld_17;
					  mediump vec3 x_19;
					  x_19.x = dot (unity_SHAr, tmpvar_18);
					  x_19.y = dot (unity_SHAg, tmpvar_18);
					  x_19.z = dot (unity_SHAb, tmpvar_18);
					  mediump vec4 emission_20;
					  mediump vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_21 = tmpvar_6;
					  tmpvar_22 = ((_SpecColor.xyz * tmpvar_8) * 0.3183099);
					  tmpvar_23 = tmpvar_1;
					  mediump vec4 outGBuffer2_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = tmpvar_21;
					  tmpvar_25.w = 1.0;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = tmpvar_22;
					  tmpvar_26.w = _Shininess;
					  highp vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = ((tmpvar_23 * 0.5) + 0.5);
					  outGBuffer2_24 = tmpvar_27;
					  lowp vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = tmpvar_7;
					  emission_20 = tmpvar_28;
					  emission_20.xyz = (emission_20.xyz + (tmpvar_6 * max (
					    ((1.055 * pow (max (vec3(0.0, 0.0, 0.0), 
					      (xlv_TEXCOORD6 + x_19)
					    ), vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055)
					  , vec3(0.0, 0.0, 0.0))));
					  gl_FragData[0] = tmpvar_25;
					  gl_FragData[1] = tmpvar_26;
					  gl_FragData[2] = outGBuffer2_24;
					  gl_FragData[3] = emission_20;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  highp vec3 tmpvar_8;
					  highp vec3 I_9;
					  I_9 = (tmpvar_5 - _WorldSpaceCameraPos);
					  tmpvar_8 = (I_9 - (2.0 * (
					    dot (tmpvar_7, I_9)
					   * tmpvar_7)));
					  tmpvar_1 = tmpvar_8;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - tmpvar_5);
					  tmpvar_2 = tmpvar_10;
					  tmpvar_3.zw = vec2(0.0, 0.0);
					  tmpvar_3.xy = vec2(0.0, 0.0);
					  mediump vec3 normal_11;
					  normal_11 = tmpvar_7;
					  mediump vec3 x1_12;
					  mediump vec4 tmpvar_13;
					  tmpvar_13 = (normal_11.xyzz * normal_11.yzzx);
					  x1_12.x = dot (unity_SHBr, tmpvar_13);
					  x1_12.y = dot (unity_SHBg, tmpvar_13);
					  x1_12.z = dot (unity_SHBb, tmpvar_13);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_7;
					  xlv_TEXCOORD3 = tmpvar_5;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD6 = (x1_12 + (unity_SHC.xyz * (
					    (normal_11.x * normal_11.x)
					   - 
					    (normal_11.y * normal_11.y)
					  )));
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying mediump vec3 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec3 tmpvar_1;
					  lowp vec3 viewDir_2;
					  highp vec3 tmpvar_3;
					  highp vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  tmpvar_5 = normalize(xlv_TEXCOORD4);
					  viewDir_2 = tmpvar_5;
					  tmpvar_3 = xlv_TEXCOORD1;
					  tmpvar_4 = viewDir_2;
					  tmpvar_1 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  mediump float fres_9;
					  mediump float rim_10;
					  mediump float tmpvar_11;
					  highp float tmpvar_12;
					  tmpvar_12 = clamp (dot (normalize(tmpvar_4), tmpvar_1), 0.0, 1.0);
					  tmpvar_11 = tmpvar_12;
					  rim_10 = (1.0 - tmpvar_11);
					  fres_9 = rim_10;
					  highp float tmpvar_13;
					  tmpvar_13 = pow (rim_10, _RimAmt);
					  rim_10 = tmpvar_13;
					  highp float tmpvar_14;
					  tmpvar_14 = pow (fres_9, _FresAmt);
					  fres_9 = tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = clamp ((1.0 - (rim_10 * _RimPwr)), 0.0, 1.0);
					  tmpvar_6 = (_Color.xyz * tmpvar_15);
					  highp vec3 tmpvar_16;
					  tmpvar_16 = ((rim_10 * _RimColor) * _RimPwr).xyz;
					  tmpvar_6 = (tmpvar_6 + tmpvar_16);
					  tmpvar_8 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_10)
					  ) * _FlakeAmt));
					  tmpvar_7 = ((textureCube (_Cube, tmpvar_3).xyz * _ReflectColor.xyz) * fres_9);
					  mediump vec3 normalWorld_17;
					  normalWorld_17 = tmpvar_1;
					  mediump vec4 tmpvar_18;
					  tmpvar_18.w = 1.0;
					  tmpvar_18.xyz = normalWorld_17;
					  mediump vec3 x_19;
					  x_19.x = dot (unity_SHAr, tmpvar_18);
					  x_19.y = dot (unity_SHAg, tmpvar_18);
					  x_19.z = dot (unity_SHAb, tmpvar_18);
					  mediump vec4 emission_20;
					  mediump vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_21 = tmpvar_6;
					  tmpvar_22 = ((_SpecColor.xyz * tmpvar_8) * 0.3183099);
					  tmpvar_23 = tmpvar_1;
					  mediump vec4 outGBuffer2_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = tmpvar_21;
					  tmpvar_25.w = 1.0;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = tmpvar_22;
					  tmpvar_26.w = _Shininess;
					  highp vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = ((tmpvar_23 * 0.5) + 0.5);
					  outGBuffer2_24 = tmpvar_27;
					  lowp vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = tmpvar_7;
					  emission_20 = tmpvar_28;
					  emission_20.xyz = (emission_20.xyz + (tmpvar_6 * max (
					    ((1.055 * pow (max (vec3(0.0, 0.0, 0.0), 
					      (xlv_TEXCOORD6 + x_19)
					    ), vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055)
					  , vec3(0.0, 0.0, 0.0))));
					  gl_FragData[0] = tmpvar_25;
					  gl_FragData[1] = tmpvar_26;
					  gl_FragData[2] = outGBuffer2_24;
					  gl_FragData[3] = emission_20;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord0;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform mediump vec4 unity_SHBr;
					uniform mediump vec4 unity_SHBg;
					uniform mediump vec4 unity_SHBb;
					uniform mediump vec4 unity_SHC;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 _FlakeTex_ST;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying highp vec3 xlv_TEXCOORD3;
					varying mediump vec3 xlv_TEXCOORD4;
					varying highp vec4 xlv_TEXCOORD5;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  highp vec4 tmpvar_3;
					  highp vec4 tmpvar_4;
					  tmpvar_4.w = 1.0;
					  tmpvar_4.xyz = _glesVertex.xyz;
					  highp vec3 tmpvar_5;
					  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_6;
					  tmpvar_6[0] = unity_WorldToObject[0].xyz;
					  tmpvar_6[1] = unity_WorldToObject[1].xyz;
					  tmpvar_6[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_7;
					  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
					  highp vec3 tmpvar_8;
					  highp vec3 I_9;
					  I_9 = (tmpvar_5 - _WorldSpaceCameraPos);
					  tmpvar_8 = (I_9 - (2.0 * (
					    dot (tmpvar_7, I_9)
					   * tmpvar_7)));
					  tmpvar_1 = tmpvar_8;
					  highp vec3 tmpvar_10;
					  tmpvar_10 = (_WorldSpaceCameraPos - tmpvar_5);
					  tmpvar_2 = tmpvar_10;
					  tmpvar_3.zw = vec2(0.0, 0.0);
					  tmpvar_3.xy = vec2(0.0, 0.0);
					  mediump vec3 normal_11;
					  normal_11 = tmpvar_7;
					  mediump vec3 x1_12;
					  mediump vec4 tmpvar_13;
					  tmpvar_13 = (normal_11.xyzz * normal_11.yzzx);
					  x1_12.x = dot (unity_SHBr, tmpvar_13);
					  x1_12.y = dot (unity_SHBg, tmpvar_13);
					  x1_12.z = dot (unity_SHBb, tmpvar_13);
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
					  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _FlakeTex_ST.xy) + _FlakeTex_ST.zw);
					  xlv_TEXCOORD1 = tmpvar_1;
					  xlv_TEXCOORD2 = tmpvar_7;
					  xlv_TEXCOORD3 = tmpvar_5;
					  xlv_TEXCOORD4 = tmpvar_2;
					  xlv_TEXCOORD5 = tmpvar_3;
					  xlv_TEXCOORD6 = (x1_12 + (unity_SHC.xyz * (
					    (normal_11.x * normal_11.x)
					   - 
					    (normal_11.y * normal_11.y)
					  )));
					}
					
					
					#endif
					#ifdef FRAGMENT
					#extension GL_EXT_draw_buffers : enable
					uniform mediump vec4 unity_SHAr;
					uniform mediump vec4 unity_SHAg;
					uniform mediump vec4 unity_SHAb;
					uniform lowp vec4 _SpecColor;
					uniform sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform mediump float _Shininess;
					uniform highp float _FresAmt;
					uniform highp float _FlakeAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					varying highp vec2 xlv_TEXCOORD0;
					varying mediump vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					varying mediump vec3 xlv_TEXCOORD4;
					varying mediump vec3 xlv_TEXCOORD6;
					void main ()
					{
					  lowp vec3 tmpvar_1;
					  lowp vec3 viewDir_2;
					  highp vec3 tmpvar_3;
					  highp vec3 tmpvar_4;
					  mediump vec3 tmpvar_5;
					  tmpvar_5 = normalize(xlv_TEXCOORD4);
					  viewDir_2 = tmpvar_5;
					  tmpvar_3 = xlv_TEXCOORD1;
					  tmpvar_4 = viewDir_2;
					  tmpvar_1 = xlv_TEXCOORD2;
					  lowp vec3 tmpvar_6;
					  lowp vec3 tmpvar_7;
					  lowp float tmpvar_8;
					  mediump float fres_9;
					  mediump float rim_10;
					  mediump float tmpvar_11;
					  highp float tmpvar_12;
					  tmpvar_12 = clamp (dot (normalize(tmpvar_4), tmpvar_1), 0.0, 1.0);
					  tmpvar_11 = tmpvar_12;
					  rim_10 = (1.0 - tmpvar_11);
					  fres_9 = rim_10;
					  highp float tmpvar_13;
					  tmpvar_13 = pow (rim_10, _RimAmt);
					  rim_10 = tmpvar_13;
					  highp float tmpvar_14;
					  tmpvar_14 = pow (fres_9, _FresAmt);
					  fres_9 = tmpvar_14;
					  highp float tmpvar_15;
					  tmpvar_15 = clamp ((1.0 - (rim_10 * _RimPwr)), 0.0, 1.0);
					  tmpvar_6 = (_Color.xyz * tmpvar_15);
					  highp vec3 tmpvar_16;
					  tmpvar_16 = ((rim_10 * _RimColor) * _RimPwr).xyz;
					  tmpvar_6 = (tmpvar_6 + tmpvar_16);
					  tmpvar_8 = (_SpecColor.w + ((texture2D (_FlakeTex, xlv_TEXCOORD0).w * 
					    (1.0 - rim_10)
					  ) * _FlakeAmt));
					  tmpvar_7 = ((textureCube (_Cube, tmpvar_3).xyz * _ReflectColor.xyz) * fres_9);
					  mediump vec3 normalWorld_17;
					  normalWorld_17 = tmpvar_1;
					  mediump vec4 tmpvar_18;
					  tmpvar_18.w = 1.0;
					  tmpvar_18.xyz = normalWorld_17;
					  mediump vec3 x_19;
					  x_19.x = dot (unity_SHAr, tmpvar_18);
					  x_19.y = dot (unity_SHAg, tmpvar_18);
					  x_19.z = dot (unity_SHAb, tmpvar_18);
					  mediump vec4 emission_20;
					  mediump vec3 tmpvar_21;
					  mediump vec3 tmpvar_22;
					  highp vec3 tmpvar_23;
					  tmpvar_21 = tmpvar_6;
					  tmpvar_22 = ((_SpecColor.xyz * tmpvar_8) * 0.3183099);
					  tmpvar_23 = tmpvar_1;
					  mediump vec4 outGBuffer2_24;
					  mediump vec4 tmpvar_25;
					  tmpvar_25.xyz = tmpvar_21;
					  tmpvar_25.w = 1.0;
					  mediump vec4 tmpvar_26;
					  tmpvar_26.xyz = tmpvar_22;
					  tmpvar_26.w = _Shininess;
					  highp vec4 tmpvar_27;
					  tmpvar_27.w = 1.0;
					  tmpvar_27.xyz = ((tmpvar_23 * 0.5) + 0.5);
					  outGBuffer2_24 = tmpvar_27;
					  lowp vec4 tmpvar_28;
					  tmpvar_28.w = 1.0;
					  tmpvar_28.xyz = tmpvar_7;
					  emission_20 = tmpvar_28;
					  emission_20.xyz = (emission_20.xyz + (tmpvar_6 * max (
					    ((1.055 * pow (max (vec3(0.0, 0.0, 0.0), 
					      (xlv_TEXCOORD6 + x_19)
					    ), vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055)
					  , vec3(0.0, 0.0, 0.0))));
					  gl_FragData[0] = tmpvar_25;
					  gl_FragData[1] = tmpvar_26;
					  gl_FragData[2] = outGBuffer2_24;
					  gl_FragData[3] = emission_20;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat2.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_3 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD4;
					in mediump vec3 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec2 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat11;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat16_0.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_1.x = log2(u_xlat16_0.x);
					    u_xlat1.xy = u_xlat16_1.xx * vec2(_RimAmt, _FresAmt);
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat1.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_0.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat11 = (-u_xlat1.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
					#else
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = _Color.xyz * vec3(u_xlat11) + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat10_1.x = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.x;
					    u_xlat1.x = u_xlat16_0.x * _FlakeAmt + _SpecColor.w;
					    u_xlat16_0.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    u_xlat16_1.xzw = u_xlat16_0.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.xyz = u_xlat16_1.xzw;
					    SV_Target1.w = _Shininess;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD6.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xzw = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xzw = exp2(u_xlat16_1.xzw);
					    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xzw = max(u_xlat16_1.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = u_xlat16_1.xzw * u_xlat2.xyz;
					    u_xlat10_1.xzw = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xzw * _ReflectColor.xyz;
					    SV_Target3.xyz = u_xlat16_4.xyz * u_xlat1.yyy + u_xlat16_3.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat2.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_3 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD4;
					in mediump vec3 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec2 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat11;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat16_0.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_1.x = log2(u_xlat16_0.x);
					    u_xlat1.xy = u_xlat16_1.xx * vec2(_RimAmt, _FresAmt);
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat1.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_0.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat11 = (-u_xlat1.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
					#else
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = _Color.xyz * vec3(u_xlat11) + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat10_1.x = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.x;
					    u_xlat1.x = u_xlat16_0.x * _FlakeAmt + _SpecColor.w;
					    u_xlat16_0.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    u_xlat16_1.xzw = u_xlat16_0.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.xyz = u_xlat16_1.xzw;
					    SV_Target1.w = _Shininess;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD6.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xzw = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xzw = exp2(u_xlat16_1.xzw);
					    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xzw = max(u_xlat16_1.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = u_xlat16_1.xzw * u_xlat2.xyz;
					    u_xlat10_1.xzw = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xzw * _ReflectColor.xyz;
					    SV_Target3.xyz = u_xlat16_4.xyz * u_xlat1.yyy + u_xlat16_3.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FlakeTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out mediump vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					out mediump vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _FlakeTex_ST.xy + _FlakeTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot((-u_xlat1.xyz), u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat2.xyz = u_xlat0.xyz * (-vec3(u_xlat15)) + (-u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat16_3 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	mediump float _Shininess;
					uniform 	float _FresAmt;
					uniform 	float _FlakeAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform lowp sampler2D _FlakeTex;
					uniform lowp samplerCube _Cube;
					in highp vec2 vs_TEXCOORD0;
					in mediump vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec3 vs_TEXCOORD4;
					in mediump vec3 vs_TEXCOORD6;
					layout(location = 0) out mediump vec4 SV_Target0;
					layout(location = 1) out mediump vec4 SV_Target1;
					layout(location = 2) out mediump vec4 SV_Target2;
					layout(location = 3) out mediump vec4 SV_Target3;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec2 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat11;
					void main()
					{
					    u_xlat16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat16_0.xyz, vs_TEXCOORD2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_1.x = log2(u_xlat16_0.x);
					    u_xlat1.xy = u_xlat16_1.xx * vec2(_RimAmt, _FresAmt);
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat1.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_0.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat11 = (-u_xlat1.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
					#else
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = _Color.xyz * vec3(u_xlat11) + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    u_xlat16_0.x = (-u_xlat1.x) + 1.0;
					    u_xlat10_1.x = texture(_FlakeTex, vs_TEXCOORD0.xy).w;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat10_1.x;
					    u_xlat1.x = u_xlat16_0.x * _FlakeAmt + _SpecColor.w;
					    u_xlat16_0.xyz = u_xlat1.xxx * _SpecColor.xyz;
					    u_xlat16_1.xzw = u_xlat16_0.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target1.xyz = u_xlat16_1.xzw;
					    SV_Target1.w = _Shininess;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 1.0;
					    SV_Target2 = u_xlat0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD6.xyz;
					    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xzw = log2(u_xlat16_3.xyz);
					    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xzw = exp2(u_xlat16_1.xzw);
					    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xzw = max(u_xlat16_1.xzw, vec3(0.0, 0.0, 0.0));
					    u_xlat16_3.xyz = u_xlat16_1.xzw * u_xlat2.xyz;
					    u_xlat10_1.xzw = texture(_Cube, vs_TEXCOORD1.xyz).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xzw * _ReflectColor.xyz;
					    SV_Target3.xyz = u_xlat16_4.xyz * u_xlat1.yyy + u_xlat16_3.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 251
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %123 %127 %186 %189 %192 %195 %235 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate %100 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %127 Location 127 
					                                                      OpDecorate %186 RelaxedPrecision 
					                                                      OpDecorate %186 Location 186 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %192 Location 192 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %235 Location 235 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %243 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 5 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                               Output f32_2* %100 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                                             %116 = OpTypePointer Uniform %14 
					                                             %122 = OpTypePointer Output %14 
					                               Output f32_3* %123 = OpVariable Output 
					                                             %126 = OpTypePointer Input %14 
					                                Input f32_3* %127 = OpVariable Input 
					                                         i32 %129 = OpConstant 6 
					                                         u32 %134 = OpConstant 0 
					                                             %135 = OpTypePointer Private %6 
					                                         u32 %148 = OpConstant 2 
					                                Private f32* %150 = OpVariable Private 
					                               Output f32_3* %186 = OpVariable Output 
					                               Output f32_3* %189 = OpVariable Output 
					                               Output f32_3* %192 = OpVariable Output 
					                               Output f32_4* %195 = OpVariable Output 
					                                         f32 %196 = OpConstant 3.674022E-40 
					                                       f32_4 %197 = OpConstantComposite %196 %196 %196 %196 
					                                Private f32* %198 = OpVariable Private 
					                              Private f32_4* %212 = OpVariable Private 
					                                             %218 = OpTypePointer Private %14 
					                              Private f32_3* %219 = OpVariable Private 
					                               Output f32_3* %235 = OpVariable Output 
					                                         i32 %236 = OpConstant 4 
					                                             %245 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %22 %66 %48 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %46 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %30 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %22 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %22 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore %100 %112 
					                                       f32_4 %113 = OpLoad %9 
					                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
					                                       f32_3 %115 = OpFNegate %114 
					                              Uniform f32_3* %117 = OpAccessChain %22 %30 
					                                       f32_3 %118 = OpLoad %117 
					                                       f32_3 %119 = OpFAdd %115 %118 
					                                       f32_4 %120 = OpLoad %46 
					                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
					                                                      OpStore %46 %121 
					                                       f32_4 %124 = OpLoad %9 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                                      OpStore %123 %125 
					                                       f32_3 %128 = OpLoad %127 
					                              Uniform f32_4* %130 = OpAccessChain %22 %129 %30 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                         f32 %133 = OpDot %128 %132 
					                                Private f32* %136 = OpAccessChain %9 %134 
					                                                      OpStore %136 %133 
					                                       f32_3 %137 = OpLoad %127 
					                              Uniform f32_4* %138 = OpAccessChain %22 %129 %25 
					                                       f32_4 %139 = OpLoad %138 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                         f32 %141 = OpDot %137 %140 
					                                Private f32* %142 = OpAccessChain %9 %84 
					                                                      OpStore %142 %141 
					                                       f32_3 %143 = OpLoad %127 
					                              Uniform f32_4* %144 = OpAccessChain %22 %129 %38 
					                                       f32_4 %145 = OpLoad %144 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
					                                         f32 %147 = OpDot %143 %146 
					                                Private f32* %149 = OpAccessChain %9 %148 
					                                                      OpStore %149 %147 
					                                       f32_4 %151 = OpLoad %9 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
					                                       f32_4 %153 = OpLoad %9 
					                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
					                                         f32 %155 = OpDot %152 %154 
					                                                      OpStore %150 %155 
					                                         f32 %156 = OpLoad %150 
					                                         f32 %157 = OpExtInst %1 32 %156 
					                                                      OpStore %150 %157 
					                                         f32 %158 = OpLoad %150 
					                                       f32_3 %159 = OpCompositeConstruct %158 %158 %158 
					                                       f32_4 %160 = OpLoad %9 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
					                                       f32_3 %162 = OpFMul %159 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
					                                                      OpStore %9 %164 
					                                       f32_4 %165 = OpLoad %46 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                       f32_3 %167 = OpFNegate %166 
					                                       f32_4 %168 = OpLoad %9 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                         f32 %170 = OpDot %167 %169 
					                                                      OpStore %150 %170 
					                                         f32 %171 = OpLoad %150 
					                                         f32 %172 = OpLoad %150 
					                                         f32 %173 = OpFAdd %171 %172 
					                                                      OpStore %150 %173 
					                                       f32_4 %174 = OpLoad %9 
					                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
					                                         f32 %176 = OpLoad %150 
					                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
					                                       f32_3 %178 = OpFNegate %177 
					                                       f32_3 %179 = OpFMul %175 %178 
					                                       f32_4 %180 = OpLoad %46 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFAdd %179 %182 
					                                       f32_4 %184 = OpLoad %63 
					                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
					                                                      OpStore %63 %185 
					                                       f32_4 %187 = OpLoad %46 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                                      OpStore %186 %188 
					                                       f32_4 %190 = OpLoad %63 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                                      OpStore %189 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                                      OpStore %192 %194 
					                                                      OpStore %195 %197 
					                                Private f32* %199 = OpAccessChain %9 %84 
					                                         f32 %200 = OpLoad %199 
					                                Private f32* %201 = OpAccessChain %9 %84 
					                                         f32 %202 = OpLoad %201 
					                                         f32 %203 = OpFMul %200 %202 
					                                                      OpStore %198 %203 
					                                Private f32* %204 = OpAccessChain %9 %134 
					                                         f32 %205 = OpLoad %204 
					                                Private f32* %206 = OpAccessChain %9 %134 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFMul %205 %207 
					                                         f32 %209 = OpLoad %198 
					                                         f32 %210 = OpFNegate %209 
					                                         f32 %211 = OpFAdd %208 %210 
					                                                      OpStore %198 %211 
					                                       f32_4 %213 = OpLoad %9 
					                                       f32_4 %214 = OpVectorShuffle %213 %213 1 2 2 0 
					                                       f32_4 %215 = OpLoad %9 
					                                       f32_4 %216 = OpVectorShuffle %215 %215 0 1 2 2 
					                                       f32_4 %217 = OpFMul %214 %216 
					                                                      OpStore %212 %217 
					                              Uniform f32_4* %220 = OpAccessChain %22 %25 
					                                       f32_4 %221 = OpLoad %220 
					                                       f32_4 %222 = OpLoad %212 
					                                         f32 %223 = OpDot %221 %222 
					                                Private f32* %224 = OpAccessChain %219 %134 
					                                                      OpStore %224 %223 
					                              Uniform f32_4* %225 = OpAccessChain %22 %38 
					                                       f32_4 %226 = OpLoad %225 
					                                       f32_4 %227 = OpLoad %212 
					                                         f32 %228 = OpDot %226 %227 
					                                Private f32* %229 = OpAccessChain %219 %84 
					                                                      OpStore %229 %228 
					                              Uniform f32_4* %230 = OpAccessChain %22 %48 
					                                       f32_4 %231 = OpLoad %230 
					                                       f32_4 %232 = OpLoad %212 
					                                         f32 %233 = OpDot %231 %232 
					                                Private f32* %234 = OpAccessChain %219 %148 
					                                                      OpStore %234 %233 
					                              Uniform f32_4* %237 = OpAccessChain %22 %236 
					                                       f32_4 %238 = OpLoad %237 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                         f32 %240 = OpLoad %198 
					                                       f32_3 %241 = OpCompositeConstruct %240 %240 %240 
					                                       f32_3 %242 = OpFMul %239 %241 
					                                       f32_3 %243 = OpLoad %219 
					                                       f32_3 %244 = OpFAdd %242 %243 
					                                                      OpStore %235 %244 
					                                 Output f32* %246 = OpAccessChain %88 %30 %84 
					                                         f32 %247 = OpLoad %246 
					                                         f32 %248 = OpFNegate %247 
					                                 Output f32* %249 = OpAccessChain %88 %30 %84 
					                                                      OpStore %249 %248 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 283
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %31 %113 %132 %166 %184 %212 %258 %272 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %9 RelaxedPrecision 
					                                                      OpDecorate %11 RelaxedPrecision 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %12 RelaxedPrecision 
					                                                      OpDecorate %13 RelaxedPrecision 
					                                                      OpDecorate %14 RelaxedPrecision 
					                                                      OpDecorate %20 RelaxedPrecision 
					                                                      OpDecorate %21 RelaxedPrecision 
					                                                      OpDecorate %23 RelaxedPrecision 
					                                                      OpDecorate %24 RelaxedPrecision 
					                                                      OpDecorate %25 RelaxedPrecision 
					                                                      OpDecorate %26 RelaxedPrecision 
					                                                      OpDecorate %30 RelaxedPrecision 
					                                                      OpDecorate %31 Location 31 
					                                                      OpDecorate %48 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %54 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 Offset 55 
					                                                      OpMemberDecorate %55 1 RelaxedPrecision 
					                                                      OpMemberDecorate %55 1 Offset 55 
					                                                      OpMemberDecorate %55 2 RelaxedPrecision 
					                                                      OpMemberDecorate %55 2 Offset 55 
					                                                      OpMemberDecorate %55 3 RelaxedPrecision 
					                                                      OpMemberDecorate %55 3 Offset 55 
					                                                      OpMemberDecorate %55 4 RelaxedPrecision 
					                                                      OpMemberDecorate %55 4 Offset 55 
					                                                      OpMemberDecorate %55 5 RelaxedPrecision 
					                                                      OpMemberDecorate %55 5 Offset 55 
					                                                      OpMemberDecorate %55 6 RelaxedPrecision 
					                                                      OpMemberDecorate %55 6 Offset 55 
					                                                      OpMemberDecorate %55 7 Offset 55 
					                                                      OpMemberDecorate %55 8 Offset 55 
					                                                      OpMemberDecorate %55 9 Offset 55 
					                                                      OpMemberDecorate %55 10 Offset 55 
					                                                      OpMemberDecorate %55 11 RelaxedPrecision 
					                                                      OpMemberDecorate %55 11 Offset 55 
					                                                      OpDecorate %55 Block 
					                                                      OpDecorate %57 DescriptorSet 57 
					                                                      OpDecorate %57 Binding 57 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %75 RelaxedPrecision 
					                                                      OpDecorate %76 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %89 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %91 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %125 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %129 DescriptorSet 129 
					                                                      OpDecorate %129 Binding 129 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %132 Location 132 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %140 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %151 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %163 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %166 Location 166 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %173 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 Location 184 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %211 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %212 Location 212 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %246 RelaxedPrecision 
					                                                      OpDecorate %249 RelaxedPrecision 
					                                                      OpDecorate %250 RelaxedPrecision 
					                                                      OpDecorate %256 RelaxedPrecision 
					                                                      OpDecorate %256 DescriptorSet 256 
					                                                      OpDecorate %256 Binding 256 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %258 Location 258 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %272 Location 272 
					                                                      OpDecorate %273 RelaxedPrecision 
					                                                      OpDecorate %277 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 0 
					                                              %17 = OpTypePointer Private %6 
					                                              %27 = OpTypeVector %6 2 
					                                              %28 = OpTypePointer Private %27 
					                               Private f32_2* %29 = OpVariable Private 
					                                 Input f32_3* %31 = OpVariable Input 
					                                          f32 %37 = OpConstant 3.674022E-40 
					                                          f32 %38 = OpConstant 3.674022E-40 
					                                              %46 = OpTypeVector %6 4 
					                                              %47 = OpTypePointer Private %46 
					                               Private f32_4* %48 = OpVariable Private 
					                                              %55 = OpTypeStruct %46 %46 %46 %46 %46 %46 %6 %6 %6 %6 %6 %46 
					                                              %56 = OpTypePointer Uniform %55 
					Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %57 = OpVariable Uniform 
					                                              %58 = OpTypeInt 32 1 
					                                          i32 %59 = OpConstant 9 
					                                              %60 = OpTypePointer Uniform %6 
					                                          i32 %63 = OpConstant 7 
					                                          i32 %72 = OpConstant 11 
					                                              %73 = OpTypePointer Uniform %46 
					                               Private f32_3* %78 = OpVariable Private 
					                                          i32 %80 = OpConstant 10 
					                                 Private f32* %93 = OpVariable Private 
					                                         i32 %103 = OpConstant 4 
					                                             %112 = OpTypePointer Output %46 
					                               Output f32_4* %113 = OpVariable Output 
					                                         u32 %117 = OpConstant 3 
					                                             %118 = OpTypePointer Output %6 
					                              Private f32_4* %125 = OpVariable Private 
					                                             %126 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %127 = OpTypeSampledImage %126 
					                                             %128 = OpTypePointer UniformConstant %127 
					 UniformConstant read_only Texture2DSampled* %129 = OpVariable UniformConstant 
					                                             %131 = OpTypePointer Input %27 
					                                Input f32_2* %132 = OpVariable Input 
					                                         i32 %145 = OpConstant 8 
					                                         i32 %149 = OpConstant 3 
					                                         f32 %161 = OpConstant 3.674022E-40 
					                                       f32_3 %162 = OpConstantComposite %161 %161 %161 
					                               Output f32_4* %166 = OpVariable Output 
					                                         i32 %171 = OpConstant 6 
					                              Private f32_4* %175 = OpVariable Private 
					                                         f32 %177 = OpConstant 3.674022E-40 
					                                       f32_3 %178 = OpConstantComposite %177 %177 %177 
					                               Output f32_4* %184 = OpVariable Output 
					                              Private f32_3* %190 = OpVariable Private 
					                                         i32 %191 = OpConstant 0 
					                                         i32 %197 = OpConstant 1 
					                                         u32 %202 = OpConstant 1 
					                                         i32 %204 = OpConstant 2 
					                                         u32 %209 = OpConstant 2 
					                                Input f32_3* %212 = OpVariable Input 
					                                       f32_3 %216 = OpConstantComposite %37 %37 %37 
					                                         f32 %224 = OpConstant 3.674022E-40 
					                                       f32_3 %225 = OpConstantComposite %224 %224 %224 
					                                         f32 %236 = OpConstant 3.674022E-40 
					                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
					                                         f32 %239 = OpConstant 3.674022E-40 
					                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
					                                             %253 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %254 = OpTypeSampledImage %253 
					                                             %255 = OpTypePointer UniformConstant %254 
					UniformConstant read_only TextureCubeSampled* %256 = OpVariable UniformConstant 
					                                Input f32_3* %258 = OpVariable Input 
					                              Private f32_3* %264 = OpVariable Private 
					                                         i32 %267 = OpConstant 5 
					                               Output f32_4* %272 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpLoad %11 
					                                          f32 %14 = OpDot %12 %13 
					                                 Private f32* %18 = OpAccessChain %9 %16 
					                                                      OpStore %18 %14 
					                                 Private f32* %19 = OpAccessChain %9 %16 
					                                          f32 %20 = OpLoad %19 
					                                          f32 %21 = OpExtInst %1 32 %20 
					                                 Private f32* %22 = OpAccessChain %9 %16 
					                                                      OpStore %22 %21 
					                                        f32_3 %23 = OpLoad %9 
					                                        f32_3 %24 = OpVectorShuffle %23 %23 0 0 0 
					                                        f32_3 %25 = OpLoad %11 
					                                        f32_3 %26 = OpFMul %24 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %30 = OpLoad %9 
					                                        f32_3 %32 = OpLoad %31 
					                                          f32 %33 = OpDot %30 %32 
					                                 Private f32* %34 = OpAccessChain %29 %16 
					                                                      OpStore %34 %33 
					                                 Private f32* %35 = OpAccessChain %29 %16 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %39 = OpExtInst %1 43 %36 %37 %38 
					                                 Private f32* %40 = OpAccessChain %29 %16 
					                                                      OpStore %40 %39 
					                                 Private f32* %41 = OpAccessChain %29 %16 
					                                          f32 %42 = OpLoad %41 
					                                          f32 %43 = OpFNegate %42 
					                                          f32 %44 = OpFAdd %43 %38 
					                                 Private f32* %45 = OpAccessChain %9 %16 
					                                                      OpStore %45 %44 
					                                 Private f32* %49 = OpAccessChain %9 %16 
					                                          f32 %50 = OpLoad %49 
					                                          f32 %51 = OpExtInst %1 30 %50 
					                                 Private f32* %52 = OpAccessChain %48 %16 
					                                                      OpStore %52 %51 
					                                        f32_4 %53 = OpLoad %48 
					                                        f32_2 %54 = OpVectorShuffle %53 %53 0 0 
					                                 Uniform f32* %61 = OpAccessChain %57 %59 
					                                          f32 %62 = OpLoad %61 
					                                 Uniform f32* %64 = OpAccessChain %57 %63 
					                                          f32 %65 = OpLoad %64 
					                                        f32_2 %66 = OpCompositeConstruct %62 %65 
					                                        f32_2 %67 = OpFMul %54 %66 
					                                                      OpStore %29 %67 
					                                        f32_2 %68 = OpLoad %29 
					                                        f32_2 %69 = OpExtInst %1 29 %68 
					                                                      OpStore %29 %69 
					                                        f32_2 %70 = OpLoad %29 
					                                        f32_3 %71 = OpVectorShuffle %70 %70 0 0 0 
					                               Uniform f32_4* %74 = OpAccessChain %57 %72 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
					                                        f32_3 %77 = OpFMul %71 %76 
					                                                      OpStore %9 %77 
					                                        f32_3 %79 = OpLoad %9 
					                                 Uniform f32* %81 = OpAccessChain %57 %80 
					                                          f32 %82 = OpLoad %81 
					                                 Uniform f32* %83 = OpAccessChain %57 %80 
					                                          f32 %84 = OpLoad %83 
					                                 Uniform f32* %85 = OpAccessChain %57 %80 
					                                          f32 %86 = OpLoad %85 
					                                        f32_3 %87 = OpCompositeConstruct %82 %84 %86 
					                                          f32 %88 = OpCompositeExtract %87 0 
					                                          f32 %89 = OpCompositeExtract %87 1 
					                                          f32 %90 = OpCompositeExtract %87 2 
					                                        f32_3 %91 = OpCompositeConstruct %88 %89 %90 
					                                        f32_3 %92 = OpFMul %79 %91 
					                                                      OpStore %78 %92 
					                                 Private f32* %94 = OpAccessChain %29 %16 
					                                          f32 %95 = OpLoad %94 
					                                          f32 %96 = OpFNegate %95 
					                                 Uniform f32* %97 = OpAccessChain %57 %80 
					                                          f32 %98 = OpLoad %97 
					                                          f32 %99 = OpFMul %96 %98 
					                                         f32 %100 = OpFAdd %99 %38 
					                                                      OpStore %93 %100 
					                                         f32 %101 = OpLoad %93 
					                                         f32 %102 = OpExtInst %1 43 %101 %37 %38 
					                                                      OpStore %93 %102 
					                              Uniform f32_4* %104 = OpAccessChain %57 %103 
					                                       f32_4 %105 = OpLoad %104 
					                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
					                                         f32 %107 = OpLoad %93 
					                                       f32_3 %108 = OpCompositeConstruct %107 %107 %107 
					                                       f32_3 %109 = OpFMul %106 %108 
					                                       f32_3 %110 = OpLoad %78 
					                                       f32_3 %111 = OpFAdd %109 %110 
					                                                      OpStore %78 %111 
					                                       f32_3 %114 = OpLoad %78 
					                                       f32_4 %115 = OpLoad %113 
					                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                      OpStore %113 %116 
					                                 Output f32* %119 = OpAccessChain %113 %117 
					                                                      OpStore %119 %38 
					                                Private f32* %120 = OpAccessChain %29 %16 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %122 = OpFNegate %121 
					                                         f32 %123 = OpFAdd %122 %38 
					                                Private f32* %124 = OpAccessChain %9 %16 
					                                                      OpStore %124 %123 
					                  read_only Texture2DSampled %130 = OpLoad %129 
					                                       f32_2 %133 = OpLoad %132 
					                                       f32_4 %134 = OpImageSampleImplicitLod %130 %133 
					                                         f32 %135 = OpCompositeExtract %134 3 
					                                Private f32* %136 = OpAccessChain %125 %16 
					                                                      OpStore %136 %135 
					                                Private f32* %137 = OpAccessChain %9 %16 
					                                         f32 %138 = OpLoad %137 
					                                Private f32* %139 = OpAccessChain %125 %16 
					                                         f32 %140 = OpLoad %139 
					                                         f32 %141 = OpFMul %138 %140 
					                                Private f32* %142 = OpAccessChain %9 %16 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %9 %16 
					                                         f32 %144 = OpLoad %143 
					                                Uniform f32* %146 = OpAccessChain %57 %145 
					                                         f32 %147 = OpLoad %146 
					                                         f32 %148 = OpFMul %144 %147 
					                                Uniform f32* %150 = OpAccessChain %57 %149 %117 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFAdd %148 %151 
					                                Private f32* %153 = OpAccessChain %29 %16 
					                                                      OpStore %153 %152 
					                                       f32_2 %154 = OpLoad %29 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 0 0 
					                              Uniform f32_4* %156 = OpAccessChain %57 %149 
					                                       f32_4 %157 = OpLoad %156 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
					                                       f32_3 %159 = OpFMul %155 %158 
					                                                      OpStore %9 %159 
					                                       f32_3 %160 = OpLoad %9 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %48 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 1 5 6 
					                                                      OpStore %48 %165 
					                                       f32_4 %167 = OpLoad %48 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 2 3 
					                                       f32_4 %169 = OpLoad %166 
					                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
					                                                      OpStore %166 %170 
					                                Uniform f32* %172 = OpAccessChain %57 %171 
					                                         f32 %173 = OpLoad %172 
					                                 Output f32* %174 = OpAccessChain %166 %117 
					                                                      OpStore %174 %173 
					                                       f32_3 %176 = OpLoad %31 
					                                       f32_3 %179 = OpFMul %176 %178 
					                                       f32_3 %180 = OpFAdd %179 %178 
					                                       f32_4 %181 = OpLoad %175 
					                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
					                                                      OpStore %175 %182 
					                                Private f32* %183 = OpAccessChain %175 %117 
					                                                      OpStore %183 %38 
					                                       f32_4 %185 = OpLoad %175 
					                                                      OpStore %184 %185 
					                                       f32_3 %186 = OpLoad %31 
					                                       f32_4 %187 = OpLoad %175 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %175 %188 
					                                Private f32* %189 = OpAccessChain %175 %117 
					                                                      OpStore %189 %38 
					                              Uniform f32_4* %192 = OpAccessChain %57 %191 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_4 %194 = OpLoad %175 
					                                         f32 %195 = OpDot %193 %194 
					                                Private f32* %196 = OpAccessChain %190 %16 
					                                                      OpStore %196 %195 
					                              Uniform f32_4* %198 = OpAccessChain %57 %197 
					                                       f32_4 %199 = OpLoad %198 
					                                       f32_4 %200 = OpLoad %175 
					                                         f32 %201 = OpDot %199 %200 
					                                Private f32* %203 = OpAccessChain %190 %202 
					                                                      OpStore %203 %201 
					                              Uniform f32_4* %205 = OpAccessChain %57 %204 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_4 %207 = OpLoad %175 
					                                         f32 %208 = OpDot %206 %207 
					                                Private f32* %210 = OpAccessChain %190 %209 
					                                                      OpStore %210 %208 
					                                       f32_3 %211 = OpLoad %190 
					                                       f32_3 %213 = OpLoad %212 
					                                       f32_3 %214 = OpFAdd %211 %213 
					                                                      OpStore %190 %214 
					                                       f32_3 %215 = OpLoad %190 
					                                       f32_3 %217 = OpExtInst %1 40 %215 %216 
					                                                      OpStore %190 %217 
					                                       f32_3 %218 = OpLoad %190 
					                                       f32_3 %219 = OpExtInst %1 30 %218 
					                                       f32_4 %220 = OpLoad %48 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 1 5 6 
					                                                      OpStore %48 %221 
					                                       f32_4 %222 = OpLoad %48 
					                                       f32_3 %223 = OpVectorShuffle %222 %222 0 2 3 
					                                       f32_3 %226 = OpFMul %223 %225 
					                                       f32_4 %227 = OpLoad %48 
					                                       f32_4 %228 = OpVectorShuffle %227 %226 4 1 5 6 
					                                                      OpStore %48 %228 
					                                       f32_4 %229 = OpLoad %48 
					                                       f32_3 %230 = OpVectorShuffle %229 %229 0 2 3 
					                                       f32_3 %231 = OpExtInst %1 29 %230 
					                                       f32_4 %232 = OpLoad %48 
					                                       f32_4 %233 = OpVectorShuffle %232 %231 4 1 5 6 
					                                                      OpStore %48 %233 
					                                       f32_4 %234 = OpLoad %48 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 2 3 
					                                       f32_3 %238 = OpFMul %235 %237 
					                                       f32_3 %241 = OpFAdd %238 %240 
					                                       f32_4 %242 = OpLoad %48 
					                                       f32_4 %243 = OpVectorShuffle %242 %241 4 1 5 6 
					                                                      OpStore %48 %243 
					                                       f32_4 %244 = OpLoad %48 
					                                       f32_3 %245 = OpVectorShuffle %244 %244 0 2 3 
					                                       f32_3 %246 = OpExtInst %1 40 %245 %216 
					                                       f32_4 %247 = OpLoad %48 
					                                       f32_4 %248 = OpVectorShuffle %247 %246 4 1 5 6 
					                                                      OpStore %48 %248 
					                                       f32_4 %249 = OpLoad %48 
					                                       f32_3 %250 = OpVectorShuffle %249 %249 0 2 3 
					                                       f32_3 %251 = OpLoad %78 
					                                       f32_3 %252 = OpFMul %250 %251 
					                                                      OpStore %190 %252 
					                read_only TextureCubeSampled %257 = OpLoad %256 
					                                       f32_3 %259 = OpLoad %258 
					                                       f32_4 %260 = OpImageSampleImplicitLod %257 %259 
					                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
					                                       f32_4 %262 = OpLoad %125 
					                                       f32_4 %263 = OpVectorShuffle %262 %261 4 1 5 6 
					                                                      OpStore %125 %263 
					                                       f32_4 %265 = OpLoad %125 
					                                       f32_3 %266 = OpVectorShuffle %265 %265 0 2 3 
					                              Uniform f32_4* %268 = OpAccessChain %57 %267 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
					                                       f32_3 %271 = OpFMul %266 %270 
					                                                      OpStore %264 %271 
					                                       f32_3 %273 = OpLoad %264 
					                                       f32_2 %274 = OpLoad %29 
					                                       f32_3 %275 = OpVectorShuffle %274 %274 1 1 1 
					                                       f32_3 %276 = OpFMul %273 %275 
					                                       f32_3 %277 = OpLoad %190 
					                                       f32_3 %278 = OpFAdd %276 %277 
					                                       f32_4 %279 = OpLoad %272 
					                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
					                                                      OpStore %272 %280 
					                                 Output f32* %281 = OpAccessChain %272 %117 
					                                                      OpStore %281 %38 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 251
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %123 %127 %186 %189 %192 %195 %235 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate %100 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %127 Location 127 
					                                                      OpDecorate %186 RelaxedPrecision 
					                                                      OpDecorate %186 Location 186 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %192 Location 192 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %235 Location 235 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %243 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 5 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                               Output f32_2* %100 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                                             %116 = OpTypePointer Uniform %14 
					                                             %122 = OpTypePointer Output %14 
					                               Output f32_3* %123 = OpVariable Output 
					                                             %126 = OpTypePointer Input %14 
					                                Input f32_3* %127 = OpVariable Input 
					                                         i32 %129 = OpConstant 6 
					                                         u32 %134 = OpConstant 0 
					                                             %135 = OpTypePointer Private %6 
					                                         u32 %148 = OpConstant 2 
					                                Private f32* %150 = OpVariable Private 
					                               Output f32_3* %186 = OpVariable Output 
					                               Output f32_3* %189 = OpVariable Output 
					                               Output f32_3* %192 = OpVariable Output 
					                               Output f32_4* %195 = OpVariable Output 
					                                         f32 %196 = OpConstant 3.674022E-40 
					                                       f32_4 %197 = OpConstantComposite %196 %196 %196 %196 
					                                Private f32* %198 = OpVariable Private 
					                              Private f32_4* %212 = OpVariable Private 
					                                             %218 = OpTypePointer Private %14 
					                              Private f32_3* %219 = OpVariable Private 
					                               Output f32_3* %235 = OpVariable Output 
					                                         i32 %236 = OpConstant 4 
					                                             %245 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %22 %66 %48 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %46 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %30 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %22 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %22 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore %100 %112 
					                                       f32_4 %113 = OpLoad %9 
					                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
					                                       f32_3 %115 = OpFNegate %114 
					                              Uniform f32_3* %117 = OpAccessChain %22 %30 
					                                       f32_3 %118 = OpLoad %117 
					                                       f32_3 %119 = OpFAdd %115 %118 
					                                       f32_4 %120 = OpLoad %46 
					                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
					                                                      OpStore %46 %121 
					                                       f32_4 %124 = OpLoad %9 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                                      OpStore %123 %125 
					                                       f32_3 %128 = OpLoad %127 
					                              Uniform f32_4* %130 = OpAccessChain %22 %129 %30 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                         f32 %133 = OpDot %128 %132 
					                                Private f32* %136 = OpAccessChain %9 %134 
					                                                      OpStore %136 %133 
					                                       f32_3 %137 = OpLoad %127 
					                              Uniform f32_4* %138 = OpAccessChain %22 %129 %25 
					                                       f32_4 %139 = OpLoad %138 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                         f32 %141 = OpDot %137 %140 
					                                Private f32* %142 = OpAccessChain %9 %84 
					                                                      OpStore %142 %141 
					                                       f32_3 %143 = OpLoad %127 
					                              Uniform f32_4* %144 = OpAccessChain %22 %129 %38 
					                                       f32_4 %145 = OpLoad %144 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
					                                         f32 %147 = OpDot %143 %146 
					                                Private f32* %149 = OpAccessChain %9 %148 
					                                                      OpStore %149 %147 
					                                       f32_4 %151 = OpLoad %9 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
					                                       f32_4 %153 = OpLoad %9 
					                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
					                                         f32 %155 = OpDot %152 %154 
					                                                      OpStore %150 %155 
					                                         f32 %156 = OpLoad %150 
					                                         f32 %157 = OpExtInst %1 32 %156 
					                                                      OpStore %150 %157 
					                                         f32 %158 = OpLoad %150 
					                                       f32_3 %159 = OpCompositeConstruct %158 %158 %158 
					                                       f32_4 %160 = OpLoad %9 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
					                                       f32_3 %162 = OpFMul %159 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
					                                                      OpStore %9 %164 
					                                       f32_4 %165 = OpLoad %46 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                       f32_3 %167 = OpFNegate %166 
					                                       f32_4 %168 = OpLoad %9 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                         f32 %170 = OpDot %167 %169 
					                                                      OpStore %150 %170 
					                                         f32 %171 = OpLoad %150 
					                                         f32 %172 = OpLoad %150 
					                                         f32 %173 = OpFAdd %171 %172 
					                                                      OpStore %150 %173 
					                                       f32_4 %174 = OpLoad %9 
					                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
					                                         f32 %176 = OpLoad %150 
					                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
					                                       f32_3 %178 = OpFNegate %177 
					                                       f32_3 %179 = OpFMul %175 %178 
					                                       f32_4 %180 = OpLoad %46 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFAdd %179 %182 
					                                       f32_4 %184 = OpLoad %63 
					                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
					                                                      OpStore %63 %185 
					                                       f32_4 %187 = OpLoad %46 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                                      OpStore %186 %188 
					                                       f32_4 %190 = OpLoad %63 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                                      OpStore %189 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                                      OpStore %192 %194 
					                                                      OpStore %195 %197 
					                                Private f32* %199 = OpAccessChain %9 %84 
					                                         f32 %200 = OpLoad %199 
					                                Private f32* %201 = OpAccessChain %9 %84 
					                                         f32 %202 = OpLoad %201 
					                                         f32 %203 = OpFMul %200 %202 
					                                                      OpStore %198 %203 
					                                Private f32* %204 = OpAccessChain %9 %134 
					                                         f32 %205 = OpLoad %204 
					                                Private f32* %206 = OpAccessChain %9 %134 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFMul %205 %207 
					                                         f32 %209 = OpLoad %198 
					                                         f32 %210 = OpFNegate %209 
					                                         f32 %211 = OpFAdd %208 %210 
					                                                      OpStore %198 %211 
					                                       f32_4 %213 = OpLoad %9 
					                                       f32_4 %214 = OpVectorShuffle %213 %213 1 2 2 0 
					                                       f32_4 %215 = OpLoad %9 
					                                       f32_4 %216 = OpVectorShuffle %215 %215 0 1 2 2 
					                                       f32_4 %217 = OpFMul %214 %216 
					                                                      OpStore %212 %217 
					                              Uniform f32_4* %220 = OpAccessChain %22 %25 
					                                       f32_4 %221 = OpLoad %220 
					                                       f32_4 %222 = OpLoad %212 
					                                         f32 %223 = OpDot %221 %222 
					                                Private f32* %224 = OpAccessChain %219 %134 
					                                                      OpStore %224 %223 
					                              Uniform f32_4* %225 = OpAccessChain %22 %38 
					                                       f32_4 %226 = OpLoad %225 
					                                       f32_4 %227 = OpLoad %212 
					                                         f32 %228 = OpDot %226 %227 
					                                Private f32* %229 = OpAccessChain %219 %84 
					                                                      OpStore %229 %228 
					                              Uniform f32_4* %230 = OpAccessChain %22 %48 
					                                       f32_4 %231 = OpLoad %230 
					                                       f32_4 %232 = OpLoad %212 
					                                         f32 %233 = OpDot %231 %232 
					                                Private f32* %234 = OpAccessChain %219 %148 
					                                                      OpStore %234 %233 
					                              Uniform f32_4* %237 = OpAccessChain %22 %236 
					                                       f32_4 %238 = OpLoad %237 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                         f32 %240 = OpLoad %198 
					                                       f32_3 %241 = OpCompositeConstruct %240 %240 %240 
					                                       f32_3 %242 = OpFMul %239 %241 
					                                       f32_3 %243 = OpLoad %219 
					                                       f32_3 %244 = OpFAdd %242 %243 
					                                                      OpStore %235 %244 
					                                 Output f32* %246 = OpAccessChain %88 %30 %84 
					                                         f32 %247 = OpLoad %246 
					                                         f32 %248 = OpFNegate %247 
					                                 Output f32* %249 = OpAccessChain %88 %30 %84 
					                                                      OpStore %249 %248 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 283
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %31 %113 %132 %166 %184 %212 %258 %272 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %9 RelaxedPrecision 
					                                                      OpDecorate %11 RelaxedPrecision 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %12 RelaxedPrecision 
					                                                      OpDecorate %13 RelaxedPrecision 
					                                                      OpDecorate %14 RelaxedPrecision 
					                                                      OpDecorate %20 RelaxedPrecision 
					                                                      OpDecorate %21 RelaxedPrecision 
					                                                      OpDecorate %23 RelaxedPrecision 
					                                                      OpDecorate %24 RelaxedPrecision 
					                                                      OpDecorate %25 RelaxedPrecision 
					                                                      OpDecorate %26 RelaxedPrecision 
					                                                      OpDecorate %30 RelaxedPrecision 
					                                                      OpDecorate %31 Location 31 
					                                                      OpDecorate %48 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %54 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 Offset 55 
					                                                      OpMemberDecorate %55 1 RelaxedPrecision 
					                                                      OpMemberDecorate %55 1 Offset 55 
					                                                      OpMemberDecorate %55 2 RelaxedPrecision 
					                                                      OpMemberDecorate %55 2 Offset 55 
					                                                      OpMemberDecorate %55 3 RelaxedPrecision 
					                                                      OpMemberDecorate %55 3 Offset 55 
					                                                      OpMemberDecorate %55 4 RelaxedPrecision 
					                                                      OpMemberDecorate %55 4 Offset 55 
					                                                      OpMemberDecorate %55 5 RelaxedPrecision 
					                                                      OpMemberDecorate %55 5 Offset 55 
					                                                      OpMemberDecorate %55 6 RelaxedPrecision 
					                                                      OpMemberDecorate %55 6 Offset 55 
					                                                      OpMemberDecorate %55 7 Offset 55 
					                                                      OpMemberDecorate %55 8 Offset 55 
					                                                      OpMemberDecorate %55 9 Offset 55 
					                                                      OpMemberDecorate %55 10 Offset 55 
					                                                      OpMemberDecorate %55 11 RelaxedPrecision 
					                                                      OpMemberDecorate %55 11 Offset 55 
					                                                      OpDecorate %55 Block 
					                                                      OpDecorate %57 DescriptorSet 57 
					                                                      OpDecorate %57 Binding 57 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %75 RelaxedPrecision 
					                                                      OpDecorate %76 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %89 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %91 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %125 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %129 DescriptorSet 129 
					                                                      OpDecorate %129 Binding 129 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %132 Location 132 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %140 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %151 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %163 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %166 Location 166 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %173 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 Location 184 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %211 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %212 Location 212 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %246 RelaxedPrecision 
					                                                      OpDecorate %249 RelaxedPrecision 
					                                                      OpDecorate %250 RelaxedPrecision 
					                                                      OpDecorate %256 RelaxedPrecision 
					                                                      OpDecorate %256 DescriptorSet 256 
					                                                      OpDecorate %256 Binding 256 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %258 Location 258 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %272 Location 272 
					                                                      OpDecorate %273 RelaxedPrecision 
					                                                      OpDecorate %277 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 0 
					                                              %17 = OpTypePointer Private %6 
					                                              %27 = OpTypeVector %6 2 
					                                              %28 = OpTypePointer Private %27 
					                               Private f32_2* %29 = OpVariable Private 
					                                 Input f32_3* %31 = OpVariable Input 
					                                          f32 %37 = OpConstant 3.674022E-40 
					                                          f32 %38 = OpConstant 3.674022E-40 
					                                              %46 = OpTypeVector %6 4 
					                                              %47 = OpTypePointer Private %46 
					                               Private f32_4* %48 = OpVariable Private 
					                                              %55 = OpTypeStruct %46 %46 %46 %46 %46 %46 %6 %6 %6 %6 %6 %46 
					                                              %56 = OpTypePointer Uniform %55 
					Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %57 = OpVariable Uniform 
					                                              %58 = OpTypeInt 32 1 
					                                          i32 %59 = OpConstant 9 
					                                              %60 = OpTypePointer Uniform %6 
					                                          i32 %63 = OpConstant 7 
					                                          i32 %72 = OpConstant 11 
					                                              %73 = OpTypePointer Uniform %46 
					                               Private f32_3* %78 = OpVariable Private 
					                                          i32 %80 = OpConstant 10 
					                                 Private f32* %93 = OpVariable Private 
					                                         i32 %103 = OpConstant 4 
					                                             %112 = OpTypePointer Output %46 
					                               Output f32_4* %113 = OpVariable Output 
					                                         u32 %117 = OpConstant 3 
					                                             %118 = OpTypePointer Output %6 
					                              Private f32_4* %125 = OpVariable Private 
					                                             %126 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %127 = OpTypeSampledImage %126 
					                                             %128 = OpTypePointer UniformConstant %127 
					 UniformConstant read_only Texture2DSampled* %129 = OpVariable UniformConstant 
					                                             %131 = OpTypePointer Input %27 
					                                Input f32_2* %132 = OpVariable Input 
					                                         i32 %145 = OpConstant 8 
					                                         i32 %149 = OpConstant 3 
					                                         f32 %161 = OpConstant 3.674022E-40 
					                                       f32_3 %162 = OpConstantComposite %161 %161 %161 
					                               Output f32_4* %166 = OpVariable Output 
					                                         i32 %171 = OpConstant 6 
					                              Private f32_4* %175 = OpVariable Private 
					                                         f32 %177 = OpConstant 3.674022E-40 
					                                       f32_3 %178 = OpConstantComposite %177 %177 %177 
					                               Output f32_4* %184 = OpVariable Output 
					                              Private f32_3* %190 = OpVariable Private 
					                                         i32 %191 = OpConstant 0 
					                                         i32 %197 = OpConstant 1 
					                                         u32 %202 = OpConstant 1 
					                                         i32 %204 = OpConstant 2 
					                                         u32 %209 = OpConstant 2 
					                                Input f32_3* %212 = OpVariable Input 
					                                       f32_3 %216 = OpConstantComposite %37 %37 %37 
					                                         f32 %224 = OpConstant 3.674022E-40 
					                                       f32_3 %225 = OpConstantComposite %224 %224 %224 
					                                         f32 %236 = OpConstant 3.674022E-40 
					                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
					                                         f32 %239 = OpConstant 3.674022E-40 
					                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
					                                             %253 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %254 = OpTypeSampledImage %253 
					                                             %255 = OpTypePointer UniformConstant %254 
					UniformConstant read_only TextureCubeSampled* %256 = OpVariable UniformConstant 
					                                Input f32_3* %258 = OpVariable Input 
					                              Private f32_3* %264 = OpVariable Private 
					                                         i32 %267 = OpConstant 5 
					                               Output f32_4* %272 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpLoad %11 
					                                          f32 %14 = OpDot %12 %13 
					                                 Private f32* %18 = OpAccessChain %9 %16 
					                                                      OpStore %18 %14 
					                                 Private f32* %19 = OpAccessChain %9 %16 
					                                          f32 %20 = OpLoad %19 
					                                          f32 %21 = OpExtInst %1 32 %20 
					                                 Private f32* %22 = OpAccessChain %9 %16 
					                                                      OpStore %22 %21 
					                                        f32_3 %23 = OpLoad %9 
					                                        f32_3 %24 = OpVectorShuffle %23 %23 0 0 0 
					                                        f32_3 %25 = OpLoad %11 
					                                        f32_3 %26 = OpFMul %24 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %30 = OpLoad %9 
					                                        f32_3 %32 = OpLoad %31 
					                                          f32 %33 = OpDot %30 %32 
					                                 Private f32* %34 = OpAccessChain %29 %16 
					                                                      OpStore %34 %33 
					                                 Private f32* %35 = OpAccessChain %29 %16 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %39 = OpExtInst %1 43 %36 %37 %38 
					                                 Private f32* %40 = OpAccessChain %29 %16 
					                                                      OpStore %40 %39 
					                                 Private f32* %41 = OpAccessChain %29 %16 
					                                          f32 %42 = OpLoad %41 
					                                          f32 %43 = OpFNegate %42 
					                                          f32 %44 = OpFAdd %43 %38 
					                                 Private f32* %45 = OpAccessChain %9 %16 
					                                                      OpStore %45 %44 
					                                 Private f32* %49 = OpAccessChain %9 %16 
					                                          f32 %50 = OpLoad %49 
					                                          f32 %51 = OpExtInst %1 30 %50 
					                                 Private f32* %52 = OpAccessChain %48 %16 
					                                                      OpStore %52 %51 
					                                        f32_4 %53 = OpLoad %48 
					                                        f32_2 %54 = OpVectorShuffle %53 %53 0 0 
					                                 Uniform f32* %61 = OpAccessChain %57 %59 
					                                          f32 %62 = OpLoad %61 
					                                 Uniform f32* %64 = OpAccessChain %57 %63 
					                                          f32 %65 = OpLoad %64 
					                                        f32_2 %66 = OpCompositeConstruct %62 %65 
					                                        f32_2 %67 = OpFMul %54 %66 
					                                                      OpStore %29 %67 
					                                        f32_2 %68 = OpLoad %29 
					                                        f32_2 %69 = OpExtInst %1 29 %68 
					                                                      OpStore %29 %69 
					                                        f32_2 %70 = OpLoad %29 
					                                        f32_3 %71 = OpVectorShuffle %70 %70 0 0 0 
					                               Uniform f32_4* %74 = OpAccessChain %57 %72 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
					                                        f32_3 %77 = OpFMul %71 %76 
					                                                      OpStore %9 %77 
					                                        f32_3 %79 = OpLoad %9 
					                                 Uniform f32* %81 = OpAccessChain %57 %80 
					                                          f32 %82 = OpLoad %81 
					                                 Uniform f32* %83 = OpAccessChain %57 %80 
					                                          f32 %84 = OpLoad %83 
					                                 Uniform f32* %85 = OpAccessChain %57 %80 
					                                          f32 %86 = OpLoad %85 
					                                        f32_3 %87 = OpCompositeConstruct %82 %84 %86 
					                                          f32 %88 = OpCompositeExtract %87 0 
					                                          f32 %89 = OpCompositeExtract %87 1 
					                                          f32 %90 = OpCompositeExtract %87 2 
					                                        f32_3 %91 = OpCompositeConstruct %88 %89 %90 
					                                        f32_3 %92 = OpFMul %79 %91 
					                                                      OpStore %78 %92 
					                                 Private f32* %94 = OpAccessChain %29 %16 
					                                          f32 %95 = OpLoad %94 
					                                          f32 %96 = OpFNegate %95 
					                                 Uniform f32* %97 = OpAccessChain %57 %80 
					                                          f32 %98 = OpLoad %97 
					                                          f32 %99 = OpFMul %96 %98 
					                                         f32 %100 = OpFAdd %99 %38 
					                                                      OpStore %93 %100 
					                                         f32 %101 = OpLoad %93 
					                                         f32 %102 = OpExtInst %1 43 %101 %37 %38 
					                                                      OpStore %93 %102 
					                              Uniform f32_4* %104 = OpAccessChain %57 %103 
					                                       f32_4 %105 = OpLoad %104 
					                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
					                                         f32 %107 = OpLoad %93 
					                                       f32_3 %108 = OpCompositeConstruct %107 %107 %107 
					                                       f32_3 %109 = OpFMul %106 %108 
					                                       f32_3 %110 = OpLoad %78 
					                                       f32_3 %111 = OpFAdd %109 %110 
					                                                      OpStore %78 %111 
					                                       f32_3 %114 = OpLoad %78 
					                                       f32_4 %115 = OpLoad %113 
					                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                      OpStore %113 %116 
					                                 Output f32* %119 = OpAccessChain %113 %117 
					                                                      OpStore %119 %38 
					                                Private f32* %120 = OpAccessChain %29 %16 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %122 = OpFNegate %121 
					                                         f32 %123 = OpFAdd %122 %38 
					                                Private f32* %124 = OpAccessChain %9 %16 
					                                                      OpStore %124 %123 
					                  read_only Texture2DSampled %130 = OpLoad %129 
					                                       f32_2 %133 = OpLoad %132 
					                                       f32_4 %134 = OpImageSampleImplicitLod %130 %133 
					                                         f32 %135 = OpCompositeExtract %134 3 
					                                Private f32* %136 = OpAccessChain %125 %16 
					                                                      OpStore %136 %135 
					                                Private f32* %137 = OpAccessChain %9 %16 
					                                         f32 %138 = OpLoad %137 
					                                Private f32* %139 = OpAccessChain %125 %16 
					                                         f32 %140 = OpLoad %139 
					                                         f32 %141 = OpFMul %138 %140 
					                                Private f32* %142 = OpAccessChain %9 %16 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %9 %16 
					                                         f32 %144 = OpLoad %143 
					                                Uniform f32* %146 = OpAccessChain %57 %145 
					                                         f32 %147 = OpLoad %146 
					                                         f32 %148 = OpFMul %144 %147 
					                                Uniform f32* %150 = OpAccessChain %57 %149 %117 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFAdd %148 %151 
					                                Private f32* %153 = OpAccessChain %29 %16 
					                                                      OpStore %153 %152 
					                                       f32_2 %154 = OpLoad %29 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 0 0 
					                              Uniform f32_4* %156 = OpAccessChain %57 %149 
					                                       f32_4 %157 = OpLoad %156 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
					                                       f32_3 %159 = OpFMul %155 %158 
					                                                      OpStore %9 %159 
					                                       f32_3 %160 = OpLoad %9 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %48 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 1 5 6 
					                                                      OpStore %48 %165 
					                                       f32_4 %167 = OpLoad %48 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 2 3 
					                                       f32_4 %169 = OpLoad %166 
					                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
					                                                      OpStore %166 %170 
					                                Uniform f32* %172 = OpAccessChain %57 %171 
					                                         f32 %173 = OpLoad %172 
					                                 Output f32* %174 = OpAccessChain %166 %117 
					                                                      OpStore %174 %173 
					                                       f32_3 %176 = OpLoad %31 
					                                       f32_3 %179 = OpFMul %176 %178 
					                                       f32_3 %180 = OpFAdd %179 %178 
					                                       f32_4 %181 = OpLoad %175 
					                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
					                                                      OpStore %175 %182 
					                                Private f32* %183 = OpAccessChain %175 %117 
					                                                      OpStore %183 %38 
					                                       f32_4 %185 = OpLoad %175 
					                                                      OpStore %184 %185 
					                                       f32_3 %186 = OpLoad %31 
					                                       f32_4 %187 = OpLoad %175 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %175 %188 
					                                Private f32* %189 = OpAccessChain %175 %117 
					                                                      OpStore %189 %38 
					                              Uniform f32_4* %192 = OpAccessChain %57 %191 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_4 %194 = OpLoad %175 
					                                         f32 %195 = OpDot %193 %194 
					                                Private f32* %196 = OpAccessChain %190 %16 
					                                                      OpStore %196 %195 
					                              Uniform f32_4* %198 = OpAccessChain %57 %197 
					                                       f32_4 %199 = OpLoad %198 
					                                       f32_4 %200 = OpLoad %175 
					                                         f32 %201 = OpDot %199 %200 
					                                Private f32* %203 = OpAccessChain %190 %202 
					                                                      OpStore %203 %201 
					                              Uniform f32_4* %205 = OpAccessChain %57 %204 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_4 %207 = OpLoad %175 
					                                         f32 %208 = OpDot %206 %207 
					                                Private f32* %210 = OpAccessChain %190 %209 
					                                                      OpStore %210 %208 
					                                       f32_3 %211 = OpLoad %190 
					                                       f32_3 %213 = OpLoad %212 
					                                       f32_3 %214 = OpFAdd %211 %213 
					                                                      OpStore %190 %214 
					                                       f32_3 %215 = OpLoad %190 
					                                       f32_3 %217 = OpExtInst %1 40 %215 %216 
					                                                      OpStore %190 %217 
					                                       f32_3 %218 = OpLoad %190 
					                                       f32_3 %219 = OpExtInst %1 30 %218 
					                                       f32_4 %220 = OpLoad %48 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 1 5 6 
					                                                      OpStore %48 %221 
					                                       f32_4 %222 = OpLoad %48 
					                                       f32_3 %223 = OpVectorShuffle %222 %222 0 2 3 
					                                       f32_3 %226 = OpFMul %223 %225 
					                                       f32_4 %227 = OpLoad %48 
					                                       f32_4 %228 = OpVectorShuffle %227 %226 4 1 5 6 
					                                                      OpStore %48 %228 
					                                       f32_4 %229 = OpLoad %48 
					                                       f32_3 %230 = OpVectorShuffle %229 %229 0 2 3 
					                                       f32_3 %231 = OpExtInst %1 29 %230 
					                                       f32_4 %232 = OpLoad %48 
					                                       f32_4 %233 = OpVectorShuffle %232 %231 4 1 5 6 
					                                                      OpStore %48 %233 
					                                       f32_4 %234 = OpLoad %48 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 2 3 
					                                       f32_3 %238 = OpFMul %235 %237 
					                                       f32_3 %241 = OpFAdd %238 %240 
					                                       f32_4 %242 = OpLoad %48 
					                                       f32_4 %243 = OpVectorShuffle %242 %241 4 1 5 6 
					                                                      OpStore %48 %243 
					                                       f32_4 %244 = OpLoad %48 
					                                       f32_3 %245 = OpVectorShuffle %244 %244 0 2 3 
					                                       f32_3 %246 = OpExtInst %1 40 %245 %216 
					                                       f32_4 %247 = OpLoad %48 
					                                       f32_4 %248 = OpVectorShuffle %247 %246 4 1 5 6 
					                                                      OpStore %48 %248 
					                                       f32_4 %249 = OpLoad %48 
					                                       f32_3 %250 = OpVectorShuffle %249 %249 0 2 3 
					                                       f32_3 %251 = OpLoad %78 
					                                       f32_3 %252 = OpFMul %250 %251 
					                                                      OpStore %190 %252 
					                read_only TextureCubeSampled %257 = OpLoad %256 
					                                       f32_3 %259 = OpLoad %258 
					                                       f32_4 %260 = OpImageSampleImplicitLod %257 %259 
					                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
					                                       f32_4 %262 = OpLoad %125 
					                                       f32_4 %263 = OpVectorShuffle %262 %261 4 1 5 6 
					                                                      OpStore %125 %263 
					                                       f32_4 %265 = OpLoad %125 
					                                       f32_3 %266 = OpVectorShuffle %265 %265 0 2 3 
					                              Uniform f32_4* %268 = OpAccessChain %57 %267 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
					                                       f32_3 %271 = OpFMul %266 %270 
					                                                      OpStore %264 %271 
					                                       f32_3 %273 = OpLoad %264 
					                                       f32_2 %274 = OpLoad %29 
					                                       f32_3 %275 = OpVectorShuffle %274 %274 1 1 1 
					                                       f32_3 %276 = OpFMul %273 %275 
					                                       f32_3 %277 = OpLoad %190 
					                                       f32_3 %278 = OpFAdd %276 %277 
					                                       f32_4 %279 = OpLoad %272 
					                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
					                                                      OpStore %272 %280 
					                                 Output f32* %281 = OpAccessChain %272 %117 
					                                                      OpStore %281 %38 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 251
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %88 %100 %101 %123 %127 %186 %189 %192 %195 %235 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpMemberDecorate %20 0 Offset 20 
					                                                      OpMemberDecorate %20 1 RelaxedPrecision 
					                                                      OpMemberDecorate %20 1 Offset 20 
					                                                      OpMemberDecorate %20 2 RelaxedPrecision 
					                                                      OpMemberDecorate %20 2 Offset 20 
					                                                      OpMemberDecorate %20 3 RelaxedPrecision 
					                                                      OpMemberDecorate %20 3 Offset 20 
					                                                      OpMemberDecorate %20 4 RelaxedPrecision 
					                                                      OpMemberDecorate %20 4 Offset 20 
					                                                      OpMemberDecorate %20 5 Offset 20 
					                                                      OpMemberDecorate %20 6 Offset 20 
					                                                      OpMemberDecorate %20 7 Offset 20 
					                                                      OpMemberDecorate %20 8 Offset 20 
					                                                      OpDecorate %20 Block 
					                                                      OpDecorate %22 DescriptorSet 22 
					                                                      OpDecorate %22 Binding 22 
					                                                      OpMemberDecorate %86 0 BuiltIn 86 
					                                                      OpMemberDecorate %86 1 BuiltIn 86 
					                                                      OpMemberDecorate %86 2 BuiltIn 86 
					                                                      OpDecorate %86 Block 
					                                                      OpDecorate %100 Location 100 
					                                                      OpDecorate %101 Location 101 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %127 Location 127 
					                                                      OpDecorate %186 RelaxedPrecision 
					                                                      OpDecorate %186 Location 186 
					                                                      OpDecorate %189 RelaxedPrecision 
					                                                      OpDecorate %189 Location 189 
					                                                      OpDecorate %192 Location 192 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %198 RelaxedPrecision 
					                                                      OpDecorate %209 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %221 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %227 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %235 Location 235 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %242 RelaxedPrecision 
					                                                      OpDecorate %243 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeVector %6 3 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 4 
					                                              %17 = OpTypeArray %7 %16 
					                                              %18 = OpTypeArray %7 %16 
					                                              %19 = OpTypeArray %7 %16 
					                                              %20 = OpTypeStruct %14 %7 %7 %7 %7 %17 %18 %19 %7 
					                                              %21 = OpTypePointer Uniform %20 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
					                                              %23 = OpTypeInt 32 1 
					                                          i32 %24 = OpConstant 5 
					                                          i32 %25 = OpConstant 1 
					                                              %26 = OpTypePointer Uniform %7 
					                                          i32 %30 = OpConstant 0 
					                                          i32 %38 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                          i32 %48 = OpConstant 3 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %66 = OpConstant 7 
					                                          u32 %84 = OpConstant 1 
					                                              %85 = OpTypeArray %6 %84 
					                                              %86 = OpTypeStruct %7 %6 %85 
					                                              %87 = OpTypePointer Output %86 
					         Output struct {f32_4; f32; f32[1];}* %88 = OpVariable Output 
					                                              %96 = OpTypePointer Output %7 
					                                              %98 = OpTypeVector %6 2 
					                                              %99 = OpTypePointer Output %98 
					                               Output f32_2* %100 = OpVariable Output 
					                                Input f32_4* %101 = OpVariable Input 
					                                         i32 %104 = OpConstant 8 
					                                             %116 = OpTypePointer Uniform %14 
					                                             %122 = OpTypePointer Output %14 
					                               Output f32_3* %123 = OpVariable Output 
					                                             %126 = OpTypePointer Input %14 
					                                Input f32_3* %127 = OpVariable Input 
					                                         i32 %129 = OpConstant 6 
					                                         u32 %134 = OpConstant 0 
					                                             %135 = OpTypePointer Private %6 
					                                         u32 %148 = OpConstant 2 
					                                Private f32* %150 = OpVariable Private 
					                               Output f32_3* %186 = OpVariable Output 
					                               Output f32_3* %189 = OpVariable Output 
					                               Output f32_3* %192 = OpVariable Output 
					                               Output f32_4* %195 = OpVariable Output 
					                                         f32 %196 = OpConstant 3.674022E-40 
					                                       f32_4 %197 = OpConstantComposite %196 %196 %196 %196 
					                                Private f32* %198 = OpVariable Private 
					                              Private f32_4* %212 = OpVariable Private 
					                                             %218 = OpTypePointer Private %14 
					                              Private f32_3* %219 = OpVariable Private 
					                               Output f32_3* %235 = OpVariable Output 
					                                         i32 %236 = OpConstant 4 
					                                             %245 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
					                                        f32_4 %28 = OpLoad %27 
					                                        f32_4 %29 = OpFMul %13 %28 
					                                                      OpStore %9 %29 
					                               Uniform f32_4* %31 = OpAccessChain %22 %24 %30 
					                                        f32_4 %32 = OpLoad %31 
					                                        f32_4 %33 = OpLoad %11 
					                                        f32_4 %34 = OpVectorShuffle %33 %33 0 0 0 0 
					                                        f32_4 %35 = OpFMul %32 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpFAdd %35 %36 
					                                                      OpStore %9 %37 
					                               Uniform f32_4* %39 = OpAccessChain %22 %24 %38 
					                                        f32_4 %40 = OpLoad %39 
					                                        f32_4 %41 = OpLoad %11 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 2 2 2 2 
					                                        f32_4 %43 = OpFMul %40 %42 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_4 %45 = OpFAdd %43 %44 
					                                                      OpStore %9 %45 
					                                        f32_4 %47 = OpLoad %9 
					                               Uniform f32_4* %49 = OpAccessChain %22 %24 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpFAdd %47 %50 
					                                                      OpStore %46 %51 
					                               Uniform f32_4* %52 = OpAccessChain %22 %24 %48 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                        f32_4 %55 = OpLoad %11 
					                                        f32_3 %56 = OpVectorShuffle %55 %55 3 3 3 
					                                        f32_3 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %9 
					                                        f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
					                                        f32_3 %60 = OpFAdd %57 %59 
					                                        f32_4 %61 = OpLoad %9 
					                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
					                                                      OpStore %9 %62 
					                                        f32_4 %64 = OpLoad %46 
					                                        f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
					                               Uniform f32_4* %67 = OpAccessChain %22 %66 %25 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFMul %65 %68 
					                                                      OpStore %63 %69 
					                               Uniform f32_4* %70 = OpAccessChain %22 %66 %30 
					                                        f32_4 %71 = OpLoad %70 
					                                        f32_4 %72 = OpLoad %46 
					                                        f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                                        f32_4 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %63 
					                                        f32_4 %76 = OpFAdd %74 %75 
					                                                      OpStore %63 %76 
					                               Uniform f32_4* %77 = OpAccessChain %22 %66 %38 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %46 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 2 2 2 2 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %63 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %63 %83 
					                               Uniform f32_4* %89 = OpAccessChain %22 %66 %48 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %46 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 3 3 3 3 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %63 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                Output f32_4* %97 = OpAccessChain %88 %30 
					                                                      OpStore %97 %95 
					                                       f32_4 %102 = OpLoad %101 
					                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
					                              Uniform f32_4* %105 = OpAccessChain %22 %104 
					                                       f32_4 %106 = OpLoad %105 
					                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
					                                       f32_2 %108 = OpFMul %103 %107 
					                              Uniform f32_4* %109 = OpAccessChain %22 %104 
					                                       f32_4 %110 = OpLoad %109 
					                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
					                                       f32_2 %112 = OpFAdd %108 %111 
					                                                      OpStore %100 %112 
					                                       f32_4 %113 = OpLoad %9 
					                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
					                                       f32_3 %115 = OpFNegate %114 
					                              Uniform f32_3* %117 = OpAccessChain %22 %30 
					                                       f32_3 %118 = OpLoad %117 
					                                       f32_3 %119 = OpFAdd %115 %118 
					                                       f32_4 %120 = OpLoad %46 
					                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
					                                                      OpStore %46 %121 
					                                       f32_4 %124 = OpLoad %9 
					                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
					                                                      OpStore %123 %125 
					                                       f32_3 %128 = OpLoad %127 
					                              Uniform f32_4* %130 = OpAccessChain %22 %129 %30 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                         f32 %133 = OpDot %128 %132 
					                                Private f32* %136 = OpAccessChain %9 %134 
					                                                      OpStore %136 %133 
					                                       f32_3 %137 = OpLoad %127 
					                              Uniform f32_4* %138 = OpAccessChain %22 %129 %25 
					                                       f32_4 %139 = OpLoad %138 
					                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
					                                         f32 %141 = OpDot %137 %140 
					                                Private f32* %142 = OpAccessChain %9 %84 
					                                                      OpStore %142 %141 
					                                       f32_3 %143 = OpLoad %127 
					                              Uniform f32_4* %144 = OpAccessChain %22 %129 %38 
					                                       f32_4 %145 = OpLoad %144 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
					                                         f32 %147 = OpDot %143 %146 
					                                Private f32* %149 = OpAccessChain %9 %148 
					                                                      OpStore %149 %147 
					                                       f32_4 %151 = OpLoad %9 
					                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
					                                       f32_4 %153 = OpLoad %9 
					                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
					                                         f32 %155 = OpDot %152 %154 
					                                                      OpStore %150 %155 
					                                         f32 %156 = OpLoad %150 
					                                         f32 %157 = OpExtInst %1 32 %156 
					                                                      OpStore %150 %157 
					                                         f32 %158 = OpLoad %150 
					                                       f32_3 %159 = OpCompositeConstruct %158 %158 %158 
					                                       f32_4 %160 = OpLoad %9 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
					                                       f32_3 %162 = OpFMul %159 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
					                                                      OpStore %9 %164 
					                                       f32_4 %165 = OpLoad %46 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                       f32_3 %167 = OpFNegate %166 
					                                       f32_4 %168 = OpLoad %9 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                         f32 %170 = OpDot %167 %169 
					                                                      OpStore %150 %170 
					                                         f32 %171 = OpLoad %150 
					                                         f32 %172 = OpLoad %150 
					                                         f32 %173 = OpFAdd %171 %172 
					                                                      OpStore %150 %173 
					                                       f32_4 %174 = OpLoad %9 
					                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
					                                         f32 %176 = OpLoad %150 
					                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
					                                       f32_3 %178 = OpFNegate %177 
					                                       f32_3 %179 = OpFMul %175 %178 
					                                       f32_4 %180 = OpLoad %46 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_3 %182 = OpFNegate %181 
					                                       f32_3 %183 = OpFAdd %179 %182 
					                                       f32_4 %184 = OpLoad %63 
					                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
					                                                      OpStore %63 %185 
					                                       f32_4 %187 = OpLoad %46 
					                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
					                                                      OpStore %186 %188 
					                                       f32_4 %190 = OpLoad %63 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                                      OpStore %189 %191 
					                                       f32_4 %193 = OpLoad %9 
					                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
					                                                      OpStore %192 %194 
					                                                      OpStore %195 %197 
					                                Private f32* %199 = OpAccessChain %9 %84 
					                                         f32 %200 = OpLoad %199 
					                                Private f32* %201 = OpAccessChain %9 %84 
					                                         f32 %202 = OpLoad %201 
					                                         f32 %203 = OpFMul %200 %202 
					                                                      OpStore %198 %203 
					                                Private f32* %204 = OpAccessChain %9 %134 
					                                         f32 %205 = OpLoad %204 
					                                Private f32* %206 = OpAccessChain %9 %134 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFMul %205 %207 
					                                         f32 %209 = OpLoad %198 
					                                         f32 %210 = OpFNegate %209 
					                                         f32 %211 = OpFAdd %208 %210 
					                                                      OpStore %198 %211 
					                                       f32_4 %213 = OpLoad %9 
					                                       f32_4 %214 = OpVectorShuffle %213 %213 1 2 2 0 
					                                       f32_4 %215 = OpLoad %9 
					                                       f32_4 %216 = OpVectorShuffle %215 %215 0 1 2 2 
					                                       f32_4 %217 = OpFMul %214 %216 
					                                                      OpStore %212 %217 
					                              Uniform f32_4* %220 = OpAccessChain %22 %25 
					                                       f32_4 %221 = OpLoad %220 
					                                       f32_4 %222 = OpLoad %212 
					                                         f32 %223 = OpDot %221 %222 
					                                Private f32* %224 = OpAccessChain %219 %134 
					                                                      OpStore %224 %223 
					                              Uniform f32_4* %225 = OpAccessChain %22 %38 
					                                       f32_4 %226 = OpLoad %225 
					                                       f32_4 %227 = OpLoad %212 
					                                         f32 %228 = OpDot %226 %227 
					                                Private f32* %229 = OpAccessChain %219 %84 
					                                                      OpStore %229 %228 
					                              Uniform f32_4* %230 = OpAccessChain %22 %48 
					                                       f32_4 %231 = OpLoad %230 
					                                       f32_4 %232 = OpLoad %212 
					                                         f32 %233 = OpDot %231 %232 
					                                Private f32* %234 = OpAccessChain %219 %148 
					                                                      OpStore %234 %233 
					                              Uniform f32_4* %237 = OpAccessChain %22 %236 
					                                       f32_4 %238 = OpLoad %237 
					                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                         f32 %240 = OpLoad %198 
					                                       f32_3 %241 = OpCompositeConstruct %240 %240 %240 
					                                       f32_3 %242 = OpFMul %239 %241 
					                                       f32_3 %243 = OpLoad %219 
					                                       f32_3 %244 = OpFAdd %242 %243 
					                                                      OpStore %235 %244 
					                                 Output f32* %246 = OpAccessChain %88 %30 %84 
					                                         f32 %247 = OpLoad %246 
					                                         f32 %248 = OpFNegate %247 
					                                 Output f32* %249 = OpAccessChain %88 %30 %84 
					                                                      OpStore %249 %248 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 283
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %31 %113 %132 %166 %184 %212 %258 %272 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %9 RelaxedPrecision 
					                                                      OpDecorate %11 RelaxedPrecision 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %12 RelaxedPrecision 
					                                                      OpDecorate %13 RelaxedPrecision 
					                                                      OpDecorate %14 RelaxedPrecision 
					                                                      OpDecorate %20 RelaxedPrecision 
					                                                      OpDecorate %21 RelaxedPrecision 
					                                                      OpDecorate %23 RelaxedPrecision 
					                                                      OpDecorate %24 RelaxedPrecision 
					                                                      OpDecorate %25 RelaxedPrecision 
					                                                      OpDecorate %26 RelaxedPrecision 
					                                                      OpDecorate %30 RelaxedPrecision 
					                                                      OpDecorate %31 Location 31 
					                                                      OpDecorate %48 RelaxedPrecision 
					                                                      OpDecorate %50 RelaxedPrecision 
					                                                      OpDecorate %51 RelaxedPrecision 
					                                                      OpDecorate %53 RelaxedPrecision 
					                                                      OpDecorate %54 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 RelaxedPrecision 
					                                                      OpMemberDecorate %55 0 Offset 55 
					                                                      OpMemberDecorate %55 1 RelaxedPrecision 
					                                                      OpMemberDecorate %55 1 Offset 55 
					                                                      OpMemberDecorate %55 2 RelaxedPrecision 
					                                                      OpMemberDecorate %55 2 Offset 55 
					                                                      OpMemberDecorate %55 3 RelaxedPrecision 
					                                                      OpMemberDecorate %55 3 Offset 55 
					                                                      OpMemberDecorate %55 4 RelaxedPrecision 
					                                                      OpMemberDecorate %55 4 Offset 55 
					                                                      OpMemberDecorate %55 5 RelaxedPrecision 
					                                                      OpMemberDecorate %55 5 Offset 55 
					                                                      OpMemberDecorate %55 6 RelaxedPrecision 
					                                                      OpMemberDecorate %55 6 Offset 55 
					                                                      OpMemberDecorate %55 7 Offset 55 
					                                                      OpMemberDecorate %55 8 Offset 55 
					                                                      OpMemberDecorate %55 9 Offset 55 
					                                                      OpMemberDecorate %55 10 Offset 55 
					                                                      OpMemberDecorate %55 11 RelaxedPrecision 
					                                                      OpMemberDecorate %55 11 Offset 55 
					                                                      OpDecorate %55 Block 
					                                                      OpDecorate %57 DescriptorSet 57 
					                                                      OpDecorate %57 Binding 57 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %75 RelaxedPrecision 
					                                                      OpDecorate %76 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %89 RelaxedPrecision 
					                                                      OpDecorate %90 RelaxedPrecision 
					                                                      OpDecorate %91 RelaxedPrecision 
					                                                      OpDecorate %92 RelaxedPrecision 
					                                                      OpDecorate %105 RelaxedPrecision 
					                                                      OpDecorate %106 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %113 Location 113 
					                                                      OpDecorate %125 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %129 DescriptorSet 129 
					                                                      OpDecorate %129 Binding 129 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %132 Location 132 
					                                                      OpDecorate %135 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %140 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %151 RelaxedPrecision 
					                                                      OpDecorate %157 RelaxedPrecision 
					                                                      OpDecorate %158 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %163 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %166 Location 166 
					                                                      OpDecorate %167 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %173 RelaxedPrecision 
					                                                      OpDecorate %184 RelaxedPrecision 
					                                                      OpDecorate %184 Location 184 
					                                                      OpDecorate %190 RelaxedPrecision 
					                                                      OpDecorate %193 RelaxedPrecision 
					                                                      OpDecorate %199 RelaxedPrecision 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %211 RelaxedPrecision 
					                                                      OpDecorate %212 RelaxedPrecision 
					                                                      OpDecorate %212 Location 212 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %217 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %222 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %226 RelaxedPrecision 
					                                                      OpDecorate %229 RelaxedPrecision 
					                                                      OpDecorate %230 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %235 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %241 RelaxedPrecision 
					                                                      OpDecorate %244 RelaxedPrecision 
					                                                      OpDecorate %245 RelaxedPrecision 
					                                                      OpDecorate %246 RelaxedPrecision 
					                                                      OpDecorate %249 RelaxedPrecision 
					                                                      OpDecorate %250 RelaxedPrecision 
					                                                      OpDecorate %256 RelaxedPrecision 
					                                                      OpDecorate %256 DescriptorSet 256 
					                                                      OpDecorate %256 Binding 256 
					                                                      OpDecorate %257 RelaxedPrecision 
					                                                      OpDecorate %258 RelaxedPrecision 
					                                                      OpDecorate %258 Location 258 
					                                                      OpDecorate %259 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %266 RelaxedPrecision 
					                                                      OpDecorate %269 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %272 Location 272 
					                                                      OpDecorate %273 RelaxedPrecision 
					                                                      OpDecorate %277 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_3* %11 = OpVariable Input 
					                                              %15 = OpTypeInt 32 0 
					                                          u32 %16 = OpConstant 0 
					                                              %17 = OpTypePointer Private %6 
					                                              %27 = OpTypeVector %6 2 
					                                              %28 = OpTypePointer Private %27 
					                               Private f32_2* %29 = OpVariable Private 
					                                 Input f32_3* %31 = OpVariable Input 
					                                          f32 %37 = OpConstant 3.674022E-40 
					                                          f32 %38 = OpConstant 3.674022E-40 
					                                              %46 = OpTypeVector %6 4 
					                                              %47 = OpTypePointer Private %46 
					                               Private f32_4* %48 = OpVariable Private 
					                                              %55 = OpTypeStruct %46 %46 %46 %46 %46 %46 %6 %6 %6 %6 %6 %46 
					                                              %56 = OpTypePointer Uniform %55 
					Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32; f32; f32; f32; f32; f32_4;}* %57 = OpVariable Uniform 
					                                              %58 = OpTypeInt 32 1 
					                                          i32 %59 = OpConstant 9 
					                                              %60 = OpTypePointer Uniform %6 
					                                          i32 %63 = OpConstant 7 
					                                          i32 %72 = OpConstant 11 
					                                              %73 = OpTypePointer Uniform %46 
					                               Private f32_3* %78 = OpVariable Private 
					                                          i32 %80 = OpConstant 10 
					                                 Private f32* %93 = OpVariable Private 
					                                         i32 %103 = OpConstant 4 
					                                             %112 = OpTypePointer Output %46 
					                               Output f32_4* %113 = OpVariable Output 
					                                         u32 %117 = OpConstant 3 
					                                             %118 = OpTypePointer Output %6 
					                              Private f32_4* %125 = OpVariable Private 
					                                             %126 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %127 = OpTypeSampledImage %126 
					                                             %128 = OpTypePointer UniformConstant %127 
					 UniformConstant read_only Texture2DSampled* %129 = OpVariable UniformConstant 
					                                             %131 = OpTypePointer Input %27 
					                                Input f32_2* %132 = OpVariable Input 
					                                         i32 %145 = OpConstant 8 
					                                         i32 %149 = OpConstant 3 
					                                         f32 %161 = OpConstant 3.674022E-40 
					                                       f32_3 %162 = OpConstantComposite %161 %161 %161 
					                               Output f32_4* %166 = OpVariable Output 
					                                         i32 %171 = OpConstant 6 
					                              Private f32_4* %175 = OpVariable Private 
					                                         f32 %177 = OpConstant 3.674022E-40 
					                                       f32_3 %178 = OpConstantComposite %177 %177 %177 
					                               Output f32_4* %184 = OpVariable Output 
					                              Private f32_3* %190 = OpVariable Private 
					                                         i32 %191 = OpConstant 0 
					                                         i32 %197 = OpConstant 1 
					                                         u32 %202 = OpConstant 1 
					                                         i32 %204 = OpConstant 2 
					                                         u32 %209 = OpConstant 2 
					                                Input f32_3* %212 = OpVariable Input 
					                                       f32_3 %216 = OpConstantComposite %37 %37 %37 
					                                         f32 %224 = OpConstant 3.674022E-40 
					                                       f32_3 %225 = OpConstantComposite %224 %224 %224 
					                                         f32 %236 = OpConstant 3.674022E-40 
					                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
					                                         f32 %239 = OpConstant 3.674022E-40 
					                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
					                                             %253 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %254 = OpTypeSampledImage %253 
					                                             %255 = OpTypePointer UniformConstant %254 
					UniformConstant read_only TextureCubeSampled* %256 = OpVariable UniformConstant 
					                                Input f32_3* %258 = OpVariable Input 
					                              Private f32_3* %264 = OpVariable Private 
					                                         i32 %267 = OpConstant 5 
					                               Output f32_4* %272 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_3 %12 = OpLoad %11 
					                                        f32_3 %13 = OpLoad %11 
					                                          f32 %14 = OpDot %12 %13 
					                                 Private f32* %18 = OpAccessChain %9 %16 
					                                                      OpStore %18 %14 
					                                 Private f32* %19 = OpAccessChain %9 %16 
					                                          f32 %20 = OpLoad %19 
					                                          f32 %21 = OpExtInst %1 32 %20 
					                                 Private f32* %22 = OpAccessChain %9 %16 
					                                                      OpStore %22 %21 
					                                        f32_3 %23 = OpLoad %9 
					                                        f32_3 %24 = OpVectorShuffle %23 %23 0 0 0 
					                                        f32_3 %25 = OpLoad %11 
					                                        f32_3 %26 = OpFMul %24 %25 
					                                                      OpStore %9 %26 
					                                        f32_3 %30 = OpLoad %9 
					                                        f32_3 %32 = OpLoad %31 
					                                          f32 %33 = OpDot %30 %32 
					                                 Private f32* %34 = OpAccessChain %29 %16 
					                                                      OpStore %34 %33 
					                                 Private f32* %35 = OpAccessChain %29 %16 
					                                          f32 %36 = OpLoad %35 
					                                          f32 %39 = OpExtInst %1 43 %36 %37 %38 
					                                 Private f32* %40 = OpAccessChain %29 %16 
					                                                      OpStore %40 %39 
					                                 Private f32* %41 = OpAccessChain %29 %16 
					                                          f32 %42 = OpLoad %41 
					                                          f32 %43 = OpFNegate %42 
					                                          f32 %44 = OpFAdd %43 %38 
					                                 Private f32* %45 = OpAccessChain %9 %16 
					                                                      OpStore %45 %44 
					                                 Private f32* %49 = OpAccessChain %9 %16 
					                                          f32 %50 = OpLoad %49 
					                                          f32 %51 = OpExtInst %1 30 %50 
					                                 Private f32* %52 = OpAccessChain %48 %16 
					                                                      OpStore %52 %51 
					                                        f32_4 %53 = OpLoad %48 
					                                        f32_2 %54 = OpVectorShuffle %53 %53 0 0 
					                                 Uniform f32* %61 = OpAccessChain %57 %59 
					                                          f32 %62 = OpLoad %61 
					                                 Uniform f32* %64 = OpAccessChain %57 %63 
					                                          f32 %65 = OpLoad %64 
					                                        f32_2 %66 = OpCompositeConstruct %62 %65 
					                                        f32_2 %67 = OpFMul %54 %66 
					                                                      OpStore %29 %67 
					                                        f32_2 %68 = OpLoad %29 
					                                        f32_2 %69 = OpExtInst %1 29 %68 
					                                                      OpStore %29 %69 
					                                        f32_2 %70 = OpLoad %29 
					                                        f32_3 %71 = OpVectorShuffle %70 %70 0 0 0 
					                               Uniform f32_4* %74 = OpAccessChain %57 %72 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
					                                        f32_3 %77 = OpFMul %71 %76 
					                                                      OpStore %9 %77 
					                                        f32_3 %79 = OpLoad %9 
					                                 Uniform f32* %81 = OpAccessChain %57 %80 
					                                          f32 %82 = OpLoad %81 
					                                 Uniform f32* %83 = OpAccessChain %57 %80 
					                                          f32 %84 = OpLoad %83 
					                                 Uniform f32* %85 = OpAccessChain %57 %80 
					                                          f32 %86 = OpLoad %85 
					                                        f32_3 %87 = OpCompositeConstruct %82 %84 %86 
					                                          f32 %88 = OpCompositeExtract %87 0 
					                                          f32 %89 = OpCompositeExtract %87 1 
					                                          f32 %90 = OpCompositeExtract %87 2 
					                                        f32_3 %91 = OpCompositeConstruct %88 %89 %90 
					                                        f32_3 %92 = OpFMul %79 %91 
					                                                      OpStore %78 %92 
					                                 Private f32* %94 = OpAccessChain %29 %16 
					                                          f32 %95 = OpLoad %94 
					                                          f32 %96 = OpFNegate %95 
					                                 Uniform f32* %97 = OpAccessChain %57 %80 
					                                          f32 %98 = OpLoad %97 
					                                          f32 %99 = OpFMul %96 %98 
					                                         f32 %100 = OpFAdd %99 %38 
					                                                      OpStore %93 %100 
					                                         f32 %101 = OpLoad %93 
					                                         f32 %102 = OpExtInst %1 43 %101 %37 %38 
					                                                      OpStore %93 %102 
					                              Uniform f32_4* %104 = OpAccessChain %57 %103 
					                                       f32_4 %105 = OpLoad %104 
					                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
					                                         f32 %107 = OpLoad %93 
					                                       f32_3 %108 = OpCompositeConstruct %107 %107 %107 
					                                       f32_3 %109 = OpFMul %106 %108 
					                                       f32_3 %110 = OpLoad %78 
					                                       f32_3 %111 = OpFAdd %109 %110 
					                                                      OpStore %78 %111 
					                                       f32_3 %114 = OpLoad %78 
					                                       f32_4 %115 = OpLoad %113 
					                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                      OpStore %113 %116 
					                                 Output f32* %119 = OpAccessChain %113 %117 
					                                                      OpStore %119 %38 
					                                Private f32* %120 = OpAccessChain %29 %16 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %122 = OpFNegate %121 
					                                         f32 %123 = OpFAdd %122 %38 
					                                Private f32* %124 = OpAccessChain %9 %16 
					                                                      OpStore %124 %123 
					                  read_only Texture2DSampled %130 = OpLoad %129 
					                                       f32_2 %133 = OpLoad %132 
					                                       f32_4 %134 = OpImageSampleImplicitLod %130 %133 
					                                         f32 %135 = OpCompositeExtract %134 3 
					                                Private f32* %136 = OpAccessChain %125 %16 
					                                                      OpStore %136 %135 
					                                Private f32* %137 = OpAccessChain %9 %16 
					                                         f32 %138 = OpLoad %137 
					                                Private f32* %139 = OpAccessChain %125 %16 
					                                         f32 %140 = OpLoad %139 
					                                         f32 %141 = OpFMul %138 %140 
					                                Private f32* %142 = OpAccessChain %9 %16 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %9 %16 
					                                         f32 %144 = OpLoad %143 
					                                Uniform f32* %146 = OpAccessChain %57 %145 
					                                         f32 %147 = OpLoad %146 
					                                         f32 %148 = OpFMul %144 %147 
					                                Uniform f32* %150 = OpAccessChain %57 %149 %117 
					                                         f32 %151 = OpLoad %150 
					                                         f32 %152 = OpFAdd %148 %151 
					                                Private f32* %153 = OpAccessChain %29 %16 
					                                                      OpStore %153 %152 
					                                       f32_2 %154 = OpLoad %29 
					                                       f32_3 %155 = OpVectorShuffle %154 %154 0 0 0 
					                              Uniform f32_4* %156 = OpAccessChain %57 %149 
					                                       f32_4 %157 = OpLoad %156 
					                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
					                                       f32_3 %159 = OpFMul %155 %158 
					                                                      OpStore %9 %159 
					                                       f32_3 %160 = OpLoad %9 
					                                       f32_3 %163 = OpFMul %160 %162 
					                                       f32_4 %164 = OpLoad %48 
					                                       f32_4 %165 = OpVectorShuffle %164 %163 4 1 5 6 
					                                                      OpStore %48 %165 
					                                       f32_4 %167 = OpLoad %48 
					                                       f32_3 %168 = OpVectorShuffle %167 %167 0 2 3 
					                                       f32_4 %169 = OpLoad %166 
					                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
					                                                      OpStore %166 %170 
					                                Uniform f32* %172 = OpAccessChain %57 %171 
					                                         f32 %173 = OpLoad %172 
					                                 Output f32* %174 = OpAccessChain %166 %117 
					                                                      OpStore %174 %173 
					                                       f32_3 %176 = OpLoad %31 
					                                       f32_3 %179 = OpFMul %176 %178 
					                                       f32_3 %180 = OpFAdd %179 %178 
					                                       f32_4 %181 = OpLoad %175 
					                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
					                                                      OpStore %175 %182 
					                                Private f32* %183 = OpAccessChain %175 %117 
					                                                      OpStore %183 %38 
					                                       f32_4 %185 = OpLoad %175 
					                                                      OpStore %184 %185 
					                                       f32_3 %186 = OpLoad %31 
					                                       f32_4 %187 = OpLoad %175 
					                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
					                                                      OpStore %175 %188 
					                                Private f32* %189 = OpAccessChain %175 %117 
					                                                      OpStore %189 %38 
					                              Uniform f32_4* %192 = OpAccessChain %57 %191 
					                                       f32_4 %193 = OpLoad %192 
					                                       f32_4 %194 = OpLoad %175 
					                                         f32 %195 = OpDot %193 %194 
					                                Private f32* %196 = OpAccessChain %190 %16 
					                                                      OpStore %196 %195 
					                              Uniform f32_4* %198 = OpAccessChain %57 %197 
					                                       f32_4 %199 = OpLoad %198 
					                                       f32_4 %200 = OpLoad %175 
					                                         f32 %201 = OpDot %199 %200 
					                                Private f32* %203 = OpAccessChain %190 %202 
					                                                      OpStore %203 %201 
					                              Uniform f32_4* %205 = OpAccessChain %57 %204 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_4 %207 = OpLoad %175 
					                                         f32 %208 = OpDot %206 %207 
					                                Private f32* %210 = OpAccessChain %190 %209 
					                                                      OpStore %210 %208 
					                                       f32_3 %211 = OpLoad %190 
					                                       f32_3 %213 = OpLoad %212 
					                                       f32_3 %214 = OpFAdd %211 %213 
					                                                      OpStore %190 %214 
					                                       f32_3 %215 = OpLoad %190 
					                                       f32_3 %217 = OpExtInst %1 40 %215 %216 
					                                                      OpStore %190 %217 
					                                       f32_3 %218 = OpLoad %190 
					                                       f32_3 %219 = OpExtInst %1 30 %218 
					                                       f32_4 %220 = OpLoad %48 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 1 5 6 
					                                                      OpStore %48 %221 
					                                       f32_4 %222 = OpLoad %48 
					                                       f32_3 %223 = OpVectorShuffle %222 %222 0 2 3 
					                                       f32_3 %226 = OpFMul %223 %225 
					                                       f32_4 %227 = OpLoad %48 
					                                       f32_4 %228 = OpVectorShuffle %227 %226 4 1 5 6 
					                                                      OpStore %48 %228 
					                                       f32_4 %229 = OpLoad %48 
					                                       f32_3 %230 = OpVectorShuffle %229 %229 0 2 3 
					                                       f32_3 %231 = OpExtInst %1 29 %230 
					                                       f32_4 %232 = OpLoad %48 
					                                       f32_4 %233 = OpVectorShuffle %232 %231 4 1 5 6 
					                                                      OpStore %48 %233 
					                                       f32_4 %234 = OpLoad %48 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 2 3 
					                                       f32_3 %238 = OpFMul %235 %237 
					                                       f32_3 %241 = OpFAdd %238 %240 
					                                       f32_4 %242 = OpLoad %48 
					                                       f32_4 %243 = OpVectorShuffle %242 %241 4 1 5 6 
					                                                      OpStore %48 %243 
					                                       f32_4 %244 = OpLoad %48 
					                                       f32_3 %245 = OpVectorShuffle %244 %244 0 2 3 
					                                       f32_3 %246 = OpExtInst %1 40 %245 %216 
					                                       f32_4 %247 = OpLoad %48 
					                                       f32_4 %248 = OpVectorShuffle %247 %246 4 1 5 6 
					                                                      OpStore %48 %248 
					                                       f32_4 %249 = OpLoad %48 
					                                       f32_3 %250 = OpVectorShuffle %249 %249 0 2 3 
					                                       f32_3 %251 = OpLoad %78 
					                                       f32_3 %252 = OpFMul %250 %251 
					                                                      OpStore %190 %252 
					                read_only TextureCubeSampled %257 = OpLoad %256 
					                                       f32_3 %259 = OpLoad %258 
					                                       f32_4 %260 = OpImageSampleImplicitLod %257 %259 
					                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
					                                       f32_4 %262 = OpLoad %125 
					                                       f32_4 %263 = OpVectorShuffle %262 %261 4 1 5 6 
					                                                      OpStore %125 %263 
					                                       f32_4 %265 = OpLoad %125 
					                                       f32_3 %266 = OpVectorShuffle %265 %265 0 2 3 
					                              Uniform f32_4* %268 = OpAccessChain %57 %267 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
					                                       f32_3 %271 = OpFMul %266 %270 
					                                                      OpStore %264 %271 
					                                       f32_3 %273 = OpLoad %264 
					                                       f32_2 %274 = OpLoad %29 
					                                       f32_3 %275 = OpVectorShuffle %274 %274 1 1 1 
					                                       f32_3 %276 = OpFMul %273 %275 
					                                       f32_3 %277 = OpLoad %190 
					                                       f32_3 %278 = OpFAdd %276 %277 
					                                       f32_4 %279 = OpLoad %272 
					                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
					                                                      OpStore %272 %280 
					                                 Output f32* %281 = OpAccessChain %272 %117 
					                                                      OpStore %281 %38 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					"spirv"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					Keywords { "UNITY_HDR_ON" }
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					Keywords { "UNITY_HDR_ON" }
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					Keywords { "UNITY_HDR_ON" }
					"spirv"
				}
			}
		}
		Pass {
			Name "META"
			LOD 400
			Tags { "LIGHTMODE" = "META" "RenderType" = "Opaque" }
			ZClip Off
			Cull Off
			GpuProgramID 391031
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform bvec4 unity_MetaVertexControl;
					varying mediump vec3 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 vertex_2;
					  vertex_2 = _glesVertex;
					  if (unity_MetaVertexControl.x) {
					    vertex_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					    highp float tmpvar_3;
					    if ((_glesVertex.z > 0.0)) {
					      tmpvar_3 = 0.0001;
					    } else {
					      tmpvar_3 = 0.0;
					    };
					    vertex_2.z = tmpvar_3;
					  };
					  if (unity_MetaVertexControl.y) {
					    vertex_2.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					    highp float tmpvar_4;
					    if ((vertex_2.z > 0.0)) {
					      tmpvar_4 = 0.0001;
					    } else {
					      tmpvar_4 = 0.0;
					    };
					    vertex_2.z = tmpvar_4;
					  };
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = vertex_2.xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_7;
					  tmpvar_7[0] = unity_WorldToObject[0].xyz;
					  tmpvar_7[1] = unity_WorldToObject[1].xyz;
					  tmpvar_7[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
					  highp vec3 tmpvar_9;
					  highp vec3 I_10;
					  I_10 = (tmpvar_6 - _WorldSpaceCameraPos);
					  tmpvar_9 = (I_10 - (2.0 * (
					    dot (tmpvar_8, I_10)
					   * tmpvar_8)));
					  tmpvar_1 = tmpvar_9;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
					  xlv_TEXCOORD0 = tmpvar_1;
					  xlv_TEXCOORD1 = tmpvar_8;
					  xlv_TEXCOORD2 = tmpvar_6;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform highp float _FresAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					uniform bvec4 unity_MetaFragmentControl;
					uniform highp float unity_OneOverOutputBoost;
					uniform highp float unity_MaxOutputValue;
					uniform highp float unity_UseLinearSpace;
					varying mediump vec3 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  highp vec3 tmpvar_6;
					  highp vec3 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_5 = tmpvar_8;
					  tmpvar_6 = xlv_TEXCOORD0;
					  tmpvar_7 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_9;
					  lowp vec3 tmpvar_10;
					  mediump float fres_11;
					  mediump float rim_12;
					  mediump float tmpvar_13;
					  highp float tmpvar_14;
					  tmpvar_14 = clamp (dot (normalize(tmpvar_7), tmpvar_4), 0.0, 1.0);
					  tmpvar_13 = tmpvar_14;
					  rim_12 = (1.0 - tmpvar_13);
					  fres_11 = rim_12;
					  highp float tmpvar_15;
					  tmpvar_15 = pow (rim_12, _RimAmt);
					  rim_12 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = pow (fres_11, _FresAmt);
					  fres_11 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp ((1.0 - (rim_12 * _RimPwr)), 0.0, 1.0);
					  tmpvar_9 = (_Color.xyz * tmpvar_17);
					  highp vec3 tmpvar_18;
					  tmpvar_18 = ((rim_12 * _RimColor) * _RimPwr).xyz;
					  tmpvar_9 = (tmpvar_9 + tmpvar_18);
					  tmpvar_10 = ((textureCube (_Cube, tmpvar_6).xyz * _ReflectColor.xyz) * fres_11);
					  tmpvar_2 = tmpvar_9;
					  tmpvar_3 = tmpvar_10;
					  mediump vec4 res_19;
					  res_19 = vec4(0.0, 0.0, 0.0, 0.0);
					  if (unity_MetaFragmentControl.x) {
					    mediump vec4 tmpvar_20;
					    tmpvar_20.w = 1.0;
					    tmpvar_20.xyz = tmpvar_2;
					    res_19.w = tmpvar_20.w;
					    highp vec3 tmpvar_21;
					    tmpvar_21 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
					    res_19.xyz = tmpvar_21;
					  };
					  if (unity_MetaFragmentControl.y) {
					    mediump vec3 emission_22;
					    if (bool(unity_UseLinearSpace)) {
					      emission_22 = tmpvar_3;
					    } else {
					      emission_22 = (tmpvar_3 * ((tmpvar_3 * 
					        ((tmpvar_3 * 0.305306) + 0.6821711)
					      ) + 0.01252288));
					    };
					    mediump vec4 tmpvar_23;
					    highp float alpha_24;
					    highp vec3 tmpvar_25;
					    tmpvar_25 = (emission_22 * 0.01030928);
					    alpha_24 = (ceil((
					      max (max (tmpvar_25.x, tmpvar_25.y), max (tmpvar_25.z, 0.02))
					     * 255.0)) / 255.0);
					    highp float tmpvar_26;
					    tmpvar_26 = max (alpha_24, 0.02);
					    alpha_24 = tmpvar_26;
					    highp vec4 tmpvar_27;
					    tmpvar_27.xyz = (tmpvar_25 / tmpvar_26);
					    tmpvar_27.w = tmpvar_26;
					    tmpvar_23 = tmpvar_27;
					    res_19 = tmpvar_23;
					  };
					  tmpvar_1 = res_19;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform bvec4 unity_MetaVertexControl;
					varying mediump vec3 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 vertex_2;
					  vertex_2 = _glesVertex;
					  if (unity_MetaVertexControl.x) {
					    vertex_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					    highp float tmpvar_3;
					    if ((_glesVertex.z > 0.0)) {
					      tmpvar_3 = 0.0001;
					    } else {
					      tmpvar_3 = 0.0;
					    };
					    vertex_2.z = tmpvar_3;
					  };
					  if (unity_MetaVertexControl.y) {
					    vertex_2.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					    highp float tmpvar_4;
					    if ((vertex_2.z > 0.0)) {
					      tmpvar_4 = 0.0001;
					    } else {
					      tmpvar_4 = 0.0;
					    };
					    vertex_2.z = tmpvar_4;
					  };
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = vertex_2.xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_7;
					  tmpvar_7[0] = unity_WorldToObject[0].xyz;
					  tmpvar_7[1] = unity_WorldToObject[1].xyz;
					  tmpvar_7[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
					  highp vec3 tmpvar_9;
					  highp vec3 I_10;
					  I_10 = (tmpvar_6 - _WorldSpaceCameraPos);
					  tmpvar_9 = (I_10 - (2.0 * (
					    dot (tmpvar_8, I_10)
					   * tmpvar_8)));
					  tmpvar_1 = tmpvar_9;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
					  xlv_TEXCOORD0 = tmpvar_1;
					  xlv_TEXCOORD1 = tmpvar_8;
					  xlv_TEXCOORD2 = tmpvar_6;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform highp float _FresAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					uniform bvec4 unity_MetaFragmentControl;
					uniform highp float unity_OneOverOutputBoost;
					uniform highp float unity_MaxOutputValue;
					uniform highp float unity_UseLinearSpace;
					varying mediump vec3 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  highp vec3 tmpvar_6;
					  highp vec3 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_5 = tmpvar_8;
					  tmpvar_6 = xlv_TEXCOORD0;
					  tmpvar_7 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_9;
					  lowp vec3 tmpvar_10;
					  mediump float fres_11;
					  mediump float rim_12;
					  mediump float tmpvar_13;
					  highp float tmpvar_14;
					  tmpvar_14 = clamp (dot (normalize(tmpvar_7), tmpvar_4), 0.0, 1.0);
					  tmpvar_13 = tmpvar_14;
					  rim_12 = (1.0 - tmpvar_13);
					  fres_11 = rim_12;
					  highp float tmpvar_15;
					  tmpvar_15 = pow (rim_12, _RimAmt);
					  rim_12 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = pow (fres_11, _FresAmt);
					  fres_11 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp ((1.0 - (rim_12 * _RimPwr)), 0.0, 1.0);
					  tmpvar_9 = (_Color.xyz * tmpvar_17);
					  highp vec3 tmpvar_18;
					  tmpvar_18 = ((rim_12 * _RimColor) * _RimPwr).xyz;
					  tmpvar_9 = (tmpvar_9 + tmpvar_18);
					  tmpvar_10 = ((textureCube (_Cube, tmpvar_6).xyz * _ReflectColor.xyz) * fres_11);
					  tmpvar_2 = tmpvar_9;
					  tmpvar_3 = tmpvar_10;
					  mediump vec4 res_19;
					  res_19 = vec4(0.0, 0.0, 0.0, 0.0);
					  if (unity_MetaFragmentControl.x) {
					    mediump vec4 tmpvar_20;
					    tmpvar_20.w = 1.0;
					    tmpvar_20.xyz = tmpvar_2;
					    res_19.w = tmpvar_20.w;
					    highp vec3 tmpvar_21;
					    tmpvar_21 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
					    res_19.xyz = tmpvar_21;
					  };
					  if (unity_MetaFragmentControl.y) {
					    mediump vec3 emission_22;
					    if (bool(unity_UseLinearSpace)) {
					      emission_22 = tmpvar_3;
					    } else {
					      emission_22 = (tmpvar_3 * ((tmpvar_3 * 
					        ((tmpvar_3 * 0.305306) + 0.6821711)
					      ) + 0.01252288));
					    };
					    mediump vec4 tmpvar_23;
					    highp float alpha_24;
					    highp vec3 tmpvar_25;
					    tmpvar_25 = (emission_22 * 0.01030928);
					    alpha_24 = (ceil((
					      max (max (tmpvar_25.x, tmpvar_25.y), max (tmpvar_25.z, 0.02))
					     * 255.0)) / 255.0);
					    highp float tmpvar_26;
					    tmpvar_26 = max (alpha_24, 0.02);
					    alpha_24 = tmpvar_26;
					    highp vec4 tmpvar_27;
					    tmpvar_27.xyz = (tmpvar_25 / tmpvar_26);
					    tmpvar_27.w = tmpvar_26;
					    tmpvar_23 = tmpvar_27;
					    res_19 = tmpvar_23;
					  };
					  tmpvar_1 = res_19;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#version 100
					
					#ifdef VERTEX
					attribute vec4 _glesVertex;
					attribute vec3 _glesNormal;
					attribute vec4 _glesMultiTexCoord1;
					attribute vec4 _glesMultiTexCoord2;
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform highp mat4 unity_ObjectToWorld;
					uniform highp mat4 unity_WorldToObject;
					uniform highp mat4 unity_MatrixVP;
					uniform highp vec4 unity_LightmapST;
					uniform highp vec4 unity_DynamicLightmapST;
					uniform bvec4 unity_MetaVertexControl;
					varying mediump vec3 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  mediump vec3 tmpvar_1;
					  highp vec4 vertex_2;
					  vertex_2 = _glesVertex;
					  if (unity_MetaVertexControl.x) {
					    vertex_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
					    highp float tmpvar_3;
					    if ((_glesVertex.z > 0.0)) {
					      tmpvar_3 = 0.0001;
					    } else {
					      tmpvar_3 = 0.0;
					    };
					    vertex_2.z = tmpvar_3;
					  };
					  if (unity_MetaVertexControl.y) {
					    vertex_2.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
					    highp float tmpvar_4;
					    if ((vertex_2.z > 0.0)) {
					      tmpvar_4 = 0.0001;
					    } else {
					      tmpvar_4 = 0.0;
					    };
					    vertex_2.z = tmpvar_4;
					  };
					  highp vec4 tmpvar_5;
					  tmpvar_5.w = 1.0;
					  tmpvar_5.xyz = vertex_2.xyz;
					  highp vec3 tmpvar_6;
					  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
					  highp mat3 tmpvar_7;
					  tmpvar_7[0] = unity_WorldToObject[0].xyz;
					  tmpvar_7[1] = unity_WorldToObject[1].xyz;
					  tmpvar_7[2] = unity_WorldToObject[2].xyz;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
					  highp vec3 tmpvar_9;
					  highp vec3 I_10;
					  I_10 = (tmpvar_6 - _WorldSpaceCameraPos);
					  tmpvar_9 = (I_10 - (2.0 * (
					    dot (tmpvar_8, I_10)
					   * tmpvar_8)));
					  tmpvar_1 = tmpvar_9;
					  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
					  xlv_TEXCOORD0 = tmpvar_1;
					  xlv_TEXCOORD1 = tmpvar_8;
					  xlv_TEXCOORD2 = tmpvar_6;
					}
					
					
					#endif
					#ifdef FRAGMENT
					uniform highp vec3 _WorldSpaceCameraPos;
					uniform lowp samplerCube _Cube;
					uniform lowp vec4 _Color;
					uniform lowp vec4 _ReflectColor;
					uniform highp float _FresAmt;
					uniform highp float _RimAmt;
					uniform highp float _RimPwr;
					uniform lowp vec4 _RimColor;
					uniform bvec4 unity_MetaFragmentControl;
					uniform highp float unity_OneOverOutputBoost;
					uniform highp float unity_MaxOutputValue;
					uniform highp float unity_UseLinearSpace;
					varying mediump vec3 xlv_TEXCOORD0;
					varying highp vec3 xlv_TEXCOORD1;
					varying highp vec3 xlv_TEXCOORD2;
					void main ()
					{
					  lowp vec4 tmpvar_1;
					  mediump vec3 tmpvar_2;
					  mediump vec3 tmpvar_3;
					  lowp vec3 tmpvar_4;
					  lowp vec3 viewDir_5;
					  highp vec3 tmpvar_6;
					  highp vec3 tmpvar_7;
					  highp vec3 tmpvar_8;
					  tmpvar_8 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
					  viewDir_5 = tmpvar_8;
					  tmpvar_6 = xlv_TEXCOORD0;
					  tmpvar_7 = viewDir_5;
					  tmpvar_4 = xlv_TEXCOORD1;
					  lowp vec3 tmpvar_9;
					  lowp vec3 tmpvar_10;
					  mediump float fres_11;
					  mediump float rim_12;
					  mediump float tmpvar_13;
					  highp float tmpvar_14;
					  tmpvar_14 = clamp (dot (normalize(tmpvar_7), tmpvar_4), 0.0, 1.0);
					  tmpvar_13 = tmpvar_14;
					  rim_12 = (1.0 - tmpvar_13);
					  fres_11 = rim_12;
					  highp float tmpvar_15;
					  tmpvar_15 = pow (rim_12, _RimAmt);
					  rim_12 = tmpvar_15;
					  highp float tmpvar_16;
					  tmpvar_16 = pow (fres_11, _FresAmt);
					  fres_11 = tmpvar_16;
					  highp float tmpvar_17;
					  tmpvar_17 = clamp ((1.0 - (rim_12 * _RimPwr)), 0.0, 1.0);
					  tmpvar_9 = (_Color.xyz * tmpvar_17);
					  highp vec3 tmpvar_18;
					  tmpvar_18 = ((rim_12 * _RimColor) * _RimPwr).xyz;
					  tmpvar_9 = (tmpvar_9 + tmpvar_18);
					  tmpvar_10 = ((textureCube (_Cube, tmpvar_6).xyz * _ReflectColor.xyz) * fres_11);
					  tmpvar_2 = tmpvar_9;
					  tmpvar_3 = tmpvar_10;
					  mediump vec4 res_19;
					  res_19 = vec4(0.0, 0.0, 0.0, 0.0);
					  if (unity_MetaFragmentControl.x) {
					    mediump vec4 tmpvar_20;
					    tmpvar_20.w = 1.0;
					    tmpvar_20.xyz = tmpvar_2;
					    res_19.w = tmpvar_20.w;
					    highp vec3 tmpvar_21;
					    tmpvar_21 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
					    res_19.xyz = tmpvar_21;
					  };
					  if (unity_MetaFragmentControl.y) {
					    mediump vec3 emission_22;
					    if (bool(unity_UseLinearSpace)) {
					      emission_22 = tmpvar_3;
					    } else {
					      emission_22 = (tmpvar_3 * ((tmpvar_3 * 
					        ((tmpvar_3 * 0.305306) + 0.6821711)
					      ) + 0.01252288));
					    };
					    mediump vec4 tmpvar_23;
					    highp float alpha_24;
					    highp vec3 tmpvar_25;
					    tmpvar_25 = (emission_22 * 0.01030928);
					    alpha_24 = (ceil((
					      max (max (tmpvar_25.x, tmpvar_25.y), max (tmpvar_25.z, 0.02))
					     * 255.0)) / 255.0);
					    highp float tmpvar_26;
					    tmpvar_26 = max (alpha_24, 0.02);
					    alpha_24 = tmpvar_26;
					    highp vec4 tmpvar_27;
					    tmpvar_27.xyz = (tmpvar_25 / tmpvar_26);
					    tmpvar_27.w = tmpvar_26;
					    tmpvar_23 = tmpvar_27;
					    res_19 = tmpvar_23;
					  };
					  tmpvar_1 = res_19;
					  gl_FragData[0] = tmpvar_1;
					}
					
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	bvec4 unity_MetaVertexControl;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(0.0<in_POSITION0.z);
					#else
					    u_xlatb0 = 0.0<in_POSITION0.z;
					#endif
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb9 = 0.0<u_xlat0.z;
					#endif
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-005 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat9 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-u_xlat2.xyz);
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	float _FresAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform 	bvec4 unity_MetaFragmentControl;
					uniform 	float unity_OneOverOutputBoost;
					uniform 	float unity_MaxOutputValue;
					uniform 	float unity_UseLinearSpace;
					uniform lowp samplerCube _Cube;
					in mediump vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = log2(u_xlat16_1.x);
					    u_xlat0.xy = u_xlat16_0.xx * vec2(_RimAmt, _FresAmt);
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat16_1.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xzw = _Color.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xzw = log2(u_xlat0.xzw);
					    u_xlat2.x = unity_OneOverOutputBoost;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat2.xxx;
					    u_xlat0.xzw = exp2(u_xlat0.xzw);
					    u_xlat0.xzw = min(u_xlat0.xzw, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat16_1.xyz = (unity_MetaFragmentControl.x) ? u_xlat0.xzw : vec3(0.0, 0.0, 0.0);
					    u_xlat10_0.xzw = texture(_Cube, vs_TEXCOORD0.xyz).xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xzw * _ReflectColor.xyz;
					    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace));
					#else
					    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
					#endif
					    u_xlat16_3.xyz = (bool(u_xlatb12)) ? u_xlat16_3.xyz : u_xlat0.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(0.010309278, 0.010309278, 0.010309278);
					    u_xlat16_12 = max(u_xlat16_0.y, u_xlat16_0.x);
					    u_xlat16_2 = max(u_xlat16_0.z, 0.0199999996);
					    u_xlat16_12 = max(u_xlat16_12, u_xlat16_2);
					    u_xlat12 = u_xlat16_12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat2.w = u_xlat12 * 0.00392156886;
					    u_xlat2.xyz = u_xlat16_0.xyz / u_xlat2.www;
					    u_xlat16_1.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
					    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat2 : u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	bvec4 unity_MetaVertexControl;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(0.0<in_POSITION0.z);
					#else
					    u_xlatb0 = 0.0<in_POSITION0.z;
					#endif
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb9 = 0.0<u_xlat0.z;
					#endif
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-005 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat9 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-u_xlat2.xyz);
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	float _FresAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform 	bvec4 unity_MetaFragmentControl;
					uniform 	float unity_OneOverOutputBoost;
					uniform 	float unity_MaxOutputValue;
					uniform 	float unity_UseLinearSpace;
					uniform lowp samplerCube _Cube;
					in mediump vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = log2(u_xlat16_1.x);
					    u_xlat0.xy = u_xlat16_0.xx * vec2(_RimAmt, _FresAmt);
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat16_1.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xzw = _Color.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xzw = log2(u_xlat0.xzw);
					    u_xlat2.x = unity_OneOverOutputBoost;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat2.xxx;
					    u_xlat0.xzw = exp2(u_xlat0.xzw);
					    u_xlat0.xzw = min(u_xlat0.xzw, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat16_1.xyz = (unity_MetaFragmentControl.x) ? u_xlat0.xzw : vec3(0.0, 0.0, 0.0);
					    u_xlat10_0.xzw = texture(_Cube, vs_TEXCOORD0.xyz).xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xzw * _ReflectColor.xyz;
					    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace));
					#else
					    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
					#endif
					    u_xlat16_3.xyz = (bool(u_xlatb12)) ? u_xlat16_3.xyz : u_xlat0.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(0.010309278, 0.010309278, 0.010309278);
					    u_xlat16_12 = max(u_xlat16_0.y, u_xlat16_0.x);
					    u_xlat16_2 = max(u_xlat16_0.z, 0.0199999996);
					    u_xlat16_12 = max(u_xlat16_12, u_xlat16_2);
					    u_xlat12 = u_xlat16_12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat2.w = u_xlat12 * 0.00392156886;
					    u_xlat2.xyz = u_xlat16_0.xyz / u_xlat2.www;
					    u_xlat16_1.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
					    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat2 : u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 unity_DynamicLightmapST;
					uniform 	bvec4 unity_MetaVertexControl;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					in highp vec4 in_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(0.0<in_POSITION0.z);
					#else
					    u_xlatb0 = 0.0<in_POSITION0.z;
					#endif
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-005 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb9 = 0.0<u_xlat0.z;
					#endif
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-005 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat9 = dot((-u_xlat2.xyz), u_xlat0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat9)) + (-u_xlat2.xyz);
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _ReflectColor;
					uniform 	float _FresAmt;
					uniform 	float _RimAmt;
					uniform 	float _RimPwr;
					uniform 	mediump vec4 _RimColor;
					uniform 	bvec4 unity_MetaFragmentControl;
					uniform 	float unity_OneOverOutputBoost;
					uniform 	float unity_MaxOutputValue;
					uniform 	float unity_UseLinearSpace;
					uniform lowp samplerCube _Cube;
					in mediump vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = log2(u_xlat16_1.x);
					    u_xlat0.xy = u_xlat16_0.xx * vec2(_RimAmt, _FresAmt);
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat16_1.xyz = u_xlat0.xxx * _RimColor.xyz;
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(vec3(_RimPwr, _RimPwr, _RimPwr));
					    u_xlat0.x = (-u_xlat0.x) * _RimPwr + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xzw = _Color.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xzw = log2(u_xlat0.xzw);
					    u_xlat2.x = unity_OneOverOutputBoost;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat2.xxx;
					    u_xlat0.xzw = exp2(u_xlat0.xzw);
					    u_xlat0.xzw = min(u_xlat0.xzw, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat16_1.xyz = (unity_MetaFragmentControl.x) ? u_xlat0.xzw : vec3(0.0, 0.0, 0.0);
					    u_xlat10_0.xzw = texture(_Cube, vs_TEXCOORD0.xyz).xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xzw * _ReflectColor.xyz;
					    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace));
					#else
					    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
					#endif
					    u_xlat16_3.xyz = (bool(u_xlatb12)) ? u_xlat16_3.xyz : u_xlat0.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(0.010309278, 0.010309278, 0.010309278);
					    u_xlat16_12 = max(u_xlat16_0.y, u_xlat16_0.x);
					    u_xlat16_2 = max(u_xlat16_0.z, 0.0199999996);
					    u_xlat16_12 = max(u_xlat16_12, u_xlat16_2);
					    u_xlat12 = u_xlat16_12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat2.w = u_xlat12 * 0.00392156886;
					    u_xlat2.xyz = u_xlat16_0.xyz / u_xlat2.www;
					    u_xlat16_1.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
					    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat2 : u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan hw_tier00 " {
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 299
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %13 %32 %90 %169 %180 %265 %287 %290 
					                                                      OpDecorate %13 Location 13 
					                                                      OpDecorate %32 Location 32 
					                                                      OpDecorate %38 ArrayStride 38 
					                                                      OpDecorate %39 ArrayStride 39 
					                                                      OpDecorate %40 ArrayStride 40 
					                                                      OpMemberDecorate %42 0 Offset 42 
					                                                      OpMemberDecorate %42 1 Offset 42 
					                                                      OpMemberDecorate %42 2 Offset 42 
					                                                      OpMemberDecorate %42 3 Offset 42 
					                                                      OpMemberDecorate %42 4 Offset 42 
					                                                      OpMemberDecorate %42 5 Offset 42 
					                                                      OpMemberDecorate %42 6 Offset 42 
					                                                      OpDecorate %42 Block 
					                                                      OpDecorate %44 DescriptorSet 44 
					                                                      OpDecorate %44 Binding 44 
					                                                      OpDecorate %90 Location 90 
					                                                      OpMemberDecorate %167 0 BuiltIn 167 
					                                                      OpMemberDecorate %167 1 BuiltIn 167 
					                                                      OpMemberDecorate %167 2 BuiltIn 167 
					                                                      OpDecorate %167 Block 
					                                                      OpDecorate %180 Location 180 
					                                                      OpDecorate %265 Location 265 
					                                                      OpDecorate %287 Location 287 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %290 Location 290 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeBool 
					                                               %7 = OpTypePointer Private %6 
					                                 Private bool* %8 = OpVariable Private 
					                                               %9 = OpTypeFloat 32 
					                                          f32 %10 = OpConstant 3.674022E-40 
					                                              %11 = OpTypeVector %9 4 
					                                              %12 = OpTypePointer Input %11 
					                                 Input f32_4* %13 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 2 
					                                              %16 = OpTypePointer Input %9 
					                                              %20 = OpTypePointer Private %11 
					                               Private f32_4* %21 = OpVariable Private 
					                                              %22 = OpTypePointer Function %9 
					                                          f32 %27 = OpConstant 3.674022E-40 
					                                              %30 = OpTypePointer Private %9 
					                                 Input f32_4* %32 = OpVariable Input 
					                                              %33 = OpTypeVector %9 2 
					                                              %36 = OpTypeVector %9 3 
					                                          u32 %37 = OpConstant 4 
					                                              %38 = OpTypeArray %11 %37 
					                                              %39 = OpTypeArray %11 %37 
					                                              %40 = OpTypeArray %11 %37 
					                                              %41 = OpTypeVector %14 4 
					                                              %42 = OpTypeStruct %36 %38 %39 %40 %11 %11 %41 
					                                              %43 = OpTypePointer Uniform %42 
					Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4;}* %44 = OpVariable Uniform 
					                                              %45 = OpTypeInt 32 1 
					                                          i32 %46 = OpConstant 4 
					                                              %47 = OpTypePointer Uniform %11 
					                                              %58 = OpTypePointer Function %36 
					                                          i32 %60 = OpConstant 6 
					                                              %61 = OpTypeVector %6 4 
					                                              %62 = OpTypePointer Uniform %41 
					                                          u32 %66 = OpConstant 0 
					                                Private bool* %78 = OpVariable Private 
					                               Private f32_4* %82 = OpVariable Private 
					                                 Input f32_4* %90 = OpVariable Input 
					                                          i32 %93 = OpConstant 5 
					                                         i32 %121 = OpConstant 1 
					                                         i32 %125 = OpConstant 0 
					                                         i32 %133 = OpConstant 2 
					                                         i32 %142 = OpConstant 3 
					                                         u32 %165 = OpConstant 1 
					                                             %166 = OpTypeArray %9 %165 
					                                             %167 = OpTypeStruct %11 %9 %166 
					                                             %168 = OpTypePointer Output %167 
					        Output struct {f32_4; f32; f32[1];}* %169 = OpVariable Output 
					                                             %177 = OpTypePointer Output %11 
					                                             %179 = OpTypePointer Input %36 
					                                Input f32_3* %180 = OpVariable Input 
					                                Private f32* %199 = OpVariable Private 
					                                             %255 = OpTypePointer Private %36 
					                              Private f32_3* %256 = OpVariable Private 
					                                             %260 = OpTypePointer Uniform %36 
					                                             %264 = OpTypePointer Output %36 
					                               Output f32_3* %265 = OpVariable Output 
					                               Output f32_3* %287 = OpVariable Output 
					                               Output f32_3* %290 = OpVariable Output 
					                                             %293 = OpTypePointer Output %9 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                Function f32* %23 = OpVariable Function 
					                              Function f32_3* %59 = OpVariable Function 
					                                Function f32* %83 = OpVariable Function 
					                             Function f32_3* %104 = OpVariable Function 
					                                   Input f32* %17 = OpAccessChain %13 %15 
					                                          f32 %18 = OpLoad %17 
					                                         bool %19 = OpFOrdLessThan %10 %18 
					                                                      OpStore %8 %19 
					                                         bool %24 = OpLoad %8 
					                                                      OpSelectionMerge %26 None 
					                                                      OpBranchConditional %24 %25 %28 
					                                              %25 = OpLabel 
					                                                      OpStore %23 %27 
					                                                      OpBranch %26 
					                                              %28 = OpLabel 
					                                                      OpStore %23 %10 
					                                                      OpBranch %26 
					                                              %26 = OpLabel 
					                                          f32 %29 = OpLoad %23 
					                                 Private f32* %31 = OpAccessChain %21 %15 
					                                                      OpStore %31 %29 
					                                        f32_4 %34 = OpLoad %32 
					                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
					                               Uniform f32_4* %48 = OpAccessChain %44 %46 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
					                                        f32_2 %51 = OpFMul %35 %50 
					                               Uniform f32_4* %52 = OpAccessChain %44 %46 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_2 %54 = OpVectorShuffle %53 %53 2 3 
					                                        f32_2 %55 = OpFAdd %51 %54 
					                                        f32_4 %56 = OpLoad %21 
					                                        f32_4 %57 = OpVectorShuffle %56 %55 4 5 2 3 
					                                                      OpStore %21 %57 
					                               Uniform u32_4* %63 = OpAccessChain %44 %60 
					                                        u32_4 %64 = OpLoad %63 
					                                          u32 %65 = OpCompositeExtract %64 0 
					                                         bool %67 = OpINotEqual %65 %66 
					                                                      OpSelectionMerge %69 None 
					                                                      OpBranchConditional %67 %68 %72 
					                                              %68 = OpLabel 
					                                        f32_4 %70 = OpLoad %21 
					                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
					                                                      OpStore %59 %71 
					                                                      OpBranch %69 
					                                              %72 = OpLabel 
					                                        f32_4 %73 = OpLoad %13 
					                                        f32_3 %74 = OpVectorShuffle %73 %73 0 1 2 
					                                                      OpStore %59 %74 
					                                                      OpBranch %69 
					                                              %69 = OpLabel 
					                                        f32_3 %75 = OpLoad %59 
					                                        f32_4 %76 = OpLoad %21 
					                                        f32_4 %77 = OpVectorShuffle %76 %75 4 5 6 3 
					                                                      OpStore %21 %77 
					                                 Private f32* %79 = OpAccessChain %21 %15 
					                                          f32 %80 = OpLoad %79 
					                                         bool %81 = OpFOrdLessThan %10 %80 
					                                                      OpStore %78 %81 
					                                         bool %84 = OpLoad %78 
					                                                      OpSelectionMerge %86 None 
					                                                      OpBranchConditional %84 %85 %87 
					                                              %85 = OpLabel 
					                                                      OpStore %83 %27 
					                                                      OpBranch %86 
					                                              %87 = OpLabel 
					                                                      OpStore %83 %10 
					                                                      OpBranch %86 
					                                              %86 = OpLabel 
					                                          f32 %88 = OpLoad %83 
					                                 Private f32* %89 = OpAccessChain %82 %15 
					                                                      OpStore %89 %88 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_2 %92 = OpVectorShuffle %91 %91 0 1 
					                               Uniform f32_4* %94 = OpAccessChain %44 %93 
					                                        f32_4 %95 = OpLoad %94 
					                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
					                                        f32_2 %97 = OpFMul %92 %96 
					                               Uniform f32_4* %98 = OpAccessChain %44 %93 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 2 3 
					                                       f32_2 %101 = OpFAdd %97 %100 
					                                       f32_4 %102 = OpLoad %82 
					                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
					                                                      OpStore %82 %103 
					                              Uniform u32_4* %105 = OpAccessChain %44 %60 
					                                       u32_4 %106 = OpLoad %105 
					                                         u32 %107 = OpCompositeExtract %106 1 
					                                        bool %108 = OpINotEqual %107 %66 
					                                                      OpSelectionMerge %110 None 
					                                                      OpBranchConditional %108 %109 %113 
					                                             %109 = OpLabel 
					                                       f32_4 %111 = OpLoad %82 
					                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
					                                                      OpStore %104 %112 
					                                                      OpBranch %110 
					                                             %113 = OpLabel 
					                                       f32_4 %114 = OpLoad %21 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                                      OpStore %104 %115 
					                                                      OpBranch %110 
					                                             %110 = OpLabel 
					                                       f32_3 %116 = OpLoad %104 
					                                       f32_4 %117 = OpLoad %21 
					                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
					                                                      OpStore %21 %118 
					                                       f32_4 %119 = OpLoad %21 
					                                       f32_4 %120 = OpVectorShuffle %119 %119 1 1 1 1 
					                              Uniform f32_4* %122 = OpAccessChain %44 %121 %121 
					                                       f32_4 %123 = OpLoad %122 
					                                       f32_4 %124 = OpFMul %120 %123 
					                                                      OpStore %82 %124 
					                              Uniform f32_4* %126 = OpAccessChain %44 %121 %125 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_4 %128 = OpLoad %21 
					                                       f32_4 %129 = OpVectorShuffle %128 %128 0 0 0 0 
					                                       f32_4 %130 = OpFMul %127 %129 
					                                       f32_4 %131 = OpLoad %82 
					                                       f32_4 %132 = OpFAdd %130 %131 
					                                                      OpStore %82 %132 
					                              Uniform f32_4* %134 = OpAccessChain %44 %121 %133 
					                                       f32_4 %135 = OpLoad %134 
					                                       f32_4 %136 = OpLoad %21 
					                                       f32_4 %137 = OpVectorShuffle %136 %136 2 2 2 2 
					                                       f32_4 %138 = OpFMul %135 %137 
					                                       f32_4 %139 = OpLoad %82 
					                                       f32_4 %140 = OpFAdd %138 %139 
					                                                      OpStore %21 %140 
					                                       f32_4 %141 = OpLoad %21 
					                              Uniform f32_4* %143 = OpAccessChain %44 %121 %142 
					                                       f32_4 %144 = OpLoad %143 
					                                       f32_4 %145 = OpFAdd %141 %144 
					                                                      OpStore %21 %145 
					                                       f32_4 %146 = OpLoad %21 
					                                       f32_4 %147 = OpVectorShuffle %146 %146 1 1 1 1 
					                              Uniform f32_4* %148 = OpAccessChain %44 %142 %121 
					                                       f32_4 %149 = OpLoad %148 
					                                       f32_4 %150 = OpFMul %147 %149 
					                                                      OpStore %82 %150 
					                              Uniform f32_4* %151 = OpAccessChain %44 %142 %125 
					                                       f32_4 %152 = OpLoad %151 
					                                       f32_4 %153 = OpLoad %21 
					                                       f32_4 %154 = OpVectorShuffle %153 %153 0 0 0 0 
					                                       f32_4 %155 = OpFMul %152 %154 
					                                       f32_4 %156 = OpLoad %82 
					                                       f32_4 %157 = OpFAdd %155 %156 
					                                                      OpStore %82 %157 
					                              Uniform f32_4* %158 = OpAccessChain %44 %142 %133 
					                                       f32_4 %159 = OpLoad %158 
					                                       f32_4 %160 = OpLoad %21 
					                                       f32_4 %161 = OpVectorShuffle %160 %160 2 2 2 2 
					                                       f32_4 %162 = OpFMul %159 %161 
					                                       f32_4 %163 = OpLoad %82 
					                                       f32_4 %164 = OpFAdd %162 %163 
					                                                      OpStore %82 %164 
					                              Uniform f32_4* %170 = OpAccessChain %44 %142 %142 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_4 %172 = OpLoad %21 
					                                       f32_4 %173 = OpVectorShuffle %172 %172 3 3 3 3 
					                                       f32_4 %174 = OpFMul %171 %173 
					                                       f32_4 %175 = OpLoad %82 
					                                       f32_4 %176 = OpFAdd %174 %175 
					                               Output f32_4* %178 = OpAccessChain %169 %125 
					                                                      OpStore %178 %176 
					                                       f32_3 %181 = OpLoad %180 
					                              Uniform f32_4* %182 = OpAccessChain %44 %133 %125 
					                                       f32_4 %183 = OpLoad %182 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                         f32 %185 = OpDot %181 %184 
					                                Private f32* %186 = OpAccessChain %21 %66 
					                                                      OpStore %186 %185 
					                                       f32_3 %187 = OpLoad %180 
					                              Uniform f32_4* %188 = OpAccessChain %44 %133 %121 
					                                       f32_4 %189 = OpLoad %188 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                         f32 %191 = OpDot %187 %190 
					                                Private f32* %192 = OpAccessChain %21 %165 
					                                                      OpStore %192 %191 
					                                       f32_3 %193 = OpLoad %180 
					                              Uniform f32_4* %194 = OpAccessChain %44 %133 %133 
					                                       f32_4 %195 = OpLoad %194 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                         f32 %197 = OpDot %193 %196 
					                                Private f32* %198 = OpAccessChain %21 %15 
					                                                      OpStore %198 %197 
					                                       f32_4 %200 = OpLoad %21 
					                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
					                                       f32_4 %202 = OpLoad %21 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
					                                         f32 %204 = OpDot %201 %203 
					                                                      OpStore %199 %204 
					                                         f32 %205 = OpLoad %199 
					                                         f32 %206 = OpExtInst %1 32 %205 
					                                                      OpStore %199 %206 
					                                         f32 %207 = OpLoad %199 
					                                       f32_3 %208 = OpCompositeConstruct %207 %207 %207 
					                                       f32_4 %209 = OpLoad %21 
					                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
					                                       f32_3 %211 = OpFMul %208 %210 
					                                       f32_4 %212 = OpLoad %21 
					                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
					                                                      OpStore %21 %213 
					                                       f32_4 %214 = OpLoad %13 
					                                       f32_3 %215 = OpVectorShuffle %214 %214 1 1 1 
					                              Uniform f32_4* %216 = OpAccessChain %44 %121 %121 
					                                       f32_4 %217 = OpLoad %216 
					                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
					                                       f32_3 %219 = OpFMul %215 %218 
					                                       f32_4 %220 = OpLoad %82 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
					                                                      OpStore %82 %221 
					                              Uniform f32_4* %222 = OpAccessChain %44 %121 %125 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
					                                       f32_4 %225 = OpLoad %13 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 0 0 
					                                       f32_3 %227 = OpFMul %224 %226 
					                                       f32_4 %228 = OpLoad %82 
					                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
					                                       f32_3 %230 = OpFAdd %227 %229 
					                                       f32_4 %231 = OpLoad %82 
					                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
					                                                      OpStore %82 %232 
					                              Uniform f32_4* %233 = OpAccessChain %44 %121 %133 
					                                       f32_4 %234 = OpLoad %233 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
					                                       f32_4 %236 = OpLoad %13 
					                                       f32_3 %237 = OpVectorShuffle %236 %236 2 2 2 
					                                       f32_3 %238 = OpFMul %235 %237 
					                                       f32_4 %239 = OpLoad %82 
					                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
					                                       f32_3 %241 = OpFAdd %238 %240 
					                                       f32_4 %242 = OpLoad %82 
					                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
					                                                      OpStore %82 %243 
					                              Uniform f32_4* %244 = OpAccessChain %44 %121 %142 
					                                       f32_4 %245 = OpLoad %244 
					                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
					                                       f32_4 %247 = OpLoad %13 
					                                       f32_3 %248 = OpVectorShuffle %247 %247 3 3 3 
					                                       f32_3 %249 = OpFMul %246 %248 
					                                       f32_4 %250 = OpLoad %82 
					                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
					                                       f32_3 %252 = OpFAdd %249 %251 
					                                       f32_4 %253 = OpLoad %82 
					                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
					                                                      OpStore %82 %254 
					                                       f32_4 %257 = OpLoad %82 
					                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
					                                       f32_3 %259 = OpFNegate %258 
					                              Uniform f32_3* %261 = OpAccessChain %44 %125 
					                                       f32_3 %262 = OpLoad %261 
					                                       f32_3 %263 = OpFAdd %259 %262 
					                                                      OpStore %256 %263 
					                                       f32_4 %266 = OpLoad %82 
					                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
					                                                      OpStore %265 %267 
					                                       f32_3 %268 = OpLoad %256 
					                                       f32_3 %269 = OpFNegate %268 
					                                       f32_4 %270 = OpLoad %21 
					                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
					                                         f32 %272 = OpDot %269 %271 
					                                                      OpStore %199 %272 
					                                         f32 %273 = OpLoad %199 
					                                         f32 %274 = OpLoad %199 
					                                         f32 %275 = OpFAdd %273 %274 
					                                                      OpStore %199 %275 
					                                       f32_4 %276 = OpLoad %21 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
					                                         f32 %278 = OpLoad %199 
					                                       f32_3 %279 = OpCompositeConstruct %278 %278 %278 
					                                       f32_3 %280 = OpFNegate %279 
					                                       f32_3 %281 = OpFMul %277 %280 
					                                       f32_3 %282 = OpLoad %256 
					                                       f32_3 %283 = OpFNegate %282 
					                                       f32_3 %284 = OpFAdd %281 %283 
					                                       f32_4 %285 = OpLoad %82 
					                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
					                                                      OpStore %82 %286 
					                                       f32_4 %288 = OpLoad %21 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
					                                                      OpStore %287 %289 
					                                       f32_4 %291 = OpLoad %82 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                                      OpStore %290 %292 
					                                 Output f32* %294 = OpAccessChain %169 %125 %165 
					                                         f32 %295 = OpLoad %294 
					                                         f32 %296 = OpFNegate %295 
					                                 Output f32* %297 = OpAccessChain %169 %125 %165 
					                                                      OpStore %297 %296 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 323
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %46 %207 %309 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %12 Location 12 
					                                                      OpMemberDecorate %17 0 Offset 17 
					                                                      OpMemberDecorate %17 1 RelaxedPrecision 
					                                                      OpMemberDecorate %17 1 Offset 17 
					                                                      OpMemberDecorate %17 2 RelaxedPrecision 
					                                                      OpMemberDecorate %17 2 Offset 17 
					                                                      OpMemberDecorate %17 3 Offset 17 
					                                                      OpMemberDecorate %17 4 Offset 17 
					                                                      OpMemberDecorate %17 5 Offset 17 
					                                                      OpMemberDecorate %17 6 RelaxedPrecision 
					                                                      OpMemberDecorate %17 6 Offset 17 
					                                                      OpMemberDecorate %17 7 Offset 17 
					                                                      OpMemberDecorate %17 8 Offset 17 
					                                                      OpMemberDecorate %17 9 Offset 17 
					                                                      OpMemberDecorate %17 10 Offset 17 
					                                                      OpDecorate %17 Block 
					                                                      OpDecorate %19 DescriptorSet 19 
					                                                      OpDecorate %19 Binding 19 
					                                                      OpDecorate %46 Location 46 
					                                                      OpDecorate %57 RelaxedPrecision 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %111 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %201 RelaxedPrecision 
					                                                      OpDecorate %205 RelaxedPrecision 
					                                                      OpDecorate %205 DescriptorSet 205 
					                                                      OpDecorate %205 Binding 205 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %207 Location 207 
					                                                      OpDecorate %208 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %256 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %268 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %277 RelaxedPrecision 
					                                                      OpDecorate %278 RelaxedPrecision 
					                                                      OpDecorate %279 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %306 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %309 Location 309 
					                                                      OpDecorate %320 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                              %15 = OpTypeInt 32 0 
					                                              %16 = OpTypeVector %15 4 
					                                              %17 = OpTypeStruct %10 %7 %7 %6 %6 %6 %7 %16 %6 %6 %6 
					                                              %18 = OpTypePointer Uniform %17 
					Uniform struct {f32_3; f32_4; f32_4; f32; f32; f32; f32_4; u32_4; f32; f32; f32;}* %19 = OpVariable Uniform 
					                                              %20 = OpTypeInt 32 1 
					                                          i32 %21 = OpConstant 0 
					                                              %22 = OpTypePointer Uniform %10 
					                                              %28 = OpTypePointer Private %6 
					                                 Private f32* %29 = OpVariable Private 
					                                 Input f32_3* %46 = OpVariable Input 
					                                          u32 %49 = OpConstant 0 
					                                          f32 %53 = OpConstant 3.674022E-40 
					                                          f32 %54 = OpConstant 3.674022E-40 
					                               Private f32_4* %57 = OpVariable Private 
					                                              %63 = OpTypePointer Private %10 
					                               Private f32_3* %64 = OpVariable Private 
					                                              %69 = OpTypeVector %6 2 
					                                          i32 %72 = OpConstant 4 
					                                              %73 = OpTypePointer Uniform %6 
					                                          i32 %76 = OpConstant 3 
					                                          i32 %90 = OpConstant 6 
					                                              %91 = OpTypePointer Uniform %7 
					                               Private f32_4* %98 = OpVariable Private 
					                                         i32 %101 = OpConstant 5 
					                                         i32 %128 = OpConstant 1 
					                                         i32 %145 = OpConstant 8 
					                                         i32 %167 = OpConstant 9 
					                                             %182 = OpTypePointer Function %10 
					                                         i32 %184 = OpConstant 7 
					                                             %185 = OpTypeBool 
					                                             %186 = OpTypeVector %185 4 
					                                             %187 = OpTypePointer Uniform %16 
					                                       f32_3 %197 = OpConstantComposite %53 %53 %53 
					                              Private f32_4* %201 = OpVariable Private 
					                                             %202 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %203 = OpTypeSampledImage %202 
					                                             %204 = OpTypePointer UniformConstant %203 
					UniformConstant read_only TextureCubeSampled* %205 = OpVariable UniformConstant 
					                                Input f32_3* %207 = OpVariable Input 
					                              Private f32_3* %213 = OpVariable Private 
					                                         i32 %216 = OpConstant 2 
					                                         f32 %226 = OpConstant 3.674022E-40 
					                                       f32_3 %227 = OpConstantComposite %226 %226 %226 
					                                         f32 %229 = OpConstant 3.674022E-40 
					                                       f32_3 %230 = OpConstantComposite %229 %229 %229 
					                                         f32 %235 = OpConstant 3.674022E-40 
					                                       f32_3 %236 = OpConstantComposite %235 %235 %235 
					                                             %243 = OpTypePointer Private %185 
					                               Private bool* %244 = OpVariable Private 
					                                       f32_4 %245 = OpConstantComposite %53 %53 %53 %53 
					                                         i32 %246 = OpConstant 10 
					                                         f32 %262 = OpConstant 3.674022E-40 
					                                       f32_3 %263 = OpConstantComposite %262 %262 %262 
					                                Private f32* %265 = OpVariable Private 
					                                         u32 %266 = OpConstant 1 
					                                Private f32* %272 = OpVariable Private 
					                                         u32 %273 = OpConstant 2 
					                                         f32 %276 = OpConstant 3.674022E-40 
					                                         f32 %282 = OpConstant 3.674022E-40 
					                                         f32 %287 = OpConstant 3.674022E-40 
					                                         u32 %289 = OpConstant 3 
					                                             %297 = OpTypePointer Function %6 
					                                             %308 = OpTypePointer Output %7 
					                               Output f32_4* %309 = OpVariable Output 
					                                             %310 = OpTypePointer Function %7 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %183 = OpVariable Function 
					                             Function f32_3* %252 = OpVariable Function 
					                               Function f32* %298 = OpVariable Function 
					                             Function f32_4* %311 = OpVariable Function 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_3 %14 = OpFNegate %13 
					                               Uniform f32_3* %23 = OpAccessChain %19 %21 
					                                        f32_3 %24 = OpLoad %23 
					                                        f32_3 %25 = OpFAdd %14 %24 
					                                        f32_4 %26 = OpLoad %9 
					                                        f32_4 %27 = OpVectorShuffle %26 %25 4 5 6 3 
					                                                      OpStore %9 %27 
					                                        f32_4 %30 = OpLoad %9 
					                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
					                                        f32_4 %32 = OpLoad %9 
					                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
					                                          f32 %34 = OpDot %31 %33 
					                                                      OpStore %29 %34 
					                                          f32 %35 = OpLoad %29 
					                                          f32 %36 = OpExtInst %1 32 %35 
					                                                      OpStore %29 %36 
					                                          f32 %37 = OpLoad %29 
					                                        f32_3 %38 = OpCompositeConstruct %37 %37 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
					                                        f32_3 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpVectorShuffle %42 %41 4 5 6 3 
					                                                      OpStore %9 %43 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %47 = OpLoad %46 
					                                          f32 %48 = OpDot %45 %47 
					                                 Private f32* %50 = OpAccessChain %9 %49 
					                                                      OpStore %50 %48 
					                                 Private f32* %51 = OpAccessChain %9 %49 
					                                          f32 %52 = OpLoad %51 
					                                          f32 %55 = OpExtInst %1 43 %52 %53 %54 
					                                 Private f32* %56 = OpAccessChain %9 %49 
					                                                      OpStore %56 %55 
					                                 Private f32* %58 = OpAccessChain %9 %49 
					                                          f32 %59 = OpLoad %58 
					                                          f32 %60 = OpFNegate %59 
					                                          f32 %61 = OpFAdd %60 %54 
					                                 Private f32* %62 = OpAccessChain %57 %49 
					                                                      OpStore %62 %61 
					                                 Private f32* %65 = OpAccessChain %57 %49 
					                                          f32 %66 = OpLoad %65 
					                                          f32 %67 = OpExtInst %1 30 %66 
					                                 Private f32* %68 = OpAccessChain %64 %49 
					                                                      OpStore %68 %67 
					                                        f32_3 %70 = OpLoad %64 
					                                        f32_2 %71 = OpVectorShuffle %70 %70 0 0 
					                                 Uniform f32* %74 = OpAccessChain %19 %72 
					                                          f32 %75 = OpLoad %74 
					                                 Uniform f32* %77 = OpAccessChain %19 %76 
					                                          f32 %78 = OpLoad %77 
					                                        f32_2 %79 = OpCompositeConstruct %75 %78 
					                                        f32_2 %80 = OpFMul %71 %79 
					                                        f32_4 %81 = OpLoad %9 
					                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 2 3 
					                                                      OpStore %9 %82 
					                                        f32_4 %83 = OpLoad %9 
					                                        f32_2 %84 = OpVectorShuffle %83 %83 0 1 
					                                        f32_2 %85 = OpExtInst %1 29 %84 
					                                        f32_4 %86 = OpLoad %9 
					                                        f32_4 %87 = OpVectorShuffle %86 %85 4 5 2 3 
					                                                      OpStore %9 %87 
					                                        f32_4 %88 = OpLoad %9 
					                                        f32_3 %89 = OpVectorShuffle %88 %88 0 0 0 
					                               Uniform f32_4* %92 = OpAccessChain %19 %90 
					                                        f32_4 %93 = OpLoad %92 
					                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
					                                        f32_3 %95 = OpFMul %89 %94 
					                                        f32_4 %96 = OpLoad %57 
					                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
					                                                      OpStore %57 %97 
					                                        f32_4 %99 = OpLoad %57 
					                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
					                                Uniform f32* %102 = OpAccessChain %19 %101 
					                                         f32 %103 = OpLoad %102 
					                                Uniform f32* %104 = OpAccessChain %19 %101 
					                                         f32 %105 = OpLoad %104 
					                                Uniform f32* %106 = OpAccessChain %19 %101 
					                                         f32 %107 = OpLoad %106 
					                                       f32_3 %108 = OpCompositeConstruct %103 %105 %107 
					                                         f32 %109 = OpCompositeExtract %108 0 
					                                         f32 %110 = OpCompositeExtract %108 1 
					                                         f32 %111 = OpCompositeExtract %108 2 
					                                       f32_3 %112 = OpCompositeConstruct %109 %110 %111 
					                                       f32_3 %113 = OpFMul %100 %112 
					                                       f32_4 %114 = OpLoad %98 
					                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
					                                                      OpStore %98 %115 
					                                Private f32* %116 = OpAccessChain %9 %49 
					                                         f32 %117 = OpLoad %116 
					                                         f32 %118 = OpFNegate %117 
					                                Uniform f32* %119 = OpAccessChain %19 %101 
					                                         f32 %120 = OpLoad %119 
					                                         f32 %121 = OpFMul %118 %120 
					                                         f32 %122 = OpFAdd %121 %54 
					                                Private f32* %123 = OpAccessChain %9 %49 
					                                                      OpStore %123 %122 
					                                Private f32* %124 = OpAccessChain %9 %49 
					                                         f32 %125 = OpLoad %124 
					                                         f32 %126 = OpExtInst %1 43 %125 %53 %54 
					                                Private f32* %127 = OpAccessChain %9 %49 
					                                                      OpStore %127 %126 
					                              Uniform f32_4* %129 = OpAccessChain %19 %128 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                       f32_4 %132 = OpLoad %9 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 0 0 
					                                       f32_3 %134 = OpFMul %131 %133 
					                                       f32_4 %135 = OpLoad %98 
					                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
					                                       f32_3 %137 = OpFAdd %134 %136 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_4 %139 = OpVectorShuffle %138 %137 4 1 5 6 
					                                                      OpStore %9 %139 
					                                       f32_4 %140 = OpLoad %9 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 2 3 
					                                       f32_3 %142 = OpExtInst %1 30 %141 
					                                       f32_4 %143 = OpLoad %9 
					                                       f32_4 %144 = OpVectorShuffle %143 %142 4 1 5 6 
					                                                      OpStore %9 %144 
					                                Uniform f32* %146 = OpAccessChain %19 %145 
					                                         f32 %147 = OpLoad %146 
					                                Private f32* %148 = OpAccessChain %98 %49 
					                                                      OpStore %148 %147 
					                                Private f32* %149 = OpAccessChain %98 %49 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpExtInst %1 43 %150 %53 %54 
					                                Private f32* %152 = OpAccessChain %98 %49 
					                                                      OpStore %152 %151 
					                                       f32_4 %153 = OpLoad %9 
					                                       f32_3 %154 = OpVectorShuffle %153 %153 0 2 3 
					                                       f32_4 %155 = OpLoad %98 
					                                       f32_3 %156 = OpVectorShuffle %155 %155 0 0 0 
					                                       f32_3 %157 = OpFMul %154 %156 
					                                       f32_4 %158 = OpLoad %9 
					                                       f32_4 %159 = OpVectorShuffle %158 %157 4 1 5 6 
					                                                      OpStore %9 %159 
					                                       f32_4 %160 = OpLoad %9 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 0 2 3 
					                                       f32_3 %162 = OpExtInst %1 29 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 6 
					                                                      OpStore %9 %164 
					                                       f32_4 %165 = OpLoad %9 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 2 3 
					                                Uniform f32* %168 = OpAccessChain %19 %167 
					                                         f32 %169 = OpLoad %168 
					                                Uniform f32* %170 = OpAccessChain %19 %167 
					                                         f32 %171 = OpLoad %170 
					                                Uniform f32* %172 = OpAccessChain %19 %167 
					                                         f32 %173 = OpLoad %172 
					                                       f32_3 %174 = OpCompositeConstruct %169 %171 %173 
					                                         f32 %175 = OpCompositeExtract %174 0 
					                                         f32 %176 = OpCompositeExtract %174 1 
					                                         f32 %177 = OpCompositeExtract %174 2 
					                                       f32_3 %178 = OpCompositeConstruct %175 %176 %177 
					                                       f32_3 %179 = OpExtInst %1 37 %166 %178 
					                                       f32_4 %180 = OpLoad %9 
					                                       f32_4 %181 = OpVectorShuffle %180 %179 4 1 5 6 
					                                                      OpStore %9 %181 
					                              Uniform u32_4* %188 = OpAccessChain %19 %184 
					                                       u32_4 %189 = OpLoad %188 
					                                         u32 %190 = OpCompositeExtract %189 0 
					                                        bool %191 = OpINotEqual %190 %49 
					                                                      OpSelectionMerge %193 None 
					                                                      OpBranchConditional %191 %192 %196 
					                                             %192 = OpLabel 
					                                       f32_4 %194 = OpLoad %9 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 2 3 
					                                                      OpStore %183 %195 
					                                                      OpBranch %193 
					                                             %196 = OpLabel 
					                                                      OpStore %183 %197 
					                                                      OpBranch %193 
					                                             %193 = OpLabel 
					                                       f32_3 %198 = OpLoad %183 
					                                       f32_4 %199 = OpLoad %57 
					                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
					                                                      OpStore %57 %200 
					                read_only TextureCubeSampled %206 = OpLoad %205 
					                                       f32_3 %208 = OpLoad %207 
					                                       f32_4 %209 = OpImageSampleImplicitLod %206 %208 
					                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
					                                       f32_4 %211 = OpLoad %201 
					                                       f32_4 %212 = OpVectorShuffle %211 %210 4 1 5 6 
					                                                      OpStore %201 %212 
					                                       f32_4 %214 = OpLoad %201 
					                                       f32_3 %215 = OpVectorShuffle %214 %214 0 2 3 
					                              Uniform f32_4* %217 = OpAccessChain %19 %216 
					                                       f32_4 %218 = OpLoad %217 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                       f32_3 %220 = OpFMul %215 %219 
					                                                      OpStore %213 %220 
					                                       f32_4 %221 = OpLoad %9 
					                                       f32_3 %222 = OpVectorShuffle %221 %221 1 1 1 
					                                       f32_3 %223 = OpLoad %213 
					                                       f32_3 %224 = OpFMul %222 %223 
					                                                      OpStore %213 %224 
					                                       f32_3 %225 = OpLoad %213 
					                                       f32_3 %228 = OpFMul %225 %227 
					                                       f32_3 %231 = OpFAdd %228 %230 
					                                                      OpStore %64 %231 
					                                       f32_3 %232 = OpLoad %213 
					                                       f32_3 %233 = OpLoad %64 
					                                       f32_3 %234 = OpFMul %232 %233 
					                                       f32_3 %237 = OpFAdd %234 %236 
					                                                      OpStore %64 %237 
					                                       f32_3 %238 = OpLoad %64 
					                                       f32_3 %239 = OpLoad %213 
					                                       f32_3 %240 = OpFMul %238 %239 
					                                       f32_4 %241 = OpLoad %9 
					                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
					                                                      OpStore %9 %242 
					                                Uniform f32* %247 = OpAccessChain %19 %246 
					                                         f32 %248 = OpLoad %247 
					                                       f32_4 %249 = OpCompositeConstruct %248 %248 %248 %248 
					                                      bool_4 %250 = OpFOrdNotEqual %245 %249 
					                                        bool %251 = OpAny %250 
					                                                      OpStore %244 %251 
					                                        bool %253 = OpLoad %244 
					                                                      OpSelectionMerge %255 None 
					                                                      OpBranchConditional %253 %254 %257 
					                                             %254 = OpLabel 
					                                       f32_3 %256 = OpLoad %213 
					                                                      OpStore %252 %256 
					                                                      OpBranch %255 
					                                             %257 = OpLabel 
					                                       f32_4 %258 = OpLoad %9 
					                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
					                                                      OpStore %252 %259 
					                                                      OpBranch %255 
					                                             %255 = OpLabel 
					                                       f32_3 %260 = OpLoad %252 
					                                                      OpStore %213 %260 
					                                       f32_3 %261 = OpLoad %213 
					                                       f32_3 %264 = OpFMul %261 %263 
					                                                      OpStore %64 %264 
					                                Private f32* %267 = OpAccessChain %64 %266 
					                                         f32 %268 = OpLoad %267 
					                                Private f32* %269 = OpAccessChain %64 %49 
					                                         f32 %270 = OpLoad %269 
					                                         f32 %271 = OpExtInst %1 40 %268 %270 
					                                                      OpStore %265 %271 
					                                Private f32* %274 = OpAccessChain %64 %273 
					                                         f32 %275 = OpLoad %274 
					                                         f32 %277 = OpExtInst %1 40 %275 %276 
					                                                      OpStore %272 %277 
					                                         f32 %278 = OpLoad %265 
					                                         f32 %279 = OpLoad %272 
					                                         f32 %280 = OpExtInst %1 40 %278 %279 
					                                                      OpStore %265 %280 
					                                         f32 %281 = OpLoad %265 
					                                         f32 %283 = OpFMul %281 %282 
					                                                      OpStore %29 %283 
					                                         f32 %284 = OpLoad %29 
					                                         f32 %285 = OpExtInst %1 9 %284 
					                                                      OpStore %29 %285 
					                                         f32 %286 = OpLoad %29 
					                                         f32 %288 = OpFMul %286 %287 
					                                Private f32* %290 = OpAccessChain %98 %289 
					                                                      OpStore %290 %288 
					                                       f32_3 %291 = OpLoad %64 
					                                       f32_4 %292 = OpLoad %98 
					                                       f32_3 %293 = OpVectorShuffle %292 %292 3 3 3 
					                                       f32_3 %294 = OpFDiv %291 %293 
					                                       f32_4 %295 = OpLoad %98 
					                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
					                                                      OpStore %98 %296 
					                              Uniform u32_4* %299 = OpAccessChain %19 %184 
					                                       u32_4 %300 = OpLoad %299 
					                                         u32 %301 = OpCompositeExtract %300 0 
					                                        bool %302 = OpINotEqual %301 %49 
					                                                      OpSelectionMerge %304 None 
					                                                      OpBranchConditional %302 %303 %305 
					                                             %303 = OpLabel 
					                                                      OpStore %298 %54 
					                                                      OpBranch %304 
					                                             %305 = OpLabel 
					                                                      OpStore %298 %53 
					                                                      OpBranch %304 
					                                             %304 = OpLabel 
					                                         f32 %306 = OpLoad %298 
					                                Private f32* %307 = OpAccessChain %57 %289 
					                                                      OpStore %307 %306 
					                              Uniform u32_4* %312 = OpAccessChain %19 %184 
					                                       u32_4 %313 = OpLoad %312 
					                                         u32 %314 = OpCompositeExtract %313 1 
					                                        bool %315 = OpINotEqual %314 %49 
					                                                      OpSelectionMerge %317 None 
					                                                      OpBranchConditional %315 %316 %319 
					                                             %316 = OpLabel 
					                                       f32_4 %318 = OpLoad %98 
					                                                      OpStore %311 %318 
					                                                      OpBranch %317 
					                                             %319 = OpLabel 
					                                       f32_4 %320 = OpLoad %57 
					                                                      OpStore %311 %320 
					                                                      OpBranch %317 
					                                             %317 = OpLabel 
					                                       f32_4 %321 = OpLoad %311 
					                                                      OpStore %309 %321 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier01 " {
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 299
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %13 %32 %90 %169 %180 %265 %287 %290 
					                                                      OpDecorate %13 Location 13 
					                                                      OpDecorate %32 Location 32 
					                                                      OpDecorate %38 ArrayStride 38 
					                                                      OpDecorate %39 ArrayStride 39 
					                                                      OpDecorate %40 ArrayStride 40 
					                                                      OpMemberDecorate %42 0 Offset 42 
					                                                      OpMemberDecorate %42 1 Offset 42 
					                                                      OpMemberDecorate %42 2 Offset 42 
					                                                      OpMemberDecorate %42 3 Offset 42 
					                                                      OpMemberDecorate %42 4 Offset 42 
					                                                      OpMemberDecorate %42 5 Offset 42 
					                                                      OpMemberDecorate %42 6 Offset 42 
					                                                      OpDecorate %42 Block 
					                                                      OpDecorate %44 DescriptorSet 44 
					                                                      OpDecorate %44 Binding 44 
					                                                      OpDecorate %90 Location 90 
					                                                      OpMemberDecorate %167 0 BuiltIn 167 
					                                                      OpMemberDecorate %167 1 BuiltIn 167 
					                                                      OpMemberDecorate %167 2 BuiltIn 167 
					                                                      OpDecorate %167 Block 
					                                                      OpDecorate %180 Location 180 
					                                                      OpDecorate %265 Location 265 
					                                                      OpDecorate %287 Location 287 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %290 Location 290 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeBool 
					                                               %7 = OpTypePointer Private %6 
					                                 Private bool* %8 = OpVariable Private 
					                                               %9 = OpTypeFloat 32 
					                                          f32 %10 = OpConstant 3.674022E-40 
					                                              %11 = OpTypeVector %9 4 
					                                              %12 = OpTypePointer Input %11 
					                                 Input f32_4* %13 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 2 
					                                              %16 = OpTypePointer Input %9 
					                                              %20 = OpTypePointer Private %11 
					                               Private f32_4* %21 = OpVariable Private 
					                                              %22 = OpTypePointer Function %9 
					                                          f32 %27 = OpConstant 3.674022E-40 
					                                              %30 = OpTypePointer Private %9 
					                                 Input f32_4* %32 = OpVariable Input 
					                                              %33 = OpTypeVector %9 2 
					                                              %36 = OpTypeVector %9 3 
					                                          u32 %37 = OpConstant 4 
					                                              %38 = OpTypeArray %11 %37 
					                                              %39 = OpTypeArray %11 %37 
					                                              %40 = OpTypeArray %11 %37 
					                                              %41 = OpTypeVector %14 4 
					                                              %42 = OpTypeStruct %36 %38 %39 %40 %11 %11 %41 
					                                              %43 = OpTypePointer Uniform %42 
					Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4;}* %44 = OpVariable Uniform 
					                                              %45 = OpTypeInt 32 1 
					                                          i32 %46 = OpConstant 4 
					                                              %47 = OpTypePointer Uniform %11 
					                                              %58 = OpTypePointer Function %36 
					                                          i32 %60 = OpConstant 6 
					                                              %61 = OpTypeVector %6 4 
					                                              %62 = OpTypePointer Uniform %41 
					                                          u32 %66 = OpConstant 0 
					                                Private bool* %78 = OpVariable Private 
					                               Private f32_4* %82 = OpVariable Private 
					                                 Input f32_4* %90 = OpVariable Input 
					                                          i32 %93 = OpConstant 5 
					                                         i32 %121 = OpConstant 1 
					                                         i32 %125 = OpConstant 0 
					                                         i32 %133 = OpConstant 2 
					                                         i32 %142 = OpConstant 3 
					                                         u32 %165 = OpConstant 1 
					                                             %166 = OpTypeArray %9 %165 
					                                             %167 = OpTypeStruct %11 %9 %166 
					                                             %168 = OpTypePointer Output %167 
					        Output struct {f32_4; f32; f32[1];}* %169 = OpVariable Output 
					                                             %177 = OpTypePointer Output %11 
					                                             %179 = OpTypePointer Input %36 
					                                Input f32_3* %180 = OpVariable Input 
					                                Private f32* %199 = OpVariable Private 
					                                             %255 = OpTypePointer Private %36 
					                              Private f32_3* %256 = OpVariable Private 
					                                             %260 = OpTypePointer Uniform %36 
					                                             %264 = OpTypePointer Output %36 
					                               Output f32_3* %265 = OpVariable Output 
					                               Output f32_3* %287 = OpVariable Output 
					                               Output f32_3* %290 = OpVariable Output 
					                                             %293 = OpTypePointer Output %9 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                Function f32* %23 = OpVariable Function 
					                              Function f32_3* %59 = OpVariable Function 
					                                Function f32* %83 = OpVariable Function 
					                             Function f32_3* %104 = OpVariable Function 
					                                   Input f32* %17 = OpAccessChain %13 %15 
					                                          f32 %18 = OpLoad %17 
					                                         bool %19 = OpFOrdLessThan %10 %18 
					                                                      OpStore %8 %19 
					                                         bool %24 = OpLoad %8 
					                                                      OpSelectionMerge %26 None 
					                                                      OpBranchConditional %24 %25 %28 
					                                              %25 = OpLabel 
					                                                      OpStore %23 %27 
					                                                      OpBranch %26 
					                                              %28 = OpLabel 
					                                                      OpStore %23 %10 
					                                                      OpBranch %26 
					                                              %26 = OpLabel 
					                                          f32 %29 = OpLoad %23 
					                                 Private f32* %31 = OpAccessChain %21 %15 
					                                                      OpStore %31 %29 
					                                        f32_4 %34 = OpLoad %32 
					                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
					                               Uniform f32_4* %48 = OpAccessChain %44 %46 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
					                                        f32_2 %51 = OpFMul %35 %50 
					                               Uniform f32_4* %52 = OpAccessChain %44 %46 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_2 %54 = OpVectorShuffle %53 %53 2 3 
					                                        f32_2 %55 = OpFAdd %51 %54 
					                                        f32_4 %56 = OpLoad %21 
					                                        f32_4 %57 = OpVectorShuffle %56 %55 4 5 2 3 
					                                                      OpStore %21 %57 
					                               Uniform u32_4* %63 = OpAccessChain %44 %60 
					                                        u32_4 %64 = OpLoad %63 
					                                          u32 %65 = OpCompositeExtract %64 0 
					                                         bool %67 = OpINotEqual %65 %66 
					                                                      OpSelectionMerge %69 None 
					                                                      OpBranchConditional %67 %68 %72 
					                                              %68 = OpLabel 
					                                        f32_4 %70 = OpLoad %21 
					                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
					                                                      OpStore %59 %71 
					                                                      OpBranch %69 
					                                              %72 = OpLabel 
					                                        f32_4 %73 = OpLoad %13 
					                                        f32_3 %74 = OpVectorShuffle %73 %73 0 1 2 
					                                                      OpStore %59 %74 
					                                                      OpBranch %69 
					                                              %69 = OpLabel 
					                                        f32_3 %75 = OpLoad %59 
					                                        f32_4 %76 = OpLoad %21 
					                                        f32_4 %77 = OpVectorShuffle %76 %75 4 5 6 3 
					                                                      OpStore %21 %77 
					                                 Private f32* %79 = OpAccessChain %21 %15 
					                                          f32 %80 = OpLoad %79 
					                                         bool %81 = OpFOrdLessThan %10 %80 
					                                                      OpStore %78 %81 
					                                         bool %84 = OpLoad %78 
					                                                      OpSelectionMerge %86 None 
					                                                      OpBranchConditional %84 %85 %87 
					                                              %85 = OpLabel 
					                                                      OpStore %83 %27 
					                                                      OpBranch %86 
					                                              %87 = OpLabel 
					                                                      OpStore %83 %10 
					                                                      OpBranch %86 
					                                              %86 = OpLabel 
					                                          f32 %88 = OpLoad %83 
					                                 Private f32* %89 = OpAccessChain %82 %15 
					                                                      OpStore %89 %88 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_2 %92 = OpVectorShuffle %91 %91 0 1 
					                               Uniform f32_4* %94 = OpAccessChain %44 %93 
					                                        f32_4 %95 = OpLoad %94 
					                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
					                                        f32_2 %97 = OpFMul %92 %96 
					                               Uniform f32_4* %98 = OpAccessChain %44 %93 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 2 3 
					                                       f32_2 %101 = OpFAdd %97 %100 
					                                       f32_4 %102 = OpLoad %82 
					                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
					                                                      OpStore %82 %103 
					                              Uniform u32_4* %105 = OpAccessChain %44 %60 
					                                       u32_4 %106 = OpLoad %105 
					                                         u32 %107 = OpCompositeExtract %106 1 
					                                        bool %108 = OpINotEqual %107 %66 
					                                                      OpSelectionMerge %110 None 
					                                                      OpBranchConditional %108 %109 %113 
					                                             %109 = OpLabel 
					                                       f32_4 %111 = OpLoad %82 
					                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
					                                                      OpStore %104 %112 
					                                                      OpBranch %110 
					                                             %113 = OpLabel 
					                                       f32_4 %114 = OpLoad %21 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                                      OpStore %104 %115 
					                                                      OpBranch %110 
					                                             %110 = OpLabel 
					                                       f32_3 %116 = OpLoad %104 
					                                       f32_4 %117 = OpLoad %21 
					                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
					                                                      OpStore %21 %118 
					                                       f32_4 %119 = OpLoad %21 
					                                       f32_4 %120 = OpVectorShuffle %119 %119 1 1 1 1 
					                              Uniform f32_4* %122 = OpAccessChain %44 %121 %121 
					                                       f32_4 %123 = OpLoad %122 
					                                       f32_4 %124 = OpFMul %120 %123 
					                                                      OpStore %82 %124 
					                              Uniform f32_4* %126 = OpAccessChain %44 %121 %125 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_4 %128 = OpLoad %21 
					                                       f32_4 %129 = OpVectorShuffle %128 %128 0 0 0 0 
					                                       f32_4 %130 = OpFMul %127 %129 
					                                       f32_4 %131 = OpLoad %82 
					                                       f32_4 %132 = OpFAdd %130 %131 
					                                                      OpStore %82 %132 
					                              Uniform f32_4* %134 = OpAccessChain %44 %121 %133 
					                                       f32_4 %135 = OpLoad %134 
					                                       f32_4 %136 = OpLoad %21 
					                                       f32_4 %137 = OpVectorShuffle %136 %136 2 2 2 2 
					                                       f32_4 %138 = OpFMul %135 %137 
					                                       f32_4 %139 = OpLoad %82 
					                                       f32_4 %140 = OpFAdd %138 %139 
					                                                      OpStore %21 %140 
					                                       f32_4 %141 = OpLoad %21 
					                              Uniform f32_4* %143 = OpAccessChain %44 %121 %142 
					                                       f32_4 %144 = OpLoad %143 
					                                       f32_4 %145 = OpFAdd %141 %144 
					                                                      OpStore %21 %145 
					                                       f32_4 %146 = OpLoad %21 
					                                       f32_4 %147 = OpVectorShuffle %146 %146 1 1 1 1 
					                              Uniform f32_4* %148 = OpAccessChain %44 %142 %121 
					                                       f32_4 %149 = OpLoad %148 
					                                       f32_4 %150 = OpFMul %147 %149 
					                                                      OpStore %82 %150 
					                              Uniform f32_4* %151 = OpAccessChain %44 %142 %125 
					                                       f32_4 %152 = OpLoad %151 
					                                       f32_4 %153 = OpLoad %21 
					                                       f32_4 %154 = OpVectorShuffle %153 %153 0 0 0 0 
					                                       f32_4 %155 = OpFMul %152 %154 
					                                       f32_4 %156 = OpLoad %82 
					                                       f32_4 %157 = OpFAdd %155 %156 
					                                                      OpStore %82 %157 
					                              Uniform f32_4* %158 = OpAccessChain %44 %142 %133 
					                                       f32_4 %159 = OpLoad %158 
					                                       f32_4 %160 = OpLoad %21 
					                                       f32_4 %161 = OpVectorShuffle %160 %160 2 2 2 2 
					                                       f32_4 %162 = OpFMul %159 %161 
					                                       f32_4 %163 = OpLoad %82 
					                                       f32_4 %164 = OpFAdd %162 %163 
					                                                      OpStore %82 %164 
					                              Uniform f32_4* %170 = OpAccessChain %44 %142 %142 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_4 %172 = OpLoad %21 
					                                       f32_4 %173 = OpVectorShuffle %172 %172 3 3 3 3 
					                                       f32_4 %174 = OpFMul %171 %173 
					                                       f32_4 %175 = OpLoad %82 
					                                       f32_4 %176 = OpFAdd %174 %175 
					                               Output f32_4* %178 = OpAccessChain %169 %125 
					                                                      OpStore %178 %176 
					                                       f32_3 %181 = OpLoad %180 
					                              Uniform f32_4* %182 = OpAccessChain %44 %133 %125 
					                                       f32_4 %183 = OpLoad %182 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                         f32 %185 = OpDot %181 %184 
					                                Private f32* %186 = OpAccessChain %21 %66 
					                                                      OpStore %186 %185 
					                                       f32_3 %187 = OpLoad %180 
					                              Uniform f32_4* %188 = OpAccessChain %44 %133 %121 
					                                       f32_4 %189 = OpLoad %188 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                         f32 %191 = OpDot %187 %190 
					                                Private f32* %192 = OpAccessChain %21 %165 
					                                                      OpStore %192 %191 
					                                       f32_3 %193 = OpLoad %180 
					                              Uniform f32_4* %194 = OpAccessChain %44 %133 %133 
					                                       f32_4 %195 = OpLoad %194 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                         f32 %197 = OpDot %193 %196 
					                                Private f32* %198 = OpAccessChain %21 %15 
					                                                      OpStore %198 %197 
					                                       f32_4 %200 = OpLoad %21 
					                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
					                                       f32_4 %202 = OpLoad %21 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
					                                         f32 %204 = OpDot %201 %203 
					                                                      OpStore %199 %204 
					                                         f32 %205 = OpLoad %199 
					                                         f32 %206 = OpExtInst %1 32 %205 
					                                                      OpStore %199 %206 
					                                         f32 %207 = OpLoad %199 
					                                       f32_3 %208 = OpCompositeConstruct %207 %207 %207 
					                                       f32_4 %209 = OpLoad %21 
					                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
					                                       f32_3 %211 = OpFMul %208 %210 
					                                       f32_4 %212 = OpLoad %21 
					                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
					                                                      OpStore %21 %213 
					                                       f32_4 %214 = OpLoad %13 
					                                       f32_3 %215 = OpVectorShuffle %214 %214 1 1 1 
					                              Uniform f32_4* %216 = OpAccessChain %44 %121 %121 
					                                       f32_4 %217 = OpLoad %216 
					                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
					                                       f32_3 %219 = OpFMul %215 %218 
					                                       f32_4 %220 = OpLoad %82 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
					                                                      OpStore %82 %221 
					                              Uniform f32_4* %222 = OpAccessChain %44 %121 %125 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
					                                       f32_4 %225 = OpLoad %13 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 0 0 
					                                       f32_3 %227 = OpFMul %224 %226 
					                                       f32_4 %228 = OpLoad %82 
					                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
					                                       f32_3 %230 = OpFAdd %227 %229 
					                                       f32_4 %231 = OpLoad %82 
					                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
					                                                      OpStore %82 %232 
					                              Uniform f32_4* %233 = OpAccessChain %44 %121 %133 
					                                       f32_4 %234 = OpLoad %233 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
					                                       f32_4 %236 = OpLoad %13 
					                                       f32_3 %237 = OpVectorShuffle %236 %236 2 2 2 
					                                       f32_3 %238 = OpFMul %235 %237 
					                                       f32_4 %239 = OpLoad %82 
					                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
					                                       f32_3 %241 = OpFAdd %238 %240 
					                                       f32_4 %242 = OpLoad %82 
					                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
					                                                      OpStore %82 %243 
					                              Uniform f32_4* %244 = OpAccessChain %44 %121 %142 
					                                       f32_4 %245 = OpLoad %244 
					                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
					                                       f32_4 %247 = OpLoad %13 
					                                       f32_3 %248 = OpVectorShuffle %247 %247 3 3 3 
					                                       f32_3 %249 = OpFMul %246 %248 
					                                       f32_4 %250 = OpLoad %82 
					                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
					                                       f32_3 %252 = OpFAdd %249 %251 
					                                       f32_4 %253 = OpLoad %82 
					                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
					                                                      OpStore %82 %254 
					                                       f32_4 %257 = OpLoad %82 
					                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
					                                       f32_3 %259 = OpFNegate %258 
					                              Uniform f32_3* %261 = OpAccessChain %44 %125 
					                                       f32_3 %262 = OpLoad %261 
					                                       f32_3 %263 = OpFAdd %259 %262 
					                                                      OpStore %256 %263 
					                                       f32_4 %266 = OpLoad %82 
					                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
					                                                      OpStore %265 %267 
					                                       f32_3 %268 = OpLoad %256 
					                                       f32_3 %269 = OpFNegate %268 
					                                       f32_4 %270 = OpLoad %21 
					                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
					                                         f32 %272 = OpDot %269 %271 
					                                                      OpStore %199 %272 
					                                         f32 %273 = OpLoad %199 
					                                         f32 %274 = OpLoad %199 
					                                         f32 %275 = OpFAdd %273 %274 
					                                                      OpStore %199 %275 
					                                       f32_4 %276 = OpLoad %21 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
					                                         f32 %278 = OpLoad %199 
					                                       f32_3 %279 = OpCompositeConstruct %278 %278 %278 
					                                       f32_3 %280 = OpFNegate %279 
					                                       f32_3 %281 = OpFMul %277 %280 
					                                       f32_3 %282 = OpLoad %256 
					                                       f32_3 %283 = OpFNegate %282 
					                                       f32_3 %284 = OpFAdd %281 %283 
					                                       f32_4 %285 = OpLoad %82 
					                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
					                                                      OpStore %82 %286 
					                                       f32_4 %288 = OpLoad %21 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
					                                                      OpStore %287 %289 
					                                       f32_4 %291 = OpLoad %82 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                                      OpStore %290 %292 
					                                 Output f32* %294 = OpAccessChain %169 %125 %165 
					                                         f32 %295 = OpLoad %294 
					                                         f32 %296 = OpFNegate %295 
					                                 Output f32* %297 = OpAccessChain %169 %125 %165 
					                                                      OpStore %297 %296 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 323
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %46 %207 %309 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %12 Location 12 
					                                                      OpMemberDecorate %17 0 Offset 17 
					                                                      OpMemberDecorate %17 1 RelaxedPrecision 
					                                                      OpMemberDecorate %17 1 Offset 17 
					                                                      OpMemberDecorate %17 2 RelaxedPrecision 
					                                                      OpMemberDecorate %17 2 Offset 17 
					                                                      OpMemberDecorate %17 3 Offset 17 
					                                                      OpMemberDecorate %17 4 Offset 17 
					                                                      OpMemberDecorate %17 5 Offset 17 
					                                                      OpMemberDecorate %17 6 RelaxedPrecision 
					                                                      OpMemberDecorate %17 6 Offset 17 
					                                                      OpMemberDecorate %17 7 Offset 17 
					                                                      OpMemberDecorate %17 8 Offset 17 
					                                                      OpMemberDecorate %17 9 Offset 17 
					                                                      OpMemberDecorate %17 10 Offset 17 
					                                                      OpDecorate %17 Block 
					                                                      OpDecorate %19 DescriptorSet 19 
					                                                      OpDecorate %19 Binding 19 
					                                                      OpDecorate %46 Location 46 
					                                                      OpDecorate %57 RelaxedPrecision 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %111 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %201 RelaxedPrecision 
					                                                      OpDecorate %205 RelaxedPrecision 
					                                                      OpDecorate %205 DescriptorSet 205 
					                                                      OpDecorate %205 Binding 205 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %207 Location 207 
					                                                      OpDecorate %208 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %256 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %268 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %277 RelaxedPrecision 
					                                                      OpDecorate %278 RelaxedPrecision 
					                                                      OpDecorate %279 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %306 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %309 Location 309 
					                                                      OpDecorate %320 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                              %15 = OpTypeInt 32 0 
					                                              %16 = OpTypeVector %15 4 
					                                              %17 = OpTypeStruct %10 %7 %7 %6 %6 %6 %7 %16 %6 %6 %6 
					                                              %18 = OpTypePointer Uniform %17 
					Uniform struct {f32_3; f32_4; f32_4; f32; f32; f32; f32_4; u32_4; f32; f32; f32;}* %19 = OpVariable Uniform 
					                                              %20 = OpTypeInt 32 1 
					                                          i32 %21 = OpConstant 0 
					                                              %22 = OpTypePointer Uniform %10 
					                                              %28 = OpTypePointer Private %6 
					                                 Private f32* %29 = OpVariable Private 
					                                 Input f32_3* %46 = OpVariable Input 
					                                          u32 %49 = OpConstant 0 
					                                          f32 %53 = OpConstant 3.674022E-40 
					                                          f32 %54 = OpConstant 3.674022E-40 
					                               Private f32_4* %57 = OpVariable Private 
					                                              %63 = OpTypePointer Private %10 
					                               Private f32_3* %64 = OpVariable Private 
					                                              %69 = OpTypeVector %6 2 
					                                          i32 %72 = OpConstant 4 
					                                              %73 = OpTypePointer Uniform %6 
					                                          i32 %76 = OpConstant 3 
					                                          i32 %90 = OpConstant 6 
					                                              %91 = OpTypePointer Uniform %7 
					                               Private f32_4* %98 = OpVariable Private 
					                                         i32 %101 = OpConstant 5 
					                                         i32 %128 = OpConstant 1 
					                                         i32 %145 = OpConstant 8 
					                                         i32 %167 = OpConstant 9 
					                                             %182 = OpTypePointer Function %10 
					                                         i32 %184 = OpConstant 7 
					                                             %185 = OpTypeBool 
					                                             %186 = OpTypeVector %185 4 
					                                             %187 = OpTypePointer Uniform %16 
					                                       f32_3 %197 = OpConstantComposite %53 %53 %53 
					                              Private f32_4* %201 = OpVariable Private 
					                                             %202 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %203 = OpTypeSampledImage %202 
					                                             %204 = OpTypePointer UniformConstant %203 
					UniformConstant read_only TextureCubeSampled* %205 = OpVariable UniformConstant 
					                                Input f32_3* %207 = OpVariable Input 
					                              Private f32_3* %213 = OpVariable Private 
					                                         i32 %216 = OpConstant 2 
					                                         f32 %226 = OpConstant 3.674022E-40 
					                                       f32_3 %227 = OpConstantComposite %226 %226 %226 
					                                         f32 %229 = OpConstant 3.674022E-40 
					                                       f32_3 %230 = OpConstantComposite %229 %229 %229 
					                                         f32 %235 = OpConstant 3.674022E-40 
					                                       f32_3 %236 = OpConstantComposite %235 %235 %235 
					                                             %243 = OpTypePointer Private %185 
					                               Private bool* %244 = OpVariable Private 
					                                       f32_4 %245 = OpConstantComposite %53 %53 %53 %53 
					                                         i32 %246 = OpConstant 10 
					                                         f32 %262 = OpConstant 3.674022E-40 
					                                       f32_3 %263 = OpConstantComposite %262 %262 %262 
					                                Private f32* %265 = OpVariable Private 
					                                         u32 %266 = OpConstant 1 
					                                Private f32* %272 = OpVariable Private 
					                                         u32 %273 = OpConstant 2 
					                                         f32 %276 = OpConstant 3.674022E-40 
					                                         f32 %282 = OpConstant 3.674022E-40 
					                                         f32 %287 = OpConstant 3.674022E-40 
					                                         u32 %289 = OpConstant 3 
					                                             %297 = OpTypePointer Function %6 
					                                             %308 = OpTypePointer Output %7 
					                               Output f32_4* %309 = OpVariable Output 
					                                             %310 = OpTypePointer Function %7 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %183 = OpVariable Function 
					                             Function f32_3* %252 = OpVariable Function 
					                               Function f32* %298 = OpVariable Function 
					                             Function f32_4* %311 = OpVariable Function 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_3 %14 = OpFNegate %13 
					                               Uniform f32_3* %23 = OpAccessChain %19 %21 
					                                        f32_3 %24 = OpLoad %23 
					                                        f32_3 %25 = OpFAdd %14 %24 
					                                        f32_4 %26 = OpLoad %9 
					                                        f32_4 %27 = OpVectorShuffle %26 %25 4 5 6 3 
					                                                      OpStore %9 %27 
					                                        f32_4 %30 = OpLoad %9 
					                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
					                                        f32_4 %32 = OpLoad %9 
					                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
					                                          f32 %34 = OpDot %31 %33 
					                                                      OpStore %29 %34 
					                                          f32 %35 = OpLoad %29 
					                                          f32 %36 = OpExtInst %1 32 %35 
					                                                      OpStore %29 %36 
					                                          f32 %37 = OpLoad %29 
					                                        f32_3 %38 = OpCompositeConstruct %37 %37 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
					                                        f32_3 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpVectorShuffle %42 %41 4 5 6 3 
					                                                      OpStore %9 %43 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %47 = OpLoad %46 
					                                          f32 %48 = OpDot %45 %47 
					                                 Private f32* %50 = OpAccessChain %9 %49 
					                                                      OpStore %50 %48 
					                                 Private f32* %51 = OpAccessChain %9 %49 
					                                          f32 %52 = OpLoad %51 
					                                          f32 %55 = OpExtInst %1 43 %52 %53 %54 
					                                 Private f32* %56 = OpAccessChain %9 %49 
					                                                      OpStore %56 %55 
					                                 Private f32* %58 = OpAccessChain %9 %49 
					                                          f32 %59 = OpLoad %58 
					                                          f32 %60 = OpFNegate %59 
					                                          f32 %61 = OpFAdd %60 %54 
					                                 Private f32* %62 = OpAccessChain %57 %49 
					                                                      OpStore %62 %61 
					                                 Private f32* %65 = OpAccessChain %57 %49 
					                                          f32 %66 = OpLoad %65 
					                                          f32 %67 = OpExtInst %1 30 %66 
					                                 Private f32* %68 = OpAccessChain %64 %49 
					                                                      OpStore %68 %67 
					                                        f32_3 %70 = OpLoad %64 
					                                        f32_2 %71 = OpVectorShuffle %70 %70 0 0 
					                                 Uniform f32* %74 = OpAccessChain %19 %72 
					                                          f32 %75 = OpLoad %74 
					                                 Uniform f32* %77 = OpAccessChain %19 %76 
					                                          f32 %78 = OpLoad %77 
					                                        f32_2 %79 = OpCompositeConstruct %75 %78 
					                                        f32_2 %80 = OpFMul %71 %79 
					                                        f32_4 %81 = OpLoad %9 
					                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 2 3 
					                                                      OpStore %9 %82 
					                                        f32_4 %83 = OpLoad %9 
					                                        f32_2 %84 = OpVectorShuffle %83 %83 0 1 
					                                        f32_2 %85 = OpExtInst %1 29 %84 
					                                        f32_4 %86 = OpLoad %9 
					                                        f32_4 %87 = OpVectorShuffle %86 %85 4 5 2 3 
					                                                      OpStore %9 %87 
					                                        f32_4 %88 = OpLoad %9 
					                                        f32_3 %89 = OpVectorShuffle %88 %88 0 0 0 
					                               Uniform f32_4* %92 = OpAccessChain %19 %90 
					                                        f32_4 %93 = OpLoad %92 
					                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
					                                        f32_3 %95 = OpFMul %89 %94 
					                                        f32_4 %96 = OpLoad %57 
					                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
					                                                      OpStore %57 %97 
					                                        f32_4 %99 = OpLoad %57 
					                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
					                                Uniform f32* %102 = OpAccessChain %19 %101 
					                                         f32 %103 = OpLoad %102 
					                                Uniform f32* %104 = OpAccessChain %19 %101 
					                                         f32 %105 = OpLoad %104 
					                                Uniform f32* %106 = OpAccessChain %19 %101 
					                                         f32 %107 = OpLoad %106 
					                                       f32_3 %108 = OpCompositeConstruct %103 %105 %107 
					                                         f32 %109 = OpCompositeExtract %108 0 
					                                         f32 %110 = OpCompositeExtract %108 1 
					                                         f32 %111 = OpCompositeExtract %108 2 
					                                       f32_3 %112 = OpCompositeConstruct %109 %110 %111 
					                                       f32_3 %113 = OpFMul %100 %112 
					                                       f32_4 %114 = OpLoad %98 
					                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
					                                                      OpStore %98 %115 
					                                Private f32* %116 = OpAccessChain %9 %49 
					                                         f32 %117 = OpLoad %116 
					                                         f32 %118 = OpFNegate %117 
					                                Uniform f32* %119 = OpAccessChain %19 %101 
					                                         f32 %120 = OpLoad %119 
					                                         f32 %121 = OpFMul %118 %120 
					                                         f32 %122 = OpFAdd %121 %54 
					                                Private f32* %123 = OpAccessChain %9 %49 
					                                                      OpStore %123 %122 
					                                Private f32* %124 = OpAccessChain %9 %49 
					                                         f32 %125 = OpLoad %124 
					                                         f32 %126 = OpExtInst %1 43 %125 %53 %54 
					                                Private f32* %127 = OpAccessChain %9 %49 
					                                                      OpStore %127 %126 
					                              Uniform f32_4* %129 = OpAccessChain %19 %128 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                       f32_4 %132 = OpLoad %9 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 0 0 
					                                       f32_3 %134 = OpFMul %131 %133 
					                                       f32_4 %135 = OpLoad %98 
					                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
					                                       f32_3 %137 = OpFAdd %134 %136 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_4 %139 = OpVectorShuffle %138 %137 4 1 5 6 
					                                                      OpStore %9 %139 
					                                       f32_4 %140 = OpLoad %9 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 2 3 
					                                       f32_3 %142 = OpExtInst %1 30 %141 
					                                       f32_4 %143 = OpLoad %9 
					                                       f32_4 %144 = OpVectorShuffle %143 %142 4 1 5 6 
					                                                      OpStore %9 %144 
					                                Uniform f32* %146 = OpAccessChain %19 %145 
					                                         f32 %147 = OpLoad %146 
					                                Private f32* %148 = OpAccessChain %98 %49 
					                                                      OpStore %148 %147 
					                                Private f32* %149 = OpAccessChain %98 %49 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpExtInst %1 43 %150 %53 %54 
					                                Private f32* %152 = OpAccessChain %98 %49 
					                                                      OpStore %152 %151 
					                                       f32_4 %153 = OpLoad %9 
					                                       f32_3 %154 = OpVectorShuffle %153 %153 0 2 3 
					                                       f32_4 %155 = OpLoad %98 
					                                       f32_3 %156 = OpVectorShuffle %155 %155 0 0 0 
					                                       f32_3 %157 = OpFMul %154 %156 
					                                       f32_4 %158 = OpLoad %9 
					                                       f32_4 %159 = OpVectorShuffle %158 %157 4 1 5 6 
					                                                      OpStore %9 %159 
					                                       f32_4 %160 = OpLoad %9 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 0 2 3 
					                                       f32_3 %162 = OpExtInst %1 29 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 6 
					                                                      OpStore %9 %164 
					                                       f32_4 %165 = OpLoad %9 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 2 3 
					                                Uniform f32* %168 = OpAccessChain %19 %167 
					                                         f32 %169 = OpLoad %168 
					                                Uniform f32* %170 = OpAccessChain %19 %167 
					                                         f32 %171 = OpLoad %170 
					                                Uniform f32* %172 = OpAccessChain %19 %167 
					                                         f32 %173 = OpLoad %172 
					                                       f32_3 %174 = OpCompositeConstruct %169 %171 %173 
					                                         f32 %175 = OpCompositeExtract %174 0 
					                                         f32 %176 = OpCompositeExtract %174 1 
					                                         f32 %177 = OpCompositeExtract %174 2 
					                                       f32_3 %178 = OpCompositeConstruct %175 %176 %177 
					                                       f32_3 %179 = OpExtInst %1 37 %166 %178 
					                                       f32_4 %180 = OpLoad %9 
					                                       f32_4 %181 = OpVectorShuffle %180 %179 4 1 5 6 
					                                                      OpStore %9 %181 
					                              Uniform u32_4* %188 = OpAccessChain %19 %184 
					                                       u32_4 %189 = OpLoad %188 
					                                         u32 %190 = OpCompositeExtract %189 0 
					                                        bool %191 = OpINotEqual %190 %49 
					                                                      OpSelectionMerge %193 None 
					                                                      OpBranchConditional %191 %192 %196 
					                                             %192 = OpLabel 
					                                       f32_4 %194 = OpLoad %9 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 2 3 
					                                                      OpStore %183 %195 
					                                                      OpBranch %193 
					                                             %196 = OpLabel 
					                                                      OpStore %183 %197 
					                                                      OpBranch %193 
					                                             %193 = OpLabel 
					                                       f32_3 %198 = OpLoad %183 
					                                       f32_4 %199 = OpLoad %57 
					                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
					                                                      OpStore %57 %200 
					                read_only TextureCubeSampled %206 = OpLoad %205 
					                                       f32_3 %208 = OpLoad %207 
					                                       f32_4 %209 = OpImageSampleImplicitLod %206 %208 
					                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
					                                       f32_4 %211 = OpLoad %201 
					                                       f32_4 %212 = OpVectorShuffle %211 %210 4 1 5 6 
					                                                      OpStore %201 %212 
					                                       f32_4 %214 = OpLoad %201 
					                                       f32_3 %215 = OpVectorShuffle %214 %214 0 2 3 
					                              Uniform f32_4* %217 = OpAccessChain %19 %216 
					                                       f32_4 %218 = OpLoad %217 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                       f32_3 %220 = OpFMul %215 %219 
					                                                      OpStore %213 %220 
					                                       f32_4 %221 = OpLoad %9 
					                                       f32_3 %222 = OpVectorShuffle %221 %221 1 1 1 
					                                       f32_3 %223 = OpLoad %213 
					                                       f32_3 %224 = OpFMul %222 %223 
					                                                      OpStore %213 %224 
					                                       f32_3 %225 = OpLoad %213 
					                                       f32_3 %228 = OpFMul %225 %227 
					                                       f32_3 %231 = OpFAdd %228 %230 
					                                                      OpStore %64 %231 
					                                       f32_3 %232 = OpLoad %213 
					                                       f32_3 %233 = OpLoad %64 
					                                       f32_3 %234 = OpFMul %232 %233 
					                                       f32_3 %237 = OpFAdd %234 %236 
					                                                      OpStore %64 %237 
					                                       f32_3 %238 = OpLoad %64 
					                                       f32_3 %239 = OpLoad %213 
					                                       f32_3 %240 = OpFMul %238 %239 
					                                       f32_4 %241 = OpLoad %9 
					                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
					                                                      OpStore %9 %242 
					                                Uniform f32* %247 = OpAccessChain %19 %246 
					                                         f32 %248 = OpLoad %247 
					                                       f32_4 %249 = OpCompositeConstruct %248 %248 %248 %248 
					                                      bool_4 %250 = OpFOrdNotEqual %245 %249 
					                                        bool %251 = OpAny %250 
					                                                      OpStore %244 %251 
					                                        bool %253 = OpLoad %244 
					                                                      OpSelectionMerge %255 None 
					                                                      OpBranchConditional %253 %254 %257 
					                                             %254 = OpLabel 
					                                       f32_3 %256 = OpLoad %213 
					                                                      OpStore %252 %256 
					                                                      OpBranch %255 
					                                             %257 = OpLabel 
					                                       f32_4 %258 = OpLoad %9 
					                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
					                                                      OpStore %252 %259 
					                                                      OpBranch %255 
					                                             %255 = OpLabel 
					                                       f32_3 %260 = OpLoad %252 
					                                                      OpStore %213 %260 
					                                       f32_3 %261 = OpLoad %213 
					                                       f32_3 %264 = OpFMul %261 %263 
					                                                      OpStore %64 %264 
					                                Private f32* %267 = OpAccessChain %64 %266 
					                                         f32 %268 = OpLoad %267 
					                                Private f32* %269 = OpAccessChain %64 %49 
					                                         f32 %270 = OpLoad %269 
					                                         f32 %271 = OpExtInst %1 40 %268 %270 
					                                                      OpStore %265 %271 
					                                Private f32* %274 = OpAccessChain %64 %273 
					                                         f32 %275 = OpLoad %274 
					                                         f32 %277 = OpExtInst %1 40 %275 %276 
					                                                      OpStore %272 %277 
					                                         f32 %278 = OpLoad %265 
					                                         f32 %279 = OpLoad %272 
					                                         f32 %280 = OpExtInst %1 40 %278 %279 
					                                                      OpStore %265 %280 
					                                         f32 %281 = OpLoad %265 
					                                         f32 %283 = OpFMul %281 %282 
					                                                      OpStore %29 %283 
					                                         f32 %284 = OpLoad %29 
					                                         f32 %285 = OpExtInst %1 9 %284 
					                                                      OpStore %29 %285 
					                                         f32 %286 = OpLoad %29 
					                                         f32 %288 = OpFMul %286 %287 
					                                Private f32* %290 = OpAccessChain %98 %289 
					                                                      OpStore %290 %288 
					                                       f32_3 %291 = OpLoad %64 
					                                       f32_4 %292 = OpLoad %98 
					                                       f32_3 %293 = OpVectorShuffle %292 %292 3 3 3 
					                                       f32_3 %294 = OpFDiv %291 %293 
					                                       f32_4 %295 = OpLoad %98 
					                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
					                                                      OpStore %98 %296 
					                              Uniform u32_4* %299 = OpAccessChain %19 %184 
					                                       u32_4 %300 = OpLoad %299 
					                                         u32 %301 = OpCompositeExtract %300 0 
					                                        bool %302 = OpINotEqual %301 %49 
					                                                      OpSelectionMerge %304 None 
					                                                      OpBranchConditional %302 %303 %305 
					                                             %303 = OpLabel 
					                                                      OpStore %298 %54 
					                                                      OpBranch %304 
					                                             %305 = OpLabel 
					                                                      OpStore %298 %53 
					                                                      OpBranch %304 
					                                             %304 = OpLabel 
					                                         f32 %306 = OpLoad %298 
					                                Private f32* %307 = OpAccessChain %57 %289 
					                                                      OpStore %307 %306 
					                              Uniform u32_4* %312 = OpAccessChain %19 %184 
					                                       u32_4 %313 = OpLoad %312 
					                                         u32 %314 = OpCompositeExtract %313 1 
					                                        bool %315 = OpINotEqual %314 %49 
					                                                      OpSelectionMerge %317 None 
					                                                      OpBranchConditional %315 %316 %319 
					                                             %316 = OpLabel 
					                                       f32_4 %318 = OpLoad %98 
					                                                      OpStore %311 %318 
					                                                      OpBranch %317 
					                                             %319 = OpLabel 
					                                       f32_4 %320 = OpLoad %57 
					                                                      OpStore %311 %320 
					                                                      OpBranch %317 
					                                             %317 = OpLabel 
					                                       f32_4 %321 = OpLoad %311 
					                                                      OpStore %309 %321 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "vulkan hw_tier02 " {
					"spirv
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 299
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %13 %32 %90 %169 %180 %265 %287 %290 
					                                                      OpDecorate %13 Location 13 
					                                                      OpDecorate %32 Location 32 
					                                                      OpDecorate %38 ArrayStride 38 
					                                                      OpDecorate %39 ArrayStride 39 
					                                                      OpDecorate %40 ArrayStride 40 
					                                                      OpMemberDecorate %42 0 Offset 42 
					                                                      OpMemberDecorate %42 1 Offset 42 
					                                                      OpMemberDecorate %42 2 Offset 42 
					                                                      OpMemberDecorate %42 3 Offset 42 
					                                                      OpMemberDecorate %42 4 Offset 42 
					                                                      OpMemberDecorate %42 5 Offset 42 
					                                                      OpMemberDecorate %42 6 Offset 42 
					                                                      OpDecorate %42 Block 
					                                                      OpDecorate %44 DescriptorSet 44 
					                                                      OpDecorate %44 Binding 44 
					                                                      OpDecorate %90 Location 90 
					                                                      OpMemberDecorate %167 0 BuiltIn 167 
					                                                      OpMemberDecorate %167 1 BuiltIn 167 
					                                                      OpMemberDecorate %167 2 BuiltIn 167 
					                                                      OpDecorate %167 Block 
					                                                      OpDecorate %180 Location 180 
					                                                      OpDecorate %265 Location 265 
					                                                      OpDecorate %287 Location 287 
					                                                      OpDecorate %290 RelaxedPrecision 
					                                                      OpDecorate %290 Location 290 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeBool 
					                                               %7 = OpTypePointer Private %6 
					                                 Private bool* %8 = OpVariable Private 
					                                               %9 = OpTypeFloat 32 
					                                          f32 %10 = OpConstant 3.674022E-40 
					                                              %11 = OpTypeVector %9 4 
					                                              %12 = OpTypePointer Input %11 
					                                 Input f32_4* %13 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 2 
					                                              %16 = OpTypePointer Input %9 
					                                              %20 = OpTypePointer Private %11 
					                               Private f32_4* %21 = OpVariable Private 
					                                              %22 = OpTypePointer Function %9 
					                                          f32 %27 = OpConstant 3.674022E-40 
					                                              %30 = OpTypePointer Private %9 
					                                 Input f32_4* %32 = OpVariable Input 
					                                              %33 = OpTypeVector %9 2 
					                                              %36 = OpTypeVector %9 3 
					                                          u32 %37 = OpConstant 4 
					                                              %38 = OpTypeArray %11 %37 
					                                              %39 = OpTypeArray %11 %37 
					                                              %40 = OpTypeArray %11 %37 
					                                              %41 = OpTypeVector %14 4 
					                                              %42 = OpTypeStruct %36 %38 %39 %40 %11 %11 %41 
					                                              %43 = OpTypePointer Uniform %42 
					Uniform struct {f32_3; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; u32_4;}* %44 = OpVariable Uniform 
					                                              %45 = OpTypeInt 32 1 
					                                          i32 %46 = OpConstant 4 
					                                              %47 = OpTypePointer Uniform %11 
					                                              %58 = OpTypePointer Function %36 
					                                          i32 %60 = OpConstant 6 
					                                              %61 = OpTypeVector %6 4 
					                                              %62 = OpTypePointer Uniform %41 
					                                          u32 %66 = OpConstant 0 
					                                Private bool* %78 = OpVariable Private 
					                               Private f32_4* %82 = OpVariable Private 
					                                 Input f32_4* %90 = OpVariable Input 
					                                          i32 %93 = OpConstant 5 
					                                         i32 %121 = OpConstant 1 
					                                         i32 %125 = OpConstant 0 
					                                         i32 %133 = OpConstant 2 
					                                         i32 %142 = OpConstant 3 
					                                         u32 %165 = OpConstant 1 
					                                             %166 = OpTypeArray %9 %165 
					                                             %167 = OpTypeStruct %11 %9 %166 
					                                             %168 = OpTypePointer Output %167 
					        Output struct {f32_4; f32; f32[1];}* %169 = OpVariable Output 
					                                             %177 = OpTypePointer Output %11 
					                                             %179 = OpTypePointer Input %36 
					                                Input f32_3* %180 = OpVariable Input 
					                                Private f32* %199 = OpVariable Private 
					                                             %255 = OpTypePointer Private %36 
					                              Private f32_3* %256 = OpVariable Private 
					                                             %260 = OpTypePointer Uniform %36 
					                                             %264 = OpTypePointer Output %36 
					                               Output f32_3* %265 = OpVariable Output 
					                               Output f32_3* %287 = OpVariable Output 
					                               Output f32_3* %290 = OpVariable Output 
					                                             %293 = OpTypePointer Output %9 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                Function f32* %23 = OpVariable Function 
					                              Function f32_3* %59 = OpVariable Function 
					                                Function f32* %83 = OpVariable Function 
					                             Function f32_3* %104 = OpVariable Function 
					                                   Input f32* %17 = OpAccessChain %13 %15 
					                                          f32 %18 = OpLoad %17 
					                                         bool %19 = OpFOrdLessThan %10 %18 
					                                                      OpStore %8 %19 
					                                         bool %24 = OpLoad %8 
					                                                      OpSelectionMerge %26 None 
					                                                      OpBranchConditional %24 %25 %28 
					                                              %25 = OpLabel 
					                                                      OpStore %23 %27 
					                                                      OpBranch %26 
					                                              %28 = OpLabel 
					                                                      OpStore %23 %10 
					                                                      OpBranch %26 
					                                              %26 = OpLabel 
					                                          f32 %29 = OpLoad %23 
					                                 Private f32* %31 = OpAccessChain %21 %15 
					                                                      OpStore %31 %29 
					                                        f32_4 %34 = OpLoad %32 
					                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
					                               Uniform f32_4* %48 = OpAccessChain %44 %46 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
					                                        f32_2 %51 = OpFMul %35 %50 
					                               Uniform f32_4* %52 = OpAccessChain %44 %46 
					                                        f32_4 %53 = OpLoad %52 
					                                        f32_2 %54 = OpVectorShuffle %53 %53 2 3 
					                                        f32_2 %55 = OpFAdd %51 %54 
					                                        f32_4 %56 = OpLoad %21 
					                                        f32_4 %57 = OpVectorShuffle %56 %55 4 5 2 3 
					                                                      OpStore %21 %57 
					                               Uniform u32_4* %63 = OpAccessChain %44 %60 
					                                        u32_4 %64 = OpLoad %63 
					                                          u32 %65 = OpCompositeExtract %64 0 
					                                         bool %67 = OpINotEqual %65 %66 
					                                                      OpSelectionMerge %69 None 
					                                                      OpBranchConditional %67 %68 %72 
					                                              %68 = OpLabel 
					                                        f32_4 %70 = OpLoad %21 
					                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
					                                                      OpStore %59 %71 
					                                                      OpBranch %69 
					                                              %72 = OpLabel 
					                                        f32_4 %73 = OpLoad %13 
					                                        f32_3 %74 = OpVectorShuffle %73 %73 0 1 2 
					                                                      OpStore %59 %74 
					                                                      OpBranch %69 
					                                              %69 = OpLabel 
					                                        f32_3 %75 = OpLoad %59 
					                                        f32_4 %76 = OpLoad %21 
					                                        f32_4 %77 = OpVectorShuffle %76 %75 4 5 6 3 
					                                                      OpStore %21 %77 
					                                 Private f32* %79 = OpAccessChain %21 %15 
					                                          f32 %80 = OpLoad %79 
					                                         bool %81 = OpFOrdLessThan %10 %80 
					                                                      OpStore %78 %81 
					                                         bool %84 = OpLoad %78 
					                                                      OpSelectionMerge %86 None 
					                                                      OpBranchConditional %84 %85 %87 
					                                              %85 = OpLabel 
					                                                      OpStore %83 %27 
					                                                      OpBranch %86 
					                                              %87 = OpLabel 
					                                                      OpStore %83 %10 
					                                                      OpBranch %86 
					                                              %86 = OpLabel 
					                                          f32 %88 = OpLoad %83 
					                                 Private f32* %89 = OpAccessChain %82 %15 
					                                                      OpStore %89 %88 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_2 %92 = OpVectorShuffle %91 %91 0 1 
					                               Uniform f32_4* %94 = OpAccessChain %44 %93 
					                                        f32_4 %95 = OpLoad %94 
					                                        f32_2 %96 = OpVectorShuffle %95 %95 0 1 
					                                        f32_2 %97 = OpFMul %92 %96 
					                               Uniform f32_4* %98 = OpAccessChain %44 %93 
					                                        f32_4 %99 = OpLoad %98 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 2 3 
					                                       f32_2 %101 = OpFAdd %97 %100 
					                                       f32_4 %102 = OpLoad %82 
					                                       f32_4 %103 = OpVectorShuffle %102 %101 4 5 2 3 
					                                                      OpStore %82 %103 
					                              Uniform u32_4* %105 = OpAccessChain %44 %60 
					                                       u32_4 %106 = OpLoad %105 
					                                         u32 %107 = OpCompositeExtract %106 1 
					                                        bool %108 = OpINotEqual %107 %66 
					                                                      OpSelectionMerge %110 None 
					                                                      OpBranchConditional %108 %109 %113 
					                                             %109 = OpLabel 
					                                       f32_4 %111 = OpLoad %82 
					                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
					                                                      OpStore %104 %112 
					                                                      OpBranch %110 
					                                             %113 = OpLabel 
					                                       f32_4 %114 = OpLoad %21 
					                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
					                                                      OpStore %104 %115 
					                                                      OpBranch %110 
					                                             %110 = OpLabel 
					                                       f32_3 %116 = OpLoad %104 
					                                       f32_4 %117 = OpLoad %21 
					                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
					                                                      OpStore %21 %118 
					                                       f32_4 %119 = OpLoad %21 
					                                       f32_4 %120 = OpVectorShuffle %119 %119 1 1 1 1 
					                              Uniform f32_4* %122 = OpAccessChain %44 %121 %121 
					                                       f32_4 %123 = OpLoad %122 
					                                       f32_4 %124 = OpFMul %120 %123 
					                                                      OpStore %82 %124 
					                              Uniform f32_4* %126 = OpAccessChain %44 %121 %125 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_4 %128 = OpLoad %21 
					                                       f32_4 %129 = OpVectorShuffle %128 %128 0 0 0 0 
					                                       f32_4 %130 = OpFMul %127 %129 
					                                       f32_4 %131 = OpLoad %82 
					                                       f32_4 %132 = OpFAdd %130 %131 
					                                                      OpStore %82 %132 
					                              Uniform f32_4* %134 = OpAccessChain %44 %121 %133 
					                                       f32_4 %135 = OpLoad %134 
					                                       f32_4 %136 = OpLoad %21 
					                                       f32_4 %137 = OpVectorShuffle %136 %136 2 2 2 2 
					                                       f32_4 %138 = OpFMul %135 %137 
					                                       f32_4 %139 = OpLoad %82 
					                                       f32_4 %140 = OpFAdd %138 %139 
					                                                      OpStore %21 %140 
					                                       f32_4 %141 = OpLoad %21 
					                              Uniform f32_4* %143 = OpAccessChain %44 %121 %142 
					                                       f32_4 %144 = OpLoad %143 
					                                       f32_4 %145 = OpFAdd %141 %144 
					                                                      OpStore %21 %145 
					                                       f32_4 %146 = OpLoad %21 
					                                       f32_4 %147 = OpVectorShuffle %146 %146 1 1 1 1 
					                              Uniform f32_4* %148 = OpAccessChain %44 %142 %121 
					                                       f32_4 %149 = OpLoad %148 
					                                       f32_4 %150 = OpFMul %147 %149 
					                                                      OpStore %82 %150 
					                              Uniform f32_4* %151 = OpAccessChain %44 %142 %125 
					                                       f32_4 %152 = OpLoad %151 
					                                       f32_4 %153 = OpLoad %21 
					                                       f32_4 %154 = OpVectorShuffle %153 %153 0 0 0 0 
					                                       f32_4 %155 = OpFMul %152 %154 
					                                       f32_4 %156 = OpLoad %82 
					                                       f32_4 %157 = OpFAdd %155 %156 
					                                                      OpStore %82 %157 
					                              Uniform f32_4* %158 = OpAccessChain %44 %142 %133 
					                                       f32_4 %159 = OpLoad %158 
					                                       f32_4 %160 = OpLoad %21 
					                                       f32_4 %161 = OpVectorShuffle %160 %160 2 2 2 2 
					                                       f32_4 %162 = OpFMul %159 %161 
					                                       f32_4 %163 = OpLoad %82 
					                                       f32_4 %164 = OpFAdd %162 %163 
					                                                      OpStore %82 %164 
					                              Uniform f32_4* %170 = OpAccessChain %44 %142 %142 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_4 %172 = OpLoad %21 
					                                       f32_4 %173 = OpVectorShuffle %172 %172 3 3 3 3 
					                                       f32_4 %174 = OpFMul %171 %173 
					                                       f32_4 %175 = OpLoad %82 
					                                       f32_4 %176 = OpFAdd %174 %175 
					                               Output f32_4* %178 = OpAccessChain %169 %125 
					                                                      OpStore %178 %176 
					                                       f32_3 %181 = OpLoad %180 
					                              Uniform f32_4* %182 = OpAccessChain %44 %133 %125 
					                                       f32_4 %183 = OpLoad %182 
					                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
					                                         f32 %185 = OpDot %181 %184 
					                                Private f32* %186 = OpAccessChain %21 %66 
					                                                      OpStore %186 %185 
					                                       f32_3 %187 = OpLoad %180 
					                              Uniform f32_4* %188 = OpAccessChain %44 %133 %121 
					                                       f32_4 %189 = OpLoad %188 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                         f32 %191 = OpDot %187 %190 
					                                Private f32* %192 = OpAccessChain %21 %165 
					                                                      OpStore %192 %191 
					                                       f32_3 %193 = OpLoad %180 
					                              Uniform f32_4* %194 = OpAccessChain %44 %133 %133 
					                                       f32_4 %195 = OpLoad %194 
					                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
					                                         f32 %197 = OpDot %193 %196 
					                                Private f32* %198 = OpAccessChain %21 %15 
					                                                      OpStore %198 %197 
					                                       f32_4 %200 = OpLoad %21 
					                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
					                                       f32_4 %202 = OpLoad %21 
					                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
					                                         f32 %204 = OpDot %201 %203 
					                                                      OpStore %199 %204 
					                                         f32 %205 = OpLoad %199 
					                                         f32 %206 = OpExtInst %1 32 %205 
					                                                      OpStore %199 %206 
					                                         f32 %207 = OpLoad %199 
					                                       f32_3 %208 = OpCompositeConstruct %207 %207 %207 
					                                       f32_4 %209 = OpLoad %21 
					                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
					                                       f32_3 %211 = OpFMul %208 %210 
					                                       f32_4 %212 = OpLoad %21 
					                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
					                                                      OpStore %21 %213 
					                                       f32_4 %214 = OpLoad %13 
					                                       f32_3 %215 = OpVectorShuffle %214 %214 1 1 1 
					                              Uniform f32_4* %216 = OpAccessChain %44 %121 %121 
					                                       f32_4 %217 = OpLoad %216 
					                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
					                                       f32_3 %219 = OpFMul %215 %218 
					                                       f32_4 %220 = OpLoad %82 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
					                                                      OpStore %82 %221 
					                              Uniform f32_4* %222 = OpAccessChain %44 %121 %125 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
					                                       f32_4 %225 = OpLoad %13 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 0 0 
					                                       f32_3 %227 = OpFMul %224 %226 
					                                       f32_4 %228 = OpLoad %82 
					                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
					                                       f32_3 %230 = OpFAdd %227 %229 
					                                       f32_4 %231 = OpLoad %82 
					                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
					                                                      OpStore %82 %232 
					                              Uniform f32_4* %233 = OpAccessChain %44 %121 %133 
					                                       f32_4 %234 = OpLoad %233 
					                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
					                                       f32_4 %236 = OpLoad %13 
					                                       f32_3 %237 = OpVectorShuffle %236 %236 2 2 2 
					                                       f32_3 %238 = OpFMul %235 %237 
					                                       f32_4 %239 = OpLoad %82 
					                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
					                                       f32_3 %241 = OpFAdd %238 %240 
					                                       f32_4 %242 = OpLoad %82 
					                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
					                                                      OpStore %82 %243 
					                              Uniform f32_4* %244 = OpAccessChain %44 %121 %142 
					                                       f32_4 %245 = OpLoad %244 
					                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
					                                       f32_4 %247 = OpLoad %13 
					                                       f32_3 %248 = OpVectorShuffle %247 %247 3 3 3 
					                                       f32_3 %249 = OpFMul %246 %248 
					                                       f32_4 %250 = OpLoad %82 
					                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
					                                       f32_3 %252 = OpFAdd %249 %251 
					                                       f32_4 %253 = OpLoad %82 
					                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
					                                                      OpStore %82 %254 
					                                       f32_4 %257 = OpLoad %82 
					                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
					                                       f32_3 %259 = OpFNegate %258 
					                              Uniform f32_3* %261 = OpAccessChain %44 %125 
					                                       f32_3 %262 = OpLoad %261 
					                                       f32_3 %263 = OpFAdd %259 %262 
					                                                      OpStore %256 %263 
					                                       f32_4 %266 = OpLoad %82 
					                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
					                                                      OpStore %265 %267 
					                                       f32_3 %268 = OpLoad %256 
					                                       f32_3 %269 = OpFNegate %268 
					                                       f32_4 %270 = OpLoad %21 
					                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
					                                         f32 %272 = OpDot %269 %271 
					                                                      OpStore %199 %272 
					                                         f32 %273 = OpLoad %199 
					                                         f32 %274 = OpLoad %199 
					                                         f32 %275 = OpFAdd %273 %274 
					                                                      OpStore %199 %275 
					                                       f32_4 %276 = OpLoad %21 
					                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
					                                         f32 %278 = OpLoad %199 
					                                       f32_3 %279 = OpCompositeConstruct %278 %278 %278 
					                                       f32_3 %280 = OpFNegate %279 
					                                       f32_3 %281 = OpFMul %277 %280 
					                                       f32_3 %282 = OpLoad %256 
					                                       f32_3 %283 = OpFNegate %282 
					                                       f32_3 %284 = OpFAdd %281 %283 
					                                       f32_4 %285 = OpLoad %82 
					                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
					                                                      OpStore %82 %286 
					                                       f32_4 %288 = OpLoad %21 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
					                                                      OpStore %287 %289 
					                                       f32_4 %291 = OpLoad %82 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                                      OpStore %290 %292 
					                                 Output f32* %294 = OpAccessChain %169 %125 %165 
					                                         f32 %295 = OpLoad %294 
					                                         f32 %296 = OpFNegate %295 
					                                 Output f32* %297 = OpAccessChain %169 %125 %165 
					                                                      OpStore %297 %296 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 1
					; Bound: 323
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %46 %207 %309 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpDecorate %12 Location 12 
					                                                      OpMemberDecorate %17 0 Offset 17 
					                                                      OpMemberDecorate %17 1 RelaxedPrecision 
					                                                      OpMemberDecorate %17 1 Offset 17 
					                                                      OpMemberDecorate %17 2 RelaxedPrecision 
					                                                      OpMemberDecorate %17 2 Offset 17 
					                                                      OpMemberDecorate %17 3 Offset 17 
					                                                      OpMemberDecorate %17 4 Offset 17 
					                                                      OpMemberDecorate %17 5 Offset 17 
					                                                      OpMemberDecorate %17 6 RelaxedPrecision 
					                                                      OpMemberDecorate %17 6 Offset 17 
					                                                      OpMemberDecorate %17 7 Offset 17 
					                                                      OpMemberDecorate %17 8 Offset 17 
					                                                      OpMemberDecorate %17 9 Offset 17 
					                                                      OpMemberDecorate %17 10 Offset 17 
					                                                      OpDecorate %17 Block 
					                                                      OpDecorate %19 DescriptorSet 19 
					                                                      OpDecorate %19 Binding 19 
					                                                      OpDecorate %46 Location 46 
					                                                      OpDecorate %57 RelaxedPrecision 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %93 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %99 RelaxedPrecision 
					                                                      OpDecorate %100 RelaxedPrecision 
					                                                      OpDecorate %108 RelaxedPrecision 
					                                                      OpDecorate %109 RelaxedPrecision 
					                                                      OpDecorate %110 RelaxedPrecision 
					                                                      OpDecorate %111 RelaxedPrecision 
					                                                      OpDecorate %112 RelaxedPrecision 
					                                                      OpDecorate %113 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %201 RelaxedPrecision 
					                                                      OpDecorate %205 RelaxedPrecision 
					                                                      OpDecorate %205 DescriptorSet 205 
					                                                      OpDecorate %205 Binding 205 
					                                                      OpDecorate %206 RelaxedPrecision 
					                                                      OpDecorate %207 RelaxedPrecision 
					                                                      OpDecorate %207 Location 207 
					                                                      OpDecorate %208 RelaxedPrecision 
					                                                      OpDecorate %210 RelaxedPrecision 
					                                                      OpDecorate %213 RelaxedPrecision 
					                                                      OpDecorate %214 RelaxedPrecision 
					                                                      OpDecorate %215 RelaxedPrecision 
					                                                      OpDecorate %218 RelaxedPrecision 
					                                                      OpDecorate %219 RelaxedPrecision 
					                                                      OpDecorate %220 RelaxedPrecision 
					                                                      OpDecorate %223 RelaxedPrecision 
					                                                      OpDecorate %225 RelaxedPrecision 
					                                                      OpDecorate %228 RelaxedPrecision 
					                                                      OpDecorate %231 RelaxedPrecision 
					                                                      OpDecorate %232 RelaxedPrecision 
					                                                      OpDecorate %233 RelaxedPrecision 
					                                                      OpDecorate %234 RelaxedPrecision 
					                                                      OpDecorate %237 RelaxedPrecision 
					                                                      OpDecorate %238 RelaxedPrecision 
					                                                      OpDecorate %239 RelaxedPrecision 
					                                                      OpDecorate %240 RelaxedPrecision 
					                                                      OpDecorate %256 RelaxedPrecision 
					                                                      OpDecorate %261 RelaxedPrecision 
					                                                      OpDecorate %264 RelaxedPrecision 
					                                                      OpDecorate %265 RelaxedPrecision 
					                                                      OpDecorate %268 RelaxedPrecision 
					                                                      OpDecorate %270 RelaxedPrecision 
					                                                      OpDecorate %271 RelaxedPrecision 
					                                                      OpDecorate %272 RelaxedPrecision 
					                                                      OpDecorate %275 RelaxedPrecision 
					                                                      OpDecorate %277 RelaxedPrecision 
					                                                      OpDecorate %278 RelaxedPrecision 
					                                                      OpDecorate %279 RelaxedPrecision 
					                                                      OpDecorate %280 RelaxedPrecision 
					                                                      OpDecorate %281 RelaxedPrecision 
					                                                      OpDecorate %283 RelaxedPrecision 
					                                                      OpDecorate %291 RelaxedPrecision 
					                                                      OpDecorate %306 RelaxedPrecision 
					                                                      OpDecorate %309 RelaxedPrecision 
					                                                      OpDecorate %309 Location 309 
					                                                      OpDecorate %320 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 3 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_3* %12 = OpVariable Input 
					                                              %15 = OpTypeInt 32 0 
					                                              %16 = OpTypeVector %15 4 
					                                              %17 = OpTypeStruct %10 %7 %7 %6 %6 %6 %7 %16 %6 %6 %6 
					                                              %18 = OpTypePointer Uniform %17 
					Uniform struct {f32_3; f32_4; f32_4; f32; f32; f32; f32_4; u32_4; f32; f32; f32;}* %19 = OpVariable Uniform 
					                                              %20 = OpTypeInt 32 1 
					                                          i32 %21 = OpConstant 0 
					                                              %22 = OpTypePointer Uniform %10 
					                                              %28 = OpTypePointer Private %6 
					                                 Private f32* %29 = OpVariable Private 
					                                 Input f32_3* %46 = OpVariable Input 
					                                          u32 %49 = OpConstant 0 
					                                          f32 %53 = OpConstant 3.674022E-40 
					                                          f32 %54 = OpConstant 3.674022E-40 
					                               Private f32_4* %57 = OpVariable Private 
					                                              %63 = OpTypePointer Private %10 
					                               Private f32_3* %64 = OpVariable Private 
					                                              %69 = OpTypeVector %6 2 
					                                          i32 %72 = OpConstant 4 
					                                              %73 = OpTypePointer Uniform %6 
					                                          i32 %76 = OpConstant 3 
					                                          i32 %90 = OpConstant 6 
					                                              %91 = OpTypePointer Uniform %7 
					                               Private f32_4* %98 = OpVariable Private 
					                                         i32 %101 = OpConstant 5 
					                                         i32 %128 = OpConstant 1 
					                                         i32 %145 = OpConstant 8 
					                                         i32 %167 = OpConstant 9 
					                                             %182 = OpTypePointer Function %10 
					                                         i32 %184 = OpConstant 7 
					                                             %185 = OpTypeBool 
					                                             %186 = OpTypeVector %185 4 
					                                             %187 = OpTypePointer Uniform %16 
					                                       f32_3 %197 = OpConstantComposite %53 %53 %53 
					                              Private f32_4* %201 = OpVariable Private 
					                                             %202 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %203 = OpTypeSampledImage %202 
					                                             %204 = OpTypePointer UniformConstant %203 
					UniformConstant read_only TextureCubeSampled* %205 = OpVariable UniformConstant 
					                                Input f32_3* %207 = OpVariable Input 
					                              Private f32_3* %213 = OpVariable Private 
					                                         i32 %216 = OpConstant 2 
					                                         f32 %226 = OpConstant 3.674022E-40 
					                                       f32_3 %227 = OpConstantComposite %226 %226 %226 
					                                         f32 %229 = OpConstant 3.674022E-40 
					                                       f32_3 %230 = OpConstantComposite %229 %229 %229 
					                                         f32 %235 = OpConstant 3.674022E-40 
					                                       f32_3 %236 = OpConstantComposite %235 %235 %235 
					                                             %243 = OpTypePointer Private %185 
					                               Private bool* %244 = OpVariable Private 
					                                       f32_4 %245 = OpConstantComposite %53 %53 %53 %53 
					                                         i32 %246 = OpConstant 10 
					                                         f32 %262 = OpConstant 3.674022E-40 
					                                       f32_3 %263 = OpConstantComposite %262 %262 %262 
					                                Private f32* %265 = OpVariable Private 
					                                         u32 %266 = OpConstant 1 
					                                Private f32* %272 = OpVariable Private 
					                                         u32 %273 = OpConstant 2 
					                                         f32 %276 = OpConstant 3.674022E-40 
					                                         f32 %282 = OpConstant 3.674022E-40 
					                                         f32 %287 = OpConstant 3.674022E-40 
					                                         u32 %289 = OpConstant 3 
					                                             %297 = OpTypePointer Function %6 
					                                             %308 = OpTypePointer Output %7 
					                               Output f32_4* %309 = OpVariable Output 
					                                             %310 = OpTypePointer Function %7 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                             Function f32_3* %183 = OpVariable Function 
					                             Function f32_3* %252 = OpVariable Function 
					                               Function f32* %298 = OpVariable Function 
					                             Function f32_4* %311 = OpVariable Function 
					                                        f32_3 %13 = OpLoad %12 
					                                        f32_3 %14 = OpFNegate %13 
					                               Uniform f32_3* %23 = OpAccessChain %19 %21 
					                                        f32_3 %24 = OpLoad %23 
					                                        f32_3 %25 = OpFAdd %14 %24 
					                                        f32_4 %26 = OpLoad %9 
					                                        f32_4 %27 = OpVectorShuffle %26 %25 4 5 6 3 
					                                                      OpStore %9 %27 
					                                        f32_4 %30 = OpLoad %9 
					                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
					                                        f32_4 %32 = OpLoad %9 
					                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
					                                          f32 %34 = OpDot %31 %33 
					                                                      OpStore %29 %34 
					                                          f32 %35 = OpLoad %29 
					                                          f32 %36 = OpExtInst %1 32 %35 
					                                                      OpStore %29 %36 
					                                          f32 %37 = OpLoad %29 
					                                        f32_3 %38 = OpCompositeConstruct %37 %37 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
					                                        f32_3 %41 = OpFMul %38 %40 
					                                        f32_4 %42 = OpLoad %9 
					                                        f32_4 %43 = OpVectorShuffle %42 %41 4 5 6 3 
					                                                      OpStore %9 %43 
					                                        f32_4 %44 = OpLoad %9 
					                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
					                                        f32_3 %47 = OpLoad %46 
					                                          f32 %48 = OpDot %45 %47 
					                                 Private f32* %50 = OpAccessChain %9 %49 
					                                                      OpStore %50 %48 
					                                 Private f32* %51 = OpAccessChain %9 %49 
					                                          f32 %52 = OpLoad %51 
					                                          f32 %55 = OpExtInst %1 43 %52 %53 %54 
					                                 Private f32* %56 = OpAccessChain %9 %49 
					                                                      OpStore %56 %55 
					                                 Private f32* %58 = OpAccessChain %9 %49 
					                                          f32 %59 = OpLoad %58 
					                                          f32 %60 = OpFNegate %59 
					                                          f32 %61 = OpFAdd %60 %54 
					                                 Private f32* %62 = OpAccessChain %57 %49 
					                                                      OpStore %62 %61 
					                                 Private f32* %65 = OpAccessChain %57 %49 
					                                          f32 %66 = OpLoad %65 
					                                          f32 %67 = OpExtInst %1 30 %66 
					                                 Private f32* %68 = OpAccessChain %64 %49 
					                                                      OpStore %68 %67 
					                                        f32_3 %70 = OpLoad %64 
					                                        f32_2 %71 = OpVectorShuffle %70 %70 0 0 
					                                 Uniform f32* %74 = OpAccessChain %19 %72 
					                                          f32 %75 = OpLoad %74 
					                                 Uniform f32* %77 = OpAccessChain %19 %76 
					                                          f32 %78 = OpLoad %77 
					                                        f32_2 %79 = OpCompositeConstruct %75 %78 
					                                        f32_2 %80 = OpFMul %71 %79 
					                                        f32_4 %81 = OpLoad %9 
					                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 2 3 
					                                                      OpStore %9 %82 
					                                        f32_4 %83 = OpLoad %9 
					                                        f32_2 %84 = OpVectorShuffle %83 %83 0 1 
					                                        f32_2 %85 = OpExtInst %1 29 %84 
					                                        f32_4 %86 = OpLoad %9 
					                                        f32_4 %87 = OpVectorShuffle %86 %85 4 5 2 3 
					                                                      OpStore %9 %87 
					                                        f32_4 %88 = OpLoad %9 
					                                        f32_3 %89 = OpVectorShuffle %88 %88 0 0 0 
					                               Uniform f32_4* %92 = OpAccessChain %19 %90 
					                                        f32_4 %93 = OpLoad %92 
					                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
					                                        f32_3 %95 = OpFMul %89 %94 
					                                        f32_4 %96 = OpLoad %57 
					                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
					                                                      OpStore %57 %97 
					                                        f32_4 %99 = OpLoad %57 
					                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
					                                Uniform f32* %102 = OpAccessChain %19 %101 
					                                         f32 %103 = OpLoad %102 
					                                Uniform f32* %104 = OpAccessChain %19 %101 
					                                         f32 %105 = OpLoad %104 
					                                Uniform f32* %106 = OpAccessChain %19 %101 
					                                         f32 %107 = OpLoad %106 
					                                       f32_3 %108 = OpCompositeConstruct %103 %105 %107 
					                                         f32 %109 = OpCompositeExtract %108 0 
					                                         f32 %110 = OpCompositeExtract %108 1 
					                                         f32 %111 = OpCompositeExtract %108 2 
					                                       f32_3 %112 = OpCompositeConstruct %109 %110 %111 
					                                       f32_3 %113 = OpFMul %100 %112 
					                                       f32_4 %114 = OpLoad %98 
					                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
					                                                      OpStore %98 %115 
					                                Private f32* %116 = OpAccessChain %9 %49 
					                                         f32 %117 = OpLoad %116 
					                                         f32 %118 = OpFNegate %117 
					                                Uniform f32* %119 = OpAccessChain %19 %101 
					                                         f32 %120 = OpLoad %119 
					                                         f32 %121 = OpFMul %118 %120 
					                                         f32 %122 = OpFAdd %121 %54 
					                                Private f32* %123 = OpAccessChain %9 %49 
					                                                      OpStore %123 %122 
					                                Private f32* %124 = OpAccessChain %9 %49 
					                                         f32 %125 = OpLoad %124 
					                                         f32 %126 = OpExtInst %1 43 %125 %53 %54 
					                                Private f32* %127 = OpAccessChain %9 %49 
					                                                      OpStore %127 %126 
					                              Uniform f32_4* %129 = OpAccessChain %19 %128 
					                                       f32_4 %130 = OpLoad %129 
					                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
					                                       f32_4 %132 = OpLoad %9 
					                                       f32_3 %133 = OpVectorShuffle %132 %132 0 0 0 
					                                       f32_3 %134 = OpFMul %131 %133 
					                                       f32_4 %135 = OpLoad %98 
					                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
					                                       f32_3 %137 = OpFAdd %134 %136 
					                                       f32_4 %138 = OpLoad %9 
					                                       f32_4 %139 = OpVectorShuffle %138 %137 4 1 5 6 
					                                                      OpStore %9 %139 
					                                       f32_4 %140 = OpLoad %9 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 2 3 
					                                       f32_3 %142 = OpExtInst %1 30 %141 
					                                       f32_4 %143 = OpLoad %9 
					                                       f32_4 %144 = OpVectorShuffle %143 %142 4 1 5 6 
					                                                      OpStore %9 %144 
					                                Uniform f32* %146 = OpAccessChain %19 %145 
					                                         f32 %147 = OpLoad %146 
					                                Private f32* %148 = OpAccessChain %98 %49 
					                                                      OpStore %148 %147 
					                                Private f32* %149 = OpAccessChain %98 %49 
					                                         f32 %150 = OpLoad %149 
					                                         f32 %151 = OpExtInst %1 43 %150 %53 %54 
					                                Private f32* %152 = OpAccessChain %98 %49 
					                                                      OpStore %152 %151 
					                                       f32_4 %153 = OpLoad %9 
					                                       f32_3 %154 = OpVectorShuffle %153 %153 0 2 3 
					                                       f32_4 %155 = OpLoad %98 
					                                       f32_3 %156 = OpVectorShuffle %155 %155 0 0 0 
					                                       f32_3 %157 = OpFMul %154 %156 
					                                       f32_4 %158 = OpLoad %9 
					                                       f32_4 %159 = OpVectorShuffle %158 %157 4 1 5 6 
					                                                      OpStore %9 %159 
					                                       f32_4 %160 = OpLoad %9 
					                                       f32_3 %161 = OpVectorShuffle %160 %160 0 2 3 
					                                       f32_3 %162 = OpExtInst %1 29 %161 
					                                       f32_4 %163 = OpLoad %9 
					                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 6 
					                                                      OpStore %9 %164 
					                                       f32_4 %165 = OpLoad %9 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 2 3 
					                                Uniform f32* %168 = OpAccessChain %19 %167 
					                                         f32 %169 = OpLoad %168 
					                                Uniform f32* %170 = OpAccessChain %19 %167 
					                                         f32 %171 = OpLoad %170 
					                                Uniform f32* %172 = OpAccessChain %19 %167 
					                                         f32 %173 = OpLoad %172 
					                                       f32_3 %174 = OpCompositeConstruct %169 %171 %173 
					                                         f32 %175 = OpCompositeExtract %174 0 
					                                         f32 %176 = OpCompositeExtract %174 1 
					                                         f32 %177 = OpCompositeExtract %174 2 
					                                       f32_3 %178 = OpCompositeConstruct %175 %176 %177 
					                                       f32_3 %179 = OpExtInst %1 37 %166 %178 
					                                       f32_4 %180 = OpLoad %9 
					                                       f32_4 %181 = OpVectorShuffle %180 %179 4 1 5 6 
					                                                      OpStore %9 %181 
					                              Uniform u32_4* %188 = OpAccessChain %19 %184 
					                                       u32_4 %189 = OpLoad %188 
					                                         u32 %190 = OpCompositeExtract %189 0 
					                                        bool %191 = OpINotEqual %190 %49 
					                                                      OpSelectionMerge %193 None 
					                                                      OpBranchConditional %191 %192 %196 
					                                             %192 = OpLabel 
					                                       f32_4 %194 = OpLoad %9 
					                                       f32_3 %195 = OpVectorShuffle %194 %194 0 2 3 
					                                                      OpStore %183 %195 
					                                                      OpBranch %193 
					                                             %196 = OpLabel 
					                                                      OpStore %183 %197 
					                                                      OpBranch %193 
					                                             %193 = OpLabel 
					                                       f32_3 %198 = OpLoad %183 
					                                       f32_4 %199 = OpLoad %57 
					                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
					                                                      OpStore %57 %200 
					                read_only TextureCubeSampled %206 = OpLoad %205 
					                                       f32_3 %208 = OpLoad %207 
					                                       f32_4 %209 = OpImageSampleImplicitLod %206 %208 
					                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
					                                       f32_4 %211 = OpLoad %201 
					                                       f32_4 %212 = OpVectorShuffle %211 %210 4 1 5 6 
					                                                      OpStore %201 %212 
					                                       f32_4 %214 = OpLoad %201 
					                                       f32_3 %215 = OpVectorShuffle %214 %214 0 2 3 
					                              Uniform f32_4* %217 = OpAccessChain %19 %216 
					                                       f32_4 %218 = OpLoad %217 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                       f32_3 %220 = OpFMul %215 %219 
					                                                      OpStore %213 %220 
					                                       f32_4 %221 = OpLoad %9 
					                                       f32_3 %222 = OpVectorShuffle %221 %221 1 1 1 
					                                       f32_3 %223 = OpLoad %213 
					                                       f32_3 %224 = OpFMul %222 %223 
					                                                      OpStore %213 %224 
					                                       f32_3 %225 = OpLoad %213 
					                                       f32_3 %228 = OpFMul %225 %227 
					                                       f32_3 %231 = OpFAdd %228 %230 
					                                                      OpStore %64 %231 
					                                       f32_3 %232 = OpLoad %213 
					                                       f32_3 %233 = OpLoad %64 
					                                       f32_3 %234 = OpFMul %232 %233 
					                                       f32_3 %237 = OpFAdd %234 %236 
					                                                      OpStore %64 %237 
					                                       f32_3 %238 = OpLoad %64 
					                                       f32_3 %239 = OpLoad %213 
					                                       f32_3 %240 = OpFMul %238 %239 
					                                       f32_4 %241 = OpLoad %9 
					                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
					                                                      OpStore %9 %242 
					                                Uniform f32* %247 = OpAccessChain %19 %246 
					                                         f32 %248 = OpLoad %247 
					                                       f32_4 %249 = OpCompositeConstruct %248 %248 %248 %248 
					                                      bool_4 %250 = OpFOrdNotEqual %245 %249 
					                                        bool %251 = OpAny %250 
					                                                      OpStore %244 %251 
					                                        bool %253 = OpLoad %244 
					                                                      OpSelectionMerge %255 None 
					                                                      OpBranchConditional %253 %254 %257 
					                                             %254 = OpLabel 
					                                       f32_3 %256 = OpLoad %213 
					                                                      OpStore %252 %256 
					                                                      OpBranch %255 
					                                             %257 = OpLabel 
					                                       f32_4 %258 = OpLoad %9 
					                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
					                                                      OpStore %252 %259 
					                                                      OpBranch %255 
					                                             %255 = OpLabel 
					                                       f32_3 %260 = OpLoad %252 
					                                                      OpStore %213 %260 
					                                       f32_3 %261 = OpLoad %213 
					                                       f32_3 %264 = OpFMul %261 %263 
					                                                      OpStore %64 %264 
					                                Private f32* %267 = OpAccessChain %64 %266 
					                                         f32 %268 = OpLoad %267 
					                                Private f32* %269 = OpAccessChain %64 %49 
					                                         f32 %270 = OpLoad %269 
					                                         f32 %271 = OpExtInst %1 40 %268 %270 
					                                                      OpStore %265 %271 
					                                Private f32* %274 = OpAccessChain %64 %273 
					                                         f32 %275 = OpLoad %274 
					                                         f32 %277 = OpExtInst %1 40 %275 %276 
					                                                      OpStore %272 %277 
					                                         f32 %278 = OpLoad %265 
					                                         f32 %279 = OpLoad %272 
					                                         f32 %280 = OpExtInst %1 40 %278 %279 
					                                                      OpStore %265 %280 
					                                         f32 %281 = OpLoad %265 
					                                         f32 %283 = OpFMul %281 %282 
					                                                      OpStore %29 %283 
					                                         f32 %284 = OpLoad %29 
					                                         f32 %285 = OpExtInst %1 9 %284 
					                                                      OpStore %29 %285 
					                                         f32 %286 = OpLoad %29 
					                                         f32 %288 = OpFMul %286 %287 
					                                Private f32* %290 = OpAccessChain %98 %289 
					                                                      OpStore %290 %288 
					                                       f32_3 %291 = OpLoad %64 
					                                       f32_4 %292 = OpLoad %98 
					                                       f32_3 %293 = OpVectorShuffle %292 %292 3 3 3 
					                                       f32_3 %294 = OpFDiv %291 %293 
					                                       f32_4 %295 = OpLoad %98 
					                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
					                                                      OpStore %98 %296 
					                              Uniform u32_4* %299 = OpAccessChain %19 %184 
					                                       u32_4 %300 = OpLoad %299 
					                                         u32 %301 = OpCompositeExtract %300 0 
					                                        bool %302 = OpINotEqual %301 %49 
					                                                      OpSelectionMerge %304 None 
					                                                      OpBranchConditional %302 %303 %305 
					                                             %303 = OpLabel 
					                                                      OpStore %298 %54 
					                                                      OpBranch %304 
					                                             %305 = OpLabel 
					                                                      OpStore %298 %53 
					                                                      OpBranch %304 
					                                             %304 = OpLabel 
					                                         f32 %306 = OpLoad %298 
					                                Private f32* %307 = OpAccessChain %57 %289 
					                                                      OpStore %307 %306 
					                              Uniform u32_4* %312 = OpAccessChain %19 %184 
					                                       u32_4 %313 = OpLoad %312 
					                                         u32 %314 = OpCompositeExtract %313 1 
					                                        bool %315 = OpINotEqual %314 %49 
					                                                      OpSelectionMerge %317 None 
					                                                      OpBranchConditional %315 %316 %319 
					                                             %316 = OpLabel 
					                                       f32_4 %318 = OpLoad %98 
					                                                      OpStore %311 %318 
					                                                      OpBranch %317 
					                                             %319 = OpLabel 
					                                       f32_4 %320 = OpLoad %57 
					                                                      OpStore %311 %320 
					                                                      OpBranch %317 
					                                             %317 = OpLabel 
					                                       f32_4 %321 = OpLoad %311 
					                                                      OpStore %309 %321 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
				SubProgram "vulkan hw_tier00 " {
					"spirv"
				}
				SubProgram "vulkan hw_tier01 " {
					"spirv"
				}
				SubProgram "vulkan hw_tier02 " {
					"spirv"
				}
			}
		}
	}
	Fallback "Reflective/Bumped Diffuse"
}